
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015690  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c90  08015860  08015860  00025860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184f0  080184f0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080184f0  080184f0  000284f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184f8  080184f8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184f8  080184f8  000284f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184fc  080184fc  000284fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08018500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000009c  0801859c  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000013c  0801863c  0003013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008cf4  200001dc  080186dc  000301dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ed0  080186dc  00038ed0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034b96  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007366  00000000  00000000  00064da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002720  00000000  00000000  0006c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002590  00000000  00000000  0006e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037527  00000000  00000000  00070db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d2d1  00000000  00000000  000a82df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001163a6  00000000  00000000  000e55b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fb956  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ad90  00000000  00000000  001fb9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015848 	.word	0x08015848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08015848 	.word	0x08015848

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fc62 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f822 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005c0:	f000 fb08 	bl	8000bd4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb58 	bl	8000c78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 faa6 	bl	8000b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fad4 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d0:	f000 f880 	bl	80006d4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d4:	f000 f8d0 	bl	8000778 <MX_DAC_Init>
  MX_TIM2_Init();
 80005d8:	f000 f9f0 	bl	80009bc <MX_TIM2_Init>
  MX_UART4_Init();
 80005dc:	f000 fa3c 	bl	8000a58 <MX_UART4_Init>
  MX_UART5_Init();
 80005e0:	f000 fa6a 	bl	8000ab8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005e4:	f000 f8f2 	bl	80007cc <MX_I2C1_Init>
  MX_DMA_Init();
 80005e8:	f000 faf4 	bl	8000bd4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005f0:	f000 f96c 	bl	80008cc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9a8 	bl	8000948 <MX_SPI2_Init>
  MX_LWIP_Init();
 80005f8:	f009 fdf8 	bl	800a1ec <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005fc:	f013 ff4e 	bl	801449c <rtg_main>
 8000600:	e7fc      	b.n	80005fc <main+0x48>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f014 f84a 	bl	80146ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f005 f8f0 	bl	800580c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000678:	2348      	movs	r3, #72	; 0x48
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f005 f8cf 	bl	800582c <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fb9a 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fb5d 	bl	8005d74 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 fb84 	bl	8000dcc <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_ADC1_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC1_Init+0x98>)
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_ADC1_Init+0xa0>)
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_ADC1_Init+0x98>)
 8000734:	f001 fc26 	bl	8001f84 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fb45 	bl	8000dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0x98>)
 8000754:	f001 fd7e 	bl	8002254 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 fb35 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001f8 	.word	0x200001f8
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DAC_Init+0x4c>)
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_DAC_Init+0x50>)
 800078a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_DAC_Init+0x4c>)
 800078e:	f002 f8cc 	bl	800292a <HAL_DAC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000798:	f000 fb18 	bl	8000dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_DAC_Init+0x4c>)
 80007ac:	f002 f943 	bl	8002a36 <HAL_DAC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 fb09 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000240 	.word	0x20000240
 80007c8:	40007400 	.word	0x40007400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f004 f804 	bl	8004814 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fadb 	bl	8000dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f004 fe18 	bl	800544e <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fad2 	bl	8000dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f004 fe5a 	bl	80054e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fac9 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000254 	.word	0x20000254
 8000844:	40005400 	.word	0x40005400
 8000848:	00808cd2 	.word	0x00808cd2

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f003 ffc4 	bl	8004814 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fa9b 	bl	8000dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f004 fdd8 	bl	800544e <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fa92 	bl	8000dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f004 fe1a 	bl	80054e4 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fa89 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002a8 	.word	0x200002a8
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00808cd2 	.word	0x00808cd2

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x74>)
 800092c:	f006 f838 	bl	80069a0 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fa49 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000047c 	.word	0x2000047c
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_SPI2_Init+0x70>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000960:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI2_Init+0x6c>)
 80009a0:	f005 fffe 	bl	80069a0 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009aa:	f000 fa0f 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004e0 	.word	0x200004e0
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a06:	f007 fb7f 	bl	8008108 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f9dc 	bl	8000dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a22:	f007 fce7 	bl	80083f4 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f9ce 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a3e:	f007 ff05 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f9c0 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000604 	.word	0x20000604

08000a58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_UART4_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a9c:	f007 ff82 	bl	80089a4 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f991 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000650 	.word	0x20000650
 8000ab4:	40004c00 	.word	0x40004c00

08000ab8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_UART5_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_UART5_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x58>)
 8000afc:	f007 ff52 	bl	80089a4 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f961 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200006d8 	.word	0x200006d8
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f007 ff22 	bl	80089a4 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f931 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000760 	.word	0x20000760
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f004 fcde 	bl	800557c <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f901 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200007e8 	.word	0x200007e8

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_DMA_Init+0xa0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	200b      	movs	r0, #11
 8000c10:	f001 fe55 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c14:	200b      	movs	r0, #11
 8000c16:	f001 fe6e 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200d      	movs	r0, #13
 8000c20:	f001 fe4d 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c24:	200d      	movs	r0, #13
 8000c26:	f001 fe66 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f001 fe45 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c34:	200e      	movs	r0, #14
 8000c36:	f001 fe5e 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2011      	movs	r0, #17
 8000c40:	f001 fe3d 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c44:	2011      	movs	r0, #17
 8000c46:	f001 fe56 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	202f      	movs	r0, #47	; 0x2f
 8000c50:	f001 fe35 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c54:	202f      	movs	r0, #47	; 0x2f
 8000c56:	f001 fe4e 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2038      	movs	r0, #56	; 0x38
 8000c60:	f001 fe2d 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c64:	2038      	movs	r0, #56	; 0x38
 8000c66:	f001 fe46 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a4a      	ldr	r2, [pc, #296]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a38      	ldr	r2, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d24:	4826      	ldr	r0, [pc, #152]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d26:	f003 fd37 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d30:	f003 fd32 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <MX_GPIO_Init+0x150>)
 8000d4c:	f003 fb78 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d50:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d6a:	f003 fb69 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d86:	f003 fb5b 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d9e:	f003 fb4f 	bl	8004440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2028      	movs	r0, #40	; 0x28
 8000da8:	f001 fd89 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f001 fda2 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40021800 	.word	0x40021800
 8000dc8:	40020800 	.word	0x40020800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_ADC_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_ADC_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_ADC_MspInit+0x8c>)
 8000e86:	f003 fadb 	bl	8004440 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2012      	movs	r0, #18
 8000e90:	f001 fd15 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e94:	2012      	movs	r0, #18
 8000e96:	f001 fd2e 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40012000 	.word	0x40012000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_DAC_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_DAC_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f02:	2310      	movs	r3, #16
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_DAC_MspInit+0x8c>)
 8000f16:	f003 fa93 	bl	8004440 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2036      	movs	r0, #54	; 0x36
 8000f20:	f001 fccd 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f24:	2036      	movs	r0, #54	; 0x36
 8000f26:	f001 fce6 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40007400 	.word	0x40007400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ac      	sub	sp, #176	; 0xb0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	2284      	movs	r2, #132	; 0x84
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f013 fba3 	bl	80146ac <memset>
  if(hi2c->Instance==I2C1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_I2C_MspInit+0x188>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	f040 80b9 	bne.w	80010e4 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 f91d 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f8c:	f7ff ff1e 	bl	8000dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000fa8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4840      	ldr	r0, [pc, #256]	; (80010d0 <HAL_I2C_MspInit+0x190>)
 8000fd0:	f003 fa36 	bl	8004440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <HAL_I2C_MspInit+0x18c>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8000fee:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <HAL_I2C_MspInit+0x198>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8000ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800102c:	4829      	ldr	r0, [pc, #164]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 800102e:	f001 fd5b 	bl	8002ae8 <HAL_DMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001038:	f7ff fec8 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <HAL_I2C_MspInit+0x194>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800104a:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <HAL_I2C_MspInit+0x1a0>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001054:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800108a:	f001 fd2d 	bl	8002ae8 <HAL_DMA_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001094:	f7ff fe9a 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_I2C_MspInit+0x19c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	201f      	movs	r0, #31
 80010aa:	f001 fc08 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ae:	201f      	movs	r0, #31
 80010b0:	f001 fc21 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2020      	movs	r0, #32
 80010ba:	f001 fc00 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010be:	2020      	movs	r0, #32
 80010c0:	f001 fc19 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010c4:	e0be      	b.n	8001244 <HAL_I2C_MspInit+0x304>
 80010c6:	bf00      	nop
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	200002fc 	.word	0x200002fc
 80010d8:	40026010 	.word	0x40026010
 80010dc:	2000035c 	.word	0x2000035c
 80010e0:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_I2C_MspInit+0x30c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f040 80aa 	bne.w	8001244 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f005 f85d 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 800110c:	f7ff fe5e 	bl	8000dcc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_I2C_MspInit+0x310>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a4e      	ldr	r2, [pc, #312]	; (8001250 <HAL_I2C_MspInit+0x310>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_I2C_MspInit+0x310>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001128:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800112c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001142:	2304      	movs	r3, #4
 8001144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114c:	4619      	mov	r1, r3
 800114e:	4841      	ldr	r0, [pc, #260]	; (8001254 <HAL_I2C_MspInit+0x314>)
 8001150:	f003 f976 	bl	8004440 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_I2C_MspInit+0x310>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <HAL_I2C_MspInit+0x310>)
 800115a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_I2C_MspInit+0x310>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_I2C_MspInit+0x318>)
 800116e:	4a3b      	ldr	r2, [pc, #236]	; (800125c <HAL_I2C_MspInit+0x31c>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <HAL_I2C_MspInit+0x318>)
 8001174:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001178:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_I2C_MspInit+0x318>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_I2C_MspInit+0x318>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_I2C_MspInit+0x318>)
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_I2C_MspInit+0x318>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_I2C_MspInit+0x318>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_I2C_MspInit+0x318>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_I2C_MspInit+0x318>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_I2C_MspInit+0x318>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <HAL_I2C_MspInit+0x318>)
 80011ae:	f001 fc9b 	bl	8002ae8 <HAL_DMA_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80011b8:	f7ff fe08 	bl	8000dcc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_I2C_MspInit+0x318>)
 80011c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_I2C_MspInit+0x318>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_I2C_MspInit+0x324>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011d4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_I2C_MspInit+0x320>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_I2C_MspInit+0x320>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001208:	4815      	ldr	r0, [pc, #84]	; (8001260 <HAL_I2C_MspInit+0x320>)
 800120a:	f001 fc6d 	bl	8002ae8 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001214:	f7ff fdda 	bl	8000dcc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_I2C_MspInit+0x320>)
 800121c:	639a      	str	r2, [r3, #56]	; 0x38
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_I2C_MspInit+0x320>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2021      	movs	r0, #33	; 0x21
 800122a:	f001 fb48 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800122e:	2021      	movs	r0, #33	; 0x21
 8001230:	f001 fb61 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2022      	movs	r0, #34	; 0x22
 800123a:	f001 fb40 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800123e:	2022      	movs	r0, #34	; 0x22
 8001240:	f001 fb59 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	37b0      	adds	r7, #176	; 0xb0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40005800 	.word	0x40005800
 8001250:	40023800 	.word	0x40023800
 8001254:	40020400 	.word	0x40020400
 8001258:	200003bc 	.word	0x200003bc
 800125c:	40026040 	.word	0x40026040
 8001260:	2000041c 	.word	0x2000041c
 8001264:	400260b8 	.word	0x400260b8

08001268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7f      	ldr	r2, [pc, #508]	; (8001484 <HAL_SPI_MspInit+0x21c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d17a      	bne.n	8001380 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800128a:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <HAL_SPI_MspInit+0x220>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a7e      	ldr	r2, [pc, #504]	; (8001488 <HAL_SPI_MspInit+0x220>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_SPI_MspInit+0x220>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b79      	ldr	r3, [pc, #484]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a78      	ldr	r2, [pc, #480]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b73      	ldr	r3, [pc, #460]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a72      	ldr	r2, [pc, #456]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012da:	2301      	movs	r3, #1
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e2:	2305      	movs	r3, #5
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4867      	ldr	r0, [pc, #412]	; (800148c <HAL_SPI_MspInit+0x224>)
 80012ee:	f003 f8a7 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012f2:	2320      	movs	r3, #32
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001302:	2305      	movs	r3, #5
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4860      	ldr	r0, [pc, #384]	; (8001490 <HAL_SPI_MspInit+0x228>)
 800130e:	f003 f897 	bl	8004440 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001314:	4a60      	ldr	r2, [pc, #384]	; (8001498 <HAL_SPI_MspInit+0x230>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 800131a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800131e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001320:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 800132e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001332:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134c:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001352:	4850      	ldr	r0, [pc, #320]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001354:	f001 fbc8 	bl	8002ae8 <HAL_DMA_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800135e:	f7ff fd35 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 8001366:	659a      	str	r2, [r3, #88]	; 0x58
 8001368:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_SPI_MspInit+0x22c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2023      	movs	r0, #35	; 0x23
 8001374:	f001 faa3 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001378:	2023      	movs	r0, #35	; 0x23
 800137a:	f001 fabc 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800137e:	e07d      	b.n	800147c <HAL_SPI_MspInit+0x214>
  else if(hspi->Instance==SPI2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_SPI_MspInit+0x234>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d178      	bne.n	800147c <HAL_SPI_MspInit+0x214>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_SPI_MspInit+0x220>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <HAL_SPI_MspInit+0x220>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <HAL_SPI_MspInit+0x220>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a38      	ldr	r2, [pc, #224]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_SPI_MspInit+0x220>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d2:	230c      	movs	r3, #12
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e2:	2305      	movs	r3, #5
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <HAL_SPI_MspInit+0x238>)
 80013ee:	f003 f827 	bl	8004440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f2:	2308      	movs	r3, #8
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001402:	2305      	movs	r3, #5
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4825      	ldr	r0, [pc, #148]	; (80014a4 <HAL_SPI_MspInit+0x23c>)
 800140e:	f003 f817 	bl	8004440 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_SPI_MspInit+0x244>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001450:	4815      	ldr	r0, [pc, #84]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001452:	f001 fb49 	bl	8002ae8 <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_SPI_MspInit+0x1f8>
      Error_Handler();
 800145c:	f7ff fcb6 	bl	8000dcc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001464:	659a      	str	r2, [r3, #88]	; 0x58
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_SPI_MspInit+0x240>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2024      	movs	r0, #36	; 0x24
 8001472:	f001 fa24 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001476:	2024      	movs	r0, #36	; 0x24
 8001478:	f001 fa3d 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 800147c:	bf00      	nop
 800147e:	3738      	adds	r7, #56	; 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013000 	.word	0x40013000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	20000544 	.word	0x20000544
 8001498:	40026410 	.word	0x40026410
 800149c:	40003800 	.word	0x40003800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	200005a4 	.word	0x200005a4
 80014ac:	40026058 	.word	0x40026058

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d113      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_TIM_Base_MspInit+0x44>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201c      	movs	r0, #28
 80014e0:	f001 f9ed 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f001 fa06 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0b0      	sub	sp, #192	; 0xc0
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001514:	2284      	movs	r2, #132	; 0x84
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f013 f8c7 	bl	80146ac <memset>
  if(huart->Instance==UART4)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a81      	ldr	r2, [pc, #516]	; (8001728 <HAL_UART_MspInit+0x230>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d145      	bne.n	80015b4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800152e:	2300      	movs	r3, #0
 8001530:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fe42 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001542:	f7ff fc43 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001546:	4b79      	ldr	r3, [pc, #484]	; (800172c <HAL_UART_MspInit+0x234>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a78      	ldr	r2, [pc, #480]	; (800172c <HAL_UART_MspInit+0x234>)
 800154c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b76      	ldr	r3, [pc, #472]	; (800172c <HAL_UART_MspInit+0x234>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b73      	ldr	r3, [pc, #460]	; (800172c <HAL_UART_MspInit+0x234>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a72      	ldr	r2, [pc, #456]	; (800172c <HAL_UART_MspInit+0x234>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_UART_MspInit+0x234>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001576:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001590:	2308      	movs	r3, #8
 8001592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800159a:	4619      	mov	r1, r3
 800159c:	4864      	ldr	r0, [pc, #400]	; (8001730 <HAL_UART_MspInit+0x238>)
 800159e:	f002 ff4f 	bl	8004440 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2034      	movs	r0, #52	; 0x34
 80015a8:	f001 f989 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015ac:	2034      	movs	r0, #52	; 0x34
 80015ae:	f001 f9a2 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	e0b5      	b.n	8001720 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_UART_MspInit+0x23c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d166      	bne.n	800168c <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80015be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fdf7 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80015d8:	f7ff fbf8 	bl	8000dcc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_UART_MspInit+0x234>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_UART_MspInit+0x234>)
 80015e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_UART_MspInit+0x234>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <HAL_UART_MspInit+0x234>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a4c      	ldr	r2, [pc, #304]	; (800172c <HAL_UART_MspInit+0x234>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <HAL_UART_MspInit+0x234>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_UART_MspInit+0x234>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a46      	ldr	r2, [pc, #280]	; (800172c <HAL_UART_MspInit+0x234>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_UART_MspInit+0x234>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800163e:	2308      	movs	r3, #8
 8001640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001648:	4619      	mov	r1, r3
 800164a:	4839      	ldr	r0, [pc, #228]	; (8001730 <HAL_UART_MspInit+0x238>)
 800164c:	f002 fef8 	bl	8004440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001650:	2304      	movs	r3, #4
 8001652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001668:	2308      	movs	r3, #8
 800166a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001672:	4619      	mov	r1, r3
 8001674:	4830      	ldr	r0, [pc, #192]	; (8001738 <HAL_UART_MspInit+0x240>)
 8001676:	f002 fee3 	bl	8004440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2035      	movs	r0, #53	; 0x35
 8001680:	f001 f91d 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001684:	2035      	movs	r0, #53	; 0x35
 8001686:	f001 f936 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 800168a:	e049      	b.n	8001720 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_UART_MspInit+0x244>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d144      	bne.n	8001720 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fd8b 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80016b0:	f7ff fb8c 	bl	8000dcc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_UART_MspInit+0x234>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_UART_MspInit+0x234>)
 80016ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_UART_MspInit+0x234>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_MspInit+0x234>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_UART_MspInit+0x234>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_UART_MspInit+0x234>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016fe:	2307      	movs	r3, #7
 8001700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001708:	4619      	mov	r1, r3
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <HAL_UART_MspInit+0x240>)
 800170c:	f002 fe98 	bl	8004440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2027      	movs	r0, #39	; 0x27
 8001716:	f001 f8d2 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800171a:	2027      	movs	r0, #39	; 0x27
 800171c:	f001 f8eb 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 8001720:	bf00      	nop
 8001722:	37c0      	adds	r7, #192	; 0xc0
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004c00 	.word	0x40004c00
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800
 8001734:	40005000 	.word	0x40005000
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40004800 	.word	0x40004800

08001740 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ac      	sub	sp, #176	; 0xb0
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	2284      	movs	r2, #132	; 0x84
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f012 ffa3 	bl	80146ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176e:	d159      	bne.n	8001824 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001770:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001774:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0318 	add.w	r3, r7, #24
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fd1d 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800178c:	f7ff fb1e 	bl	8000dcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_PCD_MspInit+0xec>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c2:	230a      	movs	r3, #10
 80017c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017cc:	4619      	mov	r1, r3
 80017ce:	4818      	ldr	r0, [pc, #96]	; (8001830 <HAL_PCD_MspInit+0xf0>)
 80017d0:	f002 fe36 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ec:	4619      	mov	r1, r3
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <HAL_PCD_MspInit+0xf0>)
 80017f0:	f002 fe26 	bl	8004440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_PCD_MspInit+0xec>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_PCD_MspInit+0xec>)
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_PCD_MspInit+0xec>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_PCD_MspInit+0xec>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	6453      	str	r3, [r2, #68]	; 0x44
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_PCD_MspInit+0xec>)
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	37b0      	adds	r7, #176	; 0xb0
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 fb3c 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Stream0_IRQHandler+0x10>)
 800188e:	f001 fa6b 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002fc 	.word	0x200002fc

0800189c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA1_Stream2_IRQHandler+0x10>)
 80018a2:	f001 fa61 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003bc 	.word	0x200003bc

080018b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA1_Stream3_IRQHandler+0x10>)
 80018b6:	f001 fa57 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200005a4 	.word	0x200005a4

080018c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA1_Stream6_IRQHandler+0x10>)
 80018ca:	f001 fa4d 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000035c 	.word	0x2000035c

080018d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <ADC_IRQHandler+0x10>)
 80018de:	f000 fb95 	bl	800200c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001f8 	.word	0x200001f8

080018ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM2_IRQHandler+0x10>)
 80018f2:	f006 fc60 	bl	80081b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000604 	.word	0x20000604

08001900 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <I2C1_EV_IRQHandler+0x10>)
 8001906:	f003 f815 	bl	8004934 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000254 	.word	0x20000254

08001914 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <I2C1_ER_IRQHandler+0x10>)
 800191a:	f003 f825 	bl	8004968 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000254 	.word	0x20000254

08001928 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <I2C2_EV_IRQHandler+0x10>)
 800192e:	f003 f801 	bl	8004934 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002a8 	.word	0x200002a8

0800193c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <I2C2_ER_IRQHandler+0x10>)
 8001942:	f003 f811 	bl	8004968 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002a8 	.word	0x200002a8

08001950 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <SPI1_IRQHandler+0x10>)
 8001956:	f005 fedf 	bl	8007718 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000047c 	.word	0x2000047c

08001964 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <SPI2_IRQHandler+0x10>)
 800196a:	f005 fed5 	bl	8007718 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004e0 	.word	0x200004e0

08001978 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <USART3_IRQHandler+0x10>)
 800197e:	f007 f9a7 	bl	8008cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000760 	.word	0x20000760

0800198c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001994:	f002 ff1a 	bl	80047cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA1_Stream7_IRQHandler+0x10>)
 80019a2:	f001 f9e1 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000041c 	.word	0x2000041c

080019b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <UART4_IRQHandler+0x10>)
 80019b6:	f007 f98b 	bl	8008cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000650 	.word	0x20000650

080019c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <UART5_IRQHandler+0x10>)
 80019ca:	f007 f981 	bl	8008cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200006d8 	.word	0x200006d8

080019d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM6_DAC_IRQHandler+0x10>)
 80019de:	f000 ffc6 	bl	800296e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000240 	.word	0x20000240

080019ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <DMA2_Stream0_IRQHandler+0x10>)
 80019f2:	f001 f9b9 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000544 	.word	0x20000544

08001a00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <ETH_IRQHandler+0x10>)
 8001a06:	f001 fe35 	bl	8003674 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200056d0 	.word	0x200056d0

08001a14 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <ETH_WKUP_IRQHandler+0x10>)
 8001a1a:	f001 fe2b 	bl	8003674 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200056d0 	.word	0x200056d0

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <_kill+0x20>)
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
	return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20008ec0 	.word	0x20008ec0

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe5 	bl	8001a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a6e:	e7fe      	b.n	8001a6e <_exit+0x12>

08001a70 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
	return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_isatty>:

int _isatty(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
	return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d205      	bcs.n	8001b14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <_sbrk+0x6c>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20050000 	.word	0x20050000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000cf0 	.word	0x20000cf0
 8001b40:	20008ed0 	.word	0x20008ed0
 8001b44:	20008ec0 	.word	0x20008ec0

08001b48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff ffd7 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f012 fd45 	bl	8014628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe fd09 	bl	80005b4 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001bb0:	08018500 	.word	0x08018500
  ldr r2, =_sbss
 8001bb4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bb8:	20008ed0 	.word	0x20008ed0

08001bbc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <CAN1_RX0_IRQHandler>

08001bbe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <LAN8742_RegisterBusIO+0x28>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <LAN8742_RegisterBusIO+0x28>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <LAN8742_RegisterBusIO+0x28>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e014      	b.n	8001c16 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d17c      	bne.n	8001d3c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e01c      	b.n	8001c96 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f107 0208 	add.w	r2, r7, #8
 8001c64:	2112      	movs	r1, #18
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	4798      	blx	r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da03      	bge.n	8001c78 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001c70:	f06f 0304 	mvn.w	r3, #4
 8001c74:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001c76:	e00b      	b.n	8001c90 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d105      	bne.n	8001c90 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
         break;
 8001c8e:	e005      	b.n	8001c9c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b1f      	cmp	r3, #31
 8001c9a:	d9df      	bls.n	8001c5c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b1f      	cmp	r3, #31
 8001ca2:	d902      	bls.n	8001caa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ca4:	f06f 0302 	mvn.w	r3, #2
 8001ca8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d145      	bne.n	8001d3c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6810      	ldr	r0, [r2, #0]
 8001cb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4798      	blx	r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db37      	blt.n	8001d36 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6810      	ldr	r0, [r2, #0]
 8001cce:	f107 0208 	add.w	r2, r7, #8
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4798      	blx	r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db28      	blt.n	8001d2e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4798      	blx	r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ce6:	e01c      	b.n	8001d22 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4798      	blx	r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cfa:	d80e      	bhi.n	8001d1a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6810      	ldr	r0, [r2, #0]
 8001d04:	f107 0208 	add.w	r2, r7, #8
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4798      	blx	r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da07      	bge.n	8001d22 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d12:	f06f 0304 	mvn.w	r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
                 break;
 8001d18:	e010      	b.n	8001d3c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d1a:	f06f 0301 	mvn.w	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
               break;
 8001d20:	e00c      	b.n	8001d3c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1dd      	bne.n	8001ce8 <LAN8742_Init+0xc6>
 8001d2c:	e006      	b.n	8001d3c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d2e:	f06f 0304 	mvn.w	r3, #4
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e002      	b.n	8001d3c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001d36:	f06f 0303 	mvn.w	r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d112      	bne.n	8001d68 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4798      	blx	r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001d4c:	bf00      	nop
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4798      	blx	r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d60:	d9f5      	bls.n	8001d4e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001d68:	693b      	ldr	r3, [r7, #16]
 }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6810      	ldr	r0, [r2, #0]
 8001d86:	f107 020c 	add.w	r2, r7, #12
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4798      	blx	r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da02      	bge.n	8001d9a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d94:	f06f 0304 	mvn.w	r3, #4
 8001d98:	e06e      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6810      	ldr	r0, [r2, #0]
 8001da2:	f107 020c 	add.w	r2, r7, #12
 8001da6:	2101      	movs	r1, #1
 8001da8:	4798      	blx	r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da02      	bge.n	8001db6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001db0:	f06f 0304 	mvn.w	r3, #4
 8001db4:	e060      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e059      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6810      	ldr	r0, [r2, #0]
 8001dcc:	f107 020c 	add.w	r2, r7, #12
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4798      	blx	r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da02      	bge.n	8001de0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dda:	f06f 0304 	mvn.w	r3, #4
 8001dde:	e04b      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d11b      	bne.n	8001e22 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <LAN8742_GetLinkState+0x90>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e03a      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e033      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e02c      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e02a      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6810      	ldr	r0, [r2, #0]
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	211f      	movs	r1, #31
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da02      	bge.n	8001e3e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e38:	f06f 0304 	mvn.w	r3, #4
 8001e3c:	e01c      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e015      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 031c 	and.w	r3, r3, #28
 8001e52:	2b18      	cmp	r3, #24
 8001e54:	d101      	bne.n	8001e5a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e00e      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 031c 	and.w	r3, r3, #28
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e007      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 031c 	and.w	r3, r3, #28
 8001e6e:	2b14      	cmp	r3, #20
 8001e70:	d101      	bne.n	8001e76 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e72:	2304      	movs	r3, #4
 8001e74:	e000      	b.n	8001e78 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e76:	2305      	movs	r3, #5
    }				
  }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 fd0f 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f806 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7fe ffa2 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fd29 	bl	8002912 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 fcf1 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000cf4 	.word	0x20000cf4

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000cf4 	.word	0x20000cf4

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e031      	b.n	8001ffe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe ff3c 	bl	8000e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_ADC_Init+0x84>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa94 	bl	8002500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
 8001fee:	e001      	b.n	8001ff4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	ffffeefd 	.word	0xffffeefd

0800200c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d049      	beq.n	80020d6 <HAL_ADC_IRQHandler+0xca>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d046      	beq.n	80020d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d105      	bne.n	8002060 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12b      	bne.n	80020c6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d127      	bne.n	80020c6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800208e:	2b00      	cmp	r3, #0
 8002090:	d119      	bne.n	80020c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0220 	bic.w	r2, r2, #32
 80020a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f012 f9c8 	bl	801445c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0212 	mvn.w	r2, #18
 80020d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d057      	beq.n	800219c <HAL_ADC_IRQHandler+0x190>
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d054      	beq.n	800219c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d139      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002130:	2b00      	cmp	r3, #0
 8002132:	d12b      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d124      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11d      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d119      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002166:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fab1 	bl	80026f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 020c 	mvn.w	r2, #12
 800219a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d017      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x1d6>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d014      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10d      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f82a 	bl	800222c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_ADC_IRQHandler+0x218>
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 0220 	mvn.w	r2, #32
 8002212:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f813 	bl	8002240 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0220 	mvn.w	r2, #32
 8002222:	601a      	str	r2, [r3, #0]
  }
}
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1c>
 800226c:	2302      	movs	r3, #2
 800226e:	e136      	b.n	80024de <HAL_ADC_ConfigChannel+0x28a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d93a      	bls.n	80022f6 <HAL_ADC_ConfigChannel+0xa2>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002288:	d035      	beq.n	80022f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68d9      	ldr	r1, [r3, #12]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	2207      	movs	r2, #7
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a8d      	ldr	r2, [pc, #564]	; (80024ec <HAL_ADC_ConfigChannel+0x298>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10a      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	061a      	lsls	r2, r3, #24
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ce:	e035      	b.n	800233c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4403      	add	r3, r0
 80022e8:	3b1e      	subs	r3, #30
 80022ea:	409a      	lsls	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f4:	e022      	b.n	800233c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6919      	ldr	r1, [r3, #16]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	2207      	movs	r2, #7
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6919      	ldr	r1, [r3, #16]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	4603      	mov	r3, r0
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4403      	add	r3, r0
 8002332:	409a      	lsls	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b06      	cmp	r3, #6
 8002342:	d824      	bhi.n	800238e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b05      	subs	r3, #5
 8002356:	221f      	movs	r2, #31
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43da      	mvns	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	400a      	ands	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b05      	subs	r3, #5
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
 800238c:	e04c      	b.n	8002428 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d824      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b23      	subs	r3, #35	; 0x23
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b23      	subs	r3, #35	; 0x23
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
 80023de:	e023      	b.n	8002428 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b41      	subs	r3, #65	; 0x41
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b41      	subs	r3, #65	; 0x41
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a30      	ldr	r2, [pc, #192]	; (80024f0 <HAL_ADC_ConfigChannel+0x29c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1f4>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002442:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002446:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_ADC_ConfigChannel+0x29c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10f      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x21e>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b12      	cmp	r3, #18
 8002458:	d10b      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002460:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002464:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002470:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d12b      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x280>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_ADC_ConfigChannel+0x298>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <HAL_ADC_ConfigChannel+0x23a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b11      	cmp	r3, #17
 800248c:	d122      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002494:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002498:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_ADC_ConfigChannel+0x298>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d111      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_ADC_ConfigChannel+0x2a8>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024c6:	e002      	b.n	80024ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	10000012 	.word	0x10000012
 80024f0:	40012000 	.word	0x40012000
 80024f4:	40012300 	.word	0x40012300
 80024f8:	20000000 	.word	0x20000000
 80024fc:	431bde83 	.word	0x431bde83

08002500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002508:	4b78      	ldr	r3, [pc, #480]	; (80026ec <ADC_Init+0x1ec>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a77      	ldr	r2, [pc, #476]	; (80026ec <ADC_Init+0x1ec>)
 800250e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002512:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <ADC_Init+0x1ec>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4973      	ldr	r1, [pc, #460]	; (80026ec <ADC_Init+0x1ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <ADC_Init+0x1f0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	e00f      	b.n	80025fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0202 	bic.w	r2, r2, #2
 8002608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	005a      	lsls	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002636:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	3b01      	subs	r3, #1
 8002654:	035a      	lsls	r2, r3, #13
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	e007      	b.n	8002670 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	3b01      	subs	r3, #1
 800268c:	051a      	lsls	r2, r3, #20
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b2:	025a      	lsls	r2, r3, #9
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	029a      	lsls	r2, r3, #10
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40012300 	.word	0x40012300
 80026f0:	0f000001 	.word	0x0f000001

080026f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <__NVIC_SetPriorityGrouping+0x40>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x40>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	05fa0000 	.word	0x05fa0000

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e014      	b.n	8002966 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	791b      	ldrb	r3, [r3, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe faaf 	bl	8000eb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002984:	d120      	bne.n	80029c8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002994:	d118      	bne.n	80029c8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f82d 	bl	8002a22 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d6:	d120      	bne.n	8002a1a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e6:	d118      	bne.n	8002a1a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2204      	movs	r2, #4
 80029ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f85d 	bl	8002ad4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	795b      	ldrb	r3, [r3, #5]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_DAC_ConfigChannel+0x18>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e03c      	b.n	8002ac8 <HAL_DAC_ConfigChannel+0x92>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2202      	movs	r2, #2
 8002a58:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4013      	ands	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	22c0      	movs	r2, #192	; 0xc0
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fa16 	bl	8001f24 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e099      	b.n	8002c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7ff f9fd 	bl	8001f24 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d908      	bls.n	8002b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e078      	b.n	8002c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_DMA_Init+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa89 	bl	8003104 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c06:	2301      	movs	r3, #1
 8002c08:	e016      	b.n	8002c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa40 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	f010803f 	.word	0xf010803f

08002c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c52:	f7ff f967 	bl	8001f24 <HAL_GetTick>
 8002c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e052      	b.n	8002d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_Abort+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	e013      	b.n	8002cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc8:	f7ff f92c 	bl	8001f24 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d90c      	bls.n	8002cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e015      	b.n	8002d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e4      	bne.n	8002cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	223f      	movs	r2, #63	; 0x3f
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00c      	b.n	8002d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2205      	movs	r2, #5
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d74:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <HAL_DMA_IRQHandler+0x248>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a8e      	ldr	r2, [pc, #568]	; (8002fb4 <HAL_DMA_IRQHandler+0x24c>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2208      	movs	r2, #8
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	2204      	movs	r2, #4
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2210      	movs	r2, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d043      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2210      	movs	r2, #16
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
 8002e96:	e01f      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0208 	bic.w	r2, r2, #8
 8002ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2220      	movs	r2, #32
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 808f 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8087 	beq.w	8003008 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2220      	movs	r2, #32
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d136      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0216 	bic.w	r2, r2, #22
 8002f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x1da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	223f      	movs	r2, #63	; 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07e      	beq.n	8003074 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
        }
        return;
 8002f7e:	e079      	b.n	8003074 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d031      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e02c      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e01e      	b.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0210 	bic.w	r2, r2, #16
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	2b00      	cmp	r3, #0
 800300e:	d032      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d022      	beq.n	8003062 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2205      	movs	r2, #5
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3301      	adds	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	d307      	bcc.n	8003050 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f2      	bne.n	8003034 <HAL_DMA_IRQHandler+0x2cc>
 800304e:	e000      	b.n	8003052 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003050:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e000      	b.n	8003076 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003074:	bf00      	nop
    }
  }
}
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3b10      	subs	r3, #16
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <DMA_CalcBaseAndBitshift+0x60>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <DMA_CalcBaseAndBitshift+0x64>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d908      	bls.n	80030d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <DMA_CalcBaseAndBitshift+0x68>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	659a      	str	r2, [r3, #88]	; 0x58
 80030d6:	e006      	b.n	80030e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <DMA_CalcBaseAndBitshift+0x68>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	aaaaaaab 	.word	0xaaaaaaab
 80030fc:	080182b0 	.word	0x080182b0
 8003100:	fffffc00 	.word	0xfffffc00

08003104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d856      	bhi.n	80031d2 <DMA_CheckFifoParam+0xce>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <DMA_CheckFifoParam+0x28>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314f 	.word	0x0800314f
 8003134:	0800313d 	.word	0x0800313d
 8003138:	080031d3 	.word	0x080031d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d046      	beq.n	80031d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e043      	b.n	80031d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003156:	d140      	bne.n	80031da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e03d      	b.n	80031da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d121      	bne.n	80031ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d837      	bhi.n	80031de <DMA_CheckFifoParam+0xda>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <DMA_CheckFifoParam+0x70>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	08003185 	.word	0x08003185
 8003178:	0800318b 	.word	0x0800318b
 800317c:	08003185 	.word	0x08003185
 8003180:	0800319d 	.word	0x0800319d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e030      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d025      	beq.n	80031e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319a:	e022      	b.n	80031e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a4:	d11f      	bne.n	80031e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031aa:	e01c      	b.n	80031e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d903      	bls.n	80031ba <DMA_CheckFifoParam+0xb6>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b8:	e018      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      break;
 80031be:	e015      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e00b      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d2:	bf00      	nop
 80031d4:	e00a      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e008      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e006      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;   
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
    }
  } 
  
  return status; 
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06a      	b.n	80032e4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2223      	movs	r2, #35	; 0x23
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f007 fa89 	bl	800a738 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_ETH_Init+0xf0>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a30      	ldr	r2, [pc, #192]	; (80032ec <HAL_ETH_Init+0xf0>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <HAL_ETH_Init+0xf0>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_ETH_Init+0xf4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <HAL_ETH_Init+0xf4>)
 8003244:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003248:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <HAL_ETH_Init+0xf4>)
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4927      	ldr	r1, [pc, #156]	; (80032f0 <HAL_ETH_Init+0xf4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_ETH_Init+0xf4>)
 800325a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003272:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003274:	f7fe fe56 	bl	8001f24 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800327a:	e011      	b.n	80032a0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800327c:	f7fe fe52 	bl	8001f24 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800328a:	d909      	bls.n	80032a0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2204      	movs	r2, #4
 8003290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	22e0      	movs	r2, #224	; 0xe0
 8003298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e021      	b.n	80032e4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e4      	bne.n	800327c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fe20 	bl	8003ef8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fec7 	bl	800404c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 ff1d 	bl	80040fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	461a      	mov	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fe85 	bl	8003fdc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2210      	movs	r2, #16
 80032de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800

080032f4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	2b10      	cmp	r3, #16
 8003304:	d150      	bne.n	80033a8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2223      	movs	r2, #35	; 0x23
 800330a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f939 	bl	800358c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0208 	orr.w	r2, r2, #8
 8003328:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003332:	2001      	movs	r0, #1
 8003334:	f7fe fe02 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0204 	orr.w	r2, r2, #4
 800334e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003358:	2001      	movs	r0, #1
 800335a:	f7fe fdef 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fc66 	bl	8003c38 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800337e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003382:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800339a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2223      	movs	r2, #35	; 0x23
 80033a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c0:	2b23      	cmp	r3, #35	; 0x23
 80033c2:	d14a      	bne.n	800345a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2223      	movs	r2, #35	; 0x23
 80033c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033e2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	f023 0302 	bic.w	r3, r3, #2
 80033f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033fa:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003414:	2001      	movs	r0, #1
 8003416:	f7fe fd91 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fc08 	bl	8003c38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0208 	bic.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003440:	2001      	movs	r0, #1
 8003442:	f7fe fd7b 	bl	8001f3c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2210      	movs	r2, #16
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07c      	b.n	8003584 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003490:	2b23      	cmp	r3, #35	; 0x23
 8003492:	d176      	bne.n	8003582 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003494:	2200      	movs	r2, #0
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fe9d 	bl	80041d8 <ETH_Prepare_Tx_Descriptors>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e065      	b.n	8003584 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b8:	f3bf 8f4f 	dsb	sy
}
 80034bc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3206      	adds	r2, #6
 80034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ca:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d904      	bls.n	80034e8 <HAL_ETH_Transmit+0x84>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	1f1a      	subs	r2, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3106      	adds	r1, #6
 80034f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034fc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80034fe:	f7fe fd11 	bl	8001f24 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003504:	e037      	b.n	8003576 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d011      	beq.n	800353c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f043 0208 	orr.w	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e023      	b.n	8003584 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d018      	beq.n	8003576 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fe fcee 	bl	8001f24 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <HAL_ETH_Transmit+0xf6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003570:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e006      	b.n	8003584 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dbc3      	blt.n	8003506 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003598:	2301      	movs	r3, #1
 800359a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	3212      	adds	r2, #18
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80035b4:	e040      	b.n	8003638 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d112      	bne.n	80035e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	4618      	mov	r0, r3
 80035c4:	f007 fa5a 	bl	800aa7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	74fb      	strb	r3, [r7, #19]
 80035d2:	e007      	b.n	80035e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	461a      	mov	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	461a      	mov	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d026      	beq.n	8003638 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <ETH_UpdateDescriptor+0xe4>)
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e003      	b.n	8003602 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003600:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003602:	f3bf 8f5f 	dmb	sy
}
 8003606:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3301      	adds	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d902      	bls.n	8003626 <ETH_UpdateDescriptor+0x9a>
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3b04      	subs	r3, #4
 8003624:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	3212      	adds	r2, #18
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	617b      	str	r3, [r7, #20]
      desccount--;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3b01      	subs	r3, #1
 8003636:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <ETH_UpdateDescriptor+0xb8>
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1b8      	bne.n	80035b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	429a      	cmp	r2, r3
 800364c:	d00c      	beq.n	8003668 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	461a      	mov	r2, r3
 8003658:	2300      	movs	r3, #0
 800365a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003668:	bf00      	nop
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	800045f8 	.word	0x800045f8

08003674 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d112      	bne.n	80036b4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d109      	bne.n	80036b4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <HAL_ETH_IRQHandler+0x178>)
 80036ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8ac 	bl	800380c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d113      	bne.n	80036ee <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10a      	bne.n	80036ee <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	461a      	mov	r2, r3
 80036e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80036e6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f885 	bl	80037f8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003700:	d14c      	bne.n	800379c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003714:	d142      	bne.n	800379c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f043 0208 	orr.w	r2, r3, #8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d11a      	bne.n	8003770 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_ETH_IRQHandler+0x17c>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003764:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	22e0      	movs	r2, #224	; 0xe0
 800376a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800376e:	e012      	b.n	8003796 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	f248 6380 	movw	r3, #34432	; 0x8680
 800377e:	4013      	ands	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378e:	461a      	mov	r2, r3
 8003790:	f248 6380 	movw	r3, #34432	; 0x8680
 8003794:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f842 	bl	8003820 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d10e      	bne.n	80037c8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f83a 	bl	8003834 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_ETH_IRQHandler+0x180>)
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_ETH_IRQHandler+0x180>)
 80037d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037da:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f833 	bl	8003848 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	00010040 	.word	0x00010040
 80037f0:	007e2000 	.word	0x007e2000
 80037f4:	40013c00 	.word	0x40013c00

080037f8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 031c 	and.w	r3, r3, #28
 8003878:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	02db      	lsls	r3, r3, #11
 800387e:	b29b      	uxth	r3, r3
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0302 	bic.w	r3, r3, #2
 800389a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80038ac:	f7fe fb3a 	bl	8001f24 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038b2:	e00d      	b.n	80038d0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80038b4:	f7fe fb36 	bl	8001f24 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d301      	bcc.n	80038c8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e010      	b.n	80038ea <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ec      	bne.n	80038b4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 031c 	and.w	r3, r3, #28
 800390e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	02db      	lsls	r3, r3, #11
 8003914:	b29b      	uxth	r3, r3
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	019b      	lsls	r3, r3, #6
 8003920:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394c:	f7fe faea 	bl	8001f24 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003952:	e00d      	b.n	8003970 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003954:	f7fe fae6 	bl	8001f24 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d301      	bcc.n	8003968 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e009      	b.n	800397c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ec      	bne.n	8003954 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0d9      	b.n	8003b4c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf0c      	ite	eq
 8003a56:	2301      	moveq	r3, #1
 8003a58:	2300      	movne	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e00b      	b.n	8003b84 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d105      	bne.n	8003b82 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f883 	bl	8003c84 <ETH_SetMACConfig>

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 031c 	bic.w	r3, r3, #28
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ba4:	f002 fad8 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 8003ba8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d908      	bls.n	8003bc4 <HAL_ETH_SetMDIOClockRange+0x38>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d804      	bhi.n	8003bc4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e027      	b.n	8003c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d908      	bls.n	8003bde <HAL_ETH_SetMDIOClockRange+0x52>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d204      	bcs.n	8003bde <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f043 030c 	orr.w	r3, r3, #12
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e01a      	b.n	8003c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d303      	bcc.n	8003bee <HAL_ETH_SetMDIOClockRange+0x62>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d911      	bls.n	8003c12 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d908      	bls.n	8003c08 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d804      	bhi.n	8003c08 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e005      	b.n	8003c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f043 0310 	orr.w	r3, r3, #16
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e000      	b.n	8003c14 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c12:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	01312cff 	.word	0x01312cff
 8003c28:	02160ebf 	.word	0x02160ebf
 8003c2c:	03938700 	.word	0x03938700
 8003c30:	05f5e0ff 	.word	0x05f5e0ff
 8003c34:	08f0d17f 	.word	0x08f0d17f

08003c38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f7fe f967 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c78:	6193      	str	r3, [r2, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <ETH_SetMACConfig+0x15c>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7c1b      	ldrb	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <ETH_SetMACConfig+0x28>
 8003ca6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003caa:	e000      	b.n	8003cae <ETH_SetMACConfig+0x2a>
 8003cac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	7c5b      	ldrb	r3, [r3, #17]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <ETH_SetMACConfig+0x38>
 8003cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cba:	e000      	b.n	8003cbe <ETH_SetMACConfig+0x3a>
 8003cbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	7fdb      	ldrb	r3, [r3, #31]
 8003cca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ccc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	7f92      	ldrb	r2, [r2, #30]
 8003cd8:	2a00      	cmp	r2, #0
 8003cda:	d102      	bne.n	8003ce2 <ETH_SetMACConfig+0x5e>
 8003cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce0:	e000      	b.n	8003ce4 <ETH_SetMACConfig+0x60>
 8003ce2:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	7f1b      	ldrb	r3, [r3, #28]
 8003cea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003cfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	d102      	bne.n	8003d0c <ETH_SetMACConfig+0x88>
 8003d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0a:	e000      	b.n	8003d0e <ETH_SetMACConfig+0x8a>
 8003d0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	7bdb      	ldrb	r3, [r3, #15]
 8003d14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d26:	4313      	orrs	r3, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7fe f8fc 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d101      	bne.n	8003d72 <ETH_SetMACConfig+0xee>
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	e000      	b.n	8003d74 <ETH_SetMACConfig+0xf0>
 8003d72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d82:	2a01      	cmp	r2, #1
 8003d84:	d101      	bne.n	8003d8a <ETH_SetMACConfig+0x106>
 8003d86:	2208      	movs	r2, #8
 8003d88:	e000      	b.n	8003d8c <ETH_SetMACConfig+0x108>
 8003d8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d94:	2a01      	cmp	r2, #1
 8003d96:	d101      	bne.n	8003d9c <ETH_SetMACConfig+0x118>
 8003d98:	2204      	movs	r2, #4
 8003d9a:	e000      	b.n	8003d9e <ETH_SetMACConfig+0x11a>
 8003d9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003da6:	2a01      	cmp	r2, #1
 8003da8:	d101      	bne.n	8003dae <ETH_SetMACConfig+0x12a>
 8003daa:	2202      	movs	r2, #2
 8003dac:	e000      	b.n	8003db0 <ETH_SetMACConfig+0x12c>
 8003dae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003db0:	4313      	orrs	r3, r2
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7fe f8b7 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	ff20810f 	.word	0xff20810f

08003de4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <ETH_SetDMAConfig+0x110>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	7b1b      	ldrb	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <ETH_SetDMAConfig+0x2c>
 8003e0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e0e:	e000      	b.n	8003e12 <ETH_SetDMAConfig+0x2e>
 8003e10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	7b5b      	ldrb	r3, [r3, #13]
 8003e16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	7f52      	ldrb	r2, [r2, #29]
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d102      	bne.n	8003e28 <ETH_SetDMAConfig+0x44>
 8003e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e26:	e000      	b.n	8003e2a <ETH_SetDMAConfig+0x46>
 8003e28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	7b9b      	ldrb	r3, [r3, #14]
 8003e30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	7f1b      	ldrb	r3, [r3, #28]
 8003e3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	7f9b      	ldrb	r3, [r3, #30]
 8003e46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe f85e 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	791b      	ldrb	r3, [r3, #4]
 8003e92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ea4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003eac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003eae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ebc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fe f82f 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	f8de3f23 	.word	0xf8de3f23

08003ef8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0a6      	sub	sp, #152	; 0x98
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f34:	2300      	movs	r3, #0
 8003f36:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fe86 	bl	8003c84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff08 	bl	8003de4 <ETH_SetDMAConfig>
}
 8003fd4:	bf00      	nop
 8003fd6:	3798      	adds	r7, #152	; 0x98
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3305      	adds	r3, #5
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	3204      	adds	r2, #4
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <ETH_MACAddressConfig+0x68>)
 8003ffe:	4413      	add	r3, r2
 8004000:	461a      	mov	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3303      	adds	r3, #3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	061a      	lsls	r2, r3, #24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3302      	adds	r3, #2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3301      	adds	r3, #1
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	4313      	orrs	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <ETH_MACAddressConfig+0x6c>)
 800402e:	4413      	add	r3, r2
 8004030:	461a      	mov	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6013      	str	r3, [r2, #0]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40028040 	.word	0x40028040
 8004048:	40028044 	.word	0x40028044

0800404c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e03e      	b.n	80040d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	3206      	adds	r2, #6
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d80c      	bhi.n	80040bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e004      	b.n	80040c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3301      	adds	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d9bd      	bls.n	800405a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	611a      	str	r2, [r3, #16]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e046      	b.n	800419a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6919      	ldr	r1, [r3, #16]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004148:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004150:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	3212      	adds	r2, #18
 8004166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d80c      	bhi.n	800418a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6919      	ldr	r1, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60da      	str	r2, [r3, #12]
 8004188:	e004      	b.n	8004194 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	461a      	mov	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d9b5      	bls.n	800410c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	60da      	str	r2, [r3, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80041d8:	b480      	push	{r7}
 80041da:	b08d      	sub	sp, #52	; 0x34
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3318      	adds	r3, #24
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004202:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800421a:	d007      	beq.n	800422c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	3304      	adds	r3, #4
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800422c:	2302      	movs	r3, #2
 800422e:	e0ff      	b.n	8004430 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	3301      	adds	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	4b7d      	ldr	r3, [pc, #500]	; (800443c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004246:	4013      	ands	r3, r2
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	6852      	ldr	r2, [r2, #4]
 800424c:	431a      	orrs	r2, r3
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	431a      	orrs	r2, r3
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80042b2:	f3bf 8f5f 	dmb	sy
}
 80042b6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80042c4:	e082      	b.n	80043cc <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e005      	b.n	80042f2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	3301      	adds	r3, #1
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d902      	bls.n	8004304 <ETH_Prepare_Tx_Descriptors+0x12c>
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	3b04      	subs	r3, #4
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004326:	d007      	beq.n	8004338 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	3304      	adds	r3, #4
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d029      	beq.n	800438c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004344:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004346:	2300      	movs	r3, #0
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
 800434a:	e019      	b.n	8004380 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800434c:	f3bf 8f5f 	dmb	sy
}
 8004350:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	3301      	adds	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	2b03      	cmp	r3, #3
 8004368:	d902      	bls.n	8004370 <ETH_Prepare_Tx_Descriptors+0x198>
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	3b04      	subs	r3, #4
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	3301      	adds	r3, #1
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	429a      	cmp	r2, r3
 8004386:	d3e1      	bcc.n	800434c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	e051      	b.n	8004430 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	3301      	adds	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4b25      	ldr	r3, [pc, #148]	; (800443c <ETH_Prepare_Tx_Descriptors+0x264>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	3301      	adds	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80043ba:	f3bf 8f5f 	dmb	sy
}
 80043be:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f af78 	bne.w	80042c6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e005      	b.n	80043f6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	3304      	adds	r3, #4
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004416:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
}
 800441a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	4413      	add	r3, r2
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800442a:	b662      	cpsie	i
}
 800442c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3734      	adds	r7, #52	; 0x34
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	ffffe000 	.word	0xffffe000

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e175      	b.n	800474c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004460:	2201      	movs	r2, #1
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	f040 8164 	bne.w	8004746 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d005      	beq.n	8004496 <HAL_GPIO_Init+0x56>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d130      	bne.n	80044f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 0201 	and.w	r2, r3, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d017      	beq.n	8004534 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d123      	bne.n	8004588 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	08da      	lsrs	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3208      	adds	r2, #8
 8004548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	220f      	movs	r2, #15
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	08da      	lsrs	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3208      	adds	r2, #8
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80be 	beq.w	8004746 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	4b66      	ldr	r3, [pc, #408]	; (8004764 <HAL_GPIO_Init+0x324>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a65      	ldr	r2, [pc, #404]	; (8004764 <HAL_GPIO_Init+0x324>)
 80045d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d4:	6453      	str	r3, [r2, #68]	; 0x44
 80045d6:	4b63      	ldr	r3, [pc, #396]	; (8004764 <HAL_GPIO_Init+0x324>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045e2:	4a61      	ldr	r2, [pc, #388]	; (8004768 <HAL_GPIO_Init+0x328>)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	220f      	movs	r2, #15
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_GPIO_Init+0x32c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d037      	beq.n	800467e <HAL_GPIO_Init+0x23e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_GPIO_Init+0x330>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_GPIO_Init+0x23a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a56      	ldr	r2, [pc, #344]	; (8004774 <HAL_GPIO_Init+0x334>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02b      	beq.n	8004676 <HAL_GPIO_Init+0x236>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a55      	ldr	r2, [pc, #340]	; (8004778 <HAL_GPIO_Init+0x338>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d025      	beq.n	8004672 <HAL_GPIO_Init+0x232>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a54      	ldr	r2, [pc, #336]	; (800477c <HAL_GPIO_Init+0x33c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01f      	beq.n	800466e <HAL_GPIO_Init+0x22e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a53      	ldr	r2, [pc, #332]	; (8004780 <HAL_GPIO_Init+0x340>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d019      	beq.n	800466a <HAL_GPIO_Init+0x22a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_GPIO_Init+0x344>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_GPIO_Init+0x226>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a51      	ldr	r2, [pc, #324]	; (8004788 <HAL_GPIO_Init+0x348>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00d      	beq.n	8004662 <HAL_GPIO_Init+0x222>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a50      	ldr	r2, [pc, #320]	; (800478c <HAL_GPIO_Init+0x34c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <HAL_GPIO_Init+0x21e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4f      	ldr	r2, [pc, #316]	; (8004790 <HAL_GPIO_Init+0x350>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_GPIO_Init+0x21a>
 8004656:	2309      	movs	r3, #9
 8004658:	e012      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800465a:	230a      	movs	r3, #10
 800465c:	e010      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800465e:	2308      	movs	r3, #8
 8004660:	e00e      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004662:	2307      	movs	r3, #7
 8004664:	e00c      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004666:	2306      	movs	r3, #6
 8004668:	e00a      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800466a:	2305      	movs	r3, #5
 800466c:	e008      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800466e:	2304      	movs	r3, #4
 8004670:	e006      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004672:	2303      	movs	r3, #3
 8004674:	e004      	b.n	8004680 <HAL_GPIO_Init+0x240>
 8004676:	2302      	movs	r3, #2
 8004678:	e002      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_GPIO_Init+0x240>
 800467e:	2300      	movs	r3, #0
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	f002 0203 	and.w	r2, r2, #3
 8004686:	0092      	lsls	r2, r2, #2
 8004688:	4093      	lsls	r3, r2
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004690:	4935      	ldr	r1, [pc, #212]	; (8004768 <HAL_GPIO_Init+0x328>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	3302      	adds	r3, #2
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469e:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <HAL_GPIO_Init+0x354>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046c2:	4a34      	ldr	r2, [pc, #208]	; (8004794 <HAL_GPIO_Init+0x354>)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <HAL_GPIO_Init+0x354>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <HAL_GPIO_Init+0x354>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_GPIO_Init+0x354>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <HAL_GPIO_Init+0x354>)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_GPIO_Init+0x354>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <HAL_GPIO_Init+0x354>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	f67f ae86 	bls.w	8004460 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	40013800 	.word	0x40013800
 800476c:	40020000 	.word	0x40020000
 8004770:	40020400 	.word	0x40020400
 8004774:	40020800 	.word	0x40020800
 8004778:	40020c00 	.word	0x40020c00
 800477c:	40021000 	.word	0x40021000
 8004780:	40021400 	.word	0x40021400
 8004784:	40021800 	.word	0x40021800
 8004788:	40021c00 	.word	0x40021c00
 800478c:	40022000 	.word	0x40022000
 8004790:	40022400 	.word	0x40022400
 8004794:	40013c00 	.word	0x40013c00

08004798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
 80047a4:	4613      	mov	r3, r2
 80047a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047b4:	e003      	b.n	80047be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047b6:	887b      	ldrh	r3, [r7, #2]
 80047b8:	041a      	lsls	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	619a      	str	r2, [r3, #24]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f806 	bl	80047fc <HAL_GPIO_EXTI_Callback>
  }
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40013c00 	.word	0x40013c00

080047fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fb80 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004864:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004874:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d107      	bne.n	800488e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	e006      	b.n	800489c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800489a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d104      	bne.n	80048ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_I2C_Init+0x11c>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69d9      	ldr	r1, [r3, #28]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	02008000 	.word	0x02008000

08004934 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
  }
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	09db      	lsrs	r3, r3, #7
 8004990:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	0a9b      	lsrs	r3, r3, #10
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	09db      	lsrs	r3, r3, #7
 80049be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f043 0208 	orr.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	09db      	lsrs	r3, r3, #7
 80049ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f043 0202 	orr.w	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a08:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 030b 	and.w	r3, r3, #11
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb7f 	bl	8005120 <I2C_ITError>
  }
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <I2C_Slave_ISR_IT+0x24>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0ec      	b.n	8004c94 <I2C_Slave_ISR_IT+0x1fe>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ada:	6939      	ldr	r1, [r7, #16]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f9bf 	bl	8004e60 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04d      	beq.n	8004b8a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d047      	beq.n	8004b8a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d128      	bne.n	8004b56 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b28      	cmp	r3, #40	; 0x28
 8004b0e:	d108      	bne.n	8004b22 <I2C_Slave_ISR_IT+0x8c>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b16:	d104      	bne.n	8004b22 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b18:	6939      	ldr	r1, [r7, #16]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 faaa 	bl	8005074 <I2C_ITListenCplt>
 8004b20:	e032      	b.n	8004b88 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b29      	cmp	r3, #41	; 0x29
 8004b2c:	d10e      	bne.n	8004b4c <I2C_Slave_ISR_IT+0xb6>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b34:	d00a      	beq.n	8004b4c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fbe5 	bl	800530e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f92d 	bl	8004da4 <I2C_ITSlaveSeqCplt>
 8004b4a:	e01d      	b.n	8004b88 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b54:	e096      	b.n	8004c84 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <I2C_Slave_ISR_IT+0xe4>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b76:	f040 8085 	bne.w	8004c84 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 facd 	bl	8005120 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b86:	e07d      	b.n	8004c84 <I2C_Slave_ISR_IT+0x1ee>
 8004b88:	e07c      	b.n	8004c84 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d030      	beq.n	8004bf8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02a      	beq.n	8004bf8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d018      	beq.n	8004bde <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d14f      	bne.n	8004c88 <I2C_Slave_ISR_IT+0x1f2>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bee:	d04b      	beq.n	8004c88 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f8d7 	bl	8004da4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004bf6:	e047      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	08db      	lsrs	r3, r3, #3
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c10:	6939      	ldr	r1, [r7, #16]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f842 	bl	8004c9c <I2C_ITAddrCplt>
 8004c18:	e037      	b.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d031      	beq.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02b      	beq.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d018      	beq.n	8004c6e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c6c:	e00d      	b.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c74:	d002      	beq.n	8004c7c <I2C_Slave_ISR_IT+0x1e6>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f891 	bl	8004da4 <I2C_ITSlaveSeqCplt>
 8004c82:	e002      	b.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004c88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb2:	2b28      	cmp	r3, #40	; 0x28
 8004cb4:	d16a      	bne.n	8004d8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d138      	bne.n	8004d6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	89bb      	ldrh	r3, [r7, #12]
 8004d02:	4053      	eors	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f003 0306 	and.w	r3, r3, #6
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11c      	bne.n	8004d48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004d0e:	897b      	ldrh	r3, [r7, #10]
 8004d10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d13b      	bne.n	8004d9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d3a:	89ba      	ldrh	r2, [r7, #12]
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fe7c 	bl	8004a3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d46:	e029      	b.n	8004d9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb1e 	bl	8005392 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d5e:	89ba      	ldrh	r2, [r7, #12]
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fe6a 	bl	8004a3e <HAL_I2C_AddrCallback>
}
 8004d6a:	e017      	b.n	8004d9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb0e 	bl	8005392 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d7e:	89ba      	ldrh	r2, [r7, #12]
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fe5a 	bl	8004a3e <HAL_I2C_AddrCallback>
}
 8004d8a:	e007      	b.n	8004d9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	0b9b      	lsrs	r3, r3, #14
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e00d      	b.n	8004df6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	0bdb      	lsrs	r3, r3, #15
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004df4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b29      	cmp	r3, #41	; 0x29
 8004e00:	d112      	bne.n	8004e28 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2228      	movs	r2, #40	; 0x28
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2221      	movs	r2, #33	; 0x21
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e10:	2101      	movs	r1, #1
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fabd 	bl	8005392 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fe02 	bl	8004a2a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e26:	e017      	b.n	8004e58 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b2a      	cmp	r3, #42	; 0x2a
 8004e32:	d111      	bne.n	8004e58 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2228      	movs	r2, #40	; 0x28
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2222      	movs	r2, #34	; 0x22
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e42:	2102      	movs	r1, #2
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 faa4 	bl	8005392 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f00f faf2 	bl	801443c <HAL_I2C_SlaveRxCpltCallback>
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b21      	cmp	r3, #33	; 0x21
 8004e8a:	d002      	beq.n	8004e92 <I2C_ITSlaveCplt+0x32>
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b29      	cmp	r3, #41	; 0x29
 8004e90:	d108      	bne.n	8004ea4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e92:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa7b 	bl	8005392 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2221      	movs	r2, #33	; 0x21
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea2:	e00d      	b.n	8004ec0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b22      	cmp	r3, #34	; 0x22
 8004ea8:	d002      	beq.n	8004eb0 <I2C_ITSlaveCplt+0x50>
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b2a      	cmp	r3, #42	; 0x2a
 8004eae:	d107      	bne.n	8004ec0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004eb0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa6c 	bl	8005392 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2222      	movs	r2, #34	; 0x22
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ece:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b64      	ldr	r3, [pc, #400]	; (800506c <I2C_ITSlaveCplt+0x20c>)
 8004edc:	400b      	ands	r3, r1
 8004ede:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa14 	bl	800530e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	0b9b      	lsrs	r3, r3, #14
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d013      	beq.n	8004f1a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d020      	beq.n	8004f4c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f18:	e018      	b.n	8004f4c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	0bdb      	lsrs	r3, r3, #15
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	089b      	lsrs	r3, r3, #2
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d020      	beq.n	8004f9a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	f043 0204 	orr.w	r2, r3, #4
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d010      	beq.n	8004fe8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8a7 	bl	8005120 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b28      	cmp	r3, #40	; 0x28
 8004fdc:	d141      	bne.n	8005062 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f847 	bl	8005074 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe6:	e03c      	b.n	8005062 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff0:	d014      	beq.n	800501c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fed6 	bl	8004da4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <I2C_ITSlaveCplt+0x210>)
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fd20 	bl	8004a5a <HAL_I2C_ListenCpltCallback>
}
 800501a:	e022      	b.n	8005062 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	; 0x22
 8005026:	d10e      	bne.n	8005046 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f00f f9fc 	bl	801443c <HAL_I2C_SlaveRxCpltCallback>
}
 8005044:	e00d      	b.n	8005062 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fce4 	bl	8004a2a <HAL_I2C_SlaveTxCpltCallback>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	fe00e800 	.word	0xfe00e800
 8005070:	ffff0000 	.word	0xffff0000

08005074 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <I2C_ITListenCplt+0xa8>)
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d022      	beq.n	80050f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050f2:	f248 0103 	movw	r1, #32771	; 0x8003
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f94b 	bl	8005392 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2210      	movs	r2, #16
 8005102:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fca4 	bl	8004a5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	ffff0000 	.word	0xffff0000

08005120 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a5d      	ldr	r2, [pc, #372]	; (80052b4 <I2C_ITError+0x194>)
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b28      	cmp	r3, #40	; 0x28
 8005156:	d005      	beq.n	8005164 <I2C_ITError+0x44>
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b29      	cmp	r3, #41	; 0x29
 800515c:	d002      	beq.n	8005164 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b2a      	cmp	r3, #42	; 0x2a
 8005162:	d10b      	bne.n	800517c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005164:	2103      	movs	r1, #3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f913 	bl	8005392 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2228      	movs	r2, #40	; 0x28
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a50      	ldr	r2, [pc, #320]	; (80052b8 <I2C_ITError+0x198>)
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
 800517a:	e011      	b.n	80051a0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800517c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f906 	bl	8005392 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b60      	cmp	r3, #96	; 0x60
 8005190:	d003      	beq.n	800519a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d039      	beq.n	8005222 <I2C_ITError+0x102>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b11      	cmp	r3, #17
 80051b2:	d002      	beq.n	80051ba <I2C_ITError+0x9a>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b21      	cmp	r3, #33	; 0x21
 80051b8:	d133      	bne.n	8005222 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c8:	d107      	bne.n	80051da <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd ff4c 	bl	800307c <HAL_DMA_GetState>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d017      	beq.n	800521a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	4a33      	ldr	r2, [pc, #204]	; (80052bc <I2C_ITError+0x19c>)
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd fd90 	bl	8002d24 <HAL_DMA_Abort_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04d      	beq.n	80052a6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005214:	4610      	mov	r0, r2
 8005216:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005218:	e045      	b.n	80052a6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f850 	bl	80052c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005220:	e041      	b.n	80052a6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d039      	beq.n	800529e <I2C_ITError+0x17e>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b12      	cmp	r3, #18
 800522e:	d002      	beq.n	8005236 <I2C_ITError+0x116>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b22      	cmp	r3, #34	; 0x22
 8005234:	d133      	bne.n	800529e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005244:	d107      	bne.n	8005256 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005254:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd ff0e 	bl	800307c <HAL_DMA_GetState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d017      	beq.n	8005296 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	4a14      	ldr	r2, [pc, #80]	; (80052bc <I2C_ITError+0x19c>)
 800526c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd fd52 	bl	8002d24 <HAL_DMA_Abort_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005294:	e009      	b.n	80052aa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f812 	bl	80052c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800529c:	e005      	b.n	80052aa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f80e 	bl	80052c0 <I2C_TreatErrorCallback>
  }
}
 80052a4:	e002      	b.n	80052ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052aa:	bf00      	nop
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	ffff0000 	.word	0xffff0000
 80052b8:	08004a97 	.word	0x08004a97
 80052bc:	08005357 	.word	0x08005357

080052c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b60      	cmp	r3, #96	; 0x60
 80052d2:	d10e      	bne.n	80052f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fbc9 	bl	8004a82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052f0:	e009      	b.n	8005306 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fbb4 	bl	8004a6e <HAL_I2C_ErrorCallback>
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d103      	bne.n	800532c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d007      	beq.n	800534a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	619a      	str	r2, [r3, #24]
  }
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	2200      	movs	r2, #0
 8005372:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	2200      	movs	r2, #0
 8005382:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff9b 	bl	80052c0 <I2C_TreatErrorCallback>
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80053a2:	887b      	ldrh	r3, [r7, #2]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00f      	beq.n	80053cc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80053b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053c0:	2b28      	cmp	r3, #40	; 0x28
 80053c2:	d003      	beq.n	80053cc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053cc:	887b      	ldrh	r3, [r7, #2]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00f      	beq.n	80053f6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80053dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053ea:	2b28      	cmp	r3, #40	; 0x28
 80053ec:	d003      	beq.n	80053f6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da03      	bge.n	8005406 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005406:	887b      	ldrh	r3, [r7, #2]
 8005408:	2b10      	cmp	r3, #16
 800540a:	d103      	bne.n	8005414 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005412:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	2b20      	cmp	r3, #32
 8005418:	d103      	bne.n	8005422 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f043 0320 	orr.w	r3, r3, #32
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005422:	887b      	ldrh	r3, [r7, #2]
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d103      	bne.n	8005430 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	43da      	mvns	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	400a      	ands	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	d138      	bne.n	80054d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800546e:	2302      	movs	r3, #2
 8005470:	e032      	b.n	80054d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2224      	movs	r2, #36	; 0x24
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d139      	bne.n	800556e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005504:	2302      	movs	r3, #2
 8005506:	e033      	b.n	8005570 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005536:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b08f      	sub	sp, #60	; 0x3c
 8005580:	af0a      	add	r7, sp, #40	; 0x28
 8005582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e116      	b.n	80057bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fc f8c9 	bl	8001740 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f004 fb71 	bl	8009cb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	687e      	ldr	r6, [r7, #4]
 80055da:	466d      	mov	r5, sp
 80055dc:	f106 0410 	add.w	r4, r6, #16
 80055e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80055f0:	1d33      	adds	r3, r6, #4
 80055f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055f4:	6838      	ldr	r0, [r7, #0]
 80055f6:	f004 fb05 	bl	8009c04 <USB_CoreInit>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0d7      	b.n	80057bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fb5f 	bl	8009cd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	e04a      	b.n	80056b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	333d      	adds	r3, #61	; 0x3d
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	333c      	adds	r3, #60	; 0x3c
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	b298      	uxth	r0, r3
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3344      	adds	r3, #68	; 0x44
 800565a:	4602      	mov	r2, r0
 800565c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3340      	adds	r3, #64	; 0x40
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3348      	adds	r3, #72	; 0x48
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005686:	7bfa      	ldrb	r2, [r7, #15]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	334c      	adds	r3, #76	; 0x4c
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800569a:	7bfa      	ldrb	r2, [r7, #15]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	3354      	adds	r3, #84	; 0x54
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	3301      	adds	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d3af      	bcc.n	800561e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e044      	b.n	800574e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	3301      	adds	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3b5      	bcc.n	80056c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	687e      	ldr	r6, [r7, #4]
 8005760:	466d      	mov	r5, sp
 8005762:	f106 0410 	add.w	r4, r6, #16
 8005766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800576a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800576c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800576e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005772:	e885 0003 	stmia.w	r5, {r0, r1}
 8005776:	1d33      	adds	r3, r6, #4
 8005778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800577a:	6838      	ldr	r0, [r7, #0]
 800577c:	f004 faf8 	bl	8009d70 <USB_DevInit>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e014      	b.n	80057bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d102      	bne.n	80057b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f80a 	bl	80057c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f004 fcb6 	bl	800a126 <USB_DevDisconnect>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_PCDEx_ActivateLPM+0x44>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	10000003 	.word	0x10000003

0800580c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a04      	ldr	r2, [pc, #16]	; (8005828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581a:	6013      	str	r3, [r2, #0]
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40007000 	.word	0x40007000

0800582c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005834:	2300      	movs	r3, #0
 8005836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e291      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8087 	beq.w	800595e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005850:	4b96      	ldr	r3, [pc, #600]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b04      	cmp	r3, #4
 800585a:	d00c      	beq.n	8005876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800585c:	4b93      	ldr	r3, [pc, #588]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 030c 	and.w	r3, r3, #12
 8005864:	2b08      	cmp	r3, #8
 8005866:	d112      	bne.n	800588e <HAL_RCC_OscConfig+0x62>
 8005868:	4b90      	ldr	r3, [pc, #576]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005874:	d10b      	bne.n	800588e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005876:	4b8d      	ldr	r3, [pc, #564]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d06c      	beq.n	800595c <HAL_RCC_OscConfig+0x130>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d168      	bne.n	800595c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e26b      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x7a>
 8005898:	4b84      	ldr	r3, [pc, #528]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a83      	ldr	r2, [pc, #524]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 800589e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e02e      	b.n	8005904 <HAL_RCC_OscConfig+0xd8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x9c>
 80058ae:	4b7f      	ldr	r3, [pc, #508]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a7e      	ldr	r2, [pc, #504]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b7c      	ldr	r3, [pc, #496]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a7b      	ldr	r2, [pc, #492]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e01d      	b.n	8005904 <HAL_RCC_OscConfig+0xd8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0xc0>
 80058d2:	4b76      	ldr	r3, [pc, #472]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b73      	ldr	r3, [pc, #460]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a72      	ldr	r2, [pc, #456]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0xd8>
 80058ec:	4b6f      	ldr	r3, [pc, #444]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a6e      	ldr	r2, [pc, #440]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6b      	ldr	r2, [pc, #428]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80058fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fc fb0a 	bl	8001f24 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005914:	f7fc fb06 	bl	8001f24 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e21f      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b61      	ldr	r3, [pc, #388]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0xe8>
 8005932:	e014      	b.n	800595e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fc faf6 	bl	8001f24 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800593c:	f7fc faf2 	bl	8001f24 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	; 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e20b      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594e:	4b57      	ldr	r3, [pc, #348]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x110>
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d069      	beq.n	8005a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800596a:	4b50      	ldr	r3, [pc, #320]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005976:	4b4d      	ldr	r3, [pc, #308]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b08      	cmp	r3, #8
 8005980:	d11c      	bne.n	80059bc <HAL_RCC_OscConfig+0x190>
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d116      	bne.n	80059bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_RCC_OscConfig+0x17a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e1df      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a6:	4b41      	ldr	r3, [pc, #260]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	493d      	ldr	r1, [pc, #244]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ba:	e040      	b.n	8005a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d023      	beq.n	8005a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c4:	4b39      	ldr	r3, [pc, #228]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a38      	ldr	r2, [pc, #224]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fc faa8 	bl	8001f24 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d8:	f7fc faa4 	bl	8001f24 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e1bd      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f6:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4929      	ldr	r1, [pc, #164]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]
 8005a0a:	e018      	b.n	8005a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fc fa84 	bl	8001f24 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a20:	f7fc fa80 	bl	8001f24 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e199      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d038      	beq.n	8005abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d019      	beq.n	8005a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5e:	f7fc fa61 	bl	8001f24 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a66:	f7fc fa5d 	bl	8001f24 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e176      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x23a>
 8005a84:	e01a      	b.n	8005abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	4a08      	ldr	r2, [pc, #32]	; (8005aac <HAL_RCC_OscConfig+0x280>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a92:	f7fc fa47 	bl	8001f24 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fc fa43 	bl	8001f24 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d903      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e15c      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
 8005aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab0:	4b91      	ldr	r3, [pc, #580]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ee      	bne.n	8005a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80a4 	beq.w	8005c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aca:	4b8b      	ldr	r3, [pc, #556]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	4b88      	ldr	r3, [pc, #544]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	4a87      	ldr	r2, [pc, #540]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae2:	4b85      	ldr	r3, [pc, #532]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af2:	4b82      	ldr	r3, [pc, #520]	; (8005cfc <HAL_RCC_OscConfig+0x4d0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d118      	bne.n	8005b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005afe:	4b7f      	ldr	r3, [pc, #508]	; (8005cfc <HAL_RCC_OscConfig+0x4d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7e      	ldr	r2, [pc, #504]	; (8005cfc <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fc fa0b 	bl	8001f24 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fc fa07 	bl	8001f24 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b64      	cmp	r3, #100	; 0x64
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e120      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b24:	4b75      	ldr	r3, [pc, #468]	; (8005cfc <HAL_RCC_OscConfig+0x4d0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x31a>
 8005b38:	4b6f      	ldr	r3, [pc, #444]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a6e      	ldr	r2, [pc, #440]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	e02d      	b.n	8005ba2 <HAL_RCC_OscConfig+0x376>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x33c>
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a69      	ldr	r2, [pc, #420]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a66      	ldr	r2, [pc, #408]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x376>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCC_OscConfig+0x35e>
 8005b70:	4b61      	ldr	r3, [pc, #388]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4a60      	ldr	r2, [pc, #384]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b76:	f043 0304 	orr.w	r3, r3, #4
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7c:	4b5e      	ldr	r3, [pc, #376]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	4a5d      	ldr	r2, [pc, #372]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6713      	str	r3, [r2, #112]	; 0x70
 8005b88:	e00b      	b.n	8005ba2 <HAL_RCC_OscConfig+0x376>
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a5a      	ldr	r2, [pc, #360]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6713      	str	r3, [r2, #112]	; 0x70
 8005b96:	4b58      	ldr	r3, [pc, #352]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	4a57      	ldr	r2, [pc, #348]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b9c:	f023 0304 	bic.w	r3, r3, #4
 8005ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d015      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fc f9bb 	bl	8001f24 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc f9b7 	bl	8001f24 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0ce      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ee      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x386>
 8005bd4:	e014      	b.n	8005c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd6:	f7fc f9a5 	bl	8001f24 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bdc:	e00a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fc f9a1 	bl	8001f24 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0b8      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf4:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c06:	4b3c      	ldr	r3, [pc, #240]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	4a3b      	ldr	r2, [pc, #236]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a4 	beq.w	8005d64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1c:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d06b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d149      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a30      	ldr	r2, [pc, #192]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fc f972 	bl	8001f24 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fc f96e 	bl	8001f24 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e087      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c56:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	4313      	orrs	r3, r2
 8005c88:	4a1b      	ldr	r2, [pc, #108]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fc f942 	bl	8001f24 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fc f93e 	bl	8001f24 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e057      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x478>
 8005cc2:	e04f      	b.n	8005d64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fc f928 	bl	8001f24 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fc f924 	bl	8001f24 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e03d      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCC_OscConfig+0x4cc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x4ac>
 8005cf6:	e035      	b.n	8005d64 <HAL_RCC_OscConfig+0x538>
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d00:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_RCC_OscConfig+0x544>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d028      	beq.n	8005d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d121      	bne.n	8005d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d11a      	bne.n	8005d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d111      	bne.n	8005d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40023800 	.word	0x40023800

08005d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0d0      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b6a      	ldr	r3, [pc, #424]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d910      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b67      	ldr	r3, [pc, #412]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 020f 	bic.w	r2, r3, #15
 8005da2:	4965      	ldr	r1, [pc, #404]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b63      	ldr	r3, [pc, #396]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0b8      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d020      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dd4:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4a58      	ldr	r2, [pc, #352]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dec:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4a52      	ldr	r2, [pc, #328]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df8:	4b50      	ldr	r3, [pc, #320]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	494d      	ldr	r1, [pc, #308]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d040      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d107      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1e:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d115      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e07f      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e36:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e073      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e46:	4b3d      	ldr	r3, [pc, #244]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e06b      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f023 0203 	bic.w	r2, r3, #3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4936      	ldr	r1, [pc, #216]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e68:	f7fc f85c 	bl	8001f24 <HAL_GetTick>
 8005e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e70:	f7fc f858 	bl	8001f24 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e053      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 020c 	and.w	r2, r3, #12
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1eb      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d210      	bcs.n	8005ec8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 020f 	bic.w	r2, r3, #15
 8005eae:	4922      	ldr	r1, [pc, #136]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e032      	b.n	8005f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4916      	ldr	r1, [pc, #88]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ef2:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	490e      	ldr	r1, [pc, #56]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f06:	f000 f821 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <HAL_RCC_ClockConfig+0x1c8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	490a      	ldr	r1, [pc, #40]	; (8005f40 <HAL_RCC_ClockConfig+0x1cc>)
 8005f18:	5ccb      	ldrb	r3, [r1, r3]
 8005f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1e:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <HAL_RCC_ClockConfig+0x1d0>)
 8005f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <HAL_RCC_ClockConfig+0x1d4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fb ffb8 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40023c00 	.word	0x40023c00
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	08018298 	.word	0x08018298
 8005f44:	20000000 	.word	0x20000000
 8005f48:	20000004 	.word	0x20000004

08005f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f50:	b094      	sub	sp, #80	; 0x50
 8005f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
 8005f58:	2300      	movs	r3, #0
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f64:	4b79      	ldr	r3, [pc, #484]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d00d      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x40>
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	f200 80e1 	bhi.w	8006138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x34>
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f7e:	e0db      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f80:	4b73      	ldr	r3, [pc, #460]	; (8006150 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f84:	e0db      	b.n	800613e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f86:	4b73      	ldr	r3, [pc, #460]	; (8006154 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f8a:	e0d8      	b.n	800613e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f8c:	4b6f      	ldr	r3, [pc, #444]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f96:	4b6d      	ldr	r3, [pc, #436]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d063      	beq.n	800606a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa2:	4b6a      	ldr	r3, [pc, #424]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	2200      	movs	r2, #0
 8005faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f04f 0100 	mov.w	r1, #0
 8005fca:	0159      	lsls	r1, r3, #5
 8005fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd0:	0150      	lsls	r0, r2, #5
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	1a51      	subs	r1, r2, r1
 8005fda:	6139      	str	r1, [r7, #16]
 8005fdc:	4629      	mov	r1, r5
 8005fde:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	018b      	lsls	r3, r1, #6
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	018a      	lsls	r2, r1, #6
 8005ffe:	4651      	mov	r1, sl
 8006000:	ebb2 0801 	subs.w	r8, r2, r1
 8006004:	4659      	mov	r1, fp
 8006006:	eb63 0901 	sbc.w	r9, r3, r1
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800601a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800601e:	4690      	mov	r8, r2
 8006020:	4699      	mov	r9, r3
 8006022:	4623      	mov	r3, r4
 8006024:	eb18 0303 	adds.w	r3, r8, r3
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	462b      	mov	r3, r5
 800602c:	eb49 0303 	adc.w	r3, r9, r3
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800603e:	4629      	mov	r1, r5
 8006040:	024b      	lsls	r3, r1, #9
 8006042:	4621      	mov	r1, r4
 8006044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006048:	4621      	mov	r1, r4
 800604a:	024a      	lsls	r2, r1, #9
 800604c:	4610      	mov	r0, r2
 800604e:	4619      	mov	r1, r3
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006052:	2200      	movs	r2, #0
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
 8006056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605c:	f7fa f928 	bl	80002b0 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4613      	mov	r3, r2
 8006066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006068:	e058      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606a:	4b38      	ldr	r3, [pc, #224]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	2200      	movs	r2, #0
 8006072:	4618      	mov	r0, r3
 8006074:	4611      	mov	r1, r2
 8006076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800607a:	623b      	str	r3, [r7, #32]
 800607c:	2300      	movs	r3, #0
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	f04f 0000 	mov.w	r0, #0
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	0159      	lsls	r1, r3, #5
 8006092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006096:	0150      	lsls	r0, r2, #5
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4641      	mov	r1, r8
 800609e:	ebb2 0a01 	subs.w	sl, r2, r1
 80060a2:	4649      	mov	r1, r9
 80060a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060bc:	ebb2 040a 	subs.w	r4, r2, sl
 80060c0:	eb63 050b 	sbc.w	r5, r3, fp
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	00eb      	lsls	r3, r5, #3
 80060ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060d2:	00e2      	lsls	r2, r4, #3
 80060d4:	4614      	mov	r4, r2
 80060d6:	461d      	mov	r5, r3
 80060d8:	4643      	mov	r3, r8
 80060da:	18e3      	adds	r3, r4, r3
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	464b      	mov	r3, r9
 80060e0:	eb45 0303 	adc.w	r3, r5, r3
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060f2:	4629      	mov	r1, r5
 80060f4:	028b      	lsls	r3, r1, #10
 80060f6:	4621      	mov	r1, r4
 80060f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060fc:	4621      	mov	r1, r4
 80060fe:	028a      	lsls	r2, r1, #10
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006106:	2200      	movs	r2, #0
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	61fa      	str	r2, [r7, #28]
 800610c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006110:	f7fa f8ce 	bl	80002b0 <__aeabi_uldivmod>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4613      	mov	r3, r2
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCC_GetSysClockFreq+0x200>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	3301      	adds	r3, #1
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800612c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006136:	e002      	b.n	800613e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_RCC_GetSysClockFreq+0x204>)
 800613a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800613c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800613e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006140:	4618      	mov	r0, r3
 8006142:	3750      	adds	r7, #80	; 0x50
 8006144:	46bd      	mov	sp, r7
 8006146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800
 8006150:	00f42400 	.word	0x00f42400
 8006154:	007a1200 	.word	0x007a1200

08006158 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCC_GetHCLKFreq+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000000 	.word	0x20000000

08006170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006174:	f7ff fff0 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	0a9b      	lsrs	r3, r3, #10
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	4903      	ldr	r1, [pc, #12]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006186:	5ccb      	ldrb	r3, [r1, r3]
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40023800 	.word	0x40023800
 8006194:	080182a8 	.word	0x080182a8

08006198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800619c:	f7ff ffdc 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0b5b      	lsrs	r3, r3, #13
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4903      	ldr	r1, [pc, #12]	; (80061bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40023800 	.word	0x40023800
 80061bc:	080182a8 	.word	0x080182a8

080061c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d012      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061e8:	4b69      	ldr	r3, [pc, #420]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a68      	ldr	r2, [pc, #416]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061f2:	6093      	str	r3, [r2, #8]
 80061f4:	4b66      	ldr	r3, [pc, #408]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	4964      	ldr	r1, [pc, #400]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800620a:	2301      	movs	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d017      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800621a:	4b5d      	ldr	r3, [pc, #372]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	4959      	ldr	r1, [pc, #356]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006238:	d101      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d017      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006256:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800625c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	494a      	ldr	r1, [pc, #296]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006274:	d101      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006276:	2301      	movs	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006282:	2301      	movs	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006292:	2301      	movs	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 808b 	beq.w	80063ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a4:	4b3a      	ldr	r3, [pc, #232]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	4a39      	ldr	r2, [pc, #228]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ae:	6413      	str	r3, [r2, #64]	; 0x40
 80062b0:	4b37      	ldr	r3, [pc, #220]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a34      	ldr	r2, [pc, #208]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c8:	f7fb fe2c 	bl	8001f24 <HAL_GetTick>
 80062cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d0:	f7fb fe28 	bl	8001f24 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	; 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e357      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80062e2:	4b2c      	ldr	r3, [pc, #176]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ee:	4b28      	ldr	r3, [pc, #160]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d035      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d02e      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800630c:	4b20      	ldr	r3, [pc, #128]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800632e:	4a18      	ldr	r2, [pc, #96]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006334:	4b16      	ldr	r3, [pc, #88]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b01      	cmp	r3, #1
 800633e:	d114      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fb fdf0 	bl	8001f24 <HAL_GetTick>
 8006344:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006346:	e00a      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fb fdec 	bl	8001f24 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e319      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0ee      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006376:	d111      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006386:	400b      	ands	r3, r1
 8006388:	4901      	ldr	r1, [pc, #4]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	e00b      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006390:	40023800 	.word	0x40023800
 8006394:	40007000 	.word	0x40007000
 8006398:	0ffffcff 	.word	0x0ffffcff
 800639c:	4baa      	ldr	r3, [pc, #680]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4aa9      	ldr	r2, [pc, #676]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063a6:	6093      	str	r3, [r2, #8]
 80063a8:	4ba7      	ldr	r3, [pc, #668]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b4:	49a4      	ldr	r1, [pc, #656]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d010      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063c6:	4ba0      	ldr	r3, [pc, #640]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063cc:	4a9e      	ldr	r2, [pc, #632]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063d6:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	4999      	ldr	r1, [pc, #612]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f4:	4b94      	ldr	r3, [pc, #592]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006402:	4991      	ldr	r1, [pc, #580]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006416:	4b8c      	ldr	r3, [pc, #560]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006424:	4988      	ldr	r1, [pc, #544]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006438:	4b83      	ldr	r3, [pc, #524]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006446:	4980      	ldr	r1, [pc, #512]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4977      	ldr	r1, [pc, #476]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800647c:	4b72      	ldr	r3, [pc, #456]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f023 0203 	bic.w	r2, r3, #3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	496f      	ldr	r1, [pc, #444]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f023 020c 	bic.w	r2, r3, #12
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ac:	4966      	ldr	r1, [pc, #408]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064c0:	4b61      	ldr	r3, [pc, #388]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	495e      	ldr	r1, [pc, #376]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064e2:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	4955      	ldr	r1, [pc, #340]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006504:	4b50      	ldr	r3, [pc, #320]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	494d      	ldr	r1, [pc, #308]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006526:	4b48      	ldr	r3, [pc, #288]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	4944      	ldr	r1, [pc, #272]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006548:	4b3f      	ldr	r3, [pc, #252]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	493c      	ldr	r1, [pc, #240]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006578:	4933      	ldr	r1, [pc, #204]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800658c:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659a:	492b      	ldr	r1, [pc, #172]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065ae:	4b26      	ldr	r3, [pc, #152]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065bc:	4922      	ldr	r1, [pc, #136]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065cc:	d101      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80065ce:	2301      	movs	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065ee:	4b16      	ldr	r3, [pc, #88]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fc:	4912      	ldr	r1, [pc, #72]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006610:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006620:	4909      	ldr	r1, [pc, #36]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d006      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80d9 	beq.w	80067ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800663c:	4b02      	ldr	r3, [pc, #8]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a01      	ldr	r2, [pc, #4]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006646:	e001      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006648:	40023800 	.word	0x40023800
 800664c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800664e:	f7fb fc69 	bl	8001f24 <HAL_GetTick>
 8006652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006654:	e008      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006656:	f7fb fc65 	bl	8001f24 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b64      	cmp	r3, #100	; 0x64
 8006662:	d901      	bls.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e194      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006668:	4b6c      	ldr	r3, [pc, #432]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d021      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006688:	4b64      	ldr	r3, [pc, #400]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006696:	4b61      	ldr	r3, [pc, #388]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	019a      	lsls	r2, r3, #6
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	061b      	lsls	r3, r3, #24
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	071b      	lsls	r3, r3, #28
 80066bc:	4957      	ldr	r1, [pc, #348]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d8:	d00a      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02e      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ee:	d129      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066f0:	4b4a      	ldr	r3, [pc, #296]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066fe:	4b47      	ldr	r3, [pc, #284]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006704:	0f1b      	lsrs	r3, r3, #28
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	019a      	lsls	r2, r3, #6
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	061b      	lsls	r3, r3, #24
 800671e:	431a      	orrs	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	071b      	lsls	r3, r3, #28
 8006724:	493d      	ldr	r1, [pc, #244]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800672c:	4b3b      	ldr	r3, [pc, #236]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800672e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006732:	f023 021f 	bic.w	r2, r3, #31
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	3b01      	subs	r3, #1
 800673c:	4937      	ldr	r1, [pc, #220]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01d      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006750:	4b32      	ldr	r3, [pc, #200]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006756:	0e1b      	lsrs	r3, r3, #24
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800675e:	4b2f      	ldr	r3, [pc, #188]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006764:	0f1b      	lsrs	r3, r3, #28
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	019a      	lsls	r2, r3, #6
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	431a      	orrs	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	061b      	lsls	r3, r3, #24
 800677e:	431a      	orrs	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	071b      	lsls	r3, r3, #28
 8006784:	4925      	ldr	r1, [pc, #148]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d011      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	019a      	lsls	r2, r3, #6
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	061b      	lsls	r3, r3, #24
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	071b      	lsls	r3, r3, #28
 80067b4:	4919      	ldr	r1, [pc, #100]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067bc:	4b17      	ldr	r3, [pc, #92]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a16      	ldr	r2, [pc, #88]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c8:	f7fb fbac 	bl	8001f24 <HAL_GetTick>
 80067cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067d0:	f7fb fba8 	bl	8001f24 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e0d7      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	f040 80cd 	bne.w	8006990 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006802:	f7fb fb8f 	bl	8001f24 <HAL_GetTick>
 8006806:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006808:	e00a      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800680a:	f7fb fb8b 	bl	8001f24 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b64      	cmp	r3, #100	; 0x64
 8006816:	d903      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0ba      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800681c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006820:	4b5e      	ldr	r3, [pc, #376]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d0ed      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800684a:	2b00      	cmp	r3, #0
 800684c:	d02e      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d12a      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006856:	4b51      	ldr	r3, [pc, #324]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006864:	4b4d      	ldr	r3, [pc, #308]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	0f1b      	lsrs	r3, r3, #28
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	019a      	lsls	r2, r3, #6
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	061b      	lsls	r3, r3, #24
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	071b      	lsls	r3, r3, #28
 800688a:	4944      	ldr	r1, [pc, #272]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006892:	4b42      	ldr	r3, [pc, #264]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006898:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	3b01      	subs	r3, #1
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	493d      	ldr	r1, [pc, #244]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d022      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c0:	d11d      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068c2:	4b36      	ldr	r3, [pc, #216]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068d0:	4b32      	ldr	r3, [pc, #200]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	0f1b      	lsrs	r3, r3, #28
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	019a      	lsls	r2, r3, #6
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	431a      	orrs	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	431a      	orrs	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	071b      	lsls	r3, r3, #28
 80068f6:	4929      	ldr	r1, [pc, #164]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d028      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	0e1b      	lsrs	r3, r3, #24
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006918:	4b20      	ldr	r3, [pc, #128]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	019a      	lsls	r2, r3, #6
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	041b      	lsls	r3, r3, #16
 8006930:	431a      	orrs	r2, r3
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	061b      	lsls	r3, r3, #24
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	071b      	lsls	r3, r3, #28
 800693e:	4917      	ldr	r1, [pc, #92]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	4911      	ldr	r1, [pc, #68]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0e      	ldr	r2, [pc, #56]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006968:	f7fb fadc 	bl	8001f24 <HAL_GetTick>
 800696c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006970:	f7fb fad8 	bl	8001f24 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	; 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e007      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800698a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698e:	d1ef      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023800 	.word	0x40023800

080069a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e09d      	b.n	8006aee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d009      	beq.n	80069d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	61da      	str	r2, [r3, #28]
 80069ca:	e005      	b.n	80069d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fa fc38 	bl	8001268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a18:	d902      	bls.n	8006a20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e002      	b.n	8006a26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a2e:	d007      	beq.n	8006a40 <HAL_SPI_Init+0xa0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a38:	d002      	beq.n	8006a40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a82:	ea42 0103 	orr.w	r1, r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	f003 0204 	and.w	r2, r3, #4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006abc:	ea42 0103 	orr.w	r1, r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b088      	sub	sp, #32
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_SPI_Transmit+0x22>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e158      	b.n	8006dca <HAL_SPI_Transmit+0x2d4>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b20:	f7fb fa00 	bl	8001f24 <HAL_GetTick>
 8006b24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d002      	beq.n	8006b3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b3a:	e13d      	b.n	8006db8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_SPI_Transmit+0x52>
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b4c:	e134      	b.n	8006db8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2203      	movs	r2, #3
 8006b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	88fa      	ldrh	r2, [r7, #6]
 8006b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b98:	d10f      	bne.n	8006bba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d007      	beq.n	8006bd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006be0:	d94b      	bls.n	8006c7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_SPI_Transmit+0xfa>
 8006bea:	8afb      	ldrh	r3, [r7, #22]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d13e      	bne.n	8006c6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	881a      	ldrh	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	1c9a      	adds	r2, r3, #2
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c14:	e02b      	b.n	8006c6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d112      	bne.n	8006c4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	881a      	ldrh	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	1c9a      	adds	r2, r3, #2
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c48:	e011      	b.n	8006c6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4a:	f7fb f96b 	bl	8001f24 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d803      	bhi.n	8006c62 <HAL_SPI_Transmit+0x16c>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d102      	bne.n	8006c68 <HAL_SPI_Transmit+0x172>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c6c:	e0a4      	b.n	8006db8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1ce      	bne.n	8006c16 <HAL_SPI_Transmit+0x120>
 8006c78:	e07c      	b.n	8006d74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_SPI_Transmit+0x192>
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d170      	bne.n	8006d6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d912      	bls.n	8006cb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	881a      	ldrh	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b02      	subs	r3, #2
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cb6:	e058      	b.n	8006d6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006cde:	e044      	b.n	8006d6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d12b      	bne.n	8006d46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d912      	bls.n	8006d1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	1c9a      	adds	r2, r3, #2
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b02      	subs	r3, #2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d1c:	e025      	b.n	8006d6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d44:	e011      	b.n	8006d6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d46:	f7fb f8ed 	bl	8001f24 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d803      	bhi.n	8006d5e <HAL_SPI_Transmit+0x268>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d102      	bne.n	8006d64 <HAL_SPI_Transmit+0x26e>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d68:	e026      	b.n	8006db8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1b5      	bne.n	8006ce0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f001 f8e9 	bl	8007f50 <SPI_EndRxTxTransaction>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e000      	b.n	8006db8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af02      	add	r7, sp, #8
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dee:	d112      	bne.n	8006e16 <HAL_SPI_Receive+0x44>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10e      	bne.n	8006e16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e00:	88fa      	ldrh	r2, [r7, #6]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f910 	bl	8007032 <HAL_SPI_TransmitReceive>
 8006e12:	4603      	mov	r3, r0
 8006e14:	e109      	b.n	800702a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_SPI_Receive+0x52>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e102      	b.n	800702a <HAL_SPI_Receive+0x258>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2c:	f7fb f87a 	bl	8001f24 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d002      	beq.n	8006e44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e42:	e0e9      	b.n	8007018 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SPI_Receive+0x7e>
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e54:	e0e0      	b.n	8007018 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	88fa      	ldrh	r2, [r7, #6]
 8006e76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ea0:	d908      	bls.n	8006eb4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e007      	b.n	8006ec4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ecc:	d10f      	bne.n	8006eee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006edc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d007      	beq.n	8006f0c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f14:	d867      	bhi.n	8006fe6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f16:	e030      	b.n	8006f7a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d117      	bne.n	8006f56 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f103 020c 	add.w	r2, r3, #12
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f54:	e011      	b.n	8006f7a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f56:	f7fa ffe5 	bl	8001f24 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d803      	bhi.n	8006f6e <HAL_SPI_Receive+0x19c>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d102      	bne.n	8006f74 <HAL_SPI_Receive+0x1a2>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f78:	e04e      	b.n	8007018 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1c8      	bne.n	8006f18 <HAL_SPI_Receive+0x146>
 8006f86:	e034      	b.n	8006ff2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d115      	bne.n	8006fc2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fc0:	e011      	b.n	8006fe6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc2:	f7fa ffaf 	bl	8001f24 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d803      	bhi.n	8006fda <HAL_SPI_Receive+0x208>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Receive+0x20e>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fe4:	e018      	b.n	8007018 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ca      	bne.n	8006f88 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 ff2e 	bl	8007e58 <SPI_EndRxTransaction>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
 8007014:	e000      	b.n	8007018 <HAL_SPI_Receive+0x246>
  }

error :
 8007016:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b08a      	sub	sp, #40	; 0x28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007040:	2301      	movs	r3, #1
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_SPI_TransmitReceive+0x26>
 8007054:	2302      	movs	r3, #2
 8007056:	e1fb      	b.n	8007450 <HAL_SPI_TransmitReceive+0x41e>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007060:	f7fa ff60 	bl	8001f24 <HAL_GetTick>
 8007064:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800706c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007074:	887b      	ldrh	r3, [r7, #2]
 8007076:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800707c:	7efb      	ldrb	r3, [r7, #27]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00e      	beq.n	80070a0 <HAL_SPI_TransmitReceive+0x6e>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007088:	d106      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_SPI_TransmitReceive+0x66>
 8007092:	7efb      	ldrb	r3, [r7, #27]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d003      	beq.n	80070a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007098:	2302      	movs	r3, #2
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800709e:	e1cd      	b.n	800743c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_SPI_TransmitReceive+0x80>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <HAL_SPI_TransmitReceive+0x80>
 80070ac:	887b      	ldrh	r3, [r7, #2]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070b8:	e1c0      	b.n	800743c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d003      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2205      	movs	r2, #5
 80070ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	887a      	ldrh	r2, [r7, #2]
 80070de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	887a      	ldrh	r2, [r7, #2]
 80070e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	887a      	ldrh	r2, [r7, #2]
 80070f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	887a      	ldrh	r2, [r7, #2]
 80070fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007110:	d802      	bhi.n	8007118 <HAL_SPI_TransmitReceive+0xe6>
 8007112:	8a3b      	ldrh	r3, [r7, #16]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d908      	bls.n	800712a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	e007      	b.n	800713a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007138:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d007      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007160:	d97c      	bls.n	800725c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SPI_TransmitReceive+0x13e>
 800716a:	8a7b      	ldrh	r3, [r7, #18]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d169      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	881a      	ldrh	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007194:	e056      	b.n	8007244 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d11b      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x1aa>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x1aa>
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d113      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	1c9a      	adds	r2, r3, #2
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11c      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x1f2>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	b292      	uxth	r2, r2
 8007202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	1c9a      	adds	r2, r3, #2
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007220:	2301      	movs	r3, #1
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007224:	f7fa fe7e 	bl	8001f24 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007230:	429a      	cmp	r2, r3
 8007232:	d807      	bhi.n	8007244 <HAL_SPI_TransmitReceive+0x212>
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d003      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007242:	e0fb      	b.n	800743c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1a3      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x164>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d19d      	bne.n	8007196 <HAL_SPI_TransmitReceive+0x164>
 800725a:	e0df      	b.n	800741c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_SPI_TransmitReceive+0x23a>
 8007264:	8a7b      	ldrh	r3, [r7, #18]
 8007266:	2b01      	cmp	r3, #1
 8007268:	f040 80cb 	bne.w	8007402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d912      	bls.n	800729c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	881a      	ldrh	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	1c9a      	adds	r2, r3, #2
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b02      	subs	r3, #2
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800729a:	e0b2      	b.n	8007402 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c2:	e09e      	b.n	8007402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d134      	bne.n	800733c <HAL_SPI_TransmitReceive+0x30a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d02f      	beq.n	800733c <HAL_SPI_TransmitReceive+0x30a>
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d12c      	bne.n	800733c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d912      	bls.n	8007312 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b02      	subs	r3, #2
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007310:	e012      	b.n	8007338 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b01      	cmp	r3, #1
 8007348:	d148      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x3aa>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d042      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	d923      	bls.n	80073aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	b292      	uxth	r2, r2
 800736e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	1c9a      	adds	r2, r3, #2
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b02      	subs	r3, #2
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	d81f      	bhi.n	80073d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	e016      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f103 020c 	add.w	r2, r3, #12
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	7812      	ldrb	r2, [r2, #0]
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073d8:	2301      	movs	r3, #1
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073dc:	f7fa fda2 	bl	8001f24 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d803      	bhi.n	80073f4 <HAL_SPI_TransmitReceive+0x3c2>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f2:	d102      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x3c8>
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007400:	e01c      	b.n	800743c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	f47f af5b 	bne.w	80072c4 <HAL_SPI_TransmitReceive+0x292>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	f47f af54 	bne.w	80072c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fd95 	bl	8007f50 <SPI_EndRxTxTransaction>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d006      	beq.n	800743a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
 8007438:	e000      	b.n	800743c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800743a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800744c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007450:	4618      	mov	r0, r3
 8007452:	3728      	adds	r7, #40	; 0x28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d110      	bne.n	8007494 <HAL_SPI_Receive_IT+0x3c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800747a:	d10b      	bne.n	8007494 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2204      	movs	r2, #4
 8007480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f894 	bl	80075b8 <HAL_SPI_TransmitReceive_IT>
 8007490:	4603      	mov	r3, r0
 8007492:	e089      	b.n	80075a8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_SPI_Receive_IT+0x4a>
 800749e:	2302      	movs	r3, #2
 80074a0:	e082      	b.n	80075a8 <HAL_SPI_Receive_IT+0x150>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d002      	beq.n	80074bc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
 80074b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ba:	e070      	b.n	800759e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_SPI_Receive_IT+0x70>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074cc:	e067      	b.n	800759e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2204      	movs	r2, #4
 80074d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	88fa      	ldrh	r2, [r7, #6]
 80074e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007512:	d90b      	bls.n	800752c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007522:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4a22      	ldr	r2, [pc, #136]	; (80075b0 <HAL_SPI_Receive_IT+0x158>)
 8007528:	64da      	str	r2, [r3, #76]	; 0x4c
 800752a:	e00a      	b.n	8007542 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800753a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <HAL_SPI_Receive_IT+0x15c>)
 8007540:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754a:	d10f      	bne.n	800756c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800756a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800757a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d008      	beq.n	800759c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e000      	b.n	800759e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800759c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	08007bd1 	.word	0x08007bd1
 80075b4:	08007b81 	.word	0x08007b81

080075b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_SPI_TransmitReceive_IT+0x20>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e091      	b.n	80076fc <HAL_SPI_TransmitReceive_IT+0x144>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d00d      	beq.n	8007610 <HAL_SPI_TransmitReceive_IT+0x58>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fa:	d106      	bne.n	800760a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_SPI_TransmitReceive_IT+0x52>
 8007604:	7dbb      	ldrb	r3, [r7, #22]
 8007606:	2b04      	cmp	r3, #4
 8007608:	d002      	beq.n	8007610 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800760a:	2302      	movs	r3, #2
 800760c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800760e:	e070      	b.n	80076f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive_IT+0x6a>
 800761c:	887b      	ldrh	r3, [r7, #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007626:	e064      	b.n	80076f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b04      	cmp	r3, #4
 8007632:	d003      	beq.n	800763c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2205      	movs	r2, #5
 8007638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	887a      	ldrh	r2, [r7, #2]
 8007652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	887a      	ldrh	r2, [r7, #2]
 800765e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007672:	d906      	bls.n	8007682 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a24      	ldr	r2, [pc, #144]	; (8007708 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007678:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a23      	ldr	r2, [pc, #140]	; (800770c <HAL_SPI_TransmitReceive_IT+0x154>)
 800767e:	651a      	str	r2, [r3, #80]	; 0x50
 8007680:	e005      	b.n	800768e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a22      	ldr	r2, [pc, #136]	; (8007710 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007686:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a22      	ldr	r2, [pc, #136]	; (8007714 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800768c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007696:	d802      	bhi.n	800769e <HAL_SPI_TransmitReceive_IT+0xe6>
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d908      	bls.n	80076b0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ac:	605a      	str	r2, [r3, #4]
 80076ae:	e007      	b.n	80076c0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076be:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80076ce:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d008      	beq.n	80076f0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e000      	b.n	80076f2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80076f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	08007abb 	.word	0x08007abb
 800770c:	08007b21 	.word	0x08007b21
 8007710:	0800796b 	.word	0x0800796b
 8007714:	08007a29 	.word	0x08007a29

08007718 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	099b      	lsrs	r3, r3, #6
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10f      	bne.n	800775c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	099b      	lsrs	r3, r3, #6
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
    return;
 800775a:	e0d7      	b.n	800790c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <HAL_SPI_IRQHandler+0x66>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	09db      	lsrs	r3, r3, #7
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
    return;
 800777c:	e0c6      	b.n	800790c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10c      	bne.n	80077a4 <HAL_SPI_IRQHandler+0x8c>
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	099b      	lsrs	r3, r3, #6
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80b4 	beq.w	800790c <HAL_SPI_IRQHandler+0x1f4>
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80ad 	beq.w	800790c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	099b      	lsrs	r3, r3, #6
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d023      	beq.n	8007806 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d011      	beq.n	80077ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ce:	f043 0204 	orr.w	r2, r3, #4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	e00b      	b.n	8007806 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	693b      	ldr	r3, [r7, #16]
        return;
 8007804:	e082      	b.n	800790c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d014      	beq.n	800783c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007816:	f043 0201 	orr.w	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	f043 0208 	orr.w	r2, r3, #8
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007854:	2300      	movs	r3, #0
 8007856:	60bb      	str	r3, [r7, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	60bb      	str	r3, [r7, #8]
 8007860:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007866:	2b00      	cmp	r3, #0
 8007868:	d04f      	beq.n	800790a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007878:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <HAL_SPI_IRQHandler+0x17e>
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d034      	beq.n	8007900 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0203 	bic.w	r2, r2, #3
 80078a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <HAL_SPI_IRQHandler+0x1fc>)
 80078b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fb fa32 	bl	8002d24 <HAL_DMA_Abort_IT>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <HAL_SPI_IRQHandler+0x1fc>)
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fb fa1c 	bl	8002d24 <HAL_DMA_Abort_IT>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80078fe:	e003      	b.n	8007908 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f813 	bl	800792c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007906:	e000      	b.n	800790a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007908:	bf00      	nop
    return;
 800790a:	bf00      	nop
  }
}
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	08007941 	.word	0x08007941

08007918 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff ffe5 	bl	800792c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d923      	bls.n	80079c6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	b292      	uxth	r2, r2
 800798a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	1c9a      	adds	r2, r3, #2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b02      	subs	r3, #2
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d11f      	bne.n	80079f4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079c2:	605a      	str	r2, [r3, #4]
 80079c4:	e016      	b.n	80079f4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f103 020c 	add.w	r2, r3, #12
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	7812      	ldrb	r2, [r2, #0]
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10f      	bne.n	8007a20 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb02 	bl	8008024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d912      	bls.n	8007a60 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	1c9a      	adds	r2, r3, #2
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b02      	subs	r3, #2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a5e:	e012      	b.n	8007a86 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d110      	bne.n	8007ab2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fab9 	bl	8008024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	b292      	uxth	r2, r2
 8007ace:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10f      	bne.n	8007b18 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa86 	bl	8008024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	881a      	ldrh	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	1c9a      	adds	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d110      	bne.n	8007b78 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa56 	bl	8008024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f103 020c 	add.w	r2, r3, #12
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa70 	bl	80080a8 <SPI_CloseRx_ISR>
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	b292      	uxth	r2, r2
 8007be4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	1c9a      	adds	r2, r3, #2
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa4a 	bl	80080a8 <SPI_CloseRx_ISR>
  }
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c2c:	f7fa f97a 	bl	8001f24 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4413      	add	r3, r2
 8007c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c3c:	f7fa f972 	bl	8001f24 <HAL_GetTick>
 8007c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c42:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	015b      	lsls	r3, r3, #5
 8007c48:	0d1b      	lsrs	r3, r3, #20
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c52:	e054      	b.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d050      	beq.n	8007cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c5c:	f7fa f962 	bl	8001f24 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d902      	bls.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d13d      	bne.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8a:	d111      	bne.n	8007cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c94:	d004      	beq.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9e:	d107      	bne.n	8007cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb8:	d10f      	bne.n	8007cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e017      	b.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	bf0c      	ite	eq
 8007d0e:	2301      	moveq	r3, #1
 8007d10:	2300      	movne	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d19b      	bne.n	8007c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000000 	.word	0x20000000

08007d2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d3e:	f7fa f8f1 	bl	8001f24 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d4e:	f7fa f8e9 	bl	8001f24 <HAL_GetTick>
 8007d52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d5c:	4b3d      	ldr	r3, [pc, #244]	; (8007e54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	00da      	lsls	r2, r3, #3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	0d1b      	lsrs	r3, r3, #20
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d74:	e060      	b.n	8007e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d7c:	d107      	bne.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d050      	beq.n	8007e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d96:	f7fa f8c5 	bl	8001f24 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d902      	bls.n	8007dac <SPI_WaitFifoStateUntilTimeout+0x80>
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d13d      	bne.n	8007e28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc4:	d111      	bne.n	8007dea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dce:	d004      	beq.n	8007dda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d107      	bne.n	8007dea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df2:	d10f      	bne.n	8007e14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e010      	b.n	8007e4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d196      	bne.n	8007d76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3728      	adds	r7, #40	; 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000000 	.word	0x20000000

08007e58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e6c:	d111      	bne.n	8007e92 <SPI_EndRxTransaction+0x3a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e76:	d004      	beq.n	8007e82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e80:	d107      	bne.n	8007e92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9a:	d112      	bne.n	8007ec2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff feb8 	bl	8007c1c <SPI_WaitFlagStateUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d021      	beq.n	8007ef6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e03d      	b.n	8007f3e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ec2:	4b21      	ldr	r3, [pc, #132]	; (8007f48 <SPI_EndRxTransaction+0xf0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	; (8007f4c <SPI_EndRxTransaction+0xf4>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	0d5b      	lsrs	r3, r3, #21
 8007ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b80      	cmp	r3, #128	; 0x80
 8007ef0:	d0f2      	beq.n	8007ed8 <SPI_EndRxTransaction+0x80>
 8007ef2:	e000      	b.n	8007ef6 <SPI_EndRxTransaction+0x9e>
        break;
 8007ef4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007efe:	d11d      	bne.n	8007f3c <SPI_EndRxTransaction+0xe4>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f08:	d004      	beq.n	8007f14 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f12:	d113      	bne.n	8007f3c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff ff03 	bl	8007d2c <SPI_WaitFifoStateUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f30:	f043 0220 	orr.w	r2, r3, #32
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e000      	b.n	8007f3e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000000 	.word	0x20000000
 8007f4c:	165e9f81 	.word	0x165e9f81

08007f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fedf 	bl	8007d2c <SPI_WaitFifoStateUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e046      	b.n	8008012 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f84:	4b25      	ldr	r3, [pc, #148]	; (800801c <SPI_EndRxTxTransaction+0xcc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a25      	ldr	r2, [pc, #148]	; (8008020 <SPI_EndRxTxTransaction+0xd0>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	0d5b      	lsrs	r3, r3, #21
 8007f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f94:	fb02 f303 	mul.w	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fa2:	d112      	bne.n	8007fca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2200      	movs	r2, #0
 8007fac:	2180      	movs	r1, #128	; 0x80
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff fe34 	bl	8007c1c <SPI_WaitFlagStateUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d016      	beq.n	8007fe8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbe:	f043 0220 	orr.w	r2, r3, #32
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e023      	b.n	8008012 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d0f2      	beq.n	8007fca <SPI_EndRxTxTransaction+0x7a>
 8007fe4:	e000      	b.n	8007fe8 <SPI_EndRxTxTransaction+0x98>
        break;
 8007fe6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff fe99 	bl	8007d2c <SPI_WaitFifoStateUntilTimeout>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008004:	f043 0220 	orr.w	r2, r3, #32
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e000      	b.n	8008012 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000000 	.word	0x20000000
 8008020:	165e9f81 	.word	0x165e9f81

08008024 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800802c:	f7f9 ff7a 	bl	8001f24 <HAL_GetTick>
 8008030:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0220 	bic.w	r2, r2, #32
 8008040:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	2164      	movs	r1, #100	; 0x64
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff ff82 	bl	8007f50 <SPI_EndRxTxTransaction>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008062:	2b00      	cmp	r3, #0
 8008064:	d115      	bne.n	8008092 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b04      	cmp	r3, #4
 8008070:	d107      	bne.n	8008082 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f00c fa58 	bl	8014530 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008080:	e00e      	b.n	80080a0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff fc44 	bl	8007918 <HAL_SPI_TxRxCpltCallback>
}
 8008090:	e006      	b.n	80080a0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fc46 	bl	800792c <HAL_SPI_ErrorCallback>
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080be:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80080c0:	f7f9 ff30 	bl	8001f24 <HAL_GetTick>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	2164      	movs	r1, #100	; 0x64
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fec4 	bl	8007e58 <SPI_EndRxTransaction>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f00c fa1c 	bl	8014530 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80080f8:	e002      	b.n	8008100 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fc16 	bl	800792c <HAL_SPI_ErrorCallback>
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e049      	b.n	80081ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7f9 f9be 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f000 fa46 	bl	80085d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d122      	bne.n	8008212 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d11b      	bne.n	8008212 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f06f 0202 	mvn.w	r2, #2
 80081e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f9cf 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 80081fe:	e005      	b.n	800820c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f9c1 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9d2 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d122      	bne.n	8008266 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b04      	cmp	r3, #4
 800822c:	d11b      	bne.n	8008266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f06f 0204 	mvn.w	r2, #4
 8008236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f9a5 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 8008252:	e005      	b.n	8008260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f997 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9a8 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b08      	cmp	r3, #8
 8008272:	d122      	bne.n	80082ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b08      	cmp	r3, #8
 8008280:	d11b      	bne.n	80082ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f06f 0208 	mvn.w	r2, #8
 800828a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2204      	movs	r2, #4
 8008290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f97b 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 80082a6:	e005      	b.n	80082b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f96d 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f97e 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d122      	bne.n	800830e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d11b      	bne.n	800830e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0210 	mvn.w	r2, #16
 80082de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2208      	movs	r2, #8
 80082e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f951 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 80082fa:	e005      	b.n	8008308 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f943 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f954 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10e      	bne.n	800833a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d107      	bne.n	800833a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f06f 0201 	mvn.w	r2, #1
 8008332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f00c f8a1 	bl	801447c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008344:	2b80      	cmp	r3, #128	; 0x80
 8008346:	d10e      	bne.n	8008366 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008352:	2b80      	cmp	r3, #128	; 0x80
 8008354:	d107      	bne.n	8008366 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fb0b 	bl	800897c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008374:	d10e      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d107      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800838c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fafe 	bl	8008990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d10e      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d107      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f902 	bl	80085c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d10e      	bne.n	80083ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d107      	bne.n	80083ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0220 	mvn.w	r2, #32
 80083e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fabe 	bl	8008968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_TIM_ConfigClockSource+0x1c>
 800840c:	2302      	movs	r3, #2
 800840e:	e0b4      	b.n	800857a <HAL_TIM_ConfigClockSource+0x186>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	4b56      	ldr	r3, [pc, #344]	; (8008584 <HAL_TIM_ConfigClockSource+0x190>)
 800842c:	4013      	ands	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008448:	d03e      	beq.n	80084c8 <HAL_TIM_ConfigClockSource+0xd4>
 800844a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844e:	f200 8087 	bhi.w	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008456:	f000 8086 	beq.w	8008566 <HAL_TIM_ConfigClockSource+0x172>
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845e:	d87f      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b70      	cmp	r3, #112	; 0x70
 8008462:	d01a      	beq.n	800849a <HAL_TIM_ConfigClockSource+0xa6>
 8008464:	2b70      	cmp	r3, #112	; 0x70
 8008466:	d87b      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b60      	cmp	r3, #96	; 0x60
 800846a:	d050      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x11a>
 800846c:	2b60      	cmp	r3, #96	; 0x60
 800846e:	d877      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b50      	cmp	r3, #80	; 0x50
 8008472:	d03c      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0xfa>
 8008474:	2b50      	cmp	r3, #80	; 0x50
 8008476:	d873      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008478:	2b40      	cmp	r3, #64	; 0x40
 800847a:	d058      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x13a>
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d86f      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b30      	cmp	r3, #48	; 0x30
 8008482:	d064      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x15a>
 8008484:	2b30      	cmp	r3, #48	; 0x30
 8008486:	d86b      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b20      	cmp	r3, #32
 800848a:	d060      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x15a>
 800848c:	2b20      	cmp	r3, #32
 800848e:	d867      	bhi.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d05c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x15a>
 8008494:	2b10      	cmp	r3, #16
 8008496:	d05a      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x15a>
 8008498:	e062      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6899      	ldr	r1, [r3, #8]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f000 f9af 	bl	800880c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	609a      	str	r2, [r3, #8]
      break;
 80084c6:	e04f      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	6899      	ldr	r1, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f000 f998 	bl	800880c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ea:	609a      	str	r2, [r3, #8]
      break;
 80084ec:	e03c      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6859      	ldr	r1, [r3, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f000 f90c 	bl	8008718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2150      	movs	r1, #80	; 0x50
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f965 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 800850c:	e02c      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	f000 f92b 	bl	8008776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2160      	movs	r1, #96	; 0x60
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f955 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 800852c:	e01c      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6859      	ldr	r1, [r3, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	461a      	mov	r2, r3
 800853c:	f000 f8ec 	bl	8008718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2140      	movs	r1, #64	; 0x40
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f945 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 800854c:	e00c      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	f000 f93c 	bl	80087d6 <TIM_ITRx_SetConfig>
      break;
 800855e:	e003      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]
      break;
 8008564:	e000      	b.n	8008568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	fffeff88 	.word	0xfffeff88

08008588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a40      	ldr	r2, [pc, #256]	; (80086ec <TIM_Base_SetConfig+0x114>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <TIM_Base_SetConfig+0x40>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f6:	d00f      	beq.n	8008618 <TIM_Base_SetConfig+0x40>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a3d      	ldr	r2, [pc, #244]	; (80086f0 <TIM_Base_SetConfig+0x118>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00b      	beq.n	8008618 <TIM_Base_SetConfig+0x40>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a3c      	ldr	r2, [pc, #240]	; (80086f4 <TIM_Base_SetConfig+0x11c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_Base_SetConfig+0x40>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a3b      	ldr	r2, [pc, #236]	; (80086f8 <TIM_Base_SetConfig+0x120>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_Base_SetConfig+0x40>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a3a      	ldr	r2, [pc, #232]	; (80086fc <TIM_Base_SetConfig+0x124>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d108      	bne.n	800862a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a2f      	ldr	r2, [pc, #188]	; (80086ec <TIM_Base_SetConfig+0x114>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d02b      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008638:	d027      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a2c      	ldr	r2, [pc, #176]	; (80086f0 <TIM_Base_SetConfig+0x118>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d023      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a2b      	ldr	r2, [pc, #172]	; (80086f4 <TIM_Base_SetConfig+0x11c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d01f      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a2a      	ldr	r2, [pc, #168]	; (80086f8 <TIM_Base_SetConfig+0x120>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01b      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a29      	ldr	r2, [pc, #164]	; (80086fc <TIM_Base_SetConfig+0x124>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d017      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a28      	ldr	r2, [pc, #160]	; (8008700 <TIM_Base_SetConfig+0x128>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a27      	ldr	r2, [pc, #156]	; (8008704 <TIM_Base_SetConfig+0x12c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00f      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a26      	ldr	r2, [pc, #152]	; (8008708 <TIM_Base_SetConfig+0x130>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a25      	ldr	r2, [pc, #148]	; (800870c <TIM_Base_SetConfig+0x134>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d007      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a24      	ldr	r2, [pc, #144]	; (8008710 <TIM_Base_SetConfig+0x138>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a23      	ldr	r2, [pc, #140]	; (8008714 <TIM_Base_SetConfig+0x13c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d108      	bne.n	800869c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <TIM_Base_SetConfig+0x114>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_Base_SetConfig+0xf8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <TIM_Base_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d103      	bne.n	80086d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	615a      	str	r2, [r3, #20]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40000400 	.word	0x40000400
 80086f4:	40000800 	.word	0x40000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	40010400 	.word	0x40010400
 8008700:	40014000 	.word	0x40014000
 8008704:	40014400 	.word	0x40014400
 8008708:	40014800 	.word	0x40014800
 800870c:	40001800 	.word	0x40001800
 8008710:	40001c00 	.word	0x40001c00
 8008714:	40002000 	.word	0x40002000

08008718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f023 0201 	bic.w	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f023 030a 	bic.w	r3, r3, #10
 8008754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	621a      	str	r2, [r3, #32]
}
 800876a:	bf00      	nop
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f023 0210 	bic.w	r2, r3, #16
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	621a      	str	r2, [r3, #32]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f043 0307 	orr.w	r3, r3, #7
 80087f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	609a      	str	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	431a      	orrs	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4313      	orrs	r3, r2
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008860:	2302      	movs	r3, #2
 8008862:	e06d      	b.n	8008940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a30      	ldr	r2, [pc, #192]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2f      	ldr	r2, [pc, #188]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d108      	bne.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800889e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a20      	ldr	r2, [pc, #128]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d022      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d6:	d01d      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d018      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d013      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1a      	ldr	r2, [pc, #104]	; (800895c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00e      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a15      	ldr	r2, [pc, #84]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d009      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a16      	ldr	r2, [pc, #88]	; (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d004      	beq.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d10c      	bne.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	4313      	orrs	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	40010000 	.word	0x40010000
 8008950:	40010400 	.word	0x40010400
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800
 800895c:	40000c00 	.word	0x40000c00
 8008960:	40014000 	.word	0x40014000
 8008964:	40001800 	.word	0x40001800

08008968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e040      	b.n	8008a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f8 fd96 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2224      	movs	r2, #36	; 0x24
 80089d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc66 	bl	80092b4 <UART_SetConfig>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e022      	b.n	8008a38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 febe 	bl	800977c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 ff45 	bl	80098c0 <UART_CheckIdleState>
 8008a36:	4603      	mov	r3, r0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08a      	sub	sp, #40	; 0x28
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d171      	bne.n	8008b3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_UART_Transmit+0x24>
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e06a      	b.n	8008b3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2221      	movs	r2, #33	; 0x21
 8008a74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a76:	f7f9 fa55 	bl	8001f24 <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a94:	d108      	bne.n	8008aa8 <HAL_UART_Transmit+0x68>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	e003      	b.n	8008ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ab0:	e02c      	b.n	8008b0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2180      	movs	r1, #128	; 0x80
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 ff36 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e038      	b.n	8008b3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ae0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	3302      	adds	r3, #2
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	e007      	b.n	8008afa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	3301      	adds	r3, #1
 8008af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1cc      	bne.n	8008ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2140      	movs	r1, #64	; 0x40
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 ff03 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e005      	b.n	8008b3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e000      	b.n	8008b3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008b3c:	2302      	movs	r3, #2
  }
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08a      	sub	sp, #40	; 0x28
 8008b4a:	af02      	add	r7, sp, #8
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	f040 80b1 	bne.w	8008cc4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <HAL_UART_Receive+0x28>
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e0a9      	b.n	8008cc6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2222      	movs	r2, #34	; 0x22
 8008b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b88:	f7f9 f9cc 	bl	8001f24 <HAL_GetTick>
 8008b8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba6:	d10e      	bne.n	8008bc6 <HAL_UART_Receive+0x80>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d105      	bne.n	8008bbc <HAL_UART_Receive+0x76>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bba:	e02d      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	22ff      	movs	r2, #255	; 0xff
 8008bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bc4:	e028      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10d      	bne.n	8008bea <HAL_UART_Receive+0xa4>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <HAL_UART_Receive+0x9a>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	22ff      	movs	r2, #255	; 0xff
 8008bda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bde:	e01b      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	227f      	movs	r2, #127	; 0x7f
 8008be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008be8:	e016      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bf2:	d10d      	bne.n	8008c10 <HAL_UART_Receive+0xca>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <HAL_UART_Receive+0xc0>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	227f      	movs	r2, #127	; 0x7f
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c04:	e008      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	223f      	movs	r2, #63	; 0x3f
 8008c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c0e:	e003      	b.n	8008c18 <HAL_UART_Receive+0xd2>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c28:	d108      	bne.n	8008c3c <HAL_UART_Receive+0xf6>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	e003      	b.n	8008c44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008c44:	e032      	b.n	8008cac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2120      	movs	r1, #32
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fe6c 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e032      	b.n	8008cc6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	8a7b      	ldrh	r3, [r7, #18]
 8008c70:	4013      	ands	r3, r2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	e00c      	b.n	8008c9a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	8a7b      	ldrh	r3, [r7, #18]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1c6      	bne.n	8008c46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e000      	b.n	8008cc6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008cc4:	2302      	movs	r3, #2
  }
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b0ba      	sub	sp, #232	; 0xe8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008cfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8008cfe:	4013      	ands	r3, r2
 8008d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d115      	bne.n	8008d38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00f      	beq.n	8008d38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1c:	f003 0320 	and.w	r3, r3, #32
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8297 	beq.w	800925c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
      }
      return;
 8008d36:	e291      	b.n	800925c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8117 	beq.w	8008f70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008d4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008d52:	4b85      	ldr	r3, [pc, #532]	; (8008f68 <HAL_UART_IRQHandler+0x298>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 810a 	beq.w	8008f70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d011      	beq.n	8008d8c <HAL_UART_IRQHandler+0xbc>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d82:	f043 0201 	orr.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d011      	beq.n	8008dbc <HAL_UART_IRQHandler+0xec>
 8008d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2202      	movs	r2, #2
 8008daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db2:	f043 0204 	orr.w	r2, r3, #4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <HAL_UART_IRQHandler+0x11c>
 8008dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de2:	f043 0202 	orr.w	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2208      	movs	r2, #8
 8008e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1e:	f043 0208 	orr.w	r2, r3, #8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d012      	beq.n	8008e5a <HAL_UART_IRQHandler+0x18a>
 8008e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00c      	beq.n	8008e5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e50:	f043 0220 	orr.w	r2, r3, #32
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 81fd 	beq.w	8009260 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00d      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d005      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008eaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d04f      	beq.n	8008f52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fe01 	bl	8009aba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d141      	bne.n	8008f4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1d9      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d013      	beq.n	8008f42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1e:	4a13      	ldr	r2, [pc, #76]	; (8008f6c <HAL_UART_IRQHandler+0x29c>)
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f9 fefc 	bl	8002d24 <HAL_DMA_Abort_IT>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d017      	beq.n	8008f62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e00f      	b.n	8008f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9a0 	bl	8009288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	e00b      	b.n	8008f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f99c 	bl	8009288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	e007      	b.n	8008f62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f998 	bl	8009288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008f60:	e17e      	b.n	8009260 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f62:	bf00      	nop
    return;
 8008f64:	e17c      	b.n	8009260 <HAL_UART_IRQHandler+0x590>
 8008f66:	bf00      	nop
 8008f68:	04000120 	.word	0x04000120
 8008f6c:	08009b83 	.word	0x08009b83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	f040 814c 	bne.w	8009212 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7e:	f003 0310 	and.w	r3, r3, #16
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8145 	beq.w	8009212 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 813e 	beq.w	8009212 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	f040 80b6 	bne.w	800911a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8150 	beq.w	8009264 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	f080 8148 	bcs.w	8009264 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe8:	f000 8086 	beq.w	80090f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800901a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800902e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1da      	bne.n	8008fec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800905a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800905e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800906c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e1      	bne.n	8009036 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800909c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e3      	bne.n	8009072 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c8:	f023 0310 	bic.w	r3, r3, #16
 80090cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090da:	65bb      	str	r3, [r7, #88]	; 0x58
 80090dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e4      	bne.n	80090b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f9 fda6 	bl	8002c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800910a:	b29b      	uxth	r3, r3
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	b29b      	uxth	r3, r3
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f8c2 	bl	800929c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009118:	e0a4      	b.n	8009264 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009126:	b29b      	uxth	r3, r3
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 8096 	beq.w	8009268 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800913c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 8091 	beq.w	8009268 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800915a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009168:	647b      	str	r3, [r7, #68]	; 0x44
 800916a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800916e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e4      	bne.n	8009146 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3308      	adds	r3, #8
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	623b      	str	r3, [r7, #32]
   return(result);
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091a0:	633a      	str	r2, [r7, #48]	; 0x30
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e3      	bne.n	800917c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f023 0310 	bic.w	r3, r3, #16
 80091dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	69b9      	ldr	r1, [r7, #24]
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	617b      	str	r3, [r7, #20]
   return(result);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e4      	bne.n	80091c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2202      	movs	r2, #2
 8009202:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f846 	bl	800929c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009210:	e02a      	b.n	8009268 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d01c      	beq.n	800926c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
    }
    return;
 800923a:	e017      	b.n	800926c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <HAL_UART_IRQHandler+0x59e>
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00c      	beq.n	800926e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fcaa 	bl	8009bae <UART_EndTransmit_IT>
    return;
 800925a:	e008      	b.n	800926e <HAL_UART_IRQHandler+0x59e>
      return;
 800925c:	bf00      	nop
 800925e:	e006      	b.n	800926e <HAL_UART_IRQHandler+0x59e>
    return;
 8009260:	bf00      	nop
 8009262:	e004      	b.n	800926e <HAL_UART_IRQHandler+0x59e>
      return;
 8009264:	bf00      	nop
 8009266:	e002      	b.n	800926e <HAL_UART_IRQHandler+0x59e>
      return;
 8009268:	bf00      	nop
 800926a:	e000      	b.n	800926e <HAL_UART_IRQHandler+0x59e>
    return;
 800926c:	bf00      	nop
  }

}
 800926e:	37e8      	adds	r7, #232	; 0xe8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4ba6      	ldr	r3, [pc, #664]	; (8009578 <UART_SetConfig+0x2c4>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	6979      	ldr	r1, [r7, #20]
 80092e8:	430b      	orrs	r3, r1
 80092ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a94      	ldr	r2, [pc, #592]	; (800957c <UART_SetConfig+0x2c8>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d120      	bne.n	8009372 <UART_SetConfig+0xbe>
 8009330:	4b93      	ldr	r3, [pc, #588]	; (8009580 <UART_SetConfig+0x2cc>)
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	2b03      	cmp	r3, #3
 800933c:	d816      	bhi.n	800936c <UART_SetConfig+0xb8>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x90>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009355 	.word	0x08009355
 8009348:	08009361 	.word	0x08009361
 800934c:	0800935b 	.word	0x0800935b
 8009350:	08009367 	.word	0x08009367
 8009354:	2301      	movs	r3, #1
 8009356:	77fb      	strb	r3, [r7, #31]
 8009358:	e150      	b.n	80095fc <UART_SetConfig+0x348>
 800935a:	2302      	movs	r3, #2
 800935c:	77fb      	strb	r3, [r7, #31]
 800935e:	e14d      	b.n	80095fc <UART_SetConfig+0x348>
 8009360:	2304      	movs	r3, #4
 8009362:	77fb      	strb	r3, [r7, #31]
 8009364:	e14a      	b.n	80095fc <UART_SetConfig+0x348>
 8009366:	2308      	movs	r3, #8
 8009368:	77fb      	strb	r3, [r7, #31]
 800936a:	e147      	b.n	80095fc <UART_SetConfig+0x348>
 800936c:	2310      	movs	r3, #16
 800936e:	77fb      	strb	r3, [r7, #31]
 8009370:	e144      	b.n	80095fc <UART_SetConfig+0x348>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a83      	ldr	r2, [pc, #524]	; (8009584 <UART_SetConfig+0x2d0>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d132      	bne.n	80093e2 <UART_SetConfig+0x12e>
 800937c:	4b80      	ldr	r3, [pc, #512]	; (8009580 <UART_SetConfig+0x2cc>)
 800937e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009382:	f003 030c 	and.w	r3, r3, #12
 8009386:	2b0c      	cmp	r3, #12
 8009388:	d828      	bhi.n	80093dc <UART_SetConfig+0x128>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <UART_SetConfig+0xdc>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093c5 	.word	0x080093c5
 8009394:	080093dd 	.word	0x080093dd
 8009398:	080093dd 	.word	0x080093dd
 800939c:	080093dd 	.word	0x080093dd
 80093a0:	080093d1 	.word	0x080093d1
 80093a4:	080093dd 	.word	0x080093dd
 80093a8:	080093dd 	.word	0x080093dd
 80093ac:	080093dd 	.word	0x080093dd
 80093b0:	080093cb 	.word	0x080093cb
 80093b4:	080093dd 	.word	0x080093dd
 80093b8:	080093dd 	.word	0x080093dd
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093d7 	.word	0x080093d7
 80093c4:	2300      	movs	r3, #0
 80093c6:	77fb      	strb	r3, [r7, #31]
 80093c8:	e118      	b.n	80095fc <UART_SetConfig+0x348>
 80093ca:	2302      	movs	r3, #2
 80093cc:	77fb      	strb	r3, [r7, #31]
 80093ce:	e115      	b.n	80095fc <UART_SetConfig+0x348>
 80093d0:	2304      	movs	r3, #4
 80093d2:	77fb      	strb	r3, [r7, #31]
 80093d4:	e112      	b.n	80095fc <UART_SetConfig+0x348>
 80093d6:	2308      	movs	r3, #8
 80093d8:	77fb      	strb	r3, [r7, #31]
 80093da:	e10f      	b.n	80095fc <UART_SetConfig+0x348>
 80093dc:	2310      	movs	r3, #16
 80093de:	77fb      	strb	r3, [r7, #31]
 80093e0:	e10c      	b.n	80095fc <UART_SetConfig+0x348>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a68      	ldr	r2, [pc, #416]	; (8009588 <UART_SetConfig+0x2d4>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d120      	bne.n	800942e <UART_SetConfig+0x17a>
 80093ec:	4b64      	ldr	r3, [pc, #400]	; (8009580 <UART_SetConfig+0x2cc>)
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093f6:	2b30      	cmp	r3, #48	; 0x30
 80093f8:	d013      	beq.n	8009422 <UART_SetConfig+0x16e>
 80093fa:	2b30      	cmp	r3, #48	; 0x30
 80093fc:	d814      	bhi.n	8009428 <UART_SetConfig+0x174>
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d009      	beq.n	8009416 <UART_SetConfig+0x162>
 8009402:	2b20      	cmp	r3, #32
 8009404:	d810      	bhi.n	8009428 <UART_SetConfig+0x174>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <UART_SetConfig+0x15c>
 800940a:	2b10      	cmp	r3, #16
 800940c:	d006      	beq.n	800941c <UART_SetConfig+0x168>
 800940e:	e00b      	b.n	8009428 <UART_SetConfig+0x174>
 8009410:	2300      	movs	r3, #0
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e0f2      	b.n	80095fc <UART_SetConfig+0x348>
 8009416:	2302      	movs	r3, #2
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e0ef      	b.n	80095fc <UART_SetConfig+0x348>
 800941c:	2304      	movs	r3, #4
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e0ec      	b.n	80095fc <UART_SetConfig+0x348>
 8009422:	2308      	movs	r3, #8
 8009424:	77fb      	strb	r3, [r7, #31]
 8009426:	e0e9      	b.n	80095fc <UART_SetConfig+0x348>
 8009428:	2310      	movs	r3, #16
 800942a:	77fb      	strb	r3, [r7, #31]
 800942c:	e0e6      	b.n	80095fc <UART_SetConfig+0x348>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a56      	ldr	r2, [pc, #344]	; (800958c <UART_SetConfig+0x2d8>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d120      	bne.n	800947a <UART_SetConfig+0x1c6>
 8009438:	4b51      	ldr	r3, [pc, #324]	; (8009580 <UART_SetConfig+0x2cc>)
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009442:	2bc0      	cmp	r3, #192	; 0xc0
 8009444:	d013      	beq.n	800946e <UART_SetConfig+0x1ba>
 8009446:	2bc0      	cmp	r3, #192	; 0xc0
 8009448:	d814      	bhi.n	8009474 <UART_SetConfig+0x1c0>
 800944a:	2b80      	cmp	r3, #128	; 0x80
 800944c:	d009      	beq.n	8009462 <UART_SetConfig+0x1ae>
 800944e:	2b80      	cmp	r3, #128	; 0x80
 8009450:	d810      	bhi.n	8009474 <UART_SetConfig+0x1c0>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <UART_SetConfig+0x1a8>
 8009456:	2b40      	cmp	r3, #64	; 0x40
 8009458:	d006      	beq.n	8009468 <UART_SetConfig+0x1b4>
 800945a:	e00b      	b.n	8009474 <UART_SetConfig+0x1c0>
 800945c:	2300      	movs	r3, #0
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e0cc      	b.n	80095fc <UART_SetConfig+0x348>
 8009462:	2302      	movs	r3, #2
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e0c9      	b.n	80095fc <UART_SetConfig+0x348>
 8009468:	2304      	movs	r3, #4
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e0c6      	b.n	80095fc <UART_SetConfig+0x348>
 800946e:	2308      	movs	r3, #8
 8009470:	77fb      	strb	r3, [r7, #31]
 8009472:	e0c3      	b.n	80095fc <UART_SetConfig+0x348>
 8009474:	2310      	movs	r3, #16
 8009476:	77fb      	strb	r3, [r7, #31]
 8009478:	e0c0      	b.n	80095fc <UART_SetConfig+0x348>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a44      	ldr	r2, [pc, #272]	; (8009590 <UART_SetConfig+0x2dc>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d125      	bne.n	80094d0 <UART_SetConfig+0x21c>
 8009484:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <UART_SetConfig+0x2cc>)
 8009486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800948e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009492:	d017      	beq.n	80094c4 <UART_SetConfig+0x210>
 8009494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009498:	d817      	bhi.n	80094ca <UART_SetConfig+0x216>
 800949a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800949e:	d00b      	beq.n	80094b8 <UART_SetConfig+0x204>
 80094a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a4:	d811      	bhi.n	80094ca <UART_SetConfig+0x216>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <UART_SetConfig+0x1fe>
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ae:	d006      	beq.n	80094be <UART_SetConfig+0x20a>
 80094b0:	e00b      	b.n	80094ca <UART_SetConfig+0x216>
 80094b2:	2300      	movs	r3, #0
 80094b4:	77fb      	strb	r3, [r7, #31]
 80094b6:	e0a1      	b.n	80095fc <UART_SetConfig+0x348>
 80094b8:	2302      	movs	r3, #2
 80094ba:	77fb      	strb	r3, [r7, #31]
 80094bc:	e09e      	b.n	80095fc <UART_SetConfig+0x348>
 80094be:	2304      	movs	r3, #4
 80094c0:	77fb      	strb	r3, [r7, #31]
 80094c2:	e09b      	b.n	80095fc <UART_SetConfig+0x348>
 80094c4:	2308      	movs	r3, #8
 80094c6:	77fb      	strb	r3, [r7, #31]
 80094c8:	e098      	b.n	80095fc <UART_SetConfig+0x348>
 80094ca:	2310      	movs	r3, #16
 80094cc:	77fb      	strb	r3, [r7, #31]
 80094ce:	e095      	b.n	80095fc <UART_SetConfig+0x348>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a2f      	ldr	r2, [pc, #188]	; (8009594 <UART_SetConfig+0x2e0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d125      	bne.n	8009526 <UART_SetConfig+0x272>
 80094da:	4b29      	ldr	r3, [pc, #164]	; (8009580 <UART_SetConfig+0x2cc>)
 80094dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094e8:	d017      	beq.n	800951a <UART_SetConfig+0x266>
 80094ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094ee:	d817      	bhi.n	8009520 <UART_SetConfig+0x26c>
 80094f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f4:	d00b      	beq.n	800950e <UART_SetConfig+0x25a>
 80094f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094fa:	d811      	bhi.n	8009520 <UART_SetConfig+0x26c>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <UART_SetConfig+0x254>
 8009500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009504:	d006      	beq.n	8009514 <UART_SetConfig+0x260>
 8009506:	e00b      	b.n	8009520 <UART_SetConfig+0x26c>
 8009508:	2301      	movs	r3, #1
 800950a:	77fb      	strb	r3, [r7, #31]
 800950c:	e076      	b.n	80095fc <UART_SetConfig+0x348>
 800950e:	2302      	movs	r3, #2
 8009510:	77fb      	strb	r3, [r7, #31]
 8009512:	e073      	b.n	80095fc <UART_SetConfig+0x348>
 8009514:	2304      	movs	r3, #4
 8009516:	77fb      	strb	r3, [r7, #31]
 8009518:	e070      	b.n	80095fc <UART_SetConfig+0x348>
 800951a:	2308      	movs	r3, #8
 800951c:	77fb      	strb	r3, [r7, #31]
 800951e:	e06d      	b.n	80095fc <UART_SetConfig+0x348>
 8009520:	2310      	movs	r3, #16
 8009522:	77fb      	strb	r3, [r7, #31]
 8009524:	e06a      	b.n	80095fc <UART_SetConfig+0x348>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1b      	ldr	r2, [pc, #108]	; (8009598 <UART_SetConfig+0x2e4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d138      	bne.n	80095a2 <UART_SetConfig+0x2ee>
 8009530:	4b13      	ldr	r3, [pc, #76]	; (8009580 <UART_SetConfig+0x2cc>)
 8009532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009536:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800953a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800953e:	d017      	beq.n	8009570 <UART_SetConfig+0x2bc>
 8009540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009544:	d82a      	bhi.n	800959c <UART_SetConfig+0x2e8>
 8009546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954a:	d00b      	beq.n	8009564 <UART_SetConfig+0x2b0>
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009550:	d824      	bhi.n	800959c <UART_SetConfig+0x2e8>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <UART_SetConfig+0x2aa>
 8009556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955a:	d006      	beq.n	800956a <UART_SetConfig+0x2b6>
 800955c:	e01e      	b.n	800959c <UART_SetConfig+0x2e8>
 800955e:	2300      	movs	r3, #0
 8009560:	77fb      	strb	r3, [r7, #31]
 8009562:	e04b      	b.n	80095fc <UART_SetConfig+0x348>
 8009564:	2302      	movs	r3, #2
 8009566:	77fb      	strb	r3, [r7, #31]
 8009568:	e048      	b.n	80095fc <UART_SetConfig+0x348>
 800956a:	2304      	movs	r3, #4
 800956c:	77fb      	strb	r3, [r7, #31]
 800956e:	e045      	b.n	80095fc <UART_SetConfig+0x348>
 8009570:	2308      	movs	r3, #8
 8009572:	77fb      	strb	r3, [r7, #31]
 8009574:	e042      	b.n	80095fc <UART_SetConfig+0x348>
 8009576:	bf00      	nop
 8009578:	efff69f3 	.word	0xefff69f3
 800957c:	40011000 	.word	0x40011000
 8009580:	40023800 	.word	0x40023800
 8009584:	40004400 	.word	0x40004400
 8009588:	40004800 	.word	0x40004800
 800958c:	40004c00 	.word	0x40004c00
 8009590:	40005000 	.word	0x40005000
 8009594:	40011400 	.word	0x40011400
 8009598:	40007800 	.word	0x40007800
 800959c:	2310      	movs	r3, #16
 800959e:	77fb      	strb	r3, [r7, #31]
 80095a0:	e02c      	b.n	80095fc <UART_SetConfig+0x348>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a72      	ldr	r2, [pc, #456]	; (8009770 <UART_SetConfig+0x4bc>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d125      	bne.n	80095f8 <UART_SetConfig+0x344>
 80095ac:	4b71      	ldr	r3, [pc, #452]	; (8009774 <UART_SetConfig+0x4c0>)
 80095ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095ba:	d017      	beq.n	80095ec <UART_SetConfig+0x338>
 80095bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095c0:	d817      	bhi.n	80095f2 <UART_SetConfig+0x33e>
 80095c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c6:	d00b      	beq.n	80095e0 <UART_SetConfig+0x32c>
 80095c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095cc:	d811      	bhi.n	80095f2 <UART_SetConfig+0x33e>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <UART_SetConfig+0x326>
 80095d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095d6:	d006      	beq.n	80095e6 <UART_SetConfig+0x332>
 80095d8:	e00b      	b.n	80095f2 <UART_SetConfig+0x33e>
 80095da:	2300      	movs	r3, #0
 80095dc:	77fb      	strb	r3, [r7, #31]
 80095de:	e00d      	b.n	80095fc <UART_SetConfig+0x348>
 80095e0:	2302      	movs	r3, #2
 80095e2:	77fb      	strb	r3, [r7, #31]
 80095e4:	e00a      	b.n	80095fc <UART_SetConfig+0x348>
 80095e6:	2304      	movs	r3, #4
 80095e8:	77fb      	strb	r3, [r7, #31]
 80095ea:	e007      	b.n	80095fc <UART_SetConfig+0x348>
 80095ec:	2308      	movs	r3, #8
 80095ee:	77fb      	strb	r3, [r7, #31]
 80095f0:	e004      	b.n	80095fc <UART_SetConfig+0x348>
 80095f2:	2310      	movs	r3, #16
 80095f4:	77fb      	strb	r3, [r7, #31]
 80095f6:	e001      	b.n	80095fc <UART_SetConfig+0x348>
 80095f8:	2310      	movs	r3, #16
 80095fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009604:	d15b      	bne.n	80096be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009606:	7ffb      	ldrb	r3, [r7, #31]
 8009608:	2b08      	cmp	r3, #8
 800960a:	d828      	bhi.n	800965e <UART_SetConfig+0x3aa>
 800960c:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <UART_SetConfig+0x360>)
 800960e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009612:	bf00      	nop
 8009614:	08009639 	.word	0x08009639
 8009618:	08009641 	.word	0x08009641
 800961c:	08009649 	.word	0x08009649
 8009620:	0800965f 	.word	0x0800965f
 8009624:	0800964f 	.word	0x0800964f
 8009628:	0800965f 	.word	0x0800965f
 800962c:	0800965f 	.word	0x0800965f
 8009630:	0800965f 	.word	0x0800965f
 8009634:	08009657 	.word	0x08009657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009638:	f7fc fd9a 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800963c:	61b8      	str	r0, [r7, #24]
        break;
 800963e:	e013      	b.n	8009668 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009640:	f7fc fdaa 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 8009644:	61b8      	str	r0, [r7, #24]
        break;
 8009646:	e00f      	b.n	8009668 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009648:	4b4b      	ldr	r3, [pc, #300]	; (8009778 <UART_SetConfig+0x4c4>)
 800964a:	61bb      	str	r3, [r7, #24]
        break;
 800964c:	e00c      	b.n	8009668 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800964e:	f7fc fc7d 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8009652:	61b8      	str	r0, [r7, #24]
        break;
 8009654:	e008      	b.n	8009668 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800965a:	61bb      	str	r3, [r7, #24]
        break;
 800965c:	e004      	b.n	8009668 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	77bb      	strb	r3, [r7, #30]
        break;
 8009666:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d074      	beq.n	8009758 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	005a      	lsls	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	441a      	add	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009682:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b0f      	cmp	r3, #15
 8009688:	d916      	bls.n	80096b8 <UART_SetConfig+0x404>
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009690:	d212      	bcs.n	80096b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f023 030f 	bic.w	r3, r3, #15
 800969a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	89fa      	ldrh	r2, [r7, #14]
 80096b4:	60da      	str	r2, [r3, #12]
 80096b6:	e04f      	b.n	8009758 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	77bb      	strb	r3, [r7, #30]
 80096bc:	e04c      	b.n	8009758 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096be:	7ffb      	ldrb	r3, [r7, #31]
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d828      	bhi.n	8009716 <UART_SetConfig+0x462>
 80096c4:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <UART_SetConfig+0x418>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	080096f9 	.word	0x080096f9
 80096d4:	08009701 	.word	0x08009701
 80096d8:	08009717 	.word	0x08009717
 80096dc:	08009707 	.word	0x08009707
 80096e0:	08009717 	.word	0x08009717
 80096e4:	08009717 	.word	0x08009717
 80096e8:	08009717 	.word	0x08009717
 80096ec:	0800970f 	.word	0x0800970f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f0:	f7fc fd3e 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 80096f4:	61b8      	str	r0, [r7, #24]
        break;
 80096f6:	e013      	b.n	8009720 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096f8:	f7fc fd4e 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 80096fc:	61b8      	str	r0, [r7, #24]
        break;
 80096fe:	e00f      	b.n	8009720 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <UART_SetConfig+0x4c4>)
 8009702:	61bb      	str	r3, [r7, #24]
        break;
 8009704:	e00c      	b.n	8009720 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009706:	f7fc fc21 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 800970a:	61b8      	str	r0, [r7, #24]
        break;
 800970c:	e008      	b.n	8009720 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800970e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009712:	61bb      	str	r3, [r7, #24]
        break;
 8009714:	e004      	b.n	8009720 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	77bb      	strb	r3, [r7, #30]
        break;
 800971e:	bf00      	nop
    }

    if (pclk != 0U)
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d018      	beq.n	8009758 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	085a      	lsrs	r2, r3, #1
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	441a      	add	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	fbb2 f3f3 	udiv	r3, r2, r3
 8009738:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d909      	bls.n	8009754 <UART_SetConfig+0x4a0>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009746:	d205      	bcs.n	8009754 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	e001      	b.n	8009758 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009764:	7fbb      	ldrb	r3, [r7, #30]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40007c00 	.word	0x40007c00
 8009774:	40023800 	.word	0x40023800
 8009778:	00f42400 	.word	0x00f42400

0800977c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	430a      	orrs	r2, r1
 80097c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00a      	beq.n	80097ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00a      	beq.n	800982e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01a      	beq.n	8009892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800987a:	d10a      	bne.n	8009892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  }
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098d0:	f7f8 fb28 	bl	8001f24 <HAL_GetTick>
 80098d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0308 	and.w	r3, r3, #8
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d10e      	bne.n	8009902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f81b 	bl	800992e <UART_WaitOnFlagUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e011      	b.n	8009926 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2220      	movs	r2, #32
 8009906:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b09c      	sub	sp, #112	; 0x70
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	603b      	str	r3, [r7, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800993e:	e0a7      	b.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	f000 80a3 	beq.w	8009a90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994a:	f7f8 faeb 	bl	8001f24 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009956:	429a      	cmp	r2, r3
 8009958:	d302      	bcc.n	8009960 <UART_WaitOnFlagUntilTimeout+0x32>
 800995a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800995c:	2b00      	cmp	r3, #0
 800995e:	d13f      	bne.n	80099e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800996e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009974:	667b      	str	r3, [r7, #100]	; 0x64
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800997e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009980:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800998c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e6      	bne.n	8009960 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	663b      	str	r3, [r7, #96]	; 0x60
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80099b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e5      	bne.n	8009992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e068      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d050      	beq.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099fc:	d148      	bne.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a26:	637b      	str	r3, [r7, #52]	; 0x34
 8009a28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e6      	bne.n	8009a08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a5a:	623a      	str	r2, [r7, #32]
 8009a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	69f9      	ldr	r1, [r7, #28]
 8009a60:	6a3a      	ldr	r2, [r7, #32]
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e5      	bne.n	8009a3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2220      	movs	r2, #32
 8009a72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e010      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	bf0c      	ite	eq
 8009aa0:	2301      	moveq	r3, #1
 8009aa2:	2300      	movne	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	f43f af48 	beq.w	8009940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3770      	adds	r7, #112	; 0x70
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b095      	sub	sp, #84	; 0x54
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ae2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e6      	bne.n	8009ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3308      	adds	r3, #8
 8009afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3308      	adds	r3, #8
 8009b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e5      	bne.n	8009af4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d118      	bne.n	8009b62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f023 0310 	bic.w	r3, r3, #16
 8009b44:	647b      	str	r3, [r7, #68]	; 0x44
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e6      	bne.n	8009b30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b76:	bf00      	nop
 8009b78:	3754      	adds	r7, #84	; 0x54
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fb71 	bl	8009288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b088      	sub	sp, #32
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bca:	61fb      	str	r3, [r7, #28]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	613b      	str	r3, [r7, #16]
   return(result);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e6      	bne.n	8009bb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fb3d 	bl	8009274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bfa:	bf00      	nop
 8009bfc:	3720      	adds	r7, #32
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c04:	b084      	sub	sp, #16
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	f107 001c 	add.w	r0, r7, #28
 8009c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d120      	bne.n	8009c5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68da      	ldr	r2, [r3, #12]
 8009c2c:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <USB_CoreInit+0xac>)
 8009c2e:	4013      	ands	r3, r2
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d105      	bne.n	8009c52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa96 	bl	800a184 <USB_CoreReset>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
 8009c5c:	e010      	b.n	8009c80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa8a 	bl	800a184 <USB_CoreReset>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d10b      	bne.n	8009c9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f043 0206 	orr.w	r2, r3, #6
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f043 0220 	orr.w	r2, r3, #32
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009caa:	b004      	add	sp, #16
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	ffbdffbf 	.word	0xffbdffbf

08009cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f023 0201 	bic.w	r2, r3, #1
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d115      	bne.n	8009d24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d04:	2001      	movs	r0, #1
 8009d06:	f7f8 f919 	bl	8001f3c <HAL_Delay>
      ms++;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fa29 	bl	800a168 <USB_GetMode>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d01e      	beq.n	8009d5a <USB_SetCurrentMode+0x84>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b31      	cmp	r3, #49	; 0x31
 8009d20:	d9f0      	bls.n	8009d04 <USB_SetCurrentMode+0x2e>
 8009d22:	e01a      	b.n	8009d5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d115      	bne.n	8009d56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d36:	2001      	movs	r0, #1
 8009d38:	f7f8 f900 	bl	8001f3c <HAL_Delay>
      ms++;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fa10 	bl	800a168 <USB_GetMode>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d005      	beq.n	8009d5a <USB_SetCurrentMode+0x84>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b31      	cmp	r3, #49	; 0x31
 8009d52:	d9f0      	bls.n	8009d36 <USB_SetCurrentMode+0x60>
 8009d54:	e001      	b.n	8009d5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e005      	b.n	8009d66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b32      	cmp	r3, #50	; 0x32
 8009d5e:	d101      	bne.n	8009d64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e000      	b.n	8009d66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d70:	b084      	sub	sp, #16
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
 8009d8e:	e009      	b.n	8009da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3340      	adds	r3, #64	; 0x40
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	3301      	adds	r3, #1
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2b0e      	cmp	r3, #14
 8009da8:	d9f2      	bls.n	8009d90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d11c      	bne.n	8009dea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dbe:	f043 0302 	orr.w	r3, r3, #2
 8009dc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	e005      	b.n	8009df6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e08:	4619      	mov	r1, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e10:	461a      	mov	r2, r3
 8009e12:	680b      	ldr	r3, [r1, #0]
 8009e14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d10c      	bne.n	8009e36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d104      	bne.n	8009e2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f965 	bl	800a0f4 <USB_SetDevSpeed>
 8009e2a:	e008      	b.n	8009e3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f960 	bl	800a0f4 <USB_SetDevSpeed>
 8009e34:	e003      	b.n	8009e3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e36:	2103      	movs	r1, #3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f95b 	bl	800a0f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e3e:	2110      	movs	r1, #16
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f8f3 	bl	800a02c <USB_FlushTxFifo>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f91f 	bl	800a094 <USB_FlushRxFifo>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e66:	461a      	mov	r2, r3
 8009e68:	2300      	movs	r3, #0
 8009e6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e72:	461a      	mov	r2, r3
 8009e74:	2300      	movs	r3, #0
 8009e76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2300      	movs	r3, #0
 8009e82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e84:	2300      	movs	r3, #0
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	e043      	b.n	8009f12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ea0:	d118      	bne.n	8009ed4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	e013      	b.n	8009ee6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	e008      	b.n	8009ee6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	461a      	mov	r2, r3
 8009f06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	613b      	str	r3, [r7, #16]
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d3b7      	bcc.n	8009e8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	613b      	str	r3, [r7, #16]
 8009f1e:	e043      	b.n	8009fa8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f36:	d118      	bne.n	8009f6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	e013      	b.n	8009f7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f60:	461a      	mov	r2, r3
 8009f62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e008      	b.n	8009f7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f76:	461a      	mov	r2, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	461a      	mov	r2, r3
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d3b7      	bcc.n	8009f20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009fd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f043 0210 	orr.w	r2, r3, #16
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	699a      	ldr	r2, [r3, #24]
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	; (800a024 <USB_DevInit+0x2b4>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	f043 0208 	orr.w	r2, r3, #8
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d105      	bne.n	800a014 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	699a      	ldr	r2, [r3, #24]
 800a00c:	4b06      	ldr	r3, [pc, #24]	; (800a028 <USB_DevInit+0x2b8>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a020:	b004      	add	sp, #16
 800a022:	4770      	bx	lr
 800a024:	803c3800 	.word	0x803c3800
 800a028:	40000004 	.word	0x40000004

0800a02c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4a13      	ldr	r2, [pc, #76]	; (800a090 <USB_FlushTxFifo+0x64>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d901      	bls.n	800a04c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e01b      	b.n	800a084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	daf2      	bge.n	800a03a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	019b      	lsls	r3, r3, #6
 800a05c:	f043 0220 	orr.w	r2, r3, #32
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a08      	ldr	r2, [pc, #32]	; (800a090 <USB_FlushTxFifo+0x64>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d901      	bls.n	800a076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e006      	b.n	800a084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f003 0320 	and.w	r3, r3, #32
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d0f0      	beq.n	800a064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	00030d40 	.word	0x00030d40

0800a094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <USB_FlushRxFifo+0x5c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d901      	bls.n	800a0b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e018      	b.n	800a0e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	daf2      	bge.n	800a0a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4a08      	ldr	r2, [pc, #32]	; (800a0f0 <USB_FlushRxFifo+0x5c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d901      	bls.n	800a0d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e006      	b.n	800a0e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0310 	and.w	r3, r3, #16
 800a0de:	2b10      	cmp	r3, #16
 800a0e0:	d0f0      	beq.n	800a0c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	00030d40 	.word	0x00030d40

0800a0f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a140:	f023 0303 	bic.w	r3, r3, #3
 800a144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a154:	f043 0302 	orr.w	r3, r3, #2
 800a158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	f003 0301 	and.w	r3, r3, #1
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3301      	adds	r3, #1
 800a194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4a13      	ldr	r2, [pc, #76]	; (800a1e8 <USB_CoreReset+0x64>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d901      	bls.n	800a1a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e01b      	b.n	800a1da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	daf2      	bge.n	800a190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f043 0201 	orr.w	r2, r3, #1
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <USB_CoreReset+0x64>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d901      	bls.n	800a1cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e006      	b.n	800a1da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d0f0      	beq.n	800a1ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	00030d40 	.word	0x00030d40

0800a1ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a1f2:	4b8d      	ldr	r3, [pc, #564]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a1f4:	22c0      	movs	r2, #192	; 0xc0
 800a1f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a1f8:	4b8b      	ldr	r3, [pc, #556]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a1fa:	22a8      	movs	r2, #168	; 0xa8
 800a1fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a1fe:	4b8a      	ldr	r3, [pc, #552]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a200:	2201      	movs	r2, #1
 800a202:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 800a204:	4b88      	ldr	r3, [pc, #544]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a206:	224d      	movs	r2, #77	; 0x4d
 800a208:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a20a:	4b88      	ldr	r3, [pc, #544]	; (800a42c <MX_LWIP_Init+0x240>)
 800a20c:	22ff      	movs	r2, #255	; 0xff
 800a20e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a210:	4b86      	ldr	r3, [pc, #536]	; (800a42c <MX_LWIP_Init+0x240>)
 800a212:	22ff      	movs	r2, #255	; 0xff
 800a214:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a216:	4b85      	ldr	r3, [pc, #532]	; (800a42c <MX_LWIP_Init+0x240>)
 800a218:	22ff      	movs	r2, #255	; 0xff
 800a21a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a21c:	4b83      	ldr	r3, [pc, #524]	; (800a42c <MX_LWIP_Init+0x240>)
 800a21e:	2200      	movs	r2, #0
 800a220:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a222:	4b83      	ldr	r3, [pc, #524]	; (800a430 <MX_LWIP_Init+0x244>)
 800a224:	22c0      	movs	r2, #192	; 0xc0
 800a226:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a228:	4b81      	ldr	r3, [pc, #516]	; (800a430 <MX_LWIP_Init+0x244>)
 800a22a:	22a8      	movs	r2, #168	; 0xa8
 800a22c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a22e:	4b80      	ldr	r3, [pc, #512]	; (800a430 <MX_LWIP_Init+0x244>)
 800a230:	2201      	movs	r2, #1
 800a232:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800a234:	4b7e      	ldr	r3, [pc, #504]	; (800a430 <MX_LWIP_Init+0x244>)
 800a236:	2264      	movs	r2, #100	; 0x64
 800a238:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a23a:	f000 fc7d 	bl	800ab38 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a23e:	4b7a      	ldr	r3, [pc, #488]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	061a      	lsls	r2, r3, #24
 800a244:	4b78      	ldr	r3, [pc, #480]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	041b      	lsls	r3, r3, #16
 800a24a:	431a      	orrs	r2, r3
 800a24c:	4b76      	ldr	r3, [pc, #472]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a24e:	789b      	ldrb	r3, [r3, #2]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	4313      	orrs	r3, r2
 800a254:	4a74      	ldr	r2, [pc, #464]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a256:	78d2      	ldrb	r2, [r2, #3]
 800a258:	4313      	orrs	r3, r2
 800a25a:	061a      	lsls	r2, r3, #24
 800a25c:	4b72      	ldr	r3, [pc, #456]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	0619      	lsls	r1, r3, #24
 800a262:	4b71      	ldr	r3, [pc, #452]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	041b      	lsls	r3, r3, #16
 800a268:	4319      	orrs	r1, r3
 800a26a:	4b6f      	ldr	r3, [pc, #444]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a26c:	789b      	ldrb	r3, [r3, #2]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	430b      	orrs	r3, r1
 800a272:	496d      	ldr	r1, [pc, #436]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a274:	78c9      	ldrb	r1, [r1, #3]
 800a276:	430b      	orrs	r3, r1
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a27e:	431a      	orrs	r2, r3
 800a280:	4b69      	ldr	r3, [pc, #420]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	0619      	lsls	r1, r3, #24
 800a286:	4b68      	ldr	r3, [pc, #416]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	4319      	orrs	r1, r3
 800a28e:	4b66      	ldr	r3, [pc, #408]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	430b      	orrs	r3, r1
 800a296:	4964      	ldr	r1, [pc, #400]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a298:	78c9      	ldrb	r1, [r1, #3]
 800a29a:	430b      	orrs	r3, r1
 800a29c:	0a1b      	lsrs	r3, r3, #8
 800a29e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	4b60      	ldr	r3, [pc, #384]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	0619      	lsls	r1, r3, #24
 800a2aa:	4b5f      	ldr	r3, [pc, #380]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	041b      	lsls	r3, r3, #16
 800a2b0:	4319      	orrs	r1, r3
 800a2b2:	4b5d      	ldr	r3, [pc, #372]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a2b4:	789b      	ldrb	r3, [r3, #2]
 800a2b6:	021b      	lsls	r3, r3, #8
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	495b      	ldr	r1, [pc, #364]	; (800a428 <MX_LWIP_Init+0x23c>)
 800a2bc:	78c9      	ldrb	r1, [r1, #3]
 800a2be:	430b      	orrs	r3, r1
 800a2c0:	0e1b      	lsrs	r3, r3, #24
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	4a5b      	ldr	r2, [pc, #364]	; (800a434 <MX_LWIP_Init+0x248>)
 800a2c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a2c8:	4b58      	ldr	r3, [pc, #352]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	061a      	lsls	r2, r3, #24
 800a2ce:	4b57      	ldr	r3, [pc, #348]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2d0:	785b      	ldrb	r3, [r3, #1]
 800a2d2:	041b      	lsls	r3, r3, #16
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	4b55      	ldr	r3, [pc, #340]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2d8:	789b      	ldrb	r3, [r3, #2]
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	4a53      	ldr	r2, [pc, #332]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2e0:	78d2      	ldrb	r2, [r2, #3]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	061a      	lsls	r2, r3, #24
 800a2e6:	4b51      	ldr	r3, [pc, #324]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	0619      	lsls	r1, r3, #24
 800a2ec:	4b4f      	ldr	r3, [pc, #316]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	4319      	orrs	r1, r3
 800a2f4:	4b4d      	ldr	r3, [pc, #308]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2f6:	789b      	ldrb	r3, [r3, #2]
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	494b      	ldr	r1, [pc, #300]	; (800a42c <MX_LWIP_Init+0x240>)
 800a2fe:	78c9      	ldrb	r1, [r1, #3]
 800a300:	430b      	orrs	r3, r1
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a308:	431a      	orrs	r2, r3
 800a30a:	4b48      	ldr	r3, [pc, #288]	; (800a42c <MX_LWIP_Init+0x240>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	0619      	lsls	r1, r3, #24
 800a310:	4b46      	ldr	r3, [pc, #280]	; (800a42c <MX_LWIP_Init+0x240>)
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	041b      	lsls	r3, r3, #16
 800a316:	4319      	orrs	r1, r3
 800a318:	4b44      	ldr	r3, [pc, #272]	; (800a42c <MX_LWIP_Init+0x240>)
 800a31a:	789b      	ldrb	r3, [r3, #2]
 800a31c:	021b      	lsls	r3, r3, #8
 800a31e:	430b      	orrs	r3, r1
 800a320:	4942      	ldr	r1, [pc, #264]	; (800a42c <MX_LWIP_Init+0x240>)
 800a322:	78c9      	ldrb	r1, [r1, #3]
 800a324:	430b      	orrs	r3, r1
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a32c:	431a      	orrs	r2, r3
 800a32e:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <MX_LWIP_Init+0x240>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	0619      	lsls	r1, r3, #24
 800a334:	4b3d      	ldr	r3, [pc, #244]	; (800a42c <MX_LWIP_Init+0x240>)
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	4319      	orrs	r1, r3
 800a33c:	4b3b      	ldr	r3, [pc, #236]	; (800a42c <MX_LWIP_Init+0x240>)
 800a33e:	789b      	ldrb	r3, [r3, #2]
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	430b      	orrs	r3, r1
 800a344:	4939      	ldr	r1, [pc, #228]	; (800a42c <MX_LWIP_Init+0x240>)
 800a346:	78c9      	ldrb	r1, [r1, #3]
 800a348:	430b      	orrs	r3, r1
 800a34a:	0e1b      	lsrs	r3, r3, #24
 800a34c:	4313      	orrs	r3, r2
 800a34e:	4a3a      	ldr	r2, [pc, #232]	; (800a438 <MX_LWIP_Init+0x24c>)
 800a350:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a352:	4b37      	ldr	r3, [pc, #220]	; (800a430 <MX_LWIP_Init+0x244>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	061a      	lsls	r2, r3, #24
 800a358:	4b35      	ldr	r3, [pc, #212]	; (800a430 <MX_LWIP_Init+0x244>)
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	431a      	orrs	r2, r3
 800a360:	4b33      	ldr	r3, [pc, #204]	; (800a430 <MX_LWIP_Init+0x244>)
 800a362:	789b      	ldrb	r3, [r3, #2]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	4313      	orrs	r3, r2
 800a368:	4a31      	ldr	r2, [pc, #196]	; (800a430 <MX_LWIP_Init+0x244>)
 800a36a:	78d2      	ldrb	r2, [r2, #3]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	061a      	lsls	r2, r3, #24
 800a370:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <MX_LWIP_Init+0x244>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	0619      	lsls	r1, r3, #24
 800a376:	4b2e      	ldr	r3, [pc, #184]	; (800a430 <MX_LWIP_Init+0x244>)
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	041b      	lsls	r3, r3, #16
 800a37c:	4319      	orrs	r1, r3
 800a37e:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <MX_LWIP_Init+0x244>)
 800a380:	789b      	ldrb	r3, [r3, #2]
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	430b      	orrs	r3, r1
 800a386:	492a      	ldr	r1, [pc, #168]	; (800a430 <MX_LWIP_Init+0x244>)
 800a388:	78c9      	ldrb	r1, [r1, #3]
 800a38a:	430b      	orrs	r3, r1
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a392:	431a      	orrs	r2, r3
 800a394:	4b26      	ldr	r3, [pc, #152]	; (800a430 <MX_LWIP_Init+0x244>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	0619      	lsls	r1, r3, #24
 800a39a:	4b25      	ldr	r3, [pc, #148]	; (800a430 <MX_LWIP_Init+0x244>)
 800a39c:	785b      	ldrb	r3, [r3, #1]
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	4319      	orrs	r1, r3
 800a3a2:	4b23      	ldr	r3, [pc, #140]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3a4:	789b      	ldrb	r3, [r3, #2]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	4921      	ldr	r1, [pc, #132]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3ac:	78c9      	ldrb	r1, [r1, #3]
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	4b1d      	ldr	r3, [pc, #116]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	0619      	lsls	r1, r3, #24
 800a3be:	4b1c      	ldr	r3, [pc, #112]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	041b      	lsls	r3, r3, #16
 800a3c4:	4319      	orrs	r1, r3
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3c8:	789b      	ldrb	r3, [r3, #2]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	4918      	ldr	r1, [pc, #96]	; (800a430 <MX_LWIP_Init+0x244>)
 800a3d0:	78c9      	ldrb	r1, [r1, #3]
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	0e1b      	lsrs	r3, r3, #24
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	4a18      	ldr	r2, [pc, #96]	; (800a43c <MX_LWIP_Init+0x250>)
 800a3da:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a3dc:	4b18      	ldr	r3, [pc, #96]	; (800a440 <MX_LWIP_Init+0x254>)
 800a3de:	9302      	str	r3, [sp, #8]
 800a3e0:	4b18      	ldr	r3, [pc, #96]	; (800a444 <MX_LWIP_Init+0x258>)
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4b14      	ldr	r3, [pc, #80]	; (800a43c <MX_LWIP_Init+0x250>)
 800a3ea:	4a13      	ldr	r2, [pc, #76]	; (800a438 <MX_LWIP_Init+0x24c>)
 800a3ec:	4911      	ldr	r1, [pc, #68]	; (800a434 <MX_LWIP_Init+0x248>)
 800a3ee:	4816      	ldr	r0, [pc, #88]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a3f0:	f001 f88e 	bl	800b510 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a3f4:	4814      	ldr	r0, [pc, #80]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a3f6:	f001 fa3d 	bl	800b874 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a3fa:	4b13      	ldr	r3, [pc, #76]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a400:	089b      	lsrs	r3, r3, #2
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a40c:	480e      	ldr	r0, [pc, #56]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a40e:	f001 fa41 	bl	800b894 <netif_set_up>
 800a412:	e002      	b.n	800a41a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a414:	480c      	ldr	r0, [pc, #48]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a416:	f001 faa9 	bl	800b96c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a41a:	490c      	ldr	r1, [pc, #48]	; (800a44c <MX_LWIP_Init+0x260>)
 800a41c:	480a      	ldr	r0, [pc, #40]	; (800a448 <MX_LWIP_Init+0x25c>)
 800a41e:	f001 fb3b 	bl	800ba98 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a422:	bf00      	nop
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20000d38 	.word	0x20000d38
 800a42c:	20000d3c 	.word	0x20000d3c
 800a430:	20000d40 	.word	0x20000d40
 800a434:	20000d2c 	.word	0x20000d2c
 800a438:	20000d30 	.word	0x20000d30
 800a43c:	20000d34 	.word	0x20000d34
 800a440:	08014291 	.word	0x08014291
 800a444:	0800a699 	.word	0x0800a699
 800a448:	20000cf8 	.word	0x20000cf8
 800a44c:	0800a451 	.word	0x0800a451

0800a450 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a470:	4b40      	ldr	r3, [pc, #256]	; (800a574 <low_level_init+0x110>)
 800a472:	4a41      	ldr	r2, [pc, #260]	; (800a578 <low_level_init+0x114>)
 800a474:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a476:	2300      	movs	r3, #0
 800a478:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a47a:	2380      	movs	r3, #128	; 0x80
 800a47c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a47e:	23e1      	movs	r3, #225	; 0xe1
 800a480:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a482:	2300      	movs	r3, #0
 800a484:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a486:	2300      	movs	r3, #0
 800a488:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a48a:	2300      	movs	r3, #0
 800a48c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a48e:	4a39      	ldr	r2, [pc, #228]	; (800a574 <low_level_init+0x110>)
 800a490:	f107 0308 	add.w	r3, r7, #8
 800a494:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a496:	4b37      	ldr	r3, [pc, #220]	; (800a574 <low_level_init+0x110>)
 800a498:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a49c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a49e:	4b35      	ldr	r3, [pc, #212]	; (800a574 <low_level_init+0x110>)
 800a4a0:	4a36      	ldr	r2, [pc, #216]	; (800a57c <low_level_init+0x118>)
 800a4a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a4a4:	4b33      	ldr	r3, [pc, #204]	; (800a574 <low_level_init+0x110>)
 800a4a6:	4a36      	ldr	r2, [pc, #216]	; (800a580 <low_level_init+0x11c>)
 800a4a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a4aa:	4b32      	ldr	r3, [pc, #200]	; (800a574 <low_level_init+0x110>)
 800a4ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a4b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a4b2:	4830      	ldr	r0, [pc, #192]	; (800a574 <low_level_init+0x110>)
 800a4b4:	f7f8 fea2 	bl	80031fc <HAL_ETH_Init>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a4bc:	2238      	movs	r2, #56	; 0x38
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4830      	ldr	r0, [pc, #192]	; (800a584 <low_level_init+0x120>)
 800a4c2:	f00a f8f3 	bl	80146ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <low_level_init+0x120>)
 800a4c8:	2221      	movs	r2, #33	; 0x21
 800a4ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a4cc:	4b2d      	ldr	r3, [pc, #180]	; (800a584 <low_level_init+0x120>)
 800a4ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a4d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a4d4:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <low_level_init+0x120>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a4da:	482b      	ldr	r0, [pc, #172]	; (800a588 <low_level_init+0x124>)
 800a4dc:	f000 fee0 	bl	800b2a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2206      	movs	r2, #6
 800a4e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a4e8:	4b22      	ldr	r3, [pc, #136]	; (800a574 <low_level_init+0x110>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	781a      	ldrb	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a4f4:	4b1f      	ldr	r3, [pc, #124]	; (800a574 <low_level_init+0x110>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	785a      	ldrb	r2, [r3, #1]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a500:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <low_level_init+0x110>)
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	789a      	ldrb	r2, [r3, #2]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a50c:	4b19      	ldr	r3, [pc, #100]	; (800a574 <low_level_init+0x110>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	78da      	ldrb	r2, [r3, #3]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a518:	4b16      	ldr	r3, [pc, #88]	; (800a574 <low_level_init+0x110>)
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	791a      	ldrb	r2, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a524:	4b13      	ldr	r3, [pc, #76]	; (800a574 <low_level_init+0x110>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	795a      	ldrb	r2, [r3, #5]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a536:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a53e:	f043 030a 	orr.w	r3, r3, #10
 800a542:	b2da      	uxtb	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a54a:	4910      	ldr	r1, [pc, #64]	; (800a58c <low_level_init+0x128>)
 800a54c:	4810      	ldr	r0, [pc, #64]	; (800a590 <low_level_init+0x12c>)
 800a54e:	f7f7 fb36 	bl	8001bbe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a552:	480f      	ldr	r0, [pc, #60]	; (800a590 <low_level_init+0x12c>)
 800a554:	f7f7 fb65 	bl	8001c22 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa00 	bl	800a964 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a564:	e001      	b.n	800a56a <low_level_init+0x106>
    Error_Handler();
 800a566:	f7f6 fc31 	bl	8000dcc <Error_Handler>
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	200056d0 	.word	0x200056d0
 800a578:	40028000 	.word	0x40028000
 800a57c:	2000013c 	.word	0x2000013c
 800a580:	2000009c 	.word	0x2000009c
 800a584:	20005780 	.word	0x20005780
 800a588:	080182b8 	.word	0x080182b8
 800a58c:	2000000c 	.word	0x2000000c
 800a590:	200057b8 	.word	0x200057b8

0800a594 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b092      	sub	sp, #72	; 0x48
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a5ac:	f107 030c 	add.w	r3, r7, #12
 800a5b0:	2230      	movs	r2, #48	; 0x30
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00a f879 	bl	80146ac <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	2230      	movs	r2, #48	; 0x30
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f00a f872 	bl	80146ac <memset>

  for(q = p; q != NULL; q = q->next)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a5cc:	e045      	b.n	800a65a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d902      	bls.n	800a5da <low_level_output+0x46>
      return ERR_IF;
 800a5d4:	f06f 030b 	mvn.w	r3, #11
 800a5d8:	e055      	b.n	800a686 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5dc:	6859      	ldr	r1, [r3, #4]
 800a5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	3348      	adds	r3, #72	; 0x48
 800a5ea:	443b      	add	r3, r7
 800a5ec:	3b3c      	subs	r3, #60	; 0x3c
 800a5ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5f2:	895b      	ldrh	r3, [r3, #10]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	3348      	adds	r3, #72	; 0x48
 800a602:	443b      	add	r3, r7
 800a604:	3b38      	subs	r3, #56	; 0x38
 800a606:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a610:	1e5a      	subs	r2, r3, #1
 800a612:	f107 000c 	add.w	r0, r7, #12
 800a616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a618:	460b      	mov	r3, r1
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	440b      	add	r3, r1
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	18c1      	adds	r1, r0, r3
 800a622:	4613      	mov	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	3348      	adds	r3, #72	; 0x48
 800a62c:	443b      	add	r3, r7
 800a62e:	3b34      	subs	r3, #52	; 0x34
 800a630:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a63a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a63c:	4613      	mov	r3, r2
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	3348      	adds	r3, #72	; 0x48
 800a646:	443b      	add	r3, r7
 800a648:	3b34      	subs	r3, #52	; 0x34
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a64e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a650:	3301      	adds	r3, #1
 800a652:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	643b      	str	r3, [r7, #64]	; 0x40
 800a65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1b6      	bne.n	800a5ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	891b      	ldrh	r3, [r3, #8]
 800a664:	461a      	mov	r2, r3
 800a666:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <low_level_output+0xfc>)
 800a668:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <low_level_output+0xfc>)
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a672:	4a07      	ldr	r2, [pc, #28]	; (800a690 <low_level_output+0xfc>)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a678:	2214      	movs	r2, #20
 800a67a:	4905      	ldr	r1, [pc, #20]	; (800a690 <low_level_output+0xfc>)
 800a67c:	4805      	ldr	r0, [pc, #20]	; (800a694 <low_level_output+0x100>)
 800a67e:	f7f8 fef1 	bl	8003464 <HAL_ETH_Transmit>

  return errval;
 800a682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a686:	4618      	mov	r0, r3
 800a688:	3748      	adds	r7, #72	; 0x48
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20005780 	.word	0x20005780
 800a694:	200056d0 	.word	0x200056d0

0800a698 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <ethernetif_init+0x1c>
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <ethernetif_init+0x48>)
 800a6a8:	f240 127b 	movw	r2, #379	; 0x17b
 800a6ac:	490d      	ldr	r1, [pc, #52]	; (800a6e4 <ethernetif_init+0x4c>)
 800a6ae:	480e      	ldr	r0, [pc, #56]	; (800a6e8 <ethernetif_init+0x50>)
 800a6b0:	f00a f804 	bl	80146bc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2273      	movs	r2, #115	; 0x73
 800a6b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2274      	movs	r2, #116	; 0x74
 800a6c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <ethernetif_init+0x54>)
 800a6c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a08      	ldr	r2, [pc, #32]	; (800a6f0 <ethernetif_init+0x58>)
 800a6ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fec7 	bl	800a464 <low_level_init>

  return ERR_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	08015860 	.word	0x08015860
 800a6e4:	0801587c 	.word	0x0801587c
 800a6e8:	0801588c 	.word	0x0801588c
 800a6ec:	08012749 	.word	0x08012749
 800a6f0:	0800a595 	.word	0x0800a595

0800a6f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a700:	68f9      	ldr	r1, [r7, #12]
 800a702:	4807      	ldr	r0, [pc, #28]	; (800a720 <pbuf_free_custom+0x2c>)
 800a704:	f000 feae 	bl	800b464 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <pbuf_free_custom+0x30>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d102      	bne.n	800a716 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <pbuf_free_custom+0x30>)
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]
  }
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	080182b8 	.word	0x080182b8
 800a724:	200056cc 	.word	0x200056cc

0800a728 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a72c:	f7f7 fbfa 	bl	8001f24 <HAL_GetTick>
 800a730:	4603      	mov	r3, r0
}
 800a732:	4618      	mov	r0, r3
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08e      	sub	sp, #56	; 0x38
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	605a      	str	r2, [r3, #4]
 800a74a:	609a      	str	r2, [r3, #8]
 800a74c:	60da      	str	r2, [r3, #12]
 800a74e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a56      	ldr	r2, [pc, #344]	; (800a8b0 <HAL_ETH_MspInit+0x178>)
 800a756:	4293      	cmp	r3, r2
 800a758:	f040 80a6 	bne.w	800a8a8 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a75c:	4b55      	ldr	r3, [pc, #340]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	4a54      	ldr	r2, [pc, #336]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a766:	6313      	str	r3, [r2, #48]	; 0x30
 800a768:	4b52      	ldr	r3, [pc, #328]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a770:	623b      	str	r3, [r7, #32]
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	4b4f      	ldr	r3, [pc, #316]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	4a4e      	ldr	r2, [pc, #312]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a77a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a77e:	6313      	str	r3, [r2, #48]	; 0x30
 800a780:	4b4c      	ldr	r3, [pc, #304]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	4b49      	ldr	r3, [pc, #292]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	4a48      	ldr	r2, [pc, #288]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a796:	6313      	str	r3, [r2, #48]	; 0x30
 800a798:	4b46      	ldr	r3, [pc, #280]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7a4:	4b43      	ldr	r3, [pc, #268]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a8:	4a42      	ldr	r2, [pc, #264]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7aa:	f043 0304 	orr.w	r3, r3, #4
 800a7ae:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b0:	4b40      	ldr	r3, [pc, #256]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7bc:	4b3d      	ldr	r3, [pc, #244]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	4a3c      	ldr	r2, [pc, #240]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7c2:	f043 0301 	orr.w	r3, r3, #1
 800a7c6:	6313      	str	r3, [r2, #48]	; 0x30
 800a7c8:	4b3a      	ldr	r3, [pc, #232]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7d4:	4b37      	ldr	r3, [pc, #220]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d8:	4a36      	ldr	r2, [pc, #216]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7da:	f043 0302 	orr.w	r3, r3, #2
 800a7de:	6313      	str	r3, [r2, #48]	; 0x30
 800a7e0:	4b34      	ldr	r3, [pc, #208]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	f003 0302 	and.w	r3, r3, #2
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7ec:	4b31      	ldr	r3, [pc, #196]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	4a30      	ldr	r2, [pc, #192]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f6:	6313      	str	r3, [r2, #48]	; 0x30
 800a7f8:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <HAL_ETH_MspInit+0x17c>)
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	60bb      	str	r3, [r7, #8]
 800a802:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a804:	2332      	movs	r3, #50	; 0x32
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a808:	2302      	movs	r3, #2
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a810:	2303      	movs	r3, #3
 800a812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a814:	230b      	movs	r3, #11
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81c:	4619      	mov	r1, r3
 800a81e:	4826      	ldr	r0, [pc, #152]	; (800a8b8 <HAL_ETH_MspInit+0x180>)
 800a820:	f7f9 fe0e 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a824:	2386      	movs	r3, #134	; 0x86
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a828:	2302      	movs	r3, #2
 800a82a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a82c:	2300      	movs	r3, #0
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a830:	2303      	movs	r3, #3
 800a832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a834:	230b      	movs	r3, #11
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a83c:	4619      	mov	r1, r3
 800a83e:	481f      	ldr	r0, [pc, #124]	; (800a8bc <HAL_ETH_MspInit+0x184>)
 800a840:	f7f9 fdfe 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a84a:	2302      	movs	r3, #2
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a852:	2303      	movs	r3, #3
 800a854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a856:	230b      	movs	r3, #11
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a85e:	4619      	mov	r1, r3
 800a860:	4817      	ldr	r0, [pc, #92]	; (800a8c0 <HAL_ETH_MspInit+0x188>)
 800a862:	f7f9 fded 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a866:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a86c:	2302      	movs	r3, #2
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a874:	2303      	movs	r3, #3
 800a876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a878:	230b      	movs	r3, #11
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a87c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a880:	4619      	mov	r1, r3
 800a882:	4810      	ldr	r0, [pc, #64]	; (800a8c4 <HAL_ETH_MspInit+0x18c>)
 800a884:	f7f9 fddc 	bl	8004440 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800a888:	2200      	movs	r2, #0
 800a88a:	2100      	movs	r1, #0
 800a88c:	203d      	movs	r0, #61	; 0x3d
 800a88e:	f7f8 f816 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a892:	203d      	movs	r0, #61	; 0x3d
 800a894:	f7f8 f82f 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800a898:	2200      	movs	r2, #0
 800a89a:	2100      	movs	r1, #0
 800a89c:	203e      	movs	r0, #62	; 0x3e
 800a89e:	f7f8 f80e 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a8a2:	203e      	movs	r0, #62	; 0x3e
 800a8a4:	f7f8 f827 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a8a8:	bf00      	nop
 800a8aa:	3738      	adds	r7, #56	; 0x38
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	40028000 	.word	0x40028000
 800a8b4:	40023800 	.word	0x40023800
 800a8b8:	40020800 	.word	0x40020800
 800a8bc:	40020000 	.word	0x40020000
 800a8c0:	40020400 	.word	0x40020400
 800a8c4:	40021800 	.word	0x40021800

0800a8c8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a8cc:	4802      	ldr	r0, [pc, #8]	; (800a8d8 <ETH_PHY_IO_Init+0x10>)
 800a8ce:	f7f9 f95d 	bl	8003b8c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	200056d0 	.word	0x200056d0

0800a8dc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
  return 0;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	4807      	ldr	r0, [pc, #28]	; (800a91c <ETH_PHY_IO_ReadReg+0x30>)
 800a900:	f7f8 ffac 	bl	800385c <HAL_ETH_ReadPHYRegister>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a90a:	f04f 33ff 	mov.w	r3, #4294967295
 800a90e:	e000      	b.n	800a912 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200056d0 	.word	0x200056d0

0800a920 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4807      	ldr	r0, [pc, #28]	; (800a950 <ETH_PHY_IO_WriteReg+0x30>)
 800a934:	f7f8 ffdd 	bl	80038f2 <HAL_ETH_WritePHYRegister>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
 800a942:	e000      	b.n	800a946 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	200056d0 	.word	0x200056d0

0800a954 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a958:	f7f7 fae4 	bl	8001f24 <HAL_GetTick>
 800a95c:	4603      	mov	r3, r0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b0a0      	sub	sp, #128	; 0x80
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a96c:	f107 030c 	add.w	r3, r7, #12
 800a970:	2264      	movs	r2, #100	; 0x64
 800a972:	2100      	movs	r1, #0
 800a974:	4618      	mov	r0, r3
 800a976:	f009 fe99 	bl	80146ac <memset>
  int32_t PHYLinkState = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a982:	2300      	movs	r3, #0
 800a984:	67bb      	str	r3, [r7, #120]	; 0x78
 800a986:	2300      	movs	r3, #0
 800a988:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a98a:	483a      	ldr	r0, [pc, #232]	; (800aa74 <ethernet_link_check_state+0x110>)
 800a98c:	f7f7 f9f1 	bl	8001d72 <LAN8742_GetLinkState>
 800a990:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a998:	089b      	lsrs	r3, r3, #2
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00c      	beq.n	800a9be <ethernet_link_check_state+0x5a>
 800a9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	dc09      	bgt.n	800a9be <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a9aa:	4833      	ldr	r0, [pc, #204]	; (800aa78 <ethernet_link_check_state+0x114>)
 800a9ac:	f7f8 fd01 	bl	80033b2 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 ffdb 	bl	800b96c <netif_set_down>
    netif_set_link_down(netif);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 f83e 	bl	800ba38 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a9bc:	e055      	b.n	800aa6a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d14e      	bne.n	800aa6a <ethernet_link_check_state+0x106>
 800a9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	dd4b      	ble.n	800aa6a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a9d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9d4:	3b02      	subs	r3, #2
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d82a      	bhi.n	800aa30 <ethernet_link_check_state+0xcc>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <ethernet_link_check_state+0x7c>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9f1 	.word	0x0800a9f1
 800a9e4:	0800aa03 	.word	0x0800aa03
 800a9e8:	0800aa13 	.word	0x0800aa13
 800a9ec:	0800aa23 	.word	0x0800aa23
      duplex = ETH_FULLDUPLEX_MODE;
 800a9f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a9f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa00:	e017      	b.n	800aa32 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800aa02:	2300      	movs	r3, #0
 800aa04:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aa06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa10:	e00f      	b.n	800aa32 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800aa12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa16:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa20:	e007      	b.n	800aa32 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aa26:	2300      	movs	r3, #0
 800aa28:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aa2e:	e000      	b.n	800aa32 <ethernet_link_check_state+0xce>
      break;
 800aa30:	bf00      	nop
    if(linkchanged)
 800aa32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d018      	beq.n	800aa6a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aa38:	f107 030c 	add.w	r3, r7, #12
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	480e      	ldr	r0, [pc, #56]	; (800aa78 <ethernet_link_check_state+0x114>)
 800aa40:	f7f8 ffa0 	bl	8003984 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aa44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800aa48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa4a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aa4c:	f107 030c 	add.w	r3, r7, #12
 800aa50:	4619      	mov	r1, r3
 800aa52:	4809      	ldr	r0, [pc, #36]	; (800aa78 <ethernet_link_check_state+0x114>)
 800aa54:	f7f9 f880 	bl	8003b58 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800aa58:	4807      	ldr	r0, [pc, #28]	; (800aa78 <ethernet_link_check_state+0x114>)
 800aa5a:	f7f8 fc4b 	bl	80032f4 <HAL_ETH_Start>
      netif_set_up(netif);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 ff18 	bl	800b894 <netif_set_up>
      netif_set_link_up(netif);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 ffb3 	bl	800b9d0 <netif_set_link_up>
}
 800aa6a:	bf00      	nop
 800aa6c:	3780      	adds	r7, #128	; 0x80
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	200057b8 	.word	0x200057b8
 800aa78:	200056d0 	.word	0x200056d0

0800aa7c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aa84:	4812      	ldr	r0, [pc, #72]	; (800aad0 <HAL_ETH_RxAllocateCallback+0x54>)
 800aa86:	f000 fc7f 	bl	800b388 <memp_malloc_pool>
 800aa8a:	60f8      	str	r0, [r7, #12]
  if (p)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d014      	beq.n	800aabc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f103 0220 	add.w	r2, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4a0d      	ldr	r2, [pc, #52]	; (800aad4 <HAL_ETH_RxAllocateCallback+0x58>)
 800aaa0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2241      	movs	r2, #65	; 0x41
 800aab2:	2100      	movs	r1, #0
 800aab4:	2000      	movs	r0, #0
 800aab6:	f001 f995 	bl	800bde4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800aaba:	e005      	b.n	800aac8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	080182b8 	.word	0x080182b8
 800aad4:	0800a6f5 	.word	0x0800a6f5
 800aad8:	200056cc 	.word	0x200056cc

0800aadc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	b21a      	sxth	r2, r3
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	b21b      	sxth	r3, r3
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	b21b      	sxth	r3, r3
 800aaf8:	b29b      	uxth	r3, r3
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	061a      	lsls	r2, r3, #24
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	0a1b      	lsrs	r3, r3, #8
 800ab20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	0e1b      	lsrs	r3, r3, #24
 800ab2a:	4313      	orrs	r3, r2
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ab42:	f000 f8d5 	bl	800acf0 <mem_init>
  memp_init();
 800ab46:	f000 fbdb 	bl	800b300 <memp_init>
  pbuf_init();
  netif_init();
 800ab4a:	f000 fcd9 	bl	800b500 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ab4e:	f006 fff5 	bl	8011b3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ab52:	f001 fd8f 	bl	800c674 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ab56:	f006 ffa9 	bl	8011aac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ab6e:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <ptr_to_mem+0x20>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	4413      	add	r3, r2
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	20005e44 	.word	0x20005e44

0800ab88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <mem_to_ptr+0x20>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	b29b      	uxth	r3, r3
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	20005e44 	.word	0x20005e44

0800abac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800abb4:	4b45      	ldr	r3, [pc, #276]	; (800accc <plug_holes+0x120>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d206      	bcs.n	800abcc <plug_holes+0x20>
 800abbe:	4b44      	ldr	r3, [pc, #272]	; (800acd0 <plug_holes+0x124>)
 800abc0:	f240 12df 	movw	r2, #479	; 0x1df
 800abc4:	4943      	ldr	r1, [pc, #268]	; (800acd4 <plug_holes+0x128>)
 800abc6:	4844      	ldr	r0, [pc, #272]	; (800acd8 <plug_holes+0x12c>)
 800abc8:	f009 fd78 	bl	80146bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800abcc:	4b43      	ldr	r3, [pc, #268]	; (800acdc <plug_holes+0x130>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d306      	bcc.n	800abe4 <plug_holes+0x38>
 800abd6:	4b3e      	ldr	r3, [pc, #248]	; (800acd0 <plug_holes+0x124>)
 800abd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800abdc:	4940      	ldr	r1, [pc, #256]	; (800ace0 <plug_holes+0x134>)
 800abde:	483e      	ldr	r0, [pc, #248]	; (800acd8 <plug_holes+0x12c>)
 800abe0:	f009 fd6c 	bl	80146bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	791b      	ldrb	r3, [r3, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <plug_holes+0x4e>
 800abec:	4b38      	ldr	r3, [pc, #224]	; (800acd0 <plug_holes+0x124>)
 800abee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800abf2:	493c      	ldr	r1, [pc, #240]	; (800ace4 <plug_holes+0x138>)
 800abf4:	4838      	ldr	r0, [pc, #224]	; (800acd8 <plug_holes+0x12c>)
 800abf6:	f009 fd61 	bl	80146bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac02:	d906      	bls.n	800ac12 <plug_holes+0x66>
 800ac04:	4b32      	ldr	r3, [pc, #200]	; (800acd0 <plug_holes+0x124>)
 800ac06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ac0a:	4937      	ldr	r1, [pc, #220]	; (800ace8 <plug_holes+0x13c>)
 800ac0c:	4832      	ldr	r0, [pc, #200]	; (800acd8 <plug_holes+0x12c>)
 800ac0e:	f009 fd55 	bl	80146bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff ffa4 	bl	800ab64 <ptr_to_mem>
 800ac1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d024      	beq.n	800ac70 <plug_holes+0xc4>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	791b      	ldrb	r3, [r3, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d120      	bne.n	800ac70 <plug_holes+0xc4>
 800ac2e:	4b2b      	ldr	r3, [pc, #172]	; (800acdc <plug_holes+0x130>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d01b      	beq.n	800ac70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ac38:	4b2c      	ldr	r3, [pc, #176]	; (800acec <plug_holes+0x140>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d102      	bne.n	800ac48 <plug_holes+0x9c>
      lfree = mem;
 800ac42:	4a2a      	ldr	r2, [pc, #168]	; (800acec <plug_holes+0x140>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	881a      	ldrh	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac58:	d00a      	beq.n	800ac70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff ff80 	bl	800ab64 <ptr_to_mem>
 800ac64:	4604      	mov	r4, r0
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ff8e 	bl	800ab88 <mem_to_ptr>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff ff75 	bl	800ab64 <ptr_to_mem>
 800ac7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d01f      	beq.n	800acc4 <plug_holes+0x118>
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	791b      	ldrb	r3, [r3, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d11b      	bne.n	800acc4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ac8c:	4b17      	ldr	r3, [pc, #92]	; (800acec <plug_holes+0x140>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d102      	bne.n	800ac9c <plug_holes+0xf0>
      lfree = pmem;
 800ac96:	4a15      	ldr	r2, [pc, #84]	; (800acec <plug_holes+0x140>)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	881a      	ldrh	r2, [r3, #0]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acac:	d00a      	beq.n	800acc4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff ff56 	bl	800ab64 <ptr_to_mem>
 800acb8:	4604      	mov	r4, r0
 800acba:	68b8      	ldr	r0, [r7, #8]
 800acbc:	f7ff ff64 	bl	800ab88 <mem_to_ptr>
 800acc0:	4603      	mov	r3, r0
 800acc2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd90      	pop	{r4, r7, pc}
 800accc:	20005e44 	.word	0x20005e44
 800acd0:	080158b4 	.word	0x080158b4
 800acd4:	080158e4 	.word	0x080158e4
 800acd8:	080158fc 	.word	0x080158fc
 800acdc:	20005e48 	.word	0x20005e48
 800ace0:	08015924 	.word	0x08015924
 800ace4:	08015940 	.word	0x08015940
 800ace8:	0801595c 	.word	0x0801595c
 800acec:	20005e4c 	.word	0x20005e4c

0800acf0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800acf6:	4b18      	ldr	r3, [pc, #96]	; (800ad58 <mem_init+0x68>)
 800acf8:	3303      	adds	r3, #3
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <mem_init+0x6c>)
 800ad02:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ad04:	4b15      	ldr	r3, [pc, #84]	; (800ad5c <mem_init+0x6c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad10:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ad1e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ad22:	f7ff ff1f 	bl	800ab64 <ptr_to_mem>
 800ad26:	4603      	mov	r3, r0
 800ad28:	4a0d      	ldr	r2, [pc, #52]	; (800ad60 <mem_init+0x70>)
 800ad2a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ad2c:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <mem_init+0x70>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2201      	movs	r2, #1
 800ad32:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <mem_init+0x70>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad3c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ad3e:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <mem_init+0x70>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad46:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ad48:	4b04      	ldr	r3, [pc, #16]	; (800ad5c <mem_init+0x6c>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a05      	ldr	r2, [pc, #20]	; (800ad64 <mem_init+0x74>)
 800ad4e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	200057f0 	.word	0x200057f0
 800ad5c:	20005e44 	.word	0x20005e44
 800ad60:	20005e48 	.word	0x20005e48
 800ad64:	20005e4c 	.word	0x20005e4c

0800ad68 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff ff09 	bl	800ab88 <mem_to_ptr>
 800ad76:	4603      	mov	r3, r0
 800ad78:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff fef0 	bl	800ab64 <ptr_to_mem>
 800ad84:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	885b      	ldrh	r3, [r3, #2]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff feea 	bl	800ab64 <ptr_to_mem>
 800ad90:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad9a:	d818      	bhi.n	800adce <mem_link_valid+0x66>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ada4:	d813      	bhi.n	800adce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800adaa:	8afa      	ldrh	r2, [r7, #22]
 800adac:	429a      	cmp	r2, r3
 800adae:	d004      	beq.n	800adba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	8afa      	ldrh	r2, [r7, #22]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d109      	bne.n	800adce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800adba:	4b08      	ldr	r3, [pc, #32]	; (800addc <mem_link_valid+0x74>)
 800adbc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d006      	beq.n	800add2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	8afa      	ldrh	r2, [r7, #22]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d001      	beq.n	800add2 <mem_link_valid+0x6a>
    return 0;
 800adce:	2300      	movs	r3, #0
 800add0:	e000      	b.n	800add4 <mem_link_valid+0x6c>
  }
  return 1;
 800add2:	2301      	movs	r3, #1
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20005e48 	.word	0x20005e48

0800ade0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d04c      	beq.n	800ae88 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d007      	beq.n	800ae08 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800adf8:	4b25      	ldr	r3, [pc, #148]	; (800ae90 <mem_free+0xb0>)
 800adfa:	f240 2273 	movw	r2, #627	; 0x273
 800adfe:	4925      	ldr	r1, [pc, #148]	; (800ae94 <mem_free+0xb4>)
 800ae00:	4825      	ldr	r0, [pc, #148]	; (800ae98 <mem_free+0xb8>)
 800ae02:	f009 fc5b 	bl	80146bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae06:	e040      	b.n	800ae8a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3b08      	subs	r3, #8
 800ae0c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ae0e:	4b23      	ldr	r3, [pc, #140]	; (800ae9c <mem_free+0xbc>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d306      	bcc.n	800ae26 <mem_free+0x46>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f103 020c 	add.w	r2, r3, #12
 800ae1e:	4b20      	ldr	r3, [pc, #128]	; (800aea0 <mem_free+0xc0>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d907      	bls.n	800ae36 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ae26:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <mem_free+0xb0>)
 800ae28:	f240 227f 	movw	r2, #639	; 0x27f
 800ae2c:	491d      	ldr	r1, [pc, #116]	; (800aea4 <mem_free+0xc4>)
 800ae2e:	481a      	ldr	r0, [pc, #104]	; (800ae98 <mem_free+0xb8>)
 800ae30:	f009 fc44 	bl	80146bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae34:	e029      	b.n	800ae8a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d107      	bne.n	800ae4e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ae3e:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <mem_free+0xb0>)
 800ae40:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ae44:	4918      	ldr	r1, [pc, #96]	; (800aea8 <mem_free+0xc8>)
 800ae46:	4814      	ldr	r0, [pc, #80]	; (800ae98 <mem_free+0xb8>)
 800ae48:	f009 fc38 	bl	80146bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae4c:	e01d      	b.n	800ae8a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff ff8a 	bl	800ad68 <mem_link_valid>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae5a:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <mem_free+0xb0>)
 800ae5c:	f240 2295 	movw	r2, #661	; 0x295
 800ae60:	4912      	ldr	r1, [pc, #72]	; (800aeac <mem_free+0xcc>)
 800ae62:	480d      	ldr	r0, [pc, #52]	; (800ae98 <mem_free+0xb8>)
 800ae64:	f009 fc2a 	bl	80146bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae68:	e00f      	b.n	800ae8a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <mem_free+0xd0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d202      	bcs.n	800ae80 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae7a:	4a0d      	ldr	r2, [pc, #52]	; (800aeb0 <mem_free+0xd0>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7ff fe93 	bl	800abac <plug_holes>
 800ae86:	e000      	b.n	800ae8a <mem_free+0xaa>
    return;
 800ae88:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	080158b4 	.word	0x080158b4
 800ae94:	08015988 	.word	0x08015988
 800ae98:	080158fc 	.word	0x080158fc
 800ae9c:	20005e44 	.word	0x20005e44
 800aea0:	20005e48 	.word	0x20005e48
 800aea4:	080159ac 	.word	0x080159ac
 800aea8:	080159c8 	.word	0x080159c8
 800aeac:	080159f0 	.word	0x080159f0
 800aeb0:	20005e4c 	.word	0x20005e4c

0800aeb4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aec0:	887b      	ldrh	r3, [r7, #2]
 800aec2:	3303      	adds	r3, #3
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aecc:	8bfb      	ldrh	r3, [r7, #30]
 800aece:	2b0b      	cmp	r3, #11
 800aed0:	d801      	bhi.n	800aed6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aed2:	230c      	movs	r3, #12
 800aed4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aed6:	8bfb      	ldrh	r3, [r7, #30]
 800aed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aedc:	d803      	bhi.n	800aee6 <mem_trim+0x32>
 800aede:	8bfa      	ldrh	r2, [r7, #30]
 800aee0:	887b      	ldrh	r3, [r7, #2]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d201      	bcs.n	800aeea <mem_trim+0x36>
    return NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	e0cc      	b.n	800b084 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aeea:	4b68      	ldr	r3, [pc, #416]	; (800b08c <mem_trim+0x1d8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d304      	bcc.n	800aefe <mem_trim+0x4a>
 800aef4:	4b66      	ldr	r3, [pc, #408]	; (800b090 <mem_trim+0x1dc>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d306      	bcc.n	800af0c <mem_trim+0x58>
 800aefe:	4b65      	ldr	r3, [pc, #404]	; (800b094 <mem_trim+0x1e0>)
 800af00:	f240 22d1 	movw	r2, #721	; 0x2d1
 800af04:	4964      	ldr	r1, [pc, #400]	; (800b098 <mem_trim+0x1e4>)
 800af06:	4865      	ldr	r0, [pc, #404]	; (800b09c <mem_trim+0x1e8>)
 800af08:	f009 fbd8 	bl	80146bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800af0c:	4b5f      	ldr	r3, [pc, #380]	; (800b08c <mem_trim+0x1d8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	429a      	cmp	r2, r3
 800af14:	d304      	bcc.n	800af20 <mem_trim+0x6c>
 800af16:	4b5e      	ldr	r3, [pc, #376]	; (800b090 <mem_trim+0x1dc>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d301      	bcc.n	800af24 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	e0af      	b.n	800b084 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3b08      	subs	r3, #8
 800af28:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af2a:	69b8      	ldr	r0, [r7, #24]
 800af2c:	f7ff fe2c 	bl	800ab88 <mem_to_ptr>
 800af30:	4603      	mov	r3, r0
 800af32:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	881a      	ldrh	r2, [r3, #0]
 800af38:	8afb      	ldrh	r3, [r7, #22]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b08      	subs	r3, #8
 800af40:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af42:	8bfa      	ldrh	r2, [r7, #30]
 800af44:	8abb      	ldrh	r3, [r7, #20]
 800af46:	429a      	cmp	r2, r3
 800af48:	d906      	bls.n	800af58 <mem_trim+0xa4>
 800af4a:	4b52      	ldr	r3, [pc, #328]	; (800b094 <mem_trim+0x1e0>)
 800af4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800af50:	4953      	ldr	r1, [pc, #332]	; (800b0a0 <mem_trim+0x1ec>)
 800af52:	4852      	ldr	r0, [pc, #328]	; (800b09c <mem_trim+0x1e8>)
 800af54:	f009 fbb2 	bl	80146bc <iprintf>
  if (newsize > size) {
 800af58:	8bfa      	ldrh	r2, [r7, #30]
 800af5a:	8abb      	ldrh	r3, [r7, #20]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d901      	bls.n	800af64 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	e08f      	b.n	800b084 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800af64:	8bfa      	ldrh	r2, [r7, #30]
 800af66:	8abb      	ldrh	r3, [r7, #20]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d101      	bne.n	800af70 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	e089      	b.n	800b084 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fdf5 	bl	800ab64 <ptr_to_mem>
 800af7a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	791b      	ldrb	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d13f      	bne.n	800b004 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af8c:	d106      	bne.n	800af9c <mem_trim+0xe8>
 800af8e:	4b41      	ldr	r3, [pc, #260]	; (800b094 <mem_trim+0x1e0>)
 800af90:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af94:	4943      	ldr	r1, [pc, #268]	; (800b0a4 <mem_trim+0x1f0>)
 800af96:	4841      	ldr	r0, [pc, #260]	; (800b09c <mem_trim+0x1e8>)
 800af98:	f009 fb90 	bl	80146bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afa2:	8afa      	ldrh	r2, [r7, #22]
 800afa4:	8bfb      	ldrh	r3, [r7, #30]
 800afa6:	4413      	add	r3, r2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3308      	adds	r3, #8
 800afac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800afae:	4b3e      	ldr	r3, [pc, #248]	; (800b0a8 <mem_trim+0x1f4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d106      	bne.n	800afc6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fdd2 	bl	800ab64 <ptr_to_mem>
 800afc0:	4603      	mov	r3, r0
 800afc2:	4a39      	ldr	r2, [pc, #228]	; (800b0a8 <mem_trim+0x1f4>)
 800afc4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800afc6:	89fb      	ldrh	r3, [r7, #14]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fdcb 	bl	800ab64 <ptr_to_mem>
 800afce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2200      	movs	r2, #0
 800afd4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	89ba      	ldrh	r2, [r7, #12]
 800afda:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	8afa      	ldrh	r2, [r7, #22]
 800afe0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	89fa      	ldrh	r2, [r7, #14]
 800afe6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aff0:	d047      	beq.n	800b082 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fdb4 	bl	800ab64 <ptr_to_mem>
 800affc:	4602      	mov	r2, r0
 800affe:	89fb      	ldrh	r3, [r7, #14]
 800b000:	8053      	strh	r3, [r2, #2]
 800b002:	e03e      	b.n	800b082 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b004:	8bfb      	ldrh	r3, [r7, #30]
 800b006:	f103 0214 	add.w	r2, r3, #20
 800b00a:	8abb      	ldrh	r3, [r7, #20]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d838      	bhi.n	800b082 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b010:	8afa      	ldrh	r2, [r7, #22]
 800b012:	8bfb      	ldrh	r3, [r7, #30]
 800b014:	4413      	add	r3, r2
 800b016:	b29b      	uxth	r3, r3
 800b018:	3308      	adds	r3, #8
 800b01a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b024:	d106      	bne.n	800b034 <mem_trim+0x180>
 800b026:	4b1b      	ldr	r3, [pc, #108]	; (800b094 <mem_trim+0x1e0>)
 800b028:	f240 3216 	movw	r2, #790	; 0x316
 800b02c:	491d      	ldr	r1, [pc, #116]	; (800b0a4 <mem_trim+0x1f0>)
 800b02e:	481b      	ldr	r0, [pc, #108]	; (800b09c <mem_trim+0x1e8>)
 800b030:	f009 fb44 	bl	80146bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b034:	89fb      	ldrh	r3, [r7, #14]
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fd94 	bl	800ab64 <ptr_to_mem>
 800b03c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b03e:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <mem_trim+0x1f4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	429a      	cmp	r2, r3
 800b046:	d202      	bcs.n	800b04e <mem_trim+0x19a>
      lfree = mem2;
 800b048:	4a17      	ldr	r2, [pc, #92]	; (800b0a8 <mem_trim+0x1f4>)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2200      	movs	r2, #0
 800b052:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	881a      	ldrh	r2, [r3, #0]
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	8afa      	ldrh	r2, [r7, #22]
 800b060:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	89fa      	ldrh	r2, [r7, #14]
 800b066:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b070:	d007      	beq.n	800b082 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fd74 	bl	800ab64 <ptr_to_mem>
 800b07c:	4602      	mov	r2, r0
 800b07e:	89fb      	ldrh	r3, [r7, #14]
 800b080:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b082:	687b      	ldr	r3, [r7, #4]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3720      	adds	r7, #32
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20005e44 	.word	0x20005e44
 800b090:	20005e48 	.word	0x20005e48
 800b094:	080158b4 	.word	0x080158b4
 800b098:	08015a24 	.word	0x08015a24
 800b09c:	080158fc 	.word	0x080158fc
 800b0a0:	08015a3c 	.word	0x08015a3c
 800b0a4:	08015a5c 	.word	0x08015a5c
 800b0a8:	20005e4c 	.word	0x20005e4c

0800b0ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <mem_malloc+0x14>
    return NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e0d9      	b.n	800b274 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b0c0:	88fb      	ldrh	r3, [r7, #6]
 800b0c2:	3303      	adds	r3, #3
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b0cc:	8bbb      	ldrh	r3, [r7, #28]
 800b0ce:	2b0b      	cmp	r3, #11
 800b0d0:	d801      	bhi.n	800b0d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b0d2:	230c      	movs	r3, #12
 800b0d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b0d6:	8bbb      	ldrh	r3, [r7, #28]
 800b0d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0dc:	d803      	bhi.n	800b0e6 <mem_malloc+0x3a>
 800b0de:	8bba      	ldrh	r2, [r7, #28]
 800b0e0:	88fb      	ldrh	r3, [r7, #6]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d201      	bcs.n	800b0ea <mem_malloc+0x3e>
    return NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e0c4      	b.n	800b274 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b0ea:	4b64      	ldr	r3, [pc, #400]	; (800b27c <mem_malloc+0x1d0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fd4a 	bl	800ab88 <mem_to_ptr>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	83fb      	strh	r3, [r7, #30]
 800b0f8:	e0b4      	b.n	800b264 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b0fa:	8bfb      	ldrh	r3, [r7, #30]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff fd31 	bl	800ab64 <ptr_to_mem>
 800b102:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	791b      	ldrb	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f040 80a4 	bne.w	800b256 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	8bfb      	ldrh	r3, [r7, #30]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	f1a3 0208 	sub.w	r2, r3, #8
 800b11c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b11e:	429a      	cmp	r2, r3
 800b120:	f0c0 8099 	bcc.w	800b256 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	8bfb      	ldrh	r3, [r7, #30]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	f1a3 0208 	sub.w	r2, r3, #8
 800b132:	8bbb      	ldrh	r3, [r7, #28]
 800b134:	3314      	adds	r3, #20
 800b136:	429a      	cmp	r2, r3
 800b138:	d333      	bcc.n	800b1a2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b13a:	8bfa      	ldrh	r2, [r7, #30]
 800b13c:	8bbb      	ldrh	r3, [r7, #28]
 800b13e:	4413      	add	r3, r2
 800b140:	b29b      	uxth	r3, r3
 800b142:	3308      	adds	r3, #8
 800b144:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b146:	8a7b      	ldrh	r3, [r7, #18]
 800b148:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b14c:	d106      	bne.n	800b15c <mem_malloc+0xb0>
 800b14e:	4b4c      	ldr	r3, [pc, #304]	; (800b280 <mem_malloc+0x1d4>)
 800b150:	f240 3287 	movw	r2, #903	; 0x387
 800b154:	494b      	ldr	r1, [pc, #300]	; (800b284 <mem_malloc+0x1d8>)
 800b156:	484c      	ldr	r0, [pc, #304]	; (800b288 <mem_malloc+0x1dc>)
 800b158:	f009 fab0 	bl	80146bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b15c:	8a7b      	ldrh	r3, [r7, #18]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fd00 	bl	800ab64 <ptr_to_mem>
 800b164:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	881a      	ldrh	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8bfa      	ldrh	r2, [r7, #30]
 800b178:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	8a7a      	ldrh	r2, [r7, #18]
 800b17e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2201      	movs	r2, #1
 800b184:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b18e:	d00b      	beq.n	800b1a8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff fce5 	bl	800ab64 <ptr_to_mem>
 800b19a:	4602      	mov	r2, r0
 800b19c:	8a7b      	ldrh	r3, [r7, #18]
 800b19e:	8053      	strh	r3, [r2, #2]
 800b1a0:	e002      	b.n	800b1a8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b1a8:	4b34      	ldr	r3, [pc, #208]	; (800b27c <mem_malloc+0x1d0>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d127      	bne.n	800b202 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b1b2:	4b32      	ldr	r3, [pc, #200]	; (800b27c <mem_malloc+0x1d0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b1b8:	e005      	b.n	800b1c6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff fcd0 	bl	800ab64 <ptr_to_mem>
 800b1c4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	791b      	ldrb	r3, [r3, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <mem_malloc+0x12c>
 800b1ce:	4b2f      	ldr	r3, [pc, #188]	; (800b28c <mem_malloc+0x1e0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d1f0      	bne.n	800b1ba <mem_malloc+0x10e>
          }
          lfree = cur;
 800b1d8:	4a28      	ldr	r2, [pc, #160]	; (800b27c <mem_malloc+0x1d0>)
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b1de:	4b27      	ldr	r3, [pc, #156]	; (800b27c <mem_malloc+0x1d0>)
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b2a      	ldr	r3, [pc, #168]	; (800b28c <mem_malloc+0x1e0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d00b      	beq.n	800b202 <mem_malloc+0x156>
 800b1ea:	4b24      	ldr	r3, [pc, #144]	; (800b27c <mem_malloc+0x1d0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	791b      	ldrb	r3, [r3, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d006      	beq.n	800b202 <mem_malloc+0x156>
 800b1f4:	4b22      	ldr	r3, [pc, #136]	; (800b280 <mem_malloc+0x1d4>)
 800b1f6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b1fa:	4925      	ldr	r1, [pc, #148]	; (800b290 <mem_malloc+0x1e4>)
 800b1fc:	4822      	ldr	r0, [pc, #136]	; (800b288 <mem_malloc+0x1dc>)
 800b1fe:	f009 fa5d 	bl	80146bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b202:	8bba      	ldrh	r2, [r7, #28]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	4413      	add	r3, r2
 800b208:	3308      	adds	r3, #8
 800b20a:	4a20      	ldr	r2, [pc, #128]	; (800b28c <mem_malloc+0x1e0>)
 800b20c:	6812      	ldr	r2, [r2, #0]
 800b20e:	4293      	cmp	r3, r2
 800b210:	d906      	bls.n	800b220 <mem_malloc+0x174>
 800b212:	4b1b      	ldr	r3, [pc, #108]	; (800b280 <mem_malloc+0x1d4>)
 800b214:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b218:	491e      	ldr	r1, [pc, #120]	; (800b294 <mem_malloc+0x1e8>)
 800b21a:	481b      	ldr	r0, [pc, #108]	; (800b288 <mem_malloc+0x1dc>)
 800b21c:	f009 fa4e 	bl	80146bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f003 0303 	and.w	r3, r3, #3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d006      	beq.n	800b238 <mem_malloc+0x18c>
 800b22a:	4b15      	ldr	r3, [pc, #84]	; (800b280 <mem_malloc+0x1d4>)
 800b22c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b230:	4919      	ldr	r1, [pc, #100]	; (800b298 <mem_malloc+0x1ec>)
 800b232:	4815      	ldr	r0, [pc, #84]	; (800b288 <mem_malloc+0x1dc>)
 800b234:	f009 fa42 	bl	80146bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d006      	beq.n	800b250 <mem_malloc+0x1a4>
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <mem_malloc+0x1d4>)
 800b244:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b248:	4914      	ldr	r1, [pc, #80]	; (800b29c <mem_malloc+0x1f0>)
 800b24a:	480f      	ldr	r0, [pc, #60]	; (800b288 <mem_malloc+0x1dc>)
 800b24c:	f009 fa36 	bl	80146bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	3308      	adds	r3, #8
 800b254:	e00e      	b.n	800b274 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b256:	8bfb      	ldrh	r3, [r7, #30]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff fc83 	bl	800ab64 <ptr_to_mem>
 800b25e:	4603      	mov	r3, r0
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b264:	8bfa      	ldrh	r2, [r7, #30]
 800b266:	8bbb      	ldrh	r3, [r7, #28]
 800b268:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b26c:	429a      	cmp	r2, r3
 800b26e:	f4ff af44 	bcc.w	800b0fa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20005e4c 	.word	0x20005e4c
 800b280:	080158b4 	.word	0x080158b4
 800b284:	08015a5c 	.word	0x08015a5c
 800b288:	080158fc 	.word	0x080158fc
 800b28c:	20005e48 	.word	0x20005e48
 800b290:	08015a70 	.word	0x08015a70
 800b294:	08015a8c 	.word	0x08015a8c
 800b298:	08015abc 	.word	0x08015abc
 800b29c:	08015aec 	.word	0x08015aec

0800b2a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	3303      	adds	r3, #3
 800b2b6:	f023 0303 	bic.w	r3, r3, #3
 800b2ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b2bc:	2300      	movs	r3, #0
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	e011      	b.n	800b2e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	dbe7      	blt.n	800b2c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b306:	2300      	movs	r3, #0
 800b308:	80fb      	strh	r3, [r7, #6]
 800b30a:	e009      	b.n	800b320 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	4a08      	ldr	r2, [pc, #32]	; (800b330 <memp_init+0x30>)
 800b310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff ffc3 	bl	800b2a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	3301      	adds	r3, #1
 800b31e:	80fb      	strh	r3, [r7, #6]
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	2b08      	cmp	r3, #8
 800b324:	d9f2      	bls.n	800b30c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	08018330 	.word	0x08018330

0800b334 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d012      	beq.n	800b370 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d006      	beq.n	800b36c <do_memp_malloc_pool+0x38>
 800b35e:	4b07      	ldr	r3, [pc, #28]	; (800b37c <do_memp_malloc_pool+0x48>)
 800b360:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b364:	4906      	ldr	r1, [pc, #24]	; (800b380 <do_memp_malloc_pool+0x4c>)
 800b366:	4807      	ldr	r0, [pc, #28]	; (800b384 <do_memp_malloc_pool+0x50>)
 800b368:	f009 f9a8 	bl	80146bc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	e000      	b.n	800b372 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	08015b10 	.word	0x08015b10
 800b380:	08015b40 	.word	0x08015b40
 800b384:	08015b64 	.word	0x08015b64

0800b388 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <memp_malloc_pool+0x1c>
 800b396:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <memp_malloc_pool+0x38>)
 800b398:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b39c:	4909      	ldr	r1, [pc, #36]	; (800b3c4 <memp_malloc_pool+0x3c>)
 800b39e:	480a      	ldr	r0, [pc, #40]	; (800b3c8 <memp_malloc_pool+0x40>)
 800b3a0:	f009 f98c 	bl	80146bc <iprintf>
  if (desc == NULL) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <memp_malloc_pool+0x26>
    return NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e003      	b.n	800b3b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff ffc0 	bl	800b334 <do_memp_malloc_pool>
 800b3b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	08015b10 	.word	0x08015b10
 800b3c4:	08015b8c 	.word	0x08015b8c
 800b3c8:	08015b64 	.word	0x08015b64

0800b3cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b3d6:	79fb      	ldrb	r3, [r7, #7]
 800b3d8:	2b08      	cmp	r3, #8
 800b3da:	d908      	bls.n	800b3ee <memp_malloc+0x22>
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <memp_malloc+0x3c>)
 800b3de:	f240 1257 	movw	r2, #343	; 0x157
 800b3e2:	490a      	ldr	r1, [pc, #40]	; (800b40c <memp_malloc+0x40>)
 800b3e4:	480a      	ldr	r0, [pc, #40]	; (800b410 <memp_malloc+0x44>)
 800b3e6:	f009 f969 	bl	80146bc <iprintf>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e008      	b.n	800b400 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	4a08      	ldr	r2, [pc, #32]	; (800b414 <memp_malloc+0x48>)
 800b3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff ff9c 	bl	800b334 <do_memp_malloc_pool>
 800b3fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	08015b10 	.word	0x08015b10
 800b40c:	08015ba0 	.word	0x08015ba0
 800b410:	08015b64 	.word	0x08015b64
 800b414:	08018330 	.word	0x08018330

0800b418 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	f003 0303 	and.w	r3, r3, #3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d006      	beq.n	800b43a <do_memp_free_pool+0x22>
 800b42c:	4b0a      	ldr	r3, [pc, #40]	; (800b458 <do_memp_free_pool+0x40>)
 800b42e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b432:	490a      	ldr	r1, [pc, #40]	; (800b45c <do_memp_free_pool+0x44>)
 800b434:	480a      	ldr	r0, [pc, #40]	; (800b460 <do_memp_free_pool+0x48>)
 800b436:	f009 f941 	bl	80146bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b450:	bf00      	nop
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	08015b10 	.word	0x08015b10
 800b45c:	08015bc0 	.word	0x08015bc0
 800b460:	08015b64 	.word	0x08015b64

0800b464 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <memp_free_pool+0x1e>
 800b474:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <memp_free_pool+0x3c>)
 800b476:	f240 1295 	movw	r2, #405	; 0x195
 800b47a:	490a      	ldr	r1, [pc, #40]	; (800b4a4 <memp_free_pool+0x40>)
 800b47c:	480a      	ldr	r0, [pc, #40]	; (800b4a8 <memp_free_pool+0x44>)
 800b47e:	f009 f91d 	bl	80146bc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d007      	beq.n	800b498 <memp_free_pool+0x34>
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d004      	beq.n	800b498 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ffc1 	bl	800b418 <do_memp_free_pool>
 800b496:	e000      	b.n	800b49a <memp_free_pool+0x36>
    return;
 800b498:	bf00      	nop
}
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	08015b10 	.word	0x08015b10
 800b4a4:	08015b8c 	.word	0x08015b8c
 800b4a8:	08015b64 	.word	0x08015b64

0800b4ac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d907      	bls.n	800b4ce <memp_free+0x22>
 800b4be:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <memp_free+0x44>)
 800b4c0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4c4:	490b      	ldr	r1, [pc, #44]	; (800b4f4 <memp_free+0x48>)
 800b4c6:	480c      	ldr	r0, [pc, #48]	; (800b4f8 <memp_free+0x4c>)
 800b4c8:	f009 f8f8 	bl	80146bc <iprintf>
 800b4cc:	e00c      	b.n	800b4e8 <memp_free+0x3c>

  if (mem == NULL) {
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b4d4:	79fb      	ldrb	r3, [r7, #7]
 800b4d6:	4a09      	ldr	r2, [pc, #36]	; (800b4fc <memp_free+0x50>)
 800b4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff ff9a 	bl	800b418 <do_memp_free_pool>
 800b4e4:	e000      	b.n	800b4e8 <memp_free+0x3c>
    return;
 800b4e6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	08015b10 	.word	0x08015b10
 800b4f4:	08015be0 	.word	0x08015be0
 800b4f8:	08015b64 	.word	0x08015b64
 800b4fc:	08018330 	.word	0x08018330

0800b500 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b504:	bf00      	nop
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
	...

0800b510 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d108      	bne.n	800b536 <netif_add+0x26>
 800b524:	4b57      	ldr	r3, [pc, #348]	; (800b684 <netif_add+0x174>)
 800b526:	f240 1227 	movw	r2, #295	; 0x127
 800b52a:	4957      	ldr	r1, [pc, #348]	; (800b688 <netif_add+0x178>)
 800b52c:	4857      	ldr	r0, [pc, #348]	; (800b68c <netif_add+0x17c>)
 800b52e:	f009 f8c5 	bl	80146bc <iprintf>
 800b532:	2300      	movs	r3, #0
 800b534:	e0a2      	b.n	800b67c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d108      	bne.n	800b54e <netif_add+0x3e>
 800b53c:	4b51      	ldr	r3, [pc, #324]	; (800b684 <netif_add+0x174>)
 800b53e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b542:	4953      	ldr	r1, [pc, #332]	; (800b690 <netif_add+0x180>)
 800b544:	4851      	ldr	r0, [pc, #324]	; (800b68c <netif_add+0x17c>)
 800b546:	f009 f8b9 	bl	80146bc <iprintf>
 800b54a:	2300      	movs	r3, #0
 800b54c:	e096      	b.n	800b67c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b554:	4b4f      	ldr	r3, [pc, #316]	; (800b694 <netif_add+0x184>)
 800b556:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b55e:	4b4d      	ldr	r3, [pc, #308]	; (800b694 <netif_add+0x184>)
 800b560:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b568:	4b4a      	ldr	r3, [pc, #296]	; (800b694 <netif_add+0x184>)
 800b56a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4a45      	ldr	r2, [pc, #276]	; (800b698 <netif_add+0x188>)
 800b582:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6a3a      	ldr	r2, [r7, #32]
 800b59c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b59e:	4b3f      	ldr	r3, [pc, #252]	; (800b69c <netif_add+0x18c>)
 800b5a0:	781a      	ldrb	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 f913 	bl	800b7e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	4798      	blx	r3
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <netif_add+0xba>
    return NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e058      	b.n	800b67c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5d0:	2bff      	cmp	r3, #255	; 0xff
 800b5d2:	d103      	bne.n	800b5dc <netif_add+0xcc>
        netif->num = 0;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b5e0:	4b2f      	ldr	r3, [pc, #188]	; (800b6a0 <netif_add+0x190>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	e02b      	b.n	800b640 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d106      	bne.n	800b5fe <netif_add+0xee>
 800b5f0:	4b24      	ldr	r3, [pc, #144]	; (800b684 <netif_add+0x174>)
 800b5f2:	f240 128b 	movw	r2, #395	; 0x18b
 800b5f6:	492b      	ldr	r1, [pc, #172]	; (800b6a4 <netif_add+0x194>)
 800b5f8:	4824      	ldr	r0, [pc, #144]	; (800b68c <netif_add+0x17c>)
 800b5fa:	f009 f85f 	bl	80146bc <iprintf>
        num_netifs++;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2bff      	cmp	r3, #255	; 0xff
 800b608:	dd06      	ble.n	800b618 <netif_add+0x108>
 800b60a:	4b1e      	ldr	r3, [pc, #120]	; (800b684 <netif_add+0x174>)
 800b60c:	f240 128d 	movw	r2, #397	; 0x18d
 800b610:	4925      	ldr	r1, [pc, #148]	; (800b6a8 <netif_add+0x198>)
 800b612:	481e      	ldr	r0, [pc, #120]	; (800b68c <netif_add+0x17c>)
 800b614:	f009 f852 	bl	80146bc <iprintf>
        if (netif2->num == netif->num) {
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b624:	429a      	cmp	r2, r3
 800b626:	d108      	bne.n	800b63a <netif_add+0x12a>
          netif->num++;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b62e:	3301      	adds	r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b638:	e005      	b.n	800b646 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1d0      	bne.n	800b5e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1be      	bne.n	800b5ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b652:	2bfe      	cmp	r3, #254	; 0xfe
 800b654:	d103      	bne.n	800b65e <netif_add+0x14e>
    netif_num = 0;
 800b656:	4b11      	ldr	r3, [pc, #68]	; (800b69c <netif_add+0x18c>)
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e006      	b.n	800b66c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b664:	3301      	adds	r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <netif_add+0x18c>)
 800b66a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b66c:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <netif_add+0x190>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b674:	4a0a      	ldr	r2, [pc, #40]	; (800b6a0 <netif_add+0x190>)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b67a:	68fb      	ldr	r3, [r7, #12]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08015bfc 	.word	0x08015bfc
 800b688:	08015c90 	.word	0x08015c90
 800b68c:	08015c4c 	.word	0x08015c4c
 800b690:	08015cac 	.word	0x08015cac
 800b694:	08018394 	.word	0x08018394
 800b698:	0800babb 	.word	0x0800babb
 800b69c:	20008d44 	.word	0x20008d44
 800b6a0:	20008d3c 	.word	0x20008d3c
 800b6a4:	08015cd0 	.word	0x08015cd0
 800b6a8:	08015ce4 	.word	0x08015ce4

0800b6ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f002 fb23 	bl	800dd04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f006 fbc5 	bl	8011e50 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b6c6:	bf00      	nop
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <netif_do_set_ipaddr+0x20>
 800b6e2:	4b1d      	ldr	r3, [pc, #116]	; (800b758 <netif_do_set_ipaddr+0x88>)
 800b6e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b6e8:	491c      	ldr	r1, [pc, #112]	; (800b75c <netif_do_set_ipaddr+0x8c>)
 800b6ea:	481d      	ldr	r0, [pc, #116]	; (800b760 <netif_do_set_ipaddr+0x90>)
 800b6ec:	f008 ffe6 	bl	80146bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <netif_do_set_ipaddr+0x34>
 800b6f6:	4b18      	ldr	r3, [pc, #96]	; (800b758 <netif_do_set_ipaddr+0x88>)
 800b6f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b6fc:	4917      	ldr	r1, [pc, #92]	; (800b75c <netif_do_set_ipaddr+0x8c>)
 800b6fe:	4818      	ldr	r0, [pc, #96]	; (800b760 <netif_do_set_ipaddr+0x90>)
 800b700:	f008 ffdc 	bl	80146bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3304      	adds	r3, #4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d01c      	beq.n	800b74c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3304      	adds	r3, #4
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b722:	f107 0314 	add.w	r3, r7, #20
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff ffbf 	bl	800b6ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <netif_do_set_ipaddr+0x6a>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	e000      	b.n	800b73c <netif_do_set_ipaddr+0x6c>
 800b73a:	2300      	movs	r3, #0
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b740:	2101      	movs	r1, #1
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f8d2 	bl	800b8ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b748:	2301      	movs	r3, #1
 800b74a:	e000      	b.n	800b74e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	08015bfc 	.word	0x08015bfc
 800b75c:	08015d14 	.word	0x08015d14
 800b760:	08015c4c 	.word	0x08015c4c

0800b764 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3308      	adds	r3, #8
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d00a      	beq.n	800b794 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <netif_do_set_netmask+0x26>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	e000      	b.n	800b78c <netif_do_set_netmask+0x28>
 800b78a:	2300      	movs	r3, #0
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b790:	2301      	movs	r3, #1
 800b792:	e000      	b.n	800b796 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d00a      	beq.n	800b7d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <netif_do_set_gw+0x26>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	e000      	b.n	800b7ca <netif_do_set_gw+0x28>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b7fc:	4b1c      	ldr	r3, [pc, #112]	; (800b870 <netif_set_addr+0x90>)
 800b7fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b806:	4b1a      	ldr	r3, [pc, #104]	; (800b870 <netif_set_addr+0x90>)
 800b808:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b810:	4b17      	ldr	r3, [pc, #92]	; (800b870 <netif_set_addr+0x90>)
 800b812:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <netif_set_addr+0x42>
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <netif_set_addr+0x46>
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <netif_set_addr+0x48>
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d006      	beq.n	800b83e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b830:	f107 0310 	add.w	r3, r7, #16
 800b834:	461a      	mov	r2, r3
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff ff49 	bl	800b6d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	6879      	ldr	r1, [r7, #4]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff ff8e 	bl	800b764 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff ffa8 	bl	800b7a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b858:	f107 0310 	add.w	r3, r7, #16
 800b85c:	461a      	mov	r2, r3
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff ff35 	bl	800b6d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b866:	bf00      	nop
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	08018394 	.word	0x08018394

0800b874 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b87c:	4a04      	ldr	r2, [pc, #16]	; (800b890 <netif_set_default+0x1c>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	20008d40 	.word	0x20008d40

0800b894 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d107      	bne.n	800b8b2 <netif_set_up+0x1e>
 800b8a2:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <netif_set_up+0x4c>)
 800b8a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b8a8:	490e      	ldr	r1, [pc, #56]	; (800b8e4 <netif_set_up+0x50>)
 800b8aa:	480f      	ldr	r0, [pc, #60]	; (800b8e8 <netif_set_up+0x54>)
 800b8ac:	f008 ff06 	bl	80146bc <iprintf>
 800b8b0:	e013      	b.n	800b8da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10c      	bne.n	800b8da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8c6:	f043 0301 	orr.w	r3, r3, #1
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8d2:	2103      	movs	r1, #3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f809 	bl	800b8ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08015bfc 	.word	0x08015bfc
 800b8e4:	08015d84 	.word	0x08015d84
 800b8e8:	08015c4c 	.word	0x08015c4c

0800b8ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d106      	bne.n	800b90c <netif_issue_reports+0x20>
 800b8fe:	4b18      	ldr	r3, [pc, #96]	; (800b960 <netif_issue_reports+0x74>)
 800b900:	f240 326d 	movw	r2, #877	; 0x36d
 800b904:	4917      	ldr	r1, [pc, #92]	; (800b964 <netif_issue_reports+0x78>)
 800b906:	4818      	ldr	r0, [pc, #96]	; (800b968 <netif_issue_reports+0x7c>)
 800b908:	f008 fed8 	bl	80146bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b912:	f003 0304 	and.w	r3, r3, #4
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01e      	beq.n	800b958 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b920:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b924:	2b00      	cmp	r3, #0
 800b926:	d017      	beq.n	800b958 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b928:	78fb      	ldrb	r3, [r7, #3]
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d013      	beq.n	800b95a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3304      	adds	r3, #4
 800b936:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00e      	beq.n	800b95a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d007      	beq.n	800b95a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f007 f9e7 	bl	8012d24 <etharp_request>
 800b956:	e000      	b.n	800b95a <netif_issue_reports+0x6e>
    return;
 800b958:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	08015bfc 	.word	0x08015bfc
 800b964:	08015da0 	.word	0x08015da0
 800b968:	08015c4c 	.word	0x08015c4c

0800b96c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d107      	bne.n	800b98a <netif_set_down+0x1e>
 800b97a:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <netif_set_down+0x58>)
 800b97c:	f240 329b 	movw	r2, #923	; 0x39b
 800b980:	4911      	ldr	r1, [pc, #68]	; (800b9c8 <netif_set_down+0x5c>)
 800b982:	4812      	ldr	r0, [pc, #72]	; (800b9cc <netif_set_down+0x60>)
 800b984:	f008 fe9a 	bl	80146bc <iprintf>
 800b988:	e019      	b.n	800b9be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	d012      	beq.n	800b9be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b99e:	f023 0301 	bic.w	r3, r3, #1
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9b0:	f003 0308 	and.w	r3, r3, #8
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f006 fd71 	bl	80124a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08015bfc 	.word	0x08015bfc
 800b9c8:	08015dc4 	.word	0x08015dc4
 800b9cc:	08015c4c 	.word	0x08015c4c

0800b9d0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d107      	bne.n	800b9ee <netif_set_link_up+0x1e>
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <netif_set_link_up+0x5c>)
 800b9e0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b9e4:	4912      	ldr	r1, [pc, #72]	; (800ba30 <netif_set_link_up+0x60>)
 800b9e6:	4813      	ldr	r0, [pc, #76]	; (800ba34 <netif_set_link_up+0x64>)
 800b9e8:	f008 fe68 	bl	80146bc <iprintf>
 800b9ec:	e01b      	b.n	800ba26 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d114      	bne.n	800ba26 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba02:	f043 0304 	orr.w	r3, r3, #4
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba0e:	2103      	movs	r1, #3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff ff6b 	bl	800b8ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <netif_set_link_up+0x56>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	08015bfc 	.word	0x08015bfc
 800ba30:	08015de4 	.word	0x08015de4
 800ba34:	08015c4c 	.word	0x08015c4c

0800ba38 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d107      	bne.n	800ba56 <netif_set_link_down+0x1e>
 800ba46:	4b11      	ldr	r3, [pc, #68]	; (800ba8c <netif_set_link_down+0x54>)
 800ba48:	f240 4206 	movw	r2, #1030	; 0x406
 800ba4c:	4910      	ldr	r1, [pc, #64]	; (800ba90 <netif_set_link_down+0x58>)
 800ba4e:	4811      	ldr	r0, [pc, #68]	; (800ba94 <netif_set_link_down+0x5c>)
 800ba50:	f008 fe34 	bl	80146bc <iprintf>
 800ba54:	e017      	b.n	800ba86 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d010      	beq.n	800ba86 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba6a:	f023 0304 	bic.w	r3, r3, #4
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <netif_set_link_down+0x4e>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	08015bfc 	.word	0x08015bfc
 800ba90:	08015e08 	.word	0x08015e08
 800ba94:	08015c4c 	.word	0x08015c4c

0800ba98 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	61da      	str	r2, [r3, #28]
  }
}
 800baae:	bf00      	nop
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800baba:	b480      	push	{r7}
 800babc:	b085      	sub	sp, #20
 800babe:	af00      	add	r7, sp, #0
 800bac0:	60f8      	str	r0, [r7, #12]
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bac6:	f06f 030b 	mvn.w	r3, #11
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3714      	adds	r7, #20
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
	...

0800bad8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d013      	beq.n	800bb10 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bae8:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <netif_get_by_index+0x48>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	e00c      	b.n	800bb0a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baf6:	3301      	adds	r3, #1
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	79fa      	ldrb	r2, [r7, #7]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d101      	bne.n	800bb04 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	e006      	b.n	800bb12 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ef      	bne.n	800baf0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20008d3c 	.word	0x20008d3c

0800bb24 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <pbuf_pool_is_empty+0x14>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bb2e:	bf00      	nop
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	20008d45 	.word	0x20008d45

0800bb3c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4611      	mov	r1, r2
 800bb48:	461a      	mov	r2, r3
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	80fb      	strh	r3, [r7, #6]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	88fa      	ldrh	r2, [r7, #6]
 800bb62:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	88ba      	ldrh	r2, [r7, #4]
 800bb68:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bb6a:	8b3b      	ldrh	r3, [r7, #24]
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	7f3a      	ldrb	r2, [r7, #28]
 800bb76:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	73da      	strb	r2, [r3, #15]
}
 800bb84:	bf00      	nop
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08c      	sub	sp, #48	; 0x30
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	80bb      	strh	r3, [r7, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bbac:	d07f      	beq.n	800bcae <pbuf_alloc+0x11e>
 800bbae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bbb2:	f300 80c8 	bgt.w	800bd46 <pbuf_alloc+0x1b6>
 800bbb6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bbba:	d010      	beq.n	800bbde <pbuf_alloc+0x4e>
 800bbbc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bbc0:	f300 80c1 	bgt.w	800bd46 <pbuf_alloc+0x1b6>
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d002      	beq.n	800bbce <pbuf_alloc+0x3e>
 800bbc8:	2b41      	cmp	r3, #65	; 0x41
 800bbca:	f040 80bc 	bne.w	800bd46 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bbce:	887a      	ldrh	r2, [r7, #2]
 800bbd0:	88bb      	ldrh	r3, [r7, #4]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f000 f8d1 	bl	800bd7c <pbuf_alloc_reference>
 800bbda:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bbdc:	e0bd      	b.n	800bd5a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bbe6:	88bb      	ldrh	r3, [r7, #4]
 800bbe8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bbea:	2008      	movs	r0, #8
 800bbec:	f7ff fbee 	bl	800b3cc <memp_malloc>
 800bbf0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d109      	bne.n	800bc0c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bbf8:	f7ff ff94 	bl	800bb24 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc04:	f000 faa8 	bl	800c158 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e0a7      	b.n	800bd5c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bc0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc0e:	3303      	adds	r3, #3
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	f023 0303 	bic.w	r3, r3, #3
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	8b7a      	ldrh	r2, [r7, #26]
 800bc20:	4293      	cmp	r3, r2
 800bc22:	bf28      	it	cs
 800bc24:	4613      	movcs	r3, r2
 800bc26:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc2a:	3310      	adds	r3, #16
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	3303      	adds	r3, #3
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	4618      	mov	r0, r3
 800bc38:	89f9      	ldrh	r1, [r7, #14]
 800bc3a:	8b7a      	ldrh	r2, [r7, #26]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	887b      	ldrh	r3, [r7, #2]
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	460b      	mov	r3, r1
 800bc46:	4601      	mov	r1, r0
 800bc48:	6938      	ldr	r0, [r7, #16]
 800bc4a:	f7ff ff77 	bl	800bb3c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d006      	beq.n	800bc68 <pbuf_alloc+0xd8>
 800bc5a:	4b42      	ldr	r3, [pc, #264]	; (800bd64 <pbuf_alloc+0x1d4>)
 800bc5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc60:	4941      	ldr	r1, [pc, #260]	; (800bd68 <pbuf_alloc+0x1d8>)
 800bc62:	4842      	ldr	r0, [pc, #264]	; (800bd6c <pbuf_alloc+0x1dc>)
 800bc64:	f008 fd2a 	bl	80146bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bc68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bc74:	d106      	bne.n	800bc84 <pbuf_alloc+0xf4>
 800bc76:	4b3b      	ldr	r3, [pc, #236]	; (800bd64 <pbuf_alloc+0x1d4>)
 800bc78:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bc7c:	493c      	ldr	r1, [pc, #240]	; (800bd70 <pbuf_alloc+0x1e0>)
 800bc7e:	483b      	ldr	r0, [pc, #236]	; (800bd6c <pbuf_alloc+0x1dc>)
 800bc80:	f008 fd1c 	bl	80146bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc8e:	e002      	b.n	800bc96 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bc9a:	8b7a      	ldrh	r2, [r7, #26]
 800bc9c:	89fb      	ldrh	r3, [r7, #14]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bca6:	8b7b      	ldrh	r3, [r7, #26]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d19e      	bne.n	800bbea <pbuf_alloc+0x5a>
      break;
 800bcac:	e055      	b.n	800bd5a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bcae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcb0:	3303      	adds	r3, #3
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f023 0303 	bic.w	r3, r3, #3
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	88bb      	ldrh	r3, [r7, #4]
 800bcbc:	3303      	adds	r3, #3
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	f023 0303 	bic.w	r3, r3, #3
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	4413      	add	r3, r2
 800bcc8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bcca:	8b3b      	ldrh	r3, [r7, #24]
 800bccc:	3310      	adds	r3, #16
 800bcce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bcd0:	8b3a      	ldrh	r2, [r7, #24]
 800bcd2:	88bb      	ldrh	r3, [r7, #4]
 800bcd4:	3303      	adds	r3, #3
 800bcd6:	f023 0303 	bic.w	r3, r3, #3
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d306      	bcc.n	800bcec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bcde:	8afa      	ldrh	r2, [r7, #22]
 800bce0:	88bb      	ldrh	r3, [r7, #4]
 800bce2:	3303      	adds	r3, #3
 800bce4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d201      	bcs.n	800bcf0 <pbuf_alloc+0x160>
        return NULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e035      	b.n	800bd5c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bcf0:	8afb      	ldrh	r3, [r7, #22]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff f9da 	bl	800b0ac <mem_malloc>
 800bcf8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <pbuf_alloc+0x174>
        return NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	e02b      	b.n	800bd5c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd06:	3310      	adds	r3, #16
 800bd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0a:	4413      	add	r3, r2
 800bd0c:	3303      	adds	r3, #3
 800bd0e:	f023 0303 	bic.w	r3, r3, #3
 800bd12:	4618      	mov	r0, r3
 800bd14:	88b9      	ldrh	r1, [r7, #4]
 800bd16:	88ba      	ldrh	r2, [r7, #4]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	887b      	ldrh	r3, [r7, #2]
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	460b      	mov	r3, r1
 800bd22:	4601      	mov	r1, r0
 800bd24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd26:	f7ff ff09 	bl	800bb3c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d010      	beq.n	800bd58 <pbuf_alloc+0x1c8>
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <pbuf_alloc+0x1d4>)
 800bd38:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bd3c:	490d      	ldr	r1, [pc, #52]	; (800bd74 <pbuf_alloc+0x1e4>)
 800bd3e:	480b      	ldr	r0, [pc, #44]	; (800bd6c <pbuf_alloc+0x1dc>)
 800bd40:	f008 fcbc 	bl	80146bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bd44:	e008      	b.n	800bd58 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <pbuf_alloc+0x1d4>)
 800bd48:	f240 1227 	movw	r2, #295	; 0x127
 800bd4c:	490a      	ldr	r1, [pc, #40]	; (800bd78 <pbuf_alloc+0x1e8>)
 800bd4e:	4807      	ldr	r0, [pc, #28]	; (800bd6c <pbuf_alloc+0x1dc>)
 800bd50:	f008 fcb4 	bl	80146bc <iprintf>
      return NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	e001      	b.n	800bd5c <pbuf_alloc+0x1cc>
      break;
 800bd58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3728      	adds	r7, #40	; 0x28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	08015e2c 	.word	0x08015e2c
 800bd68:	08015e5c 	.word	0x08015e5c
 800bd6c:	08015e8c 	.word	0x08015e8c
 800bd70:	08015eb4 	.word	0x08015eb4
 800bd74:	08015ee8 	.word	0x08015ee8
 800bd78:	08015f14 	.word	0x08015f14

0800bd7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af02      	add	r7, sp, #8
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	807b      	strh	r3, [r7, #2]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bd8c:	883b      	ldrh	r3, [r7, #0]
 800bd8e:	2b41      	cmp	r3, #65	; 0x41
 800bd90:	d009      	beq.n	800bda6 <pbuf_alloc_reference+0x2a>
 800bd92:	883b      	ldrh	r3, [r7, #0]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d006      	beq.n	800bda6 <pbuf_alloc_reference+0x2a>
 800bd98:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <pbuf_alloc_reference+0x5c>)
 800bd9a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bd9e:	490f      	ldr	r1, [pc, #60]	; (800bddc <pbuf_alloc_reference+0x60>)
 800bda0:	480f      	ldr	r0, [pc, #60]	; (800bde0 <pbuf_alloc_reference+0x64>)
 800bda2:	f008 fc8b 	bl	80146bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bda6:	2007      	movs	r0, #7
 800bda8:	f7ff fb10 	bl	800b3cc <memp_malloc>
 800bdac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e00b      	b.n	800bdd0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bdb8:	8879      	ldrh	r1, [r7, #2]
 800bdba:	887a      	ldrh	r2, [r7, #2]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9301      	str	r3, [sp, #4]
 800bdc0:	883b      	ldrh	r3, [r7, #0]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff feb7 	bl	800bb3c <pbuf_init_alloced_pbuf>
  return p;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	08015e2c 	.word	0x08015e2c
 800bddc:	08015f30 	.word	0x08015f30
 800bde0:	08015e8c 	.word	0x08015e8c

0800bde4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	81bb      	strh	r3, [r7, #12]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bdfc:	8a7b      	ldrh	r3, [r7, #18]
 800bdfe:	3303      	adds	r3, #3
 800be00:	f023 0203 	bic.w	r2, r3, #3
 800be04:	89bb      	ldrh	r3, [r7, #12]
 800be06:	441a      	add	r2, r3
 800be08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d901      	bls.n	800be12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	e018      	b.n	800be44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800be12:	6a3b      	ldr	r3, [r7, #32]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d007      	beq.n	800be28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be18:	8a7b      	ldrh	r3, [r7, #18]
 800be1a:	3303      	adds	r3, #3
 800be1c:	f023 0303 	bic.w	r3, r3, #3
 800be20:	6a3a      	ldr	r2, [r7, #32]
 800be22:	4413      	add	r3, r2
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e001      	b.n	800be2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800be28:	2300      	movs	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	89b9      	ldrh	r1, [r7, #12]
 800be30:	89ba      	ldrh	r2, [r7, #12]
 800be32:	2302      	movs	r3, #2
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	897b      	ldrh	r3, [r7, #10]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	460b      	mov	r3, r1
 800be3c:	6979      	ldr	r1, [r7, #20]
 800be3e:	f7ff fe7d 	bl	800bb3c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800be42:	687b      	ldr	r3, [r7, #4]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <pbuf_realloc+0x20>
 800be5e:	4b3a      	ldr	r3, [pc, #232]	; (800bf48 <pbuf_realloc+0xfc>)
 800be60:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800be64:	4939      	ldr	r1, [pc, #228]	; (800bf4c <pbuf_realloc+0x100>)
 800be66:	483a      	ldr	r0, [pc, #232]	; (800bf50 <pbuf_realloc+0x104>)
 800be68:	f008 fc28 	bl	80146bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	891b      	ldrh	r3, [r3, #8]
 800be70:	887a      	ldrh	r2, [r7, #2]
 800be72:	429a      	cmp	r2, r3
 800be74:	d263      	bcs.n	800bf3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	891a      	ldrh	r2, [r3, #8]
 800be7a:	887b      	ldrh	r3, [r7, #2]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800be80:	887b      	ldrh	r3, [r7, #2]
 800be82:	817b      	strh	r3, [r7, #10]
  q = p;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800be88:	e018      	b.n	800bebc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	895b      	ldrh	r3, [r3, #10]
 800be8e:	897a      	ldrh	r2, [r7, #10]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	891a      	ldrh	r2, [r3, #8]
 800be98:	893b      	ldrh	r3, [r7, #8]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <pbuf_realloc+0x70>
 800beae:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <pbuf_realloc+0xfc>)
 800beb0:	f240 12af 	movw	r2, #431	; 0x1af
 800beb4:	4927      	ldr	r1, [pc, #156]	; (800bf54 <pbuf_realloc+0x108>)
 800beb6:	4826      	ldr	r0, [pc, #152]	; (800bf50 <pbuf_realloc+0x104>)
 800beb8:	f008 fc00 	bl	80146bc <iprintf>
  while (rem_len > q->len) {
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	895b      	ldrh	r3, [r3, #10]
 800bec0:	897a      	ldrh	r2, [r7, #10]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d8e1      	bhi.n	800be8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	7b1b      	ldrb	r3, [r3, #12]
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d121      	bne.n	800bf16 <pbuf_realloc+0xca>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	895b      	ldrh	r3, [r3, #10]
 800bed6:	897a      	ldrh	r2, [r7, #10]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d01c      	beq.n	800bf16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	7b5b      	ldrb	r3, [r3, #13]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d116      	bne.n	800bf16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	897b      	ldrh	r3, [r7, #10]
 800bef4:	4413      	add	r3, r2
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	4619      	mov	r1, r3
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f7fe ffda 	bl	800aeb4 <mem_trim>
 800bf00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <pbuf_realloc+0xca>
 800bf08:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <pbuf_realloc+0xfc>)
 800bf0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bf0e:	4912      	ldr	r1, [pc, #72]	; (800bf58 <pbuf_realloc+0x10c>)
 800bf10:	480f      	ldr	r0, [pc, #60]	; (800bf50 <pbuf_realloc+0x104>)
 800bf12:	f008 fbd3 	bl	80146bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	897a      	ldrh	r2, [r7, #10]
 800bf1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	895a      	ldrh	r2, [r3, #10]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f911 	bl	800c158 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	e000      	b.n	800bf40 <pbuf_realloc+0xf4>
    return;
 800bf3e:	bf00      	nop

}
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	08015e2c 	.word	0x08015e2c
 800bf4c:	08015f44 	.word	0x08015f44
 800bf50:	08015e8c 	.word	0x08015e8c
 800bf54:	08015f5c 	.word	0x08015f5c
 800bf58:	08015f74 	.word	0x08015f74

0800bf5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d106      	bne.n	800bf7e <pbuf_add_header_impl+0x22>
 800bf70:	4b2b      	ldr	r3, [pc, #172]	; (800c020 <pbuf_add_header_impl+0xc4>)
 800bf72:	f240 12df 	movw	r2, #479	; 0x1df
 800bf76:	492b      	ldr	r1, [pc, #172]	; (800c024 <pbuf_add_header_impl+0xc8>)
 800bf78:	482b      	ldr	r0, [pc, #172]	; (800c028 <pbuf_add_header_impl+0xcc>)
 800bf7a:	f008 fb9f 	bl	80146bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d003      	beq.n	800bf8c <pbuf_add_header_impl+0x30>
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf8a:	d301      	bcc.n	800bf90 <pbuf_add_header_impl+0x34>
    return 1;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e043      	b.n	800c018 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <pbuf_add_header_impl+0x3e>
    return 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e03e      	b.n	800c018 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	891a      	ldrh	r2, [r3, #8]
 800bfa2:	8a7b      	ldrh	r3, [r7, #18]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	8a7a      	ldrh	r2, [r7, #18]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d901      	bls.n	800bfb2 <pbuf_add_header_impl+0x56>
    return 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e032      	b.n	800c018 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	7b1b      	ldrb	r3, [r3, #12]
 800bfb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bfb8:	8a3b      	ldrh	r3, [r7, #16]
 800bfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00c      	beq.n	800bfdc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	425b      	negs	r3, r3
 800bfca:	4413      	add	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d20d      	bcs.n	800bff4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e01d      	b.n	800c018 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d006      	beq.n	800bff0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	425b      	negs	r3, r3
 800bfea:	4413      	add	r3, r2
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e001      	b.n	800bff4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e011      	b.n	800c018 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	895a      	ldrh	r2, [r3, #10]
 800bffe:	8a7b      	ldrh	r3, [r7, #18]
 800c000:	4413      	add	r3, r2
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	891a      	ldrh	r2, [r3, #8]
 800c00c:	8a7b      	ldrh	r3, [r7, #18]
 800c00e:	4413      	add	r3, r2
 800c010:	b29a      	uxth	r2, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	811a      	strh	r2, [r3, #8]


  return 0;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	08015e2c 	.word	0x08015e2c
 800c024:	08015f90 	.word	0x08015f90
 800c028:	08015e8c 	.word	0x08015e8c

0800c02c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c036:	2200      	movs	r2, #0
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff ff8e 	bl	800bf5c <pbuf_add_header_impl>
 800c040:	4603      	mov	r3, r0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
	...

0800c04c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d106      	bne.n	800c06a <pbuf_remove_header+0x1e>
 800c05c:	4b20      	ldr	r3, [pc, #128]	; (800c0e0 <pbuf_remove_header+0x94>)
 800c05e:	f240 224b 	movw	r2, #587	; 0x24b
 800c062:	4920      	ldr	r1, [pc, #128]	; (800c0e4 <pbuf_remove_header+0x98>)
 800c064:	4820      	ldr	r0, [pc, #128]	; (800c0e8 <pbuf_remove_header+0x9c>)
 800c066:	f008 fb29 	bl	80146bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <pbuf_remove_header+0x2c>
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c076:	d301      	bcc.n	800c07c <pbuf_remove_header+0x30>
    return 1;
 800c078:	2301      	movs	r3, #1
 800c07a:	e02c      	b.n	800c0d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <pbuf_remove_header+0x3a>
    return 0;
 800c082:	2300      	movs	r3, #0
 800c084:	e027      	b.n	800c0d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	895b      	ldrh	r3, [r3, #10]
 800c08e:	89fa      	ldrh	r2, [r7, #14]
 800c090:	429a      	cmp	r2, r3
 800c092:	d908      	bls.n	800c0a6 <pbuf_remove_header+0x5a>
 800c094:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <pbuf_remove_header+0x94>)
 800c096:	f240 2255 	movw	r2, #597	; 0x255
 800c09a:	4914      	ldr	r1, [pc, #80]	; (800c0ec <pbuf_remove_header+0xa0>)
 800c09c:	4812      	ldr	r0, [pc, #72]	; (800c0e8 <pbuf_remove_header+0x9c>)
 800c09e:	f008 fb0d 	bl	80146bc <iprintf>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e017      	b.n	800c0d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	895a      	ldrh	r2, [r3, #10]
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	891a      	ldrh	r2, [r3, #8]
 800c0ca:	89fb      	ldrh	r3, [r7, #14]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	08015e2c 	.word	0x08015e2c
 800c0e4:	08015f90 	.word	0x08015f90
 800c0e8:	08015e8c 	.word	0x08015e8c
 800c0ec:	08015f9c 	.word	0x08015f9c

0800c0f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c100:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c104:	2b00      	cmp	r3, #0
 800c106:	da08      	bge.n	800c11a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c10c:	425b      	negs	r3, r3
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ff9b 	bl	800c04c <pbuf_remove_header>
 800c116:	4603      	mov	r3, r0
 800c118:	e007      	b.n	800c12a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c11a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c11e:	787a      	ldrb	r2, [r7, #1]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff ff1a 	bl	800bf5c <pbuf_add_header_impl>
 800c128:	4603      	mov	r3, r0
  }
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c13e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c142:	2201      	movs	r2, #1
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff ffd2 	bl	800c0f0 <pbuf_header_impl>
 800c14c:	4603      	mov	r3, r0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <pbuf_free+0x22>
 800c16c:	4b38      	ldr	r3, [pc, #224]	; (800c250 <pbuf_free+0xf8>)
 800c16e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c172:	4938      	ldr	r1, [pc, #224]	; (800c254 <pbuf_free+0xfc>)
 800c174:	4838      	ldr	r0, [pc, #224]	; (800c258 <pbuf_free+0x100>)
 800c176:	f008 faa1 	bl	80146bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e063      	b.n	800c246 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c182:	e05c      	b.n	800c23e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	7b9b      	ldrb	r3, [r3, #14]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d106      	bne.n	800c19a <pbuf_free+0x42>
 800c18c:	4b30      	ldr	r3, [pc, #192]	; (800c250 <pbuf_free+0xf8>)
 800c18e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c192:	4932      	ldr	r1, [pc, #200]	; (800c25c <pbuf_free+0x104>)
 800c194:	4830      	ldr	r0, [pc, #192]	; (800c258 <pbuf_free+0x100>)
 800c196:	f008 fa91 	bl	80146bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7b9b      	ldrb	r3, [r3, #14]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	739a      	strb	r2, [r3, #14]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7b9b      	ldrb	r3, [r3, #14]
 800c1aa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c1ac:	7dbb      	ldrb	r3, [r7, #22]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d143      	bne.n	800c23a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7b1b      	ldrb	r3, [r3, #12]
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	7b5b      	ldrb	r3, [r3, #13]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d011      	beq.n	800c1f2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <pbuf_free+0x90>
 800c1da:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <pbuf_free+0xf8>)
 800c1dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c1e0:	491f      	ldr	r1, [pc, #124]	; (800c260 <pbuf_free+0x108>)
 800c1e2:	481d      	ldr	r0, [pc, #116]	; (800c258 <pbuf_free+0x100>)
 800c1e4:	f008 fa6a 	bl	80146bc <iprintf>
        pc->custom_free_function(p);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	4798      	blx	r3
 800c1f0:	e01d      	b.n	800c22e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d104      	bne.n	800c202 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	2008      	movs	r0, #8
 800c1fc:	f7ff f956 	bl	800b4ac <memp_free>
 800c200:	e015      	b.n	800c22e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d104      	bne.n	800c212 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	2007      	movs	r0, #7
 800c20c:	f7ff f94e 	bl	800b4ac <memp_free>
 800c210:	e00d      	b.n	800c22e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c212:	7bfb      	ldrb	r3, [r7, #15]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <pbuf_free+0xc8>
          mem_free(p);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe fde1 	bl	800ade0 <mem_free>
 800c21e:	e006      	b.n	800c22e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <pbuf_free+0xf8>)
 800c222:	f240 320f 	movw	r2, #783	; 0x30f
 800c226:	490f      	ldr	r1, [pc, #60]	; (800c264 <pbuf_free+0x10c>)
 800c228:	480b      	ldr	r0, [pc, #44]	; (800c258 <pbuf_free+0x100>)
 800c22a:	f008 fa47 	bl	80146bc <iprintf>
        }
      }
      count++;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	3301      	adds	r3, #1
 800c232:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	607b      	str	r3, [r7, #4]
 800c238:	e001      	b.n	800c23e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d19f      	bne.n	800c184 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c244:	7dfb      	ldrb	r3, [r7, #23]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	08015e2c 	.word	0x08015e2c
 800c254:	08015f90 	.word	0x08015f90
 800c258:	08015e8c 	.word	0x08015e8c
 800c25c:	08015fbc 	.word	0x08015fbc
 800c260:	08015fd4 	.word	0x08015fd4
 800c264:	08015ff8 	.word	0x08015ff8

0800c268 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c274:	e005      	b.n	800c282 <pbuf_clen+0x1a>
    ++len;
 800c276:	89fb      	ldrh	r3, [r7, #14]
 800c278:	3301      	adds	r3, #1
 800c27a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1f6      	bne.n	800c276 <pbuf_clen+0xe>
  }
  return len;
 800c288:	89fb      	ldrh	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
	...

0800c298 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d010      	beq.n	800c2c8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7b9b      	ldrb	r3, [r3, #14]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7b9b      	ldrb	r3, [r3, #14]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <pbuf_ref+0x30>
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <pbuf_ref+0x38>)
 800c2bc:	f240 3242 	movw	r2, #834	; 0x342
 800c2c0:	4904      	ldr	r1, [pc, #16]	; (800c2d4 <pbuf_ref+0x3c>)
 800c2c2:	4805      	ldr	r0, [pc, #20]	; (800c2d8 <pbuf_ref+0x40>)
 800c2c4:	f008 f9fa 	bl	80146bc <iprintf>
  }
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	08015e2c 	.word	0x08015e2c
 800c2d4:	0801600c 	.word	0x0801600c
 800c2d8:	08015e8c 	.word	0x08015e8c

0800c2dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <pbuf_cat+0x16>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <pbuf_cat+0x26>
 800c2f2:	4b20      	ldr	r3, [pc, #128]	; (800c374 <pbuf_cat+0x98>)
 800c2f4:	f240 3259 	movw	r2, #857	; 0x359
 800c2f8:	491f      	ldr	r1, [pc, #124]	; (800c378 <pbuf_cat+0x9c>)
 800c2fa:	4820      	ldr	r0, [pc, #128]	; (800c37c <pbuf_cat+0xa0>)
 800c2fc:	f008 f9de 	bl	80146bc <iprintf>
 800c300:	e034      	b.n	800c36c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	e00a      	b.n	800c31e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	891a      	ldrh	r2, [r3, #8]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	891b      	ldrh	r3, [r3, #8]
 800c310:	4413      	add	r3, r2
 800c312:	b29a      	uxth	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1f0      	bne.n	800c308 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	891a      	ldrh	r2, [r3, #8]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	895b      	ldrh	r3, [r3, #10]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d006      	beq.n	800c340 <pbuf_cat+0x64>
 800c332:	4b10      	ldr	r3, [pc, #64]	; (800c374 <pbuf_cat+0x98>)
 800c334:	f240 3262 	movw	r2, #866	; 0x362
 800c338:	4911      	ldr	r1, [pc, #68]	; (800c380 <pbuf_cat+0xa4>)
 800c33a:	4810      	ldr	r0, [pc, #64]	; (800c37c <pbuf_cat+0xa0>)
 800c33c:	f008 f9be 	bl	80146bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d006      	beq.n	800c356 <pbuf_cat+0x7a>
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <pbuf_cat+0x98>)
 800c34a:	f240 3263 	movw	r2, #867	; 0x363
 800c34e:	490d      	ldr	r1, [pc, #52]	; (800c384 <pbuf_cat+0xa8>)
 800c350:	480a      	ldr	r0, [pc, #40]	; (800c37c <pbuf_cat+0xa0>)
 800c352:	f008 f9b3 	bl	80146bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	891a      	ldrh	r2, [r3, #8]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	891b      	ldrh	r3, [r3, #8]
 800c35e:	4413      	add	r3, r2
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	08015e2c 	.word	0x08015e2c
 800c378:	08016020 	.word	0x08016020
 800c37c:	08015e8c 	.word	0x08015e8c
 800c380:	08016058 	.word	0x08016058
 800c384:	08016088 	.word	0x08016088

0800c388 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d008      	beq.n	800c3b2 <pbuf_copy+0x2a>
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d005      	beq.n	800c3b2 <pbuf_copy+0x2a>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	891a      	ldrh	r2, [r3, #8]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	891b      	ldrh	r3, [r3, #8]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d209      	bcs.n	800c3c6 <pbuf_copy+0x3e>
 800c3b2:	4b57      	ldr	r3, [pc, #348]	; (800c510 <pbuf_copy+0x188>)
 800c3b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c3b8:	4956      	ldr	r1, [pc, #344]	; (800c514 <pbuf_copy+0x18c>)
 800c3ba:	4857      	ldr	r0, [pc, #348]	; (800c518 <pbuf_copy+0x190>)
 800c3bc:	f008 f97e 	bl	80146bc <iprintf>
 800c3c0:	f06f 030f 	mvn.w	r3, #15
 800c3c4:	e09f      	b.n	800c506 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	895b      	ldrh	r3, [r3, #10]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	895b      	ldrh	r3, [r3, #10]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	1acb      	subs	r3, r1, r3
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d306      	bcc.n	800c3ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	895b      	ldrh	r3, [r3, #10]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e005      	b.n	800c3f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	895b      	ldrh	r3, [r3, #10]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	18d0      	adds	r0, r2, r3
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	4413      	add	r3, r2
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	4619      	mov	r1, r3
 800c40c:	f008 f940 	bl	8014690 <memcpy>
    offset_to += len;
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4413      	add	r3, r2
 800c416:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	4413      	add	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	895b      	ldrh	r3, [r3, #10]
 800c424:	461a      	mov	r2, r3
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	4293      	cmp	r3, r2
 800c42a:	d906      	bls.n	800c43a <pbuf_copy+0xb2>
 800c42c:	4b38      	ldr	r3, [pc, #224]	; (800c510 <pbuf_copy+0x188>)
 800c42e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c432:	493a      	ldr	r1, [pc, #232]	; (800c51c <pbuf_copy+0x194>)
 800c434:	4838      	ldr	r0, [pc, #224]	; (800c518 <pbuf_copy+0x190>)
 800c436:	f008 f941 	bl	80146bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	895b      	ldrh	r3, [r3, #10]
 800c43e:	461a      	mov	r2, r3
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	4293      	cmp	r3, r2
 800c444:	d906      	bls.n	800c454 <pbuf_copy+0xcc>
 800c446:	4b32      	ldr	r3, [pc, #200]	; (800c510 <pbuf_copy+0x188>)
 800c448:	f240 32da 	movw	r2, #986	; 0x3da
 800c44c:	4934      	ldr	r1, [pc, #208]	; (800c520 <pbuf_copy+0x198>)
 800c44e:	4832      	ldr	r0, [pc, #200]	; (800c518 <pbuf_copy+0x190>)
 800c450:	f008 f934 	bl	80146bc <iprintf>
    if (offset_from >= p_from->len) {
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	895b      	ldrh	r3, [r3, #10]
 800c458:	461a      	mov	r2, r3
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d304      	bcc.n	800c46a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	895b      	ldrh	r3, [r3, #10]
 800c46e:	461a      	mov	r2, r3
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	4293      	cmp	r3, r2
 800c474:	d114      	bne.n	800c4a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <pbuf_copy+0x118>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <pbuf_copy+0x118>
 800c48c:	4b20      	ldr	r3, [pc, #128]	; (800c510 <pbuf_copy+0x188>)
 800c48e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c492:	4924      	ldr	r1, [pc, #144]	; (800c524 <pbuf_copy+0x19c>)
 800c494:	4820      	ldr	r0, [pc, #128]	; (800c518 <pbuf_copy+0x190>)
 800c496:	f008 f911 	bl	80146bc <iprintf>
 800c49a:	f06f 030f 	mvn.w	r3, #15
 800c49e:	e032      	b.n	800c506 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <pbuf_copy+0x146>
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	895a      	ldrh	r2, [r3, #10]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	891b      	ldrh	r3, [r3, #8]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d10d      	bne.n	800c4ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d009      	beq.n	800c4ce <pbuf_copy+0x146>
 800c4ba:	4b15      	ldr	r3, [pc, #84]	; (800c510 <pbuf_copy+0x188>)
 800c4bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c4c0:	4919      	ldr	r1, [pc, #100]	; (800c528 <pbuf_copy+0x1a0>)
 800c4c2:	4815      	ldr	r0, [pc, #84]	; (800c518 <pbuf_copy+0x190>)
 800c4c4:	f008 f8fa 	bl	80146bc <iprintf>
 800c4c8:	f06f 0305 	mvn.w	r3, #5
 800c4cc:	e01b      	b.n	800c506 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d013      	beq.n	800c4fc <pbuf_copy+0x174>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	895a      	ldrh	r2, [r3, #10]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	891b      	ldrh	r3, [r3, #8]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d10d      	bne.n	800c4fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d009      	beq.n	800c4fc <pbuf_copy+0x174>
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <pbuf_copy+0x188>)
 800c4ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c4ee:	490e      	ldr	r1, [pc, #56]	; (800c528 <pbuf_copy+0x1a0>)
 800c4f0:	4809      	ldr	r0, [pc, #36]	; (800c518 <pbuf_copy+0x190>)
 800c4f2:	f008 f8e3 	bl	80146bc <iprintf>
 800c4f6:	f06f 0305 	mvn.w	r3, #5
 800c4fa:	e004      	b.n	800c506 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f47f af61 	bne.w	800c3c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	08015e2c 	.word	0x08015e2c
 800c514:	080160d4 	.word	0x080160d4
 800c518:	08015e8c 	.word	0x08015e8c
 800c51c:	08016104 	.word	0x08016104
 800c520:	0801611c 	.word	0x0801611c
 800c524:	08016138 	.word	0x08016138
 800c528:	08016148 	.word	0x08016148

0800c52c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b088      	sub	sp, #32
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4611      	mov	r1, r2
 800c538:	461a      	mov	r2, r3
 800c53a:	460b      	mov	r3, r1
 800c53c:	80fb      	strh	r3, [r7, #6]
 800c53e:	4613      	mov	r3, r2
 800c540:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d108      	bne.n	800c562 <pbuf_copy_partial+0x36>
 800c550:	4b2b      	ldr	r3, [pc, #172]	; (800c600 <pbuf_copy_partial+0xd4>)
 800c552:	f240 420a 	movw	r2, #1034	; 0x40a
 800c556:	492b      	ldr	r1, [pc, #172]	; (800c604 <pbuf_copy_partial+0xd8>)
 800c558:	482b      	ldr	r0, [pc, #172]	; (800c608 <pbuf_copy_partial+0xdc>)
 800c55a:	f008 f8af 	bl	80146bc <iprintf>
 800c55e:	2300      	movs	r3, #0
 800c560:	e04a      	b.n	800c5f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d108      	bne.n	800c57a <pbuf_copy_partial+0x4e>
 800c568:	4b25      	ldr	r3, [pc, #148]	; (800c600 <pbuf_copy_partial+0xd4>)
 800c56a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c56e:	4927      	ldr	r1, [pc, #156]	; (800c60c <pbuf_copy_partial+0xe0>)
 800c570:	4825      	ldr	r0, [pc, #148]	; (800c608 <pbuf_copy_partial+0xdc>)
 800c572:	f008 f8a3 	bl	80146bc <iprintf>
 800c576:	2300      	movs	r3, #0
 800c578:	e03e      	b.n	800c5f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	e034      	b.n	800c5ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c580:	88bb      	ldrh	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00a      	beq.n	800c59c <pbuf_copy_partial+0x70>
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	895b      	ldrh	r3, [r3, #10]
 800c58a:	88ba      	ldrh	r2, [r7, #4]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d305      	bcc.n	800c59c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	895b      	ldrh	r3, [r3, #10]
 800c594:	88ba      	ldrh	r2, [r7, #4]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	80bb      	strh	r3, [r7, #4]
 800c59a:	e023      	b.n	800c5e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	895a      	ldrh	r2, [r3, #10]
 800c5a0:	88bb      	ldrh	r3, [r7, #4]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c5a6:	8b3a      	ldrh	r2, [r7, #24]
 800c5a8:	88fb      	ldrh	r3, [r7, #6]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d901      	bls.n	800c5b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c5ae:	88fb      	ldrh	r3, [r7, #6]
 800c5b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c5b2:	8b7b      	ldrh	r3, [r7, #26]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	18d0      	adds	r0, r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	88bb      	ldrh	r3, [r7, #4]
 800c5be:	4413      	add	r3, r2
 800c5c0:	8b3a      	ldrh	r2, [r7, #24]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	f008 f864 	bl	8014690 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c5c8:	8afa      	ldrh	r2, [r7, #22]
 800c5ca:	8b3b      	ldrh	r3, [r7, #24]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c5d0:	8b7a      	ldrh	r2, [r7, #26]
 800c5d2:	8b3b      	ldrh	r3, [r7, #24]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c5d8:	88fa      	ldrh	r2, [r7, #6]
 800c5da:	8b3b      	ldrh	r3, [r7, #24]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	61fb      	str	r3, [r7, #28]
 800c5ea:	88fb      	ldrh	r3, [r7, #6]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <pbuf_copy_partial+0xca>
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1c4      	bne.n	800c580 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c5f6:	8afb      	ldrh	r3, [r7, #22]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3720      	adds	r7, #32
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08015e2c 	.word	0x08015e2c
 800c604:	08016174 	.word	0x08016174
 800c608:	08015e8c 	.word	0x08015e8c
 800c60c:	08016194 	.word	0x08016194

0800c610 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	603a      	str	r2, [r7, #0]
 800c61a:	71fb      	strb	r3, [r7, #7]
 800c61c:	460b      	mov	r3, r1
 800c61e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	8919      	ldrh	r1, [r3, #8]
 800c624:	88ba      	ldrh	r2, [r7, #4]
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fab1 	bl	800bb90 <pbuf_alloc>
 800c62e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <pbuf_clone+0x2a>
    return NULL;
 800c636:	2300      	movs	r3, #0
 800c638:	e011      	b.n	800c65e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fea3 	bl	800c388 <pbuf_copy>
 800c642:	4603      	mov	r3, r0
 800c644:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c646:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <pbuf_clone+0x4c>
 800c64e:	4b06      	ldr	r3, [pc, #24]	; (800c668 <pbuf_clone+0x58>)
 800c650:	f240 5224 	movw	r2, #1316	; 0x524
 800c654:	4905      	ldr	r1, [pc, #20]	; (800c66c <pbuf_clone+0x5c>)
 800c656:	4806      	ldr	r0, [pc, #24]	; (800c670 <pbuf_clone+0x60>)
 800c658:	f008 f830 	bl	80146bc <iprintf>
  return q;
 800c65c:	68fb      	ldr	r3, [r7, #12]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	08015e2c 	.word	0x08015e2c
 800c66c:	080162a0 	.word	0x080162a0
 800c670:	08015e8c 	.word	0x08015e8c

0800c674 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c678:	f008 f8ae 	bl	80147d8 <rand>
 800c67c:	4603      	mov	r3, r0
 800c67e:	b29b      	uxth	r3, r3
 800c680:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c684:	b29b      	uxth	r3, r3
 800c686:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	4b01      	ldr	r3, [pc, #4]	; (800c694 <tcp_init+0x20>)
 800c68e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c690:	bf00      	nop
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20000020 	.word	0x20000020

0800c698 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7d1b      	ldrb	r3, [r3, #20]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d105      	bne.n	800c6b4 <tcp_free+0x1c>
 800c6a8:	4b06      	ldr	r3, [pc, #24]	; (800c6c4 <tcp_free+0x2c>)
 800c6aa:	22d4      	movs	r2, #212	; 0xd4
 800c6ac:	4906      	ldr	r1, [pc, #24]	; (800c6c8 <tcp_free+0x30>)
 800c6ae:	4807      	ldr	r0, [pc, #28]	; (800c6cc <tcp_free+0x34>)
 800c6b0:	f008 f804 	bl	80146bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	2001      	movs	r0, #1
 800c6b8:	f7fe fef8 	bl	800b4ac <memp_free>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	0801632c 	.word	0x0801632c
 800c6c8:	0801635c 	.word	0x0801635c
 800c6cc:	08016370 	.word	0x08016370

0800c6d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	7d1b      	ldrb	r3, [r3, #20]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d105      	bne.n	800c6ec <tcp_free_listen+0x1c>
 800c6e0:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <tcp_free_listen+0x2c>)
 800c6e2:	22df      	movs	r2, #223	; 0xdf
 800c6e4:	4906      	ldr	r1, [pc, #24]	; (800c700 <tcp_free_listen+0x30>)
 800c6e6:	4807      	ldr	r0, [pc, #28]	; (800c704 <tcp_free_listen+0x34>)
 800c6e8:	f007 ffe8 	bl	80146bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c6ec:	6879      	ldr	r1, [r7, #4]
 800c6ee:	2002      	movs	r0, #2
 800c6f0:	f7fe fedc 	bl	800b4ac <memp_free>
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	0801632c 	.word	0x0801632c
 800c700:	08016398 	.word	0x08016398
 800c704:	08016370 	.word	0x08016370

0800c708 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c70c:	f000 fea2 	bl	800d454 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <tcp_tmr+0x28>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	3301      	adds	r3, #1
 800c716:	b2da      	uxtb	r2, r3
 800c718:	4b05      	ldr	r3, [pc, #20]	; (800c730 <tcp_tmr+0x28>)
 800c71a:	701a      	strb	r2, [r3, #0]
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <tcp_tmr+0x28>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c728:	f000 fb54 	bl	800cdd4 <tcp_slowtmr>
  }
}
 800c72c:	bf00      	nop
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20008d5d 	.word	0x20008d5d

0800c734 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <tcp_remove_listener+0x1c>
 800c744:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <tcp_remove_listener+0x48>)
 800c746:	22ff      	movs	r2, #255	; 0xff
 800c748:	490d      	ldr	r1, [pc, #52]	; (800c780 <tcp_remove_listener+0x4c>)
 800c74a:	480e      	ldr	r0, [pc, #56]	; (800c784 <tcp_remove_listener+0x50>)
 800c74c:	f007 ffb6 	bl	80146bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	e00a      	b.n	800c76c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d102      	bne.n	800c766 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1f1      	bne.n	800c756 <tcp_remove_listener+0x22>
    }
  }
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	0801632c 	.word	0x0801632c
 800c780:	080163b4 	.word	0x080163b4
 800c784:	08016370 	.word	0x08016370

0800c788 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d106      	bne.n	800c7a4 <tcp_listen_closed+0x1c>
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <tcp_listen_closed+0x60>)
 800c798:	f240 1211 	movw	r2, #273	; 0x111
 800c79c:	4913      	ldr	r1, [pc, #76]	; (800c7ec <tcp_listen_closed+0x64>)
 800c79e:	4814      	ldr	r0, [pc, #80]	; (800c7f0 <tcp_listen_closed+0x68>)
 800c7a0:	f007 ff8c 	bl	80146bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7d1b      	ldrb	r3, [r3, #20]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d006      	beq.n	800c7ba <tcp_listen_closed+0x32>
 800c7ac:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <tcp_listen_closed+0x60>)
 800c7ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c7b2:	4910      	ldr	r1, [pc, #64]	; (800c7f4 <tcp_listen_closed+0x6c>)
 800c7b4:	480e      	ldr	r0, [pc, #56]	; (800c7f0 <tcp_listen_closed+0x68>)
 800c7b6:	f007 ff81 	bl	80146bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e00b      	b.n	800c7d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c7c0:	4a0d      	ldr	r2, [pc, #52]	; (800c7f8 <tcp_listen_closed+0x70>)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff ffb1 	bl	800c734 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d9f0      	bls.n	800c7c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c7de:	bf00      	nop
 800c7e0:	bf00      	nop
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0801632c 	.word	0x0801632c
 800c7ec:	080163dc 	.word	0x080163dc
 800c7f0:	08016370 	.word	0x08016370
 800c7f4:	080163e8 	.word	0x080163e8
 800c7f8:	0801836c 	.word	0x0801836c

0800c7fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c7fc:	b5b0      	push	{r4, r5, r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af04      	add	r7, sp, #16
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <tcp_close_shutdown+0x20>
 800c80e:	4b63      	ldr	r3, [pc, #396]	; (800c99c <tcp_close_shutdown+0x1a0>)
 800c810:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c814:	4962      	ldr	r1, [pc, #392]	; (800c9a0 <tcp_close_shutdown+0x1a4>)
 800c816:	4863      	ldr	r0, [pc, #396]	; (800c9a4 <tcp_close_shutdown+0x1a8>)
 800c818:	f007 ff50 	bl	80146bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d066      	beq.n	800c8f0 <tcp_close_shutdown+0xf4>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7d1b      	ldrb	r3, [r3, #20]
 800c826:	2b04      	cmp	r3, #4
 800c828:	d003      	beq.n	800c832 <tcp_close_shutdown+0x36>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7d1b      	ldrb	r3, [r3, #20]
 800c82e:	2b07      	cmp	r3, #7
 800c830:	d15e      	bne.n	800c8f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c836:	2b00      	cmp	r3, #0
 800c838:	d104      	bne.n	800c844 <tcp_close_shutdown+0x48>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c83e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c842:	d055      	beq.n	800c8f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	8b5b      	ldrh	r3, [r3, #26]
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d106      	bne.n	800c85e <tcp_close_shutdown+0x62>
 800c850:	4b52      	ldr	r3, [pc, #328]	; (800c99c <tcp_close_shutdown+0x1a0>)
 800c852:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c856:	4954      	ldr	r1, [pc, #336]	; (800c9a8 <tcp_close_shutdown+0x1ac>)
 800c858:	4852      	ldr	r0, [pc, #328]	; (800c9a4 <tcp_close_shutdown+0x1a8>)
 800c85a:	f007 ff2f 	bl	80146bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c866:	687d      	ldr	r5, [r7, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3304      	adds	r3, #4
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	8ad2      	ldrh	r2, [r2, #22]
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	8b09      	ldrh	r1, [r1, #24]
 800c874:	9102      	str	r1, [sp, #8]
 800c876:	9201      	str	r2, [sp, #4]
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	462b      	mov	r3, r5
 800c87c:	4622      	mov	r2, r4
 800c87e:	4601      	mov	r1, r0
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f004 fe91 	bl	80115a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f001 f8c6 	bl	800da18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c88c:	4b47      	ldr	r3, [pc, #284]	; (800c9ac <tcp_close_shutdown+0x1b0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d105      	bne.n	800c8a2 <tcp_close_shutdown+0xa6>
 800c896:	4b45      	ldr	r3, [pc, #276]	; (800c9ac <tcp_close_shutdown+0x1b0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	4a43      	ldr	r2, [pc, #268]	; (800c9ac <tcp_close_shutdown+0x1b0>)
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	e013      	b.n	800c8ca <tcp_close_shutdown+0xce>
 800c8a2:	4b42      	ldr	r3, [pc, #264]	; (800c9ac <tcp_close_shutdown+0x1b0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e00c      	b.n	800c8c4 <tcp_close_shutdown+0xc8>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d104      	bne.n	800c8be <tcp_close_shutdown+0xc2>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68da      	ldr	r2, [r3, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	60da      	str	r2, [r3, #12]
 800c8bc:	e005      	b.n	800c8ca <tcp_close_shutdown+0xce>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1ef      	bne.n	800c8aa <tcp_close_shutdown+0xae>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	60da      	str	r2, [r3, #12]
 800c8d0:	4b37      	ldr	r3, [pc, #220]	; (800c9b0 <tcp_close_shutdown+0x1b4>)
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c8d6:	4b37      	ldr	r3, [pc, #220]	; (800c9b4 <tcp_close_shutdown+0x1b8>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d102      	bne.n	800c8e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c8e0:	f003 fd5e 	bl	80103a0 <tcp_trigger_input_pcb_close>
 800c8e4:	e002      	b.n	800c8ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff fed6 	bl	800c698 <tcp_free>
      }
      return ERR_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	e050      	b.n	800c992 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7d1b      	ldrb	r3, [r3, #20]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d03b      	beq.n	800c970 <tcp_close_shutdown+0x174>
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	dc44      	bgt.n	800c986 <tcp_close_shutdown+0x18a>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <tcp_close_shutdown+0x10a>
 800c900:	2b01      	cmp	r3, #1
 800c902:	d02a      	beq.n	800c95a <tcp_close_shutdown+0x15e>
 800c904:	e03f      	b.n	800c986 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8adb      	ldrh	r3, [r3, #22]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d021      	beq.n	800c952 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c90e:	4b2a      	ldr	r3, [pc, #168]	; (800c9b8 <tcp_close_shutdown+0x1bc>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d105      	bne.n	800c924 <tcp_close_shutdown+0x128>
 800c918:	4b27      	ldr	r3, [pc, #156]	; (800c9b8 <tcp_close_shutdown+0x1bc>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	4a26      	ldr	r2, [pc, #152]	; (800c9b8 <tcp_close_shutdown+0x1bc>)
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	e013      	b.n	800c94c <tcp_close_shutdown+0x150>
 800c924:	4b24      	ldr	r3, [pc, #144]	; (800c9b8 <tcp_close_shutdown+0x1bc>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	e00c      	b.n	800c946 <tcp_close_shutdown+0x14a>
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d104      	bne.n	800c940 <tcp_close_shutdown+0x144>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	e005      	b.n	800c94c <tcp_close_shutdown+0x150>
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	60bb      	str	r3, [r7, #8]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1ef      	bne.n	800c92c <tcp_close_shutdown+0x130>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fea0 	bl	800c698 <tcp_free>
      break;
 800c958:	e01a      	b.n	800c990 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff ff14 	bl	800c788 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4816      	ldr	r0, [pc, #88]	; (800c9bc <tcp_close_shutdown+0x1c0>)
 800c964:	f001 f8a8 	bl	800dab8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff feb1 	bl	800c6d0 <tcp_free_listen>
      break;
 800c96e:	e00f      	b.n	800c990 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	480e      	ldr	r0, [pc, #56]	; (800c9ac <tcp_close_shutdown+0x1b0>)
 800c974:	f001 f8a0 	bl	800dab8 <tcp_pcb_remove>
 800c978:	4b0d      	ldr	r3, [pc, #52]	; (800c9b0 <tcp_close_shutdown+0x1b4>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fe8a 	bl	800c698 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c984:	e004      	b.n	800c990 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f81a 	bl	800c9c0 <tcp_close_shutdown_fin>
 800c98c:	4603      	mov	r3, r0
 800c98e:	e000      	b.n	800c992 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bdb0      	pop	{r4, r5, r7, pc}
 800c99a:	bf00      	nop
 800c99c:	0801632c 	.word	0x0801632c
 800c9a0:	08016400 	.word	0x08016400
 800c9a4:	08016370 	.word	0x08016370
 800c9a8:	08016420 	.word	0x08016420
 800c9ac:	20008d54 	.word	0x20008d54
 800c9b0:	20008d5c 	.word	0x20008d5c
 800c9b4:	20008d94 	.word	0x20008d94
 800c9b8:	20008d4c 	.word	0x20008d4c
 800c9bc:	20008d50 	.word	0x20008d50

0800c9c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <tcp_close_shutdown_fin+0x1c>
 800c9ce:	4b2e      	ldr	r3, [pc, #184]	; (800ca88 <tcp_close_shutdown_fin+0xc8>)
 800c9d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c9d4:	492d      	ldr	r1, [pc, #180]	; (800ca8c <tcp_close_shutdown_fin+0xcc>)
 800c9d6:	482e      	ldr	r0, [pc, #184]	; (800ca90 <tcp_close_shutdown_fin+0xd0>)
 800c9d8:	f007 fe70 	bl	80146bc <iprintf>

  switch (pcb->state) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	2b07      	cmp	r3, #7
 800c9e2:	d020      	beq.n	800ca26 <tcp_close_shutdown_fin+0x66>
 800c9e4:	2b07      	cmp	r3, #7
 800c9e6:	dc2b      	bgt.n	800ca40 <tcp_close_shutdown_fin+0x80>
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d002      	beq.n	800c9f2 <tcp_close_shutdown_fin+0x32>
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d00d      	beq.n	800ca0c <tcp_close_shutdown_fin+0x4c>
 800c9f0:	e026      	b.n	800ca40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f003 fee6 	bl	80107c4 <tcp_send_fin>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11f      	bne.n	800ca44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2205      	movs	r2, #5
 800ca08:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca0a:	e01b      	b.n	800ca44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f003 fed9 	bl	80107c4 <tcp_send_fin>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d114      	bne.n	800ca48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2205      	movs	r2, #5
 800ca22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca24:	e010      	b.n	800ca48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f003 fecc 	bl	80107c4 <tcp_send_fin>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d109      	bne.n	800ca4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2209      	movs	r2, #9
 800ca3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca3e:	e005      	b.n	800ca4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e01c      	b.n	800ca7e <tcp_close_shutdown_fin+0xbe>
      break;
 800ca44:	bf00      	nop
 800ca46:	e002      	b.n	800ca4e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca48:	bf00      	nop
 800ca4a:	e000      	b.n	800ca4e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d103      	bne.n	800ca5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f003 fff2 	bl	8010a40 <tcp_output>
 800ca5c:	e00d      	b.n	800ca7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ca5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	d108      	bne.n	800ca7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8b5b      	ldrh	r3, [r3, #26]
 800ca6c:	f043 0308 	orr.w	r3, r3, #8
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	e001      	b.n	800ca7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ca7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	0801632c 	.word	0x0801632c
 800ca8c:	080163dc 	.word	0x080163dc
 800ca90:	08016370 	.word	0x08016370

0800ca94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d109      	bne.n	800cab6 <tcp_close+0x22>
 800caa2:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <tcp_close+0x4c>)
 800caa4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800caa8:	490e      	ldr	r1, [pc, #56]	; (800cae4 <tcp_close+0x50>)
 800caaa:	480f      	ldr	r0, [pc, #60]	; (800cae8 <tcp_close+0x54>)
 800caac:	f007 fe06 	bl	80146bc <iprintf>
 800cab0:	f06f 030f 	mvn.w	r3, #15
 800cab4:	e00f      	b.n	800cad6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	7d1b      	ldrb	r3, [r3, #20]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d006      	beq.n	800cacc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	8b5b      	ldrh	r3, [r3, #26]
 800cac2:	f043 0310 	orr.w	r3, r3, #16
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cacc:	2101      	movs	r1, #1
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff fe94 	bl	800c7fc <tcp_close_shutdown>
 800cad4:	4603      	mov	r3, r0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	0801632c 	.word	0x0801632c
 800cae4:	0801643c 	.word	0x0801643c
 800cae8:	08016370 	.word	0x08016370

0800caec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08e      	sub	sp, #56	; 0x38
 800caf0:	af04      	add	r7, sp, #16
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d107      	bne.n	800cb0c <tcp_abandon+0x20>
 800cafc:	4b52      	ldr	r3, [pc, #328]	; (800cc48 <tcp_abandon+0x15c>)
 800cafe:	f240 223d 	movw	r2, #573	; 0x23d
 800cb02:	4952      	ldr	r1, [pc, #328]	; (800cc4c <tcp_abandon+0x160>)
 800cb04:	4852      	ldr	r0, [pc, #328]	; (800cc50 <tcp_abandon+0x164>)
 800cb06:	f007 fdd9 	bl	80146bc <iprintf>
 800cb0a:	e099      	b.n	800cc40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d106      	bne.n	800cb22 <tcp_abandon+0x36>
 800cb14:	4b4c      	ldr	r3, [pc, #304]	; (800cc48 <tcp_abandon+0x15c>)
 800cb16:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cb1a:	494e      	ldr	r1, [pc, #312]	; (800cc54 <tcp_abandon+0x168>)
 800cb1c:	484c      	ldr	r0, [pc, #304]	; (800cc50 <tcp_abandon+0x164>)
 800cb1e:	f007 fdcd 	bl	80146bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7d1b      	ldrb	r3, [r3, #20]
 800cb26:	2b0a      	cmp	r3, #10
 800cb28:	d107      	bne.n	800cb3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	484a      	ldr	r0, [pc, #296]	; (800cc58 <tcp_abandon+0x16c>)
 800cb2e:	f000 ffc3 	bl	800dab8 <tcp_pcb_remove>
    tcp_free(pcb);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fdb0 	bl	800c698 <tcp_free>
 800cb38:	e082      	b.n	800cc40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7d1b      	ldrb	r3, [r3, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d126      	bne.n	800cbb2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8adb      	ldrh	r3, [r3, #22]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d02e      	beq.n	800cbca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb6c:	4b3b      	ldr	r3, [pc, #236]	; (800cc5c <tcp_abandon+0x170>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d105      	bne.n	800cb82 <tcp_abandon+0x96>
 800cb76:	4b39      	ldr	r3, [pc, #228]	; (800cc5c <tcp_abandon+0x170>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	4a37      	ldr	r2, [pc, #220]	; (800cc5c <tcp_abandon+0x170>)
 800cb7e:	6013      	str	r3, [r2, #0]
 800cb80:	e013      	b.n	800cbaa <tcp_abandon+0xbe>
 800cb82:	4b36      	ldr	r3, [pc, #216]	; (800cc5c <tcp_abandon+0x170>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	e00c      	b.n	800cba4 <tcp_abandon+0xb8>
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d104      	bne.n	800cb9e <tcp_abandon+0xb2>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68da      	ldr	r2, [r3, #12]
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	60da      	str	r2, [r3, #12]
 800cb9c:	e005      	b.n	800cbaa <tcp_abandon+0xbe>
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	61fb      	str	r3, [r7, #28]
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1ef      	bne.n	800cb8a <tcp_abandon+0x9e>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	60da      	str	r2, [r3, #12]
 800cbb0:	e00b      	b.n	800cbca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	8adb      	ldrh	r3, [r3, #22]
 800cbba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4828      	ldr	r0, [pc, #160]	; (800cc60 <tcp_abandon+0x174>)
 800cbc0:	f000 ff7a 	bl	800dab8 <tcp_pcb_remove>
 800cbc4:	4b27      	ldr	r3, [pc, #156]	; (800cc64 <tcp_abandon+0x178>)
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fd1c 	bl	800d614 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f000 fd13 	bl	800d614 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d004      	beq.n	800cc00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fd0a 	bl	800d614 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00e      	beq.n	800cc24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc06:	6879      	ldr	r1, [r7, #4]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	8b12      	ldrh	r2, [r2, #24]
 800cc10:	9202      	str	r2, [sp, #8]
 800cc12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc14:	9201      	str	r2, [sp, #4]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	69b9      	ldr	r1, [r7, #24]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f004 fcc2 	bl	80115a8 <tcp_rst>
    }
    last_state = pcb->state;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7d1b      	ldrb	r3, [r3, #20]
 800cc28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff fd34 	bl	800c698 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d004      	beq.n	800cc40 <tcp_abandon+0x154>
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f06f 010c 	mvn.w	r1, #12
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	4798      	blx	r3
  }
}
 800cc40:	3728      	adds	r7, #40	; 0x28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	0801632c 	.word	0x0801632c
 800cc4c:	08016470 	.word	0x08016470
 800cc50:	08016370 	.word	0x08016370
 800cc54:	0801648c 	.word	0x0801648c
 800cc58:	20008d58 	.word	0x20008d58
 800cc5c:	20008d4c 	.word	0x20008d4c
 800cc60:	20008d54 	.word	0x20008d54
 800cc64:	20008d5c 	.word	0x20008d5c

0800cc68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc70:	2101      	movs	r1, #1
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff ff3a 	bl	800caec <tcp_abandon>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <tcp_update_rcv_ann_wnd+0x1c>
 800cc8e:	4b25      	ldr	r3, [pc, #148]	; (800cd24 <tcp_update_rcv_ann_wnd+0xa4>)
 800cc90:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cc94:	4924      	ldr	r1, [pc, #144]	; (800cd28 <tcp_update_rcv_ann_wnd+0xa8>)
 800cc96:	4825      	ldr	r0, [pc, #148]	; (800cd2c <tcp_update_rcv_ann_wnd+0xac>)
 800cc98:	f007 fd10 	bl	80146bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cca4:	4413      	add	r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ccb0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ccb4:	bf28      	it	cs
 800ccb6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ccba:	b292      	uxth	r2, r2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	db08      	blt.n	800ccd8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	e020      	b.n	800cd1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	dd03      	ble.n	800ccee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccec:	e014      	b.n	800cd18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd00:	d306      	bcc.n	800cd10 <tcp_update_rcv_ann_wnd+0x90>
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd04:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cd08:	4909      	ldr	r1, [pc, #36]	; (800cd30 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd0a:	4808      	ldr	r0, [pc, #32]	; (800cd2c <tcp_update_rcv_ann_wnd+0xac>)
 800cd0c:	f007 fcd6 	bl	80146bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cd18:	2300      	movs	r3, #0
  }
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	0801632c 	.word	0x0801632c
 800cd28:	08016588 	.word	0x08016588
 800cd2c:	08016370 	.word	0x08016370
 800cd30:	080165ac 	.word	0x080165ac

0800cd34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d107      	bne.n	800cd56 <tcp_recved+0x22>
 800cd46:	4b1f      	ldr	r3, [pc, #124]	; (800cdc4 <tcp_recved+0x90>)
 800cd48:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cd4c:	491e      	ldr	r1, [pc, #120]	; (800cdc8 <tcp_recved+0x94>)
 800cd4e:	481f      	ldr	r0, [pc, #124]	; (800cdcc <tcp_recved+0x98>)
 800cd50:	f007 fcb4 	bl	80146bc <iprintf>
 800cd54:	e032      	b.n	800cdbc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7d1b      	ldrb	r3, [r3, #20]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d106      	bne.n	800cd6c <tcp_recved+0x38>
 800cd5e:	4b19      	ldr	r3, [pc, #100]	; (800cdc4 <tcp_recved+0x90>)
 800cd60:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cd64:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <tcp_recved+0x9c>)
 800cd66:	4819      	ldr	r0, [pc, #100]	; (800cdcc <tcp_recved+0x98>)
 800cd68:	f007 fca8 	bl	80146bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd70:	887b      	ldrh	r3, [r7, #2]
 800cd72:	4413      	add	r3, r2
 800cd74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cd76:	89fb      	ldrh	r3, [r7, #14]
 800cd78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd7c:	d804      	bhi.n	800cd88 <tcp_recved+0x54>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd82:	89fa      	ldrh	r2, [r7, #14]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d204      	bcs.n	800cd92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cd8e:	851a      	strh	r2, [r3, #40]	; 0x28
 800cd90:	e002      	b.n	800cd98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	89fa      	ldrh	r2, [r7, #14]
 800cd96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff71 	bl	800cc80 <tcp_update_rcv_ann_wnd>
 800cd9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cda6:	d309      	bcc.n	800cdbc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	8b5b      	ldrh	r3, [r3, #26]
 800cdac:	f043 0302 	orr.w	r3, r3, #2
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f003 fe42 	bl	8010a40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0801632c 	.word	0x0801632c
 800cdc8:	080165c8 	.word	0x080165c8
 800cdcc:	08016370 	.word	0x08016370
 800cdd0:	080165e0 	.word	0x080165e0

0800cdd4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cdd4:	b5b0      	push	{r4, r5, r7, lr}
 800cdd6:	b090      	sub	sp, #64	; 0x40
 800cdd8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cde0:	4b94      	ldr	r3, [pc, #592]	; (800d034 <tcp_slowtmr+0x260>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3301      	adds	r3, #1
 800cde6:	4a93      	ldr	r2, [pc, #588]	; (800d034 <tcp_slowtmr+0x260>)
 800cde8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cdea:	4b93      	ldr	r3, [pc, #588]	; (800d038 <tcp_slowtmr+0x264>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	4b91      	ldr	r3, [pc, #580]	; (800d038 <tcp_slowtmr+0x264>)
 800cdf4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cdfa:	4b90      	ldr	r3, [pc, #576]	; (800d03c <tcp_slowtmr+0x268>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ce00:	e29d      	b.n	800d33e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	7d1b      	ldrb	r3, [r3, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <tcp_slowtmr+0x44>
 800ce0a:	4b8d      	ldr	r3, [pc, #564]	; (800d040 <tcp_slowtmr+0x26c>)
 800ce0c:	f240 42be 	movw	r2, #1214	; 0x4be
 800ce10:	498c      	ldr	r1, [pc, #560]	; (800d044 <tcp_slowtmr+0x270>)
 800ce12:	488d      	ldr	r0, [pc, #564]	; (800d048 <tcp_slowtmr+0x274>)
 800ce14:	f007 fc52 	bl	80146bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	7d1b      	ldrb	r3, [r3, #20]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d106      	bne.n	800ce2e <tcp_slowtmr+0x5a>
 800ce20:	4b87      	ldr	r3, [pc, #540]	; (800d040 <tcp_slowtmr+0x26c>)
 800ce22:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ce26:	4989      	ldr	r1, [pc, #548]	; (800d04c <tcp_slowtmr+0x278>)
 800ce28:	4887      	ldr	r0, [pc, #540]	; (800d048 <tcp_slowtmr+0x274>)
 800ce2a:	f007 fc47 	bl	80146bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	7d1b      	ldrb	r3, [r3, #20]
 800ce32:	2b0a      	cmp	r3, #10
 800ce34:	d106      	bne.n	800ce44 <tcp_slowtmr+0x70>
 800ce36:	4b82      	ldr	r3, [pc, #520]	; (800d040 <tcp_slowtmr+0x26c>)
 800ce38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ce3c:	4984      	ldr	r1, [pc, #528]	; (800d050 <tcp_slowtmr+0x27c>)
 800ce3e:	4882      	ldr	r0, [pc, #520]	; (800d048 <tcp_slowtmr+0x274>)
 800ce40:	f007 fc3c 	bl	80146bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	7f9a      	ldrb	r2, [r3, #30]
 800ce48:	4b7b      	ldr	r3, [pc, #492]	; (800d038 <tcp_slowtmr+0x264>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d105      	bne.n	800ce5c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ce5a:	e270      	b.n	800d33e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ce5c:	4b76      	ldr	r3, [pc, #472]	; (800d038 <tcp_slowtmr+0x264>)
 800ce5e:	781a      	ldrb	r2, [r3, #0]
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d10a      	bne.n	800ce8e <tcp_slowtmr+0xba>
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce7e:	2b05      	cmp	r3, #5
 800ce80:	d905      	bls.n	800ce8e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ce82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce86:	3301      	adds	r3, #1
 800ce88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce8c:	e11e      	b.n	800d0cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce94:	2b0b      	cmp	r3, #11
 800ce96:	d905      	bls.n	800cea4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cea2:	e113      	b.n	800d0cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d075      	beq.n	800cf9a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <tcp_slowtmr+0xf0>
 800ceb6:	4b62      	ldr	r3, [pc, #392]	; (800d040 <tcp_slowtmr+0x26c>)
 800ceb8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cebc:	4965      	ldr	r1, [pc, #404]	; (800d054 <tcp_slowtmr+0x280>)
 800cebe:	4862      	ldr	r0, [pc, #392]	; (800d048 <tcp_slowtmr+0x274>)
 800cec0:	f007 fbfc 	bl	80146bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <tcp_slowtmr+0x106>
 800cecc:	4b5c      	ldr	r3, [pc, #368]	; (800d040 <tcp_slowtmr+0x26c>)
 800cece:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ced2:	4961      	ldr	r1, [pc, #388]	; (800d058 <tcp_slowtmr+0x284>)
 800ced4:	485c      	ldr	r0, [pc, #368]	; (800d048 <tcp_slowtmr+0x274>)
 800ced6:	f007 fbf1 	bl	80146bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cee0:	2b0b      	cmp	r3, #11
 800cee2:	d905      	bls.n	800cef0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee8:	3301      	adds	r3, #1
 800ceea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceee:	e0ed      	b.n	800d0cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cef6:	3b01      	subs	r3, #1
 800cef8:	4a58      	ldr	r2, [pc, #352]	; (800d05c <tcp_slowtmr+0x288>)
 800cefa:	5cd3      	ldrb	r3, [r2, r3]
 800cefc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf04:	7c7a      	ldrb	r2, [r7, #17]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d907      	bls.n	800cf1a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf10:	3301      	adds	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf20:	7c7a      	ldrb	r2, [r7, #17]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	f200 80d2 	bhi.w	800d0cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cf28:	2301      	movs	r3, #1
 800cf2a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d108      	bne.n	800cf48 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cf36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf38:	f004 fc2a 	bl	8011790 <tcp_zero_window_probe>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d014      	beq.n	800cf6c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cf42:	2300      	movs	r3, #0
 800cf44:	623b      	str	r3, [r7, #32]
 800cf46:	e011      	b.n	800cf6c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf52:	f003 faef 	bl	8010534 <tcp_split_unsent_seg>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d107      	bne.n	800cf6c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cf5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf5e:	f003 fd6f 	bl	8010a40 <tcp_output>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f000 80ac 	beq.w	800d0cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf82:	2b06      	cmp	r3, #6
 800cf84:	f200 80a2 	bhi.w	800d0cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cf98:	e098      	b.n	800d0cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db0f      	blt.n	800cfc4 <tcp_slowtmr+0x1f0>
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfaa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d008      	beq.n	800cfc4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	b21a      	sxth	r2, r3
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	db7b      	blt.n	800d0cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cfd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfd6:	f004 f825 	bl	8011024 <tcp_rexmit_rto_prepare>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d007      	beq.n	800cff0 <tcp_slowtmr+0x21c>
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d171      	bne.n	800d0cc <tcp_slowtmr+0x2f8>
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d06d      	beq.n	800d0cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	7d1b      	ldrb	r3, [r3, #20]
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d03a      	beq.n	800d06e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cffe:	2b0c      	cmp	r3, #12
 800d000:	bf28      	it	cs
 800d002:	230c      	movcs	r3, #12
 800d004:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d008:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d00c:	10db      	asrs	r3, r3, #3
 800d00e:	b21b      	sxth	r3, r3
 800d010:	461a      	mov	r2, r3
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d018:	4413      	add	r3, r2
 800d01a:	7efa      	ldrb	r2, [r7, #27]
 800d01c:	4910      	ldr	r1, [pc, #64]	; (800d060 <tcp_slowtmr+0x28c>)
 800d01e:	5c8a      	ldrb	r2, [r1, r2]
 800d020:	4093      	lsls	r3, r2
 800d022:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d02a:	4293      	cmp	r3, r2
 800d02c:	dc1a      	bgt.n	800d064 <tcp_slowtmr+0x290>
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	b21a      	sxth	r2, r3
 800d032:	e019      	b.n	800d068 <tcp_slowtmr+0x294>
 800d034:	20008d48 	.word	0x20008d48
 800d038:	20008d5e 	.word	0x20008d5e
 800d03c:	20008d54 	.word	0x20008d54
 800d040:	0801632c 	.word	0x0801632c
 800d044:	08016670 	.word	0x08016670
 800d048:	08016370 	.word	0x08016370
 800d04c:	0801669c 	.word	0x0801669c
 800d050:	080166c8 	.word	0x080166c8
 800d054:	080166f8 	.word	0x080166f8
 800d058:	0801672c 	.word	0x0801672c
 800d05c:	08018364 	.word	0x08018364
 800d060:	08018354 	.word	0x08018354
 800d064:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	2200      	movs	r2, #0
 800d072:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d080:	4293      	cmp	r3, r2
 800d082:	bf28      	it	cs
 800d084:	4613      	movcs	r3, r2
 800d086:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d088:	8a7b      	ldrh	r3, [r7, #18]
 800d08a:	085b      	lsrs	r3, r3, #1
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d206      	bcs.n	800d0b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d0c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0c8:	f004 f81c 	bl	8011104 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	7d1b      	ldrb	r3, [r3, #20]
 800d0d0:	2b06      	cmp	r3, #6
 800d0d2:	d111      	bne.n	800d0f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	8b5b      	ldrh	r3, [r3, #26]
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0e0:	4b9c      	ldr	r3, [pc, #624]	; (800d354 <tcp_slowtmr+0x580>)
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b28      	cmp	r3, #40	; 0x28
 800d0ec:	d904      	bls.n	800d0f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	7a5b      	ldrb	r3, [r3, #9]
 800d0fc:	f003 0308 	and.w	r3, r3, #8
 800d100:	2b00      	cmp	r3, #0
 800d102:	d04a      	beq.n	800d19a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d003      	beq.n	800d114 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d110:	2b07      	cmp	r3, #7
 800d112:	d142      	bne.n	800d19a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d114:	4b8f      	ldr	r3, [pc, #572]	; (800d354 <tcp_slowtmr+0x580>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d120:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d124:	4b8c      	ldr	r3, [pc, #560]	; (800d358 <tcp_slowtmr+0x584>)
 800d126:	440b      	add	r3, r1
 800d128:	498c      	ldr	r1, [pc, #560]	; (800d35c <tcp_slowtmr+0x588>)
 800d12a:	fba1 1303 	umull	r1, r3, r1, r3
 800d12e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d130:	429a      	cmp	r2, r3
 800d132:	d90a      	bls.n	800d14a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d138:	3301      	adds	r3, #1
 800d13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d13e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d142:	3301      	adds	r3, #1
 800d144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d148:	e027      	b.n	800d19a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d14a:	4b82      	ldr	r3, [pc, #520]	; (800d354 <tcp_slowtmr+0x580>)
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d160:	4618      	mov	r0, r3
 800d162:	4b7f      	ldr	r3, [pc, #508]	; (800d360 <tcp_slowtmr+0x58c>)
 800d164:	fb00 f303 	mul.w	r3, r0, r3
 800d168:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d16a:	497c      	ldr	r1, [pc, #496]	; (800d35c <tcp_slowtmr+0x588>)
 800d16c:	fba1 1303 	umull	r1, r3, r1, r3
 800d170:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d172:	429a      	cmp	r2, r3
 800d174:	d911      	bls.n	800d19a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d178:	f004 faca 	bl	8011710 <tcp_keepalive>
 800d17c:	4603      	mov	r3, r0
 800d17e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d182:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d186:	2b00      	cmp	r3, #0
 800d188:	d107      	bne.n	800d19a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d190:	3301      	adds	r3, #1
 800d192:	b2da      	uxtb	r2, r3
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d011      	beq.n	800d1c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d1a2:	4b6c      	ldr	r3, [pc, #432]	; (800d354 <tcp_slowtmr+0x580>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	1ad2      	subs	r2, r2, r3
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	440b      	add	r3, r1
 800d1ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d302      	bcc.n	800d1c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1c2:	f000 fddd 	bl	800dd80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d10b      	bne.n	800d1e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ce:	4b61      	ldr	r3, [pc, #388]	; (800d354 <tcp_slowtmr+0x580>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b28      	cmp	r3, #40	; 0x28
 800d1da:	d904      	bls.n	800d1e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	d10b      	bne.n	800d206 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1ee:	4b59      	ldr	r3, [pc, #356]	; (800d354 <tcp_slowtmr+0x580>)
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2bf0      	cmp	r3, #240	; 0xf0
 800d1fa:	d904      	bls.n	800d206 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d200:	3301      	adds	r3, #1
 800d202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d060      	beq.n	800d2d0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d214:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d218:	f000 fbfe 	bl	800da18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d010      	beq.n	800d244 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d222:	4b50      	ldr	r3, [pc, #320]	; (800d364 <tcp_slowtmr+0x590>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d228:	429a      	cmp	r2, r3
 800d22a:	d106      	bne.n	800d23a <tcp_slowtmr+0x466>
 800d22c:	4b4e      	ldr	r3, [pc, #312]	; (800d368 <tcp_slowtmr+0x594>)
 800d22e:	f240 526d 	movw	r2, #1389	; 0x56d
 800d232:	494e      	ldr	r1, [pc, #312]	; (800d36c <tcp_slowtmr+0x598>)
 800d234:	484e      	ldr	r0, [pc, #312]	; (800d370 <tcp_slowtmr+0x59c>)
 800d236:	f007 fa41 	bl	80146bc <iprintf>
        prev->next = pcb->next;
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	60da      	str	r2, [r3, #12]
 800d242:	e00f      	b.n	800d264 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d244:	4b47      	ldr	r3, [pc, #284]	; (800d364 <tcp_slowtmr+0x590>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d006      	beq.n	800d25c <tcp_slowtmr+0x488>
 800d24e:	4b46      	ldr	r3, [pc, #280]	; (800d368 <tcp_slowtmr+0x594>)
 800d250:	f240 5271 	movw	r2, #1393	; 0x571
 800d254:	4947      	ldr	r1, [pc, #284]	; (800d374 <tcp_slowtmr+0x5a0>)
 800d256:	4846      	ldr	r0, [pc, #280]	; (800d370 <tcp_slowtmr+0x59c>)
 800d258:	f007 fa30 	bl	80146bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	4a40      	ldr	r2, [pc, #256]	; (800d364 <tcp_slowtmr+0x590>)
 800d262:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d013      	beq.n	800d294 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d272:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d274:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	3304      	adds	r3, #4
 800d27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d27c:	8ad2      	ldrh	r2, [r2, #22]
 800d27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d280:	8b09      	ldrh	r1, [r1, #24]
 800d282:	9102      	str	r1, [sp, #8]
 800d284:	9201      	str	r2, [sp, #4]
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	462b      	mov	r3, r5
 800d28a:	4622      	mov	r2, r4
 800d28c:	4601      	mov	r1, r0
 800d28e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d290:	f004 f98a 	bl	80115a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	691b      	ldr	r3, [r3, #16]
 800d298:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	7d1b      	ldrb	r3, [r3, #20]
 800d29e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d2aa:	6838      	ldr	r0, [r7, #0]
 800d2ac:	f7ff f9f4 	bl	800c698 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d2b0:	4b31      	ldr	r3, [pc, #196]	; (800d378 <tcp_slowtmr+0x5a4>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d004      	beq.n	800d2c6 <tcp_slowtmr+0x4f2>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f06f 010c 	mvn.w	r1, #12
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d2c6:	4b2c      	ldr	r3, [pc, #176]	; (800d378 <tcp_slowtmr+0x5a4>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d037      	beq.n	800d33e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d2ce:	e592      	b.n	800cdf6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	7f1b      	ldrb	r3, [r3, #28]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	7f1a      	ldrb	r2, [r3, #28]
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	7f5b      	ldrb	r3, [r3, #29]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d325      	bcc.n	800d33e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d2f8:	4b1f      	ldr	r3, [pc, #124]	; (800d378 <tcp_slowtmr+0x5a4>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00b      	beq.n	800d320 <tcp_slowtmr+0x54c>
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d310:	6912      	ldr	r2, [r2, #16]
 800d312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d314:	4610      	mov	r0, r2
 800d316:	4798      	blx	r3
 800d318:	4603      	mov	r3, r0
 800d31a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d31e:	e002      	b.n	800d326 <tcp_slowtmr+0x552>
 800d320:	2300      	movs	r3, #0
 800d322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <tcp_slowtmr+0x5a4>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d000      	beq.n	800d330 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d32e:	e562      	b.n	800cdf6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d330:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d33a:	f003 fb81 	bl	8010a40 <tcp_output>
  while (pcb != NULL) {
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	2b00      	cmp	r3, #0
 800d342:	f47f ad5e 	bne.w	800ce02 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d34a:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <tcp_slowtmr+0x5a8>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d350:	e069      	b.n	800d426 <tcp_slowtmr+0x652>
 800d352:	bf00      	nop
 800d354:	20008d48 	.word	0x20008d48
 800d358:	000a4cb8 	.word	0x000a4cb8
 800d35c:	10624dd3 	.word	0x10624dd3
 800d360:	000124f8 	.word	0x000124f8
 800d364:	20008d54 	.word	0x20008d54
 800d368:	0801632c 	.word	0x0801632c
 800d36c:	08016764 	.word	0x08016764
 800d370:	08016370 	.word	0x08016370
 800d374:	08016790 	.word	0x08016790
 800d378:	20008d5c 	.word	0x20008d5c
 800d37c:	20008d58 	.word	0x20008d58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	7d1b      	ldrb	r3, [r3, #20]
 800d384:	2b0a      	cmp	r3, #10
 800d386:	d006      	beq.n	800d396 <tcp_slowtmr+0x5c2>
 800d388:	4b2b      	ldr	r3, [pc, #172]	; (800d438 <tcp_slowtmr+0x664>)
 800d38a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d38e:	492b      	ldr	r1, [pc, #172]	; (800d43c <tcp_slowtmr+0x668>)
 800d390:	482b      	ldr	r0, [pc, #172]	; (800d440 <tcp_slowtmr+0x66c>)
 800d392:	f007 f993 	bl	80146bc <iprintf>
    pcb_remove = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d39c:	4b29      	ldr	r3, [pc, #164]	; (800d444 <tcp_slowtmr+0x670>)
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2bf0      	cmp	r3, #240	; 0xf0
 800d3a8:	d904      	bls.n	800d3b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d02f      	beq.n	800d41c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3be:	f000 fb2b 	bl	800da18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d010      	beq.n	800d3ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d3c8:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <tcp_slowtmr+0x674>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d106      	bne.n	800d3e0 <tcp_slowtmr+0x60c>
 800d3d2:	4b19      	ldr	r3, [pc, #100]	; (800d438 <tcp_slowtmr+0x664>)
 800d3d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800d3d8:	491c      	ldr	r1, [pc, #112]	; (800d44c <tcp_slowtmr+0x678>)
 800d3da:	4819      	ldr	r0, [pc, #100]	; (800d440 <tcp_slowtmr+0x66c>)
 800d3dc:	f007 f96e 	bl	80146bc <iprintf>
        prev->next = pcb->next;
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	60da      	str	r2, [r3, #12]
 800d3e8:	e00f      	b.n	800d40a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d3ea:	4b17      	ldr	r3, [pc, #92]	; (800d448 <tcp_slowtmr+0x674>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d006      	beq.n	800d402 <tcp_slowtmr+0x62e>
 800d3f4:	4b10      	ldr	r3, [pc, #64]	; (800d438 <tcp_slowtmr+0x664>)
 800d3f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d3fa:	4915      	ldr	r1, [pc, #84]	; (800d450 <tcp_slowtmr+0x67c>)
 800d3fc:	4810      	ldr	r0, [pc, #64]	; (800d440 <tcp_slowtmr+0x66c>)
 800d3fe:	f007 f95d 	bl	80146bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	4a10      	ldr	r2, [pc, #64]	; (800d448 <tcp_slowtmr+0x674>)
 800d408:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d414:	69f8      	ldr	r0, [r7, #28]
 800d416:	f7ff f93f 	bl	800c698 <tcp_free>
 800d41a:	e004      	b.n	800d426 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1a9      	bne.n	800d380 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	3730      	adds	r7, #48	; 0x30
 800d432:	46bd      	mov	sp, r7
 800d434:	bdb0      	pop	{r4, r5, r7, pc}
 800d436:	bf00      	nop
 800d438:	0801632c 	.word	0x0801632c
 800d43c:	080167bc 	.word	0x080167bc
 800d440:	08016370 	.word	0x08016370
 800d444:	20008d48 	.word	0x20008d48
 800d448:	20008d58 	.word	0x20008d58
 800d44c:	080167ec 	.word	0x080167ec
 800d450:	08016814 	.word	0x08016814

0800d454 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d45a:	4b2d      	ldr	r3, [pc, #180]	; (800d510 <tcp_fasttmr+0xbc>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	3301      	adds	r3, #1
 800d460:	b2da      	uxtb	r2, r3
 800d462:	4b2b      	ldr	r3, [pc, #172]	; (800d510 <tcp_fasttmr+0xbc>)
 800d464:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d466:	4b2b      	ldr	r3, [pc, #172]	; (800d514 <tcp_fasttmr+0xc0>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d46c:	e048      	b.n	800d500 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7f9a      	ldrb	r2, [r3, #30]
 800d472:	4b27      	ldr	r3, [pc, #156]	; (800d510 <tcp_fasttmr+0xbc>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	d03f      	beq.n	800d4fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d47a:	4b25      	ldr	r3, [pc, #148]	; (800d510 <tcp_fasttmr+0xbc>)
 800d47c:	781a      	ldrb	r2, [r3, #0]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8b5b      	ldrh	r3, [r3, #26]
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d010      	beq.n	800d4b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	8b5b      	ldrh	r3, [r3, #26]
 800d492:	f043 0302 	orr.w	r3, r3, #2
 800d496:	b29a      	uxth	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f003 facf 	bl	8010a40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	8b5b      	ldrh	r3, [r3, #26]
 800d4a6:	f023 0303 	bic.w	r3, r3, #3
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8b5b      	ldrh	r3, [r3, #26]
 800d4b4:	f003 0308 	and.w	r3, r3, #8
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d009      	beq.n	800d4d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	8b5b      	ldrh	r3, [r3, #26]
 800d4c0:	f023 0308 	bic.w	r3, r3, #8
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7ff fa78 	bl	800c9c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d4de:	4b0e      	ldr	r3, [pc, #56]	; (800d518 <tcp_fasttmr+0xc4>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f819 	bl	800d51c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <tcp_fasttmr+0xc4>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d000      	beq.n	800d4f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d4f2:	e7b8      	b.n	800d466 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	e002      	b.n	800d500 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1b3      	bne.n	800d46e <tcp_fasttmr+0x1a>
    }
  }
}
 800d506:	bf00      	nop
 800d508:	bf00      	nop
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20008d5e 	.word	0x20008d5e
 800d514:	20008d54 	.word	0x20008d54
 800d518:	20008d5c 	.word	0x20008d5c

0800d51c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d51c:	b590      	push	{r4, r7, lr}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d109      	bne.n	800d53e <tcp_process_refused_data+0x22>
 800d52a:	4b37      	ldr	r3, [pc, #220]	; (800d608 <tcp_process_refused_data+0xec>)
 800d52c:	f240 6209 	movw	r2, #1545	; 0x609
 800d530:	4936      	ldr	r1, [pc, #216]	; (800d60c <tcp_process_refused_data+0xf0>)
 800d532:	4837      	ldr	r0, [pc, #220]	; (800d610 <tcp_process_refused_data+0xf4>)
 800d534:	f007 f8c2 	bl	80146bc <iprintf>
 800d538:	f06f 030f 	mvn.w	r3, #15
 800d53c:	e060      	b.n	800d600 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d542:	7b5b      	ldrb	r3, [r3, #13]
 800d544:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d54a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00b      	beq.n	800d574 <tcp_process_refused_data+0x58>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6918      	ldr	r0, [r3, #16]
 800d566:	2300      	movs	r3, #0
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	6879      	ldr	r1, [r7, #4]
 800d56c:	47a0      	blx	r4
 800d56e:	4603      	mov	r3, r0
 800d570:	73fb      	strb	r3, [r7, #15]
 800d572:	e007      	b.n	800d584 <tcp_process_refused_data+0x68>
 800d574:	2300      	movs	r3, #0
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	2000      	movs	r0, #0
 800d57c:	f000 f8a4 	bl	800d6c8 <tcp_recv_null>
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d12a      	bne.n	800d5e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d58c:	7bbb      	ldrb	r3, [r7, #14]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d033      	beq.n	800d5fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d59a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d59e:	d005      	beq.n	800d5ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00b      	beq.n	800d5ce <tcp_process_refused_data+0xb2>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6918      	ldr	r0, [r3, #16]
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	47a0      	blx	r4
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73fb      	strb	r3, [r7, #15]
 800d5cc:	e001      	b.n	800d5d2 <tcp_process_refused_data+0xb6>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d6:	f113 0f0d 	cmn.w	r3, #13
 800d5da:	d110      	bne.n	800d5fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d5dc:	f06f 030c 	mvn.w	r3, #12
 800d5e0:	e00e      	b.n	800d600 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5e6:	f113 0f0d 	cmn.w	r3, #13
 800d5ea:	d102      	bne.n	800d5f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d5ec:	f06f 030c 	mvn.w	r3, #12
 800d5f0:	e006      	b.n	800d600 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d5f8:	f06f 0304 	mvn.w	r3, #4
 800d5fc:	e000      	b.n	800d600 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	bd90      	pop	{r4, r7, pc}
 800d608:	0801632c 	.word	0x0801632c
 800d60c:	0801683c 	.word	0x0801683c
 800d610:	08016370 	.word	0x08016370

0800d614 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d61c:	e007      	b.n	800d62e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f80a 	bl	800d63e <tcp_seg_free>
    seg = next;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1f4      	bne.n	800d61e <tcp_segs_free+0xa>
  }
}
 800d634:	bf00      	nop
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00c      	beq.n	800d666 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d004      	beq.n	800d65e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fd7d 	bl	800c158 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	2003      	movs	r0, #3
 800d662:	f7fd ff23 	bl	800b4ac <memp_free>
  }
}
 800d666:	bf00      	nop
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d106      	bne.n	800d68c <tcp_seg_copy+0x1c>
 800d67e:	4b0f      	ldr	r3, [pc, #60]	; (800d6bc <tcp_seg_copy+0x4c>)
 800d680:	f240 6282 	movw	r2, #1666	; 0x682
 800d684:	490e      	ldr	r1, [pc, #56]	; (800d6c0 <tcp_seg_copy+0x50>)
 800d686:	480f      	ldr	r0, [pc, #60]	; (800d6c4 <tcp_seg_copy+0x54>)
 800d688:	f007 f818 	bl	80146bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d68c:	2003      	movs	r0, #3
 800d68e:	f7fd fe9d 	bl	800b3cc <memp_malloc>
 800d692:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <tcp_seg_copy+0x2e>
    return NULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	e00a      	b.n	800d6b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d69e:	2210      	movs	r2, #16
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f006 fff4 	bl	8014690 <memcpy>
  pbuf_ref(cseg->p);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe fdf3 	bl	800c298 <pbuf_ref>
  return cseg;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	0801632c 	.word	0x0801632c
 800d6c0:	08016880 	.word	0x08016880
 800d6c4:	08016370 	.word	0x08016370

0800d6c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d109      	bne.n	800d6f0 <tcp_recv_null+0x28>
 800d6dc:	4b12      	ldr	r3, [pc, #72]	; (800d728 <tcp_recv_null+0x60>)
 800d6de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d6e2:	4912      	ldr	r1, [pc, #72]	; (800d72c <tcp_recv_null+0x64>)
 800d6e4:	4812      	ldr	r0, [pc, #72]	; (800d730 <tcp_recv_null+0x68>)
 800d6e6:	f006 ffe9 	bl	80146bc <iprintf>
 800d6ea:	f06f 030f 	mvn.w	r3, #15
 800d6ee:	e016      	b.n	800d71e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d009      	beq.n	800d70a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	891b      	ldrh	r3, [r3, #8]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	68b8      	ldr	r0, [r7, #8]
 800d6fe:	f7ff fb19 	bl	800cd34 <tcp_recved>
    pbuf_free(p);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7fe fd28 	bl	800c158 <pbuf_free>
 800d708:	e008      	b.n	800d71c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d70a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d104      	bne.n	800d71c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d712:	68b8      	ldr	r0, [r7, #8]
 800d714:	f7ff f9be 	bl	800ca94 <tcp_close>
 800d718:	4603      	mov	r3, r0
 800d71a:	e000      	b.n	800d71e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	0801632c 	.word	0x0801632c
 800d72c:	0801689c 	.word	0x0801689c
 800d730:	08016370 	.word	0x08016370

0800d734 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	4603      	mov	r3, r0
 800d73c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d742:	2b00      	cmp	r3, #0
 800d744:	db01      	blt.n	800d74a <tcp_kill_prio+0x16>
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	e000      	b.n	800d74c <tcp_kill_prio+0x18>
 800d74a:	237f      	movs	r3, #127	; 0x7f
 800d74c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d74e:	7afb      	ldrb	r3, [r7, #11]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d034      	beq.n	800d7be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d754:	7afb      	ldrb	r3, [r7, #11]
 800d756:	3b01      	subs	r3, #1
 800d758:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d762:	4b19      	ldr	r3, [pc, #100]	; (800d7c8 <tcp_kill_prio+0x94>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	e01f      	b.n	800d7aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	7d5b      	ldrb	r3, [r3, #21]
 800d76e:	7afa      	ldrb	r2, [r7, #11]
 800d770:	429a      	cmp	r2, r3
 800d772:	d80c      	bhi.n	800d78e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d778:	7afa      	ldrb	r2, [r7, #11]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d112      	bne.n	800d7a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d77e:	4b13      	ldr	r3, [pc, #76]	; (800d7cc <tcp_kill_prio+0x98>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d80a      	bhi.n	800d7a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d78e:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <tcp_kill_prio+0x98>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	7d5b      	ldrb	r3, [r3, #21]
 800d7a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	617b      	str	r3, [r7, #20]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1dc      	bne.n	800d76a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d004      	beq.n	800d7c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f7ff fa56 	bl	800cc68 <tcp_abort>
 800d7bc:	e000      	b.n	800d7c0 <tcp_kill_prio+0x8c>
    return;
 800d7be:	bf00      	nop
  }
}
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20008d54 	.word	0x20008d54
 800d7cc:	20008d48 	.word	0x20008d48

0800d7d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d009      	beq.n	800d7f4 <tcp_kill_state+0x24>
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b09      	cmp	r3, #9
 800d7e4:	d006      	beq.n	800d7f4 <tcp_kill_state+0x24>
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	; (800d850 <tcp_kill_state+0x80>)
 800d7e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d7ec:	4919      	ldr	r1, [pc, #100]	; (800d854 <tcp_kill_state+0x84>)
 800d7ee:	481a      	ldr	r0, [pc, #104]	; (800d858 <tcp_kill_state+0x88>)
 800d7f0:	f006 ff64 	bl	80146bc <iprintf>

  inactivity = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7fc:	4b17      	ldr	r3, [pc, #92]	; (800d85c <tcp_kill_state+0x8c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	617b      	str	r3, [r7, #20]
 800d802:	e017      	b.n	800d834 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	79fa      	ldrb	r2, [r7, #7]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d10f      	bne.n	800d82e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d80e:	4b14      	ldr	r3, [pc, #80]	; (800d860 <tcp_kill_state+0x90>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d807      	bhi.n	800d82e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d81e:	4b10      	ldr	r3, [pc, #64]	; (800d860 <tcp_kill_state+0x90>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1e4      	bne.n	800d804 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d003      	beq.n	800d848 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d840:	2100      	movs	r1, #0
 800d842:	6938      	ldr	r0, [r7, #16]
 800d844:	f7ff f952 	bl	800caec <tcp_abandon>
  }
}
 800d848:	bf00      	nop
 800d84a:	3718      	adds	r7, #24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	0801632c 	.word	0x0801632c
 800d854:	080168b8 	.word	0x080168b8
 800d858:	08016370 	.word	0x08016370
 800d85c:	20008d54 	.word	0x20008d54
 800d860:	20008d48 	.word	0x20008d48

0800d864 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d872:	4b12      	ldr	r3, [pc, #72]	; (800d8bc <tcp_kill_timewait+0x58>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e012      	b.n	800d8a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d87a:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <tcp_kill_timewait+0x5c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	429a      	cmp	r2, r3
 800d888:	d807      	bhi.n	800d89a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d88a:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <tcp_kill_timewait+0x5c>)
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1e9      	bne.n	800d87a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8ac:	68b8      	ldr	r0, [r7, #8]
 800d8ae:	f7ff f9db 	bl	800cc68 <tcp_abort>
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20008d58 	.word	0x20008d58
 800d8c0:	20008d48 	.word	0x20008d48

0800d8c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d8ca:	4b10      	ldr	r3, [pc, #64]	; (800d90c <tcp_handle_closepend+0x48>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8d0:	e014      	b.n	800d8fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	8b5b      	ldrh	r3, [r3, #26]
 800d8dc:	f003 0308 	and.w	r3, r3, #8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d009      	beq.n	800d8f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8b5b      	ldrh	r3, [r3, #26]
 800d8e8:	f023 0308 	bic.w	r3, r3, #8
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff f864 	bl	800c9c0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e7      	bne.n	800d8d2 <tcp_handle_closepend+0xe>
  }
}
 800d902:	bf00      	nop
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20008d54 	.word	0x20008d54

0800d910 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	4603      	mov	r3, r0
 800d918:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d91a:	2001      	movs	r0, #1
 800d91c:	f7fd fd56 	bl	800b3cc <memp_malloc>
 800d920:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d126      	bne.n	800d976 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d928:	f7ff ffcc 	bl	800d8c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d92c:	f7ff ff9a 	bl	800d864 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d930:	2001      	movs	r0, #1
 800d932:	f7fd fd4b 	bl	800b3cc <memp_malloc>
 800d936:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d11b      	bne.n	800d976 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d93e:	2009      	movs	r0, #9
 800d940:	f7ff ff46 	bl	800d7d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d944:	2001      	movs	r0, #1
 800d946:	f7fd fd41 	bl	800b3cc <memp_malloc>
 800d94a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d111      	bne.n	800d976 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d952:	2008      	movs	r0, #8
 800d954:	f7ff ff3c 	bl	800d7d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d958:	2001      	movs	r0, #1
 800d95a:	f7fd fd37 	bl	800b3cc <memp_malloc>
 800d95e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d107      	bne.n	800d976 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d966:	79fb      	ldrb	r3, [r7, #7]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff fee3 	bl	800d734 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d96e:	2001      	movs	r0, #1
 800d970:	f7fd fd2c 	bl	800b3cc <memp_malloc>
 800d974:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d03f      	beq.n	800d9fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d97c:	229c      	movs	r2, #156	; 0x9c
 800d97e:	2100      	movs	r1, #0
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f006 fe93 	bl	80146ac <memset>
    pcb->prio = prio;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	79fa      	ldrb	r2, [r7, #7]
 800d98a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d992:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d99c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	22ff      	movs	r2, #255	; 0xff
 800d9aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2206      	movs	r2, #6
 800d9b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2206      	movs	r2, #6
 800d9c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d9d2:	4b0d      	ldr	r3, [pc, #52]	; (800da08 <tcp_alloc+0xf8>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d9da:	4b0c      	ldr	r3, [pc, #48]	; (800da0c <tcp_alloc+0xfc>)
 800d9dc:	781a      	ldrb	r2, [r3, #0]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4a08      	ldr	r2, [pc, #32]	; (800da10 <tcp_alloc+0x100>)
 800d9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4a07      	ldr	r2, [pc, #28]	; (800da14 <tcp_alloc+0x104>)
 800d9f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20008d48 	.word	0x20008d48
 800da0c:	20008d5e 	.word	0x20008d5e
 800da10:	0800d6c9 	.word	0x0800d6c9
 800da14:	006ddd00 	.word	0x006ddd00

0800da18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d107      	bne.n	800da36 <tcp_pcb_purge+0x1e>
 800da26:	4b21      	ldr	r3, [pc, #132]	; (800daac <tcp_pcb_purge+0x94>)
 800da28:	f640 0251 	movw	r2, #2129	; 0x851
 800da2c:	4920      	ldr	r1, [pc, #128]	; (800dab0 <tcp_pcb_purge+0x98>)
 800da2e:	4821      	ldr	r0, [pc, #132]	; (800dab4 <tcp_pcb_purge+0x9c>)
 800da30:	f006 fe44 	bl	80146bc <iprintf>
 800da34:	e037      	b.n	800daa6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7d1b      	ldrb	r3, [r3, #20]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d033      	beq.n	800daa6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da42:	2b0a      	cmp	r3, #10
 800da44:	d02f      	beq.n	800daa6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d02b      	beq.n	800daa6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da52:	2b00      	cmp	r3, #0
 800da54:	d007      	beq.n	800da66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fb7c 	bl	800c158 <pbuf_free>
      pcb->refused_data = NULL;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f986 	bl	800dd80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fdc7 	bl	800d614 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7ff fdc2 	bl	800d614 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	66da      	str	r2, [r3, #108]	; 0x6c
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	0801632c 	.word	0x0801632c
 800dab0:	08016978 	.word	0x08016978
 800dab4:	08016370 	.word	0x08016370

0800dab8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d106      	bne.n	800dad6 <tcp_pcb_remove+0x1e>
 800dac8:	4b3e      	ldr	r3, [pc, #248]	; (800dbc4 <tcp_pcb_remove+0x10c>)
 800daca:	f640 0283 	movw	r2, #2179	; 0x883
 800dace:	493e      	ldr	r1, [pc, #248]	; (800dbc8 <tcp_pcb_remove+0x110>)
 800dad0:	483e      	ldr	r0, [pc, #248]	; (800dbcc <tcp_pcb_remove+0x114>)
 800dad2:	f006 fdf3 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d106      	bne.n	800daea <tcp_pcb_remove+0x32>
 800dadc:	4b39      	ldr	r3, [pc, #228]	; (800dbc4 <tcp_pcb_remove+0x10c>)
 800dade:	f640 0284 	movw	r2, #2180	; 0x884
 800dae2:	493b      	ldr	r1, [pc, #236]	; (800dbd0 <tcp_pcb_remove+0x118>)
 800dae4:	4839      	ldr	r0, [pc, #228]	; (800dbcc <tcp_pcb_remove+0x114>)
 800dae6:	f006 fde9 	bl	80146bc <iprintf>

  TCP_RMV(pcblist, pcb);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d105      	bne.n	800db00 <tcp_pcb_remove+0x48>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68da      	ldr	r2, [r3, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	e013      	b.n	800db28 <tcp_pcb_remove+0x70>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	60fb      	str	r3, [r7, #12]
 800db06:	e00c      	b.n	800db22 <tcp_pcb_remove+0x6a>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d104      	bne.n	800db1c <tcp_pcb_remove+0x64>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	60da      	str	r2, [r3, #12]
 800db1a:	e005      	b.n	800db28 <tcp_pcb_remove+0x70>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1ef      	bne.n	800db08 <tcp_pcb_remove+0x50>
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2200      	movs	r2, #0
 800db2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db2e:	6838      	ldr	r0, [r7, #0]
 800db30:	f7ff ff72 	bl	800da18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	2b0a      	cmp	r3, #10
 800db3a:	d013      	beq.n	800db64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db40:	2b01      	cmp	r3, #1
 800db42:	d00f      	beq.n	800db64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	8b5b      	ldrh	r3, [r3, #26]
 800db48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d009      	beq.n	800db64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	8b5b      	ldrh	r3, [r3, #26]
 800db54:	f043 0302 	orr.w	r3, r3, #2
 800db58:	b29a      	uxth	r2, r3
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db5e:	6838      	ldr	r0, [r7, #0]
 800db60:	f002 ff6e 	bl	8010a40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	7d1b      	ldrb	r3, [r3, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d020      	beq.n	800dbae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <tcp_pcb_remove+0xca>
 800db74:	4b13      	ldr	r3, [pc, #76]	; (800dbc4 <tcp_pcb_remove+0x10c>)
 800db76:	f640 0293 	movw	r2, #2195	; 0x893
 800db7a:	4916      	ldr	r1, [pc, #88]	; (800dbd4 <tcp_pcb_remove+0x11c>)
 800db7c:	4813      	ldr	r0, [pc, #76]	; (800dbcc <tcp_pcb_remove+0x114>)
 800db7e:	f006 fd9d 	bl	80146bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db86:	2b00      	cmp	r3, #0
 800db88:	d006      	beq.n	800db98 <tcp_pcb_remove+0xe0>
 800db8a:	4b0e      	ldr	r3, [pc, #56]	; (800dbc4 <tcp_pcb_remove+0x10c>)
 800db8c:	f640 0294 	movw	r2, #2196	; 0x894
 800db90:	4911      	ldr	r1, [pc, #68]	; (800dbd8 <tcp_pcb_remove+0x120>)
 800db92:	480e      	ldr	r0, [pc, #56]	; (800dbcc <tcp_pcb_remove+0x114>)
 800db94:	f006 fd92 	bl	80146bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d006      	beq.n	800dbae <tcp_pcb_remove+0xf6>
 800dba0:	4b08      	ldr	r3, [pc, #32]	; (800dbc4 <tcp_pcb_remove+0x10c>)
 800dba2:	f640 0296 	movw	r2, #2198	; 0x896
 800dba6:	490d      	ldr	r1, [pc, #52]	; (800dbdc <tcp_pcb_remove+0x124>)
 800dba8:	4808      	ldr	r0, [pc, #32]	; (800dbcc <tcp_pcb_remove+0x114>)
 800dbaa:	f006 fd87 	bl	80146bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dbba:	bf00      	nop
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	0801632c 	.word	0x0801632c
 800dbc8:	08016994 	.word	0x08016994
 800dbcc:	08016370 	.word	0x08016370
 800dbd0:	080169b0 	.word	0x080169b0
 800dbd4:	080169d0 	.word	0x080169d0
 800dbd8:	080169e8 	.word	0x080169e8
 800dbdc:	08016a04 	.word	0x08016a04

0800dbe0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <tcp_next_iss+0x1c>
 800dbee:	4b0a      	ldr	r3, [pc, #40]	; (800dc18 <tcp_next_iss+0x38>)
 800dbf0:	f640 02af 	movw	r2, #2223	; 0x8af
 800dbf4:	4909      	ldr	r1, [pc, #36]	; (800dc1c <tcp_next_iss+0x3c>)
 800dbf6:	480a      	ldr	r0, [pc, #40]	; (800dc20 <tcp_next_iss+0x40>)
 800dbf8:	f006 fd60 	bl	80146bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbfc:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <tcp_next_iss+0x44>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <tcp_next_iss+0x48>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4413      	add	r3, r2
 800dc06:	4a07      	ldr	r2, [pc, #28]	; (800dc24 <tcp_next_iss+0x44>)
 800dc08:	6013      	str	r3, [r2, #0]
  return iss;
 800dc0a:	4b06      	ldr	r3, [pc, #24]	; (800dc24 <tcp_next_iss+0x44>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	0801632c 	.word	0x0801632c
 800dc1c:	08016a1c 	.word	0x08016a1c
 800dc20:	08016370 	.word	0x08016370
 800dc24:	20000024 	.word	0x20000024
 800dc28:	20008d48 	.word	0x20008d48

0800dc2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d106      	bne.n	800dc4e <tcp_eff_send_mss_netif+0x22>
 800dc40:	4b14      	ldr	r3, [pc, #80]	; (800dc94 <tcp_eff_send_mss_netif+0x68>)
 800dc42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dc46:	4914      	ldr	r1, [pc, #80]	; (800dc98 <tcp_eff_send_mss_netif+0x6c>)
 800dc48:	4814      	ldr	r0, [pc, #80]	; (800dc9c <tcp_eff_send_mss_netif+0x70>)
 800dc4a:	f006 fd37 	bl	80146bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc54:	89fb      	ldrh	r3, [r7, #14]
 800dc56:	e019      	b.n	800dc8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc5e:	8afb      	ldrh	r3, [r7, #22]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d012      	beq.n	800dc8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc64:	2328      	movs	r3, #40	; 0x28
 800dc66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc68:	8afa      	ldrh	r2, [r7, #22]
 800dc6a:	8abb      	ldrh	r3, [r7, #20]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d904      	bls.n	800dc7a <tcp_eff_send_mss_netif+0x4e>
 800dc70:	8afa      	ldrh	r2, [r7, #22]
 800dc72:	8abb      	ldrh	r3, [r7, #20]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	e000      	b.n	800dc7c <tcp_eff_send_mss_netif+0x50>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc7e:	8a7a      	ldrh	r2, [r7, #18]
 800dc80:	89fb      	ldrh	r3, [r7, #14]
 800dc82:	4293      	cmp	r3, r2
 800dc84:	bf28      	it	cs
 800dc86:	4613      	movcs	r3, r2
 800dc88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc8a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	0801632c 	.word	0x0801632c
 800dc98:	08016a38 	.word	0x08016a38
 800dc9c:	08016370 	.word	0x08016370

0800dca0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d119      	bne.n	800dce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dcb4:	4b10      	ldr	r3, [pc, #64]	; (800dcf8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dcb6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dcba:	4910      	ldr	r1, [pc, #64]	; (800dcfc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dcbc:	4810      	ldr	r0, [pc, #64]	; (800dd00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dcbe:	f006 fcfd 	bl	80146bc <iprintf>

  while (pcb != NULL) {
 800dcc2:	e011      	b.n	800dce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d108      	bne.n	800dce2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7fe ffc6 	bl	800cc68 <tcp_abort>
      pcb = next;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	e002      	b.n	800dce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1ea      	bne.n	800dcc4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	0801632c 	.word	0x0801632c
 800dcfc:	08016a60 	.word	0x08016a60
 800dd00:	08016370 	.word	0x08016370

0800dd04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d02a      	beq.n	800dd6a <tcp_netif_ip_addr_changed+0x66>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d026      	beq.n	800dd6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd1c:	4b15      	ldr	r3, [pc, #84]	; (800dd74 <tcp_netif_ip_addr_changed+0x70>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff ffbc 	bl	800dca0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd28:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <tcp_netif_ip_addr_changed+0x74>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff ffb6 	bl	800dca0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d017      	beq.n	800dd6a <tcp_netif_ip_addr_changed+0x66>
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d013      	beq.n	800dd6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd42:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <tcp_netif_ip_addr_changed+0x78>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	e00c      	b.n	800dd64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d103      	bne.n	800dd5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1ef      	bne.n	800dd4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20008d54 	.word	0x20008d54
 800dd78:	20008d4c 	.word	0x20008d4c
 800dd7c:	20008d50 	.word	0x20008d50

0800dd80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d007      	beq.n	800dda0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7ff fc3d 	bl	800d614 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b08d      	sub	sp, #52	; 0x34
 800ddac:	af04      	add	r7, sp, #16
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d105      	bne.n	800ddc4 <tcp_input+0x1c>
 800ddb8:	4b9b      	ldr	r3, [pc, #620]	; (800e028 <tcp_input+0x280>)
 800ddba:	2283      	movs	r2, #131	; 0x83
 800ddbc:	499b      	ldr	r1, [pc, #620]	; (800e02c <tcp_input+0x284>)
 800ddbe:	489c      	ldr	r0, [pc, #624]	; (800e030 <tcp_input+0x288>)
 800ddc0:	f006 fc7c 	bl	80146bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	4a9a      	ldr	r2, [pc, #616]	; (800e034 <tcp_input+0x28c>)
 800ddca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	895b      	ldrh	r3, [r3, #10]
 800ddd0:	2b13      	cmp	r3, #19
 800ddd2:	f240 83d1 	bls.w	800e578 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddd6:	4b98      	ldr	r3, [pc, #608]	; (800e038 <tcp_input+0x290>)
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	4a97      	ldr	r2, [pc, #604]	; (800e038 <tcp_input+0x290>)
 800dddc:	6812      	ldr	r2, [r2, #0]
 800ddde:	4611      	mov	r1, r2
 800dde0:	4618      	mov	r0, r3
 800dde2:	f005 fbd5 	bl	8013590 <ip4_addr_isbroadcast_u32>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 83c7 	bne.w	800e57c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddee:	4b92      	ldr	r3, [pc, #584]	; (800e038 <tcp_input+0x290>)
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddf6:	2be0      	cmp	r3, #224	; 0xe0
 800ddf8:	f000 83c0 	beq.w	800e57c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ddfc:	4b8d      	ldr	r3, [pc, #564]	; (800e034 <tcp_input+0x28c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	899b      	ldrh	r3, [r3, #12]
 800de02:	b29b      	uxth	r3, r3
 800de04:	4618      	mov	r0, r3
 800de06:	f7fc fe69 	bl	800aadc <lwip_htons>
 800de0a:	4603      	mov	r3, r0
 800de0c:	0b1b      	lsrs	r3, r3, #12
 800de0e:	b29b      	uxth	r3, r3
 800de10:	b2db      	uxtb	r3, r3
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de16:	7cbb      	ldrb	r3, [r7, #18]
 800de18:	2b13      	cmp	r3, #19
 800de1a:	f240 83b1 	bls.w	800e580 <tcp_input+0x7d8>
 800de1e:	7cbb      	ldrb	r3, [r7, #18]
 800de20:	b29a      	uxth	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	891b      	ldrh	r3, [r3, #8]
 800de26:	429a      	cmp	r2, r3
 800de28:	f200 83aa 	bhi.w	800e580 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de2c:	7cbb      	ldrb	r3, [r7, #18]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	3b14      	subs	r3, #20
 800de32:	b29a      	uxth	r2, r3
 800de34:	4b81      	ldr	r3, [pc, #516]	; (800e03c <tcp_input+0x294>)
 800de36:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de38:	4b81      	ldr	r3, [pc, #516]	; (800e040 <tcp_input+0x298>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	895a      	ldrh	r2, [r3, #10]
 800de42:	7cbb      	ldrb	r3, [r7, #18]
 800de44:	b29b      	uxth	r3, r3
 800de46:	429a      	cmp	r2, r3
 800de48:	d309      	bcc.n	800de5e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de4a:	4b7c      	ldr	r3, [pc, #496]	; (800e03c <tcp_input+0x294>)
 800de4c:	881a      	ldrh	r2, [r3, #0]
 800de4e:	4b7d      	ldr	r3, [pc, #500]	; (800e044 <tcp_input+0x29c>)
 800de50:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de52:	7cbb      	ldrb	r3, [r7, #18]
 800de54:	4619      	mov	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7fe f8f8 	bl	800c04c <pbuf_remove_header>
 800de5c:	e04e      	b.n	800defc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d105      	bne.n	800de72 <tcp_input+0xca>
 800de66:	4b70      	ldr	r3, [pc, #448]	; (800e028 <tcp_input+0x280>)
 800de68:	22c2      	movs	r2, #194	; 0xc2
 800de6a:	4977      	ldr	r1, [pc, #476]	; (800e048 <tcp_input+0x2a0>)
 800de6c:	4870      	ldr	r0, [pc, #448]	; (800e030 <tcp_input+0x288>)
 800de6e:	f006 fc25 	bl	80146bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de72:	2114      	movs	r1, #20
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7fe f8e9 	bl	800c04c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	895a      	ldrh	r2, [r3, #10]
 800de7e:	4b71      	ldr	r3, [pc, #452]	; (800e044 <tcp_input+0x29c>)
 800de80:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de82:	4b6e      	ldr	r3, [pc, #440]	; (800e03c <tcp_input+0x294>)
 800de84:	881a      	ldrh	r2, [r3, #0]
 800de86:	4b6f      	ldr	r3, [pc, #444]	; (800e044 <tcp_input+0x29c>)
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de8e:	4b6d      	ldr	r3, [pc, #436]	; (800e044 <tcp_input+0x29c>)
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	4619      	mov	r1, r3
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7fe f8d9 	bl	800c04c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	895b      	ldrh	r3, [r3, #10]
 800dea0:	8a3a      	ldrh	r2, [r7, #16]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	f200 836e 	bhi.w	800e584 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4a64      	ldr	r2, [pc, #400]	; (800e040 <tcp_input+0x298>)
 800deb0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	8a3a      	ldrh	r2, [r7, #16]
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe f8c6 	bl	800c04c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	891a      	ldrh	r2, [r3, #8]
 800dec4:	8a3b      	ldrh	r3, [r7, #16]
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	b29a      	uxth	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	895b      	ldrh	r3, [r3, #10]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d005      	beq.n	800dee2 <tcp_input+0x13a>
 800ded6:	4b54      	ldr	r3, [pc, #336]	; (800e028 <tcp_input+0x280>)
 800ded8:	22df      	movs	r2, #223	; 0xdf
 800deda:	495c      	ldr	r1, [pc, #368]	; (800e04c <tcp_input+0x2a4>)
 800dedc:	4854      	ldr	r0, [pc, #336]	; (800e030 <tcp_input+0x288>)
 800dede:	f006 fbed 	bl	80146bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	891a      	ldrh	r2, [r3, #8]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	891b      	ldrh	r3, [r3, #8]
 800deec:	429a      	cmp	r2, r3
 800deee:	d005      	beq.n	800defc <tcp_input+0x154>
 800def0:	4b4d      	ldr	r3, [pc, #308]	; (800e028 <tcp_input+0x280>)
 800def2:	22e0      	movs	r2, #224	; 0xe0
 800def4:	4956      	ldr	r1, [pc, #344]	; (800e050 <tcp_input+0x2a8>)
 800def6:	484e      	ldr	r0, [pc, #312]	; (800e030 <tcp_input+0x288>)
 800def8:	f006 fbe0 	bl	80146bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800defc:	4b4d      	ldr	r3, [pc, #308]	; (800e034 <tcp_input+0x28c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	b29b      	uxth	r3, r3
 800df04:	4a4b      	ldr	r2, [pc, #300]	; (800e034 <tcp_input+0x28c>)
 800df06:	6814      	ldr	r4, [r2, #0]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fc fde7 	bl	800aadc <lwip_htons>
 800df0e:	4603      	mov	r3, r0
 800df10:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df12:	4b48      	ldr	r3, [pc, #288]	; (800e034 <tcp_input+0x28c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	885b      	ldrh	r3, [r3, #2]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	4a46      	ldr	r2, [pc, #280]	; (800e034 <tcp_input+0x28c>)
 800df1c:	6814      	ldr	r4, [r2, #0]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fc fddc 	bl	800aadc <lwip_htons>
 800df24:	4603      	mov	r3, r0
 800df26:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df28:	4b42      	ldr	r3, [pc, #264]	; (800e034 <tcp_input+0x28c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4a41      	ldr	r2, [pc, #260]	; (800e034 <tcp_input+0x28c>)
 800df30:	6814      	ldr	r4, [r2, #0]
 800df32:	4618      	mov	r0, r3
 800df34:	f7fc fde7 	bl	800ab06 <lwip_htonl>
 800df38:	4603      	mov	r3, r0
 800df3a:	6063      	str	r3, [r4, #4]
 800df3c:	6863      	ldr	r3, [r4, #4]
 800df3e:	4a45      	ldr	r2, [pc, #276]	; (800e054 <tcp_input+0x2ac>)
 800df40:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df42:	4b3c      	ldr	r3, [pc, #240]	; (800e034 <tcp_input+0x28c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	4a3a      	ldr	r2, [pc, #232]	; (800e034 <tcp_input+0x28c>)
 800df4a:	6814      	ldr	r4, [r2, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fc fdda 	bl	800ab06 <lwip_htonl>
 800df52:	4603      	mov	r3, r0
 800df54:	60a3      	str	r3, [r4, #8]
 800df56:	68a3      	ldr	r3, [r4, #8]
 800df58:	4a3f      	ldr	r2, [pc, #252]	; (800e058 <tcp_input+0x2b0>)
 800df5a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df5c:	4b35      	ldr	r3, [pc, #212]	; (800e034 <tcp_input+0x28c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	89db      	ldrh	r3, [r3, #14]
 800df62:	b29b      	uxth	r3, r3
 800df64:	4a33      	ldr	r2, [pc, #204]	; (800e034 <tcp_input+0x28c>)
 800df66:	6814      	ldr	r4, [r2, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fc fdb7 	bl	800aadc <lwip_htons>
 800df6e:	4603      	mov	r3, r0
 800df70:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df72:	4b30      	ldr	r3, [pc, #192]	; (800e034 <tcp_input+0x28c>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	899b      	ldrh	r3, [r3, #12]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fc fdae 	bl	800aadc <lwip_htons>
 800df80:	4603      	mov	r3, r0
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	4b34      	ldr	r3, [pc, #208]	; (800e05c <tcp_input+0x2b4>)
 800df8c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	891a      	ldrh	r2, [r3, #8]
 800df92:	4b33      	ldr	r3, [pc, #204]	; (800e060 <tcp_input+0x2b8>)
 800df94:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df96:	4b31      	ldr	r3, [pc, #196]	; (800e05c <tcp_input+0x2b4>)
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00c      	beq.n	800dfbc <tcp_input+0x214>
    tcplen++;
 800dfa2:	4b2f      	ldr	r3, [pc, #188]	; (800e060 <tcp_input+0x2b8>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	4b2d      	ldr	r3, [pc, #180]	; (800e060 <tcp_input+0x2b8>)
 800dfac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	891a      	ldrh	r2, [r3, #8]
 800dfb2:	4b2b      	ldr	r3, [pc, #172]	; (800e060 <tcp_input+0x2b8>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	f200 82e6 	bhi.w	800e588 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfc0:	4b28      	ldr	r3, [pc, #160]	; (800e064 <tcp_input+0x2bc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	61fb      	str	r3, [r7, #28]
 800dfc6:	e09d      	b.n	800e104 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	7d1b      	ldrb	r3, [r3, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d105      	bne.n	800dfdc <tcp_input+0x234>
 800dfd0:	4b15      	ldr	r3, [pc, #84]	; (800e028 <tcp_input+0x280>)
 800dfd2:	22fb      	movs	r2, #251	; 0xfb
 800dfd4:	4924      	ldr	r1, [pc, #144]	; (800e068 <tcp_input+0x2c0>)
 800dfd6:	4816      	ldr	r0, [pc, #88]	; (800e030 <tcp_input+0x288>)
 800dfd8:	f006 fb70 	bl	80146bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	7d1b      	ldrb	r3, [r3, #20]
 800dfe0:	2b0a      	cmp	r3, #10
 800dfe2:	d105      	bne.n	800dff0 <tcp_input+0x248>
 800dfe4:	4b10      	ldr	r3, [pc, #64]	; (800e028 <tcp_input+0x280>)
 800dfe6:	22fc      	movs	r2, #252	; 0xfc
 800dfe8:	4920      	ldr	r1, [pc, #128]	; (800e06c <tcp_input+0x2c4>)
 800dfea:	4811      	ldr	r0, [pc, #68]	; (800e030 <tcp_input+0x288>)
 800dfec:	f006 fb66 	bl	80146bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	7d1b      	ldrb	r3, [r3, #20]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d105      	bne.n	800e004 <tcp_input+0x25c>
 800dff8:	4b0b      	ldr	r3, [pc, #44]	; (800e028 <tcp_input+0x280>)
 800dffa:	22fd      	movs	r2, #253	; 0xfd
 800dffc:	491c      	ldr	r1, [pc, #112]	; (800e070 <tcp_input+0x2c8>)
 800dffe:	480c      	ldr	r0, [pc, #48]	; (800e030 <tcp_input+0x288>)
 800e000:	f006 fb5c 	bl	80146bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	7a1b      	ldrb	r3, [r3, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d033      	beq.n	800e074 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	7a1a      	ldrb	r2, [r3, #8]
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <tcp_input+0x290>)
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e018:	3301      	adds	r3, #1
 800e01a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d029      	beq.n	800e074 <tcp_input+0x2cc>
      prev = pcb;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	61bb      	str	r3, [r7, #24]
      continue;
 800e024:	e06b      	b.n	800e0fe <tcp_input+0x356>
 800e026:	bf00      	nop
 800e028:	08016a94 	.word	0x08016a94
 800e02c:	08016ac8 	.word	0x08016ac8
 800e030:	08016ae0 	.word	0x08016ae0
 800e034:	20008d70 	.word	0x20008d70
 800e038:	200057d8 	.word	0x200057d8
 800e03c:	20008d74 	.word	0x20008d74
 800e040:	20008d78 	.word	0x20008d78
 800e044:	20008d76 	.word	0x20008d76
 800e048:	08016b08 	.word	0x08016b08
 800e04c:	08016b18 	.word	0x08016b18
 800e050:	08016b24 	.word	0x08016b24
 800e054:	20008d80 	.word	0x20008d80
 800e058:	20008d84 	.word	0x20008d84
 800e05c:	20008d8c 	.word	0x20008d8c
 800e060:	20008d8a 	.word	0x20008d8a
 800e064:	20008d54 	.word	0x20008d54
 800e068:	08016b44 	.word	0x08016b44
 800e06c:	08016b6c 	.word	0x08016b6c
 800e070:	08016b98 	.word	0x08016b98
    }

    if (pcb->remote_port == tcphdr->src &&
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	8b1a      	ldrh	r2, [r3, #24]
 800e078:	4b72      	ldr	r3, [pc, #456]	; (800e244 <tcp_input+0x49c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	429a      	cmp	r2, r3
 800e082:	d13a      	bne.n	800e0fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	8ada      	ldrh	r2, [r3, #22]
 800e088:	4b6e      	ldr	r3, [pc, #440]	; (800e244 <tcp_input+0x49c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	885b      	ldrh	r3, [r3, #2]
 800e08e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e090:	429a      	cmp	r2, r3
 800e092:	d132      	bne.n	800e0fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	4b6b      	ldr	r3, [pc, #428]	; (800e248 <tcp_input+0x4a0>)
 800e09a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d12c      	bne.n	800e0fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	4b68      	ldr	r3, [pc, #416]	; (800e248 <tcp_input+0x4a0>)
 800e0a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d126      	bne.n	800e0fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	69fa      	ldr	r2, [r7, #28]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d106      	bne.n	800e0c4 <tcp_input+0x31c>
 800e0b6:	4b65      	ldr	r3, [pc, #404]	; (800e24c <tcp_input+0x4a4>)
 800e0b8:	f240 120d 	movw	r2, #269	; 0x10d
 800e0bc:	4964      	ldr	r1, [pc, #400]	; (800e250 <tcp_input+0x4a8>)
 800e0be:	4865      	ldr	r0, [pc, #404]	; (800e254 <tcp_input+0x4ac>)
 800e0c0:	f006 fafc 	bl	80146bc <iprintf>
      if (prev != NULL) {
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	68da      	ldr	r2, [r3, #12]
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e0d2:	4b61      	ldr	r3, [pc, #388]	; (800e258 <tcp_input+0x4b0>)
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e0da:	4a5f      	ldr	r2, [pc, #380]	; (800e258 <tcp_input+0x4b0>)
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	69fa      	ldr	r2, [r7, #28]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d111      	bne.n	800e10e <tcp_input+0x366>
 800e0ea:	4b58      	ldr	r3, [pc, #352]	; (800e24c <tcp_input+0x4a4>)
 800e0ec:	f240 1215 	movw	r2, #277	; 0x115
 800e0f0:	495a      	ldr	r1, [pc, #360]	; (800e25c <tcp_input+0x4b4>)
 800e0f2:	4858      	ldr	r0, [pc, #352]	; (800e254 <tcp_input+0x4ac>)
 800e0f4:	f006 fae2 	bl	80146bc <iprintf>
      break;
 800e0f8:	e009      	b.n	800e10e <tcp_input+0x366>
    }
    prev = pcb;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	61fb      	str	r3, [r7, #28]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f47f af5e 	bne.w	800dfc8 <tcp_input+0x220>
 800e10c:	e000      	b.n	800e110 <tcp_input+0x368>
      break;
 800e10e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	f040 80aa 	bne.w	800e26c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e118:	4b51      	ldr	r3, [pc, #324]	; (800e260 <tcp_input+0x4b8>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	61fb      	str	r3, [r7, #28]
 800e11e:	e03f      	b.n	800e1a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	7d1b      	ldrb	r3, [r3, #20]
 800e124:	2b0a      	cmp	r3, #10
 800e126:	d006      	beq.n	800e136 <tcp_input+0x38e>
 800e128:	4b48      	ldr	r3, [pc, #288]	; (800e24c <tcp_input+0x4a4>)
 800e12a:	f240 121f 	movw	r2, #287	; 0x11f
 800e12e:	494d      	ldr	r1, [pc, #308]	; (800e264 <tcp_input+0x4bc>)
 800e130:	4848      	ldr	r0, [pc, #288]	; (800e254 <tcp_input+0x4ac>)
 800e132:	f006 fac3 	bl	80146bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	7a1b      	ldrb	r3, [r3, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d009      	beq.n	800e152 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	7a1a      	ldrb	r2, [r3, #8]
 800e142:	4b41      	ldr	r3, [pc, #260]	; (800e248 <tcp_input+0x4a0>)
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e14a:	3301      	adds	r3, #1
 800e14c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e14e:	429a      	cmp	r2, r3
 800e150:	d122      	bne.n	800e198 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	8b1a      	ldrh	r2, [r3, #24]
 800e156:	4b3b      	ldr	r3, [pc, #236]	; (800e244 <tcp_input+0x49c>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	429a      	cmp	r2, r3
 800e160:	d11b      	bne.n	800e19a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	8ada      	ldrh	r2, [r3, #22]
 800e166:	4b37      	ldr	r3, [pc, #220]	; (800e244 <tcp_input+0x49c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	885b      	ldrh	r3, [r3, #2]
 800e16c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e16e:	429a      	cmp	r2, r3
 800e170:	d113      	bne.n	800e19a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	4b34      	ldr	r3, [pc, #208]	; (800e248 <tcp_input+0x4a0>)
 800e178:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d10d      	bne.n	800e19a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	4b31      	ldr	r3, [pc, #196]	; (800e248 <tcp_input+0x4a0>)
 800e184:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e186:	429a      	cmp	r2, r3
 800e188:	d107      	bne.n	800e19a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e18a:	69f8      	ldr	r0, [r7, #28]
 800e18c:	f000 fb56 	bl	800e83c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7fd ffe1 	bl	800c158 <pbuf_free>
        return;
 800e196:	e1fd      	b.n	800e594 <tcp_input+0x7ec>
        continue;
 800e198:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1bc      	bne.n	800e120 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1aa:	4b2f      	ldr	r3, [pc, #188]	; (800e268 <tcp_input+0x4c0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	617b      	str	r3, [r7, #20]
 800e1b0:	e02a      	b.n	800e208 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	7a1b      	ldrb	r3, [r3, #8]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00c      	beq.n	800e1d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	7a1a      	ldrb	r2, [r3, #8]
 800e1be:	4b22      	ldr	r3, [pc, #136]	; (800e248 <tcp_input+0x4a0>)
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d002      	beq.n	800e1d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	61bb      	str	r3, [r7, #24]
        continue;
 800e1d2:	e016      	b.n	800e202 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	8ada      	ldrh	r2, [r3, #22]
 800e1d8:	4b1a      	ldr	r3, [pc, #104]	; (800e244 <tcp_input+0x49c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	885b      	ldrh	r3, [r3, #2]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d10c      	bne.n	800e1fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	4b17      	ldr	r3, [pc, #92]	; (800e248 <tcp_input+0x4a0>)
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d00f      	beq.n	800e210 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <tcp_input+0x46a>
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d009      	beq.n	800e212 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1d1      	bne.n	800e1b2 <tcp_input+0x40a>
 800e20e:	e000      	b.n	800e212 <tcp_input+0x46a>
            break;
 800e210:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d029      	beq.n	800e26c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	68da      	ldr	r2, [r3, #12]
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e226:	4b10      	ldr	r3, [pc, #64]	; (800e268 <tcp_input+0x4c0>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e22e:	4a0e      	ldr	r2, [pc, #56]	; (800e268 <tcp_input+0x4c0>)
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e234:	6978      	ldr	r0, [r7, #20]
 800e236:	f000 fa03 	bl	800e640 <tcp_listen_input>
      }
      pbuf_free(p);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7fd ff8c 	bl	800c158 <pbuf_free>
      return;
 800e240:	e1a8      	b.n	800e594 <tcp_input+0x7ec>
 800e242:	bf00      	nop
 800e244:	20008d70 	.word	0x20008d70
 800e248:	200057d8 	.word	0x200057d8
 800e24c:	08016a94 	.word	0x08016a94
 800e250:	08016bc0 	.word	0x08016bc0
 800e254:	08016ae0 	.word	0x08016ae0
 800e258:	20008d54 	.word	0x20008d54
 800e25c:	08016bec 	.word	0x08016bec
 800e260:	20008d58 	.word	0x20008d58
 800e264:	08016c18 	.word	0x08016c18
 800e268:	20008d50 	.word	0x20008d50
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 8158 	beq.w	800e524 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e274:	4b95      	ldr	r3, [pc, #596]	; (800e4cc <tcp_input+0x724>)
 800e276:	2200      	movs	r2, #0
 800e278:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	891a      	ldrh	r2, [r3, #8]
 800e27e:	4b93      	ldr	r3, [pc, #588]	; (800e4cc <tcp_input+0x724>)
 800e280:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e282:	4a92      	ldr	r2, [pc, #584]	; (800e4cc <tcp_input+0x724>)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e288:	4b91      	ldr	r3, [pc, #580]	; (800e4d0 <tcp_input+0x728>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a8f      	ldr	r2, [pc, #572]	; (800e4cc <tcp_input+0x724>)
 800e28e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e290:	4b90      	ldr	r3, [pc, #576]	; (800e4d4 <tcp_input+0x72c>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e296:	4b90      	ldr	r3, [pc, #576]	; (800e4d8 <tcp_input+0x730>)
 800e298:	2200      	movs	r2, #0
 800e29a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e29c:	4b8f      	ldr	r3, [pc, #572]	; (800e4dc <tcp_input+0x734>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e2a2:	4b8f      	ldr	r3, [pc, #572]	; (800e4e0 <tcp_input+0x738>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	f003 0308 	and.w	r3, r3, #8
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d006      	beq.n	800e2bc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7b5b      	ldrb	r3, [r3, #13]
 800e2b2:	f043 0301 	orr.w	r3, r3, #1
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d017      	beq.n	800e2f4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2c4:	69f8      	ldr	r0, [r7, #28]
 800e2c6:	f7ff f929 	bl	800d51c <tcp_process_refused_data>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	f113 0f0d 	cmn.w	r3, #13
 800e2d0:	d007      	beq.n	800e2e2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00c      	beq.n	800e2f4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2da:	4b82      	ldr	r3, [pc, #520]	; (800e4e4 <tcp_input+0x73c>)
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d008      	beq.n	800e2f4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f040 80e3 	bne.w	800e4b2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2ec:	69f8      	ldr	r0, [r7, #28]
 800e2ee:	f003 f9ad 	bl	801164c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e2f2:	e0de      	b.n	800e4b2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e2f4:	4a7c      	ldr	r2, [pc, #496]	; (800e4e8 <tcp_input+0x740>)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e2fa:	69f8      	ldr	r0, [r7, #28]
 800e2fc:	f000 fb18 	bl	800e930 <tcp_process>
 800e300:	4603      	mov	r3, r0
 800e302:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e304:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e308:	f113 0f0d 	cmn.w	r3, #13
 800e30c:	f000 80d3 	beq.w	800e4b6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e310:	4b71      	ldr	r3, [pc, #452]	; (800e4d8 <tcp_input+0x730>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d015      	beq.n	800e348 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e322:	2b00      	cmp	r3, #0
 800e324:	d008      	beq.n	800e338 <tcp_input+0x590>
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32c:	69fa      	ldr	r2, [r7, #28]
 800e32e:	6912      	ldr	r2, [r2, #16]
 800e330:	f06f 010d 	mvn.w	r1, #13
 800e334:	4610      	mov	r0, r2
 800e336:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e338:	69f9      	ldr	r1, [r7, #28]
 800e33a:	486c      	ldr	r0, [pc, #432]	; (800e4ec <tcp_input+0x744>)
 800e33c:	f7ff fbbc 	bl	800dab8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e340:	69f8      	ldr	r0, [r7, #28]
 800e342:	f7fe f9a9 	bl	800c698 <tcp_free>
 800e346:	e0da      	b.n	800e4fe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e34c:	4b63      	ldr	r3, [pc, #396]	; (800e4dc <tcp_input+0x734>)
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01d      	beq.n	800e390 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e354:	4b61      	ldr	r3, [pc, #388]	; (800e4dc <tcp_input+0x734>)
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <tcp_input+0x5d2>
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	6910      	ldr	r0, [r2, #16]
 800e36e:	89fa      	ldrh	r2, [r7, #14]
 800e370:	69f9      	ldr	r1, [r7, #28]
 800e372:	4798      	blx	r3
 800e374:	4603      	mov	r3, r0
 800e376:	74fb      	strb	r3, [r7, #19]
 800e378:	e001      	b.n	800e37e <tcp_input+0x5d6>
 800e37a:	2300      	movs	r3, #0
 800e37c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e37e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e382:	f113 0f0d 	cmn.w	r3, #13
 800e386:	f000 8098 	beq.w	800e4ba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e38a:	4b54      	ldr	r3, [pc, #336]	; (800e4dc <tcp_input+0x734>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e390:	69f8      	ldr	r0, [r7, #28]
 800e392:	f000 f915 	bl	800e5c0 <tcp_input_delayed_close>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f040 8090 	bne.w	800e4be <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e39e:	4b4d      	ldr	r3, [pc, #308]	; (800e4d4 <tcp_input+0x72c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d041      	beq.n	800e42a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d006      	beq.n	800e3bc <tcp_input+0x614>
 800e3ae:	4b50      	ldr	r3, [pc, #320]	; (800e4f0 <tcp_input+0x748>)
 800e3b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e3b4:	494f      	ldr	r1, [pc, #316]	; (800e4f4 <tcp_input+0x74c>)
 800e3b6:	4850      	ldr	r0, [pc, #320]	; (800e4f8 <tcp_input+0x750>)
 800e3b8:	f006 f980 	bl	80146bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	8b5b      	ldrh	r3, [r3, #26]
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d008      	beq.n	800e3da <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3c8:	4b42      	ldr	r3, [pc, #264]	; (800e4d4 <tcp_input+0x72c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fd fec3 	bl	800c158 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3d2:	69f8      	ldr	r0, [r7, #28]
 800e3d4:	f7fe fc48 	bl	800cc68 <tcp_abort>
            goto aborted;
 800e3d8:	e091      	b.n	800e4fe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00c      	beq.n	800e3fe <tcp_input+0x656>
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	6918      	ldr	r0, [r3, #16]
 800e3ee:	4b39      	ldr	r3, [pc, #228]	; (800e4d4 <tcp_input+0x72c>)
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	69f9      	ldr	r1, [r7, #28]
 800e3f6:	47a0      	blx	r4
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	74fb      	strb	r3, [r7, #19]
 800e3fc:	e008      	b.n	800e410 <tcp_input+0x668>
 800e3fe:	4b35      	ldr	r3, [pc, #212]	; (800e4d4 <tcp_input+0x72c>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	2300      	movs	r3, #0
 800e404:	69f9      	ldr	r1, [r7, #28]
 800e406:	2000      	movs	r0, #0
 800e408:	f7ff f95e 	bl	800d6c8 <tcp_recv_null>
 800e40c:	4603      	mov	r3, r0
 800e40e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e414:	f113 0f0d 	cmn.w	r3, #13
 800e418:	d053      	beq.n	800e4c2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e41a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e422:	4b2c      	ldr	r3, [pc, #176]	; (800e4d4 <tcp_input+0x72c>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e42a:	4b2b      	ldr	r3, [pc, #172]	; (800e4d8 <tcp_input+0x730>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f003 0320 	and.w	r3, r3, #32
 800e432:	2b00      	cmp	r3, #0
 800e434:	d030      	beq.n	800e498 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e442:	7b5a      	ldrb	r2, [r3, #13]
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e448:	f042 0220 	orr.w	r2, r2, #32
 800e44c:	b2d2      	uxtb	r2, r2
 800e44e:	735a      	strb	r2, [r3, #13]
 800e450:	e022      	b.n	800e498 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e456:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e45a:	d005      	beq.n	800e468 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e460:	3301      	adds	r3, #1
 800e462:	b29a      	uxth	r2, r3
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00b      	beq.n	800e48a <tcp_input+0x6e2>
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	6918      	ldr	r0, [r3, #16]
 800e47c:	2300      	movs	r3, #0
 800e47e:	2200      	movs	r2, #0
 800e480:	69f9      	ldr	r1, [r7, #28]
 800e482:	47a0      	blx	r4
 800e484:	4603      	mov	r3, r0
 800e486:	74fb      	strb	r3, [r7, #19]
 800e488:	e001      	b.n	800e48e <tcp_input+0x6e6>
 800e48a:	2300      	movs	r3, #0
 800e48c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e48e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e492:	f113 0f0d 	cmn.w	r3, #13
 800e496:	d016      	beq.n	800e4c6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e498:	4b13      	ldr	r3, [pc, #76]	; (800e4e8 <tcp_input+0x740>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e49e:	69f8      	ldr	r0, [r7, #28]
 800e4a0:	f000 f88e 	bl	800e5c0 <tcp_input_delayed_close>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d128      	bne.n	800e4fc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e4aa:	69f8      	ldr	r0, [r7, #28]
 800e4ac:	f002 fac8 	bl	8010a40 <tcp_output>
 800e4b0:	e025      	b.n	800e4fe <tcp_input+0x756>
        goto aborted;
 800e4b2:	bf00      	nop
 800e4b4:	e023      	b.n	800e4fe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4b6:	bf00      	nop
 800e4b8:	e021      	b.n	800e4fe <tcp_input+0x756>
              goto aborted;
 800e4ba:	bf00      	nop
 800e4bc:	e01f      	b.n	800e4fe <tcp_input+0x756>
          goto aborted;
 800e4be:	bf00      	nop
 800e4c0:	e01d      	b.n	800e4fe <tcp_input+0x756>
            goto aborted;
 800e4c2:	bf00      	nop
 800e4c4:	e01b      	b.n	800e4fe <tcp_input+0x756>
              goto aborted;
 800e4c6:	bf00      	nop
 800e4c8:	e019      	b.n	800e4fe <tcp_input+0x756>
 800e4ca:	bf00      	nop
 800e4cc:	20008d60 	.word	0x20008d60
 800e4d0:	20008d70 	.word	0x20008d70
 800e4d4:	20008d90 	.word	0x20008d90
 800e4d8:	20008d8d 	.word	0x20008d8d
 800e4dc:	20008d88 	.word	0x20008d88
 800e4e0:	20008d8c 	.word	0x20008d8c
 800e4e4:	20008d8a 	.word	0x20008d8a
 800e4e8:	20008d94 	.word	0x20008d94
 800e4ec:	20008d54 	.word	0x20008d54
 800e4f0:	08016a94 	.word	0x08016a94
 800e4f4:	08016c48 	.word	0x08016c48
 800e4f8:	08016ae0 	.word	0x08016ae0
          goto aborted;
 800e4fc:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4fe:	4b27      	ldr	r3, [pc, #156]	; (800e59c <tcp_input+0x7f4>)
 800e500:	2200      	movs	r2, #0
 800e502:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e504:	4b26      	ldr	r3, [pc, #152]	; (800e5a0 <tcp_input+0x7f8>)
 800e506:	2200      	movs	r2, #0
 800e508:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e50a:	4b26      	ldr	r3, [pc, #152]	; (800e5a4 <tcp_input+0x7fc>)
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d03f      	beq.n	800e592 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e512:	4b24      	ldr	r3, [pc, #144]	; (800e5a4 <tcp_input+0x7fc>)
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd fe1e 	bl	800c158 <pbuf_free>
      inseg.p = NULL;
 800e51c:	4b21      	ldr	r3, [pc, #132]	; (800e5a4 <tcp_input+0x7fc>)
 800e51e:	2200      	movs	r2, #0
 800e520:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e522:	e036      	b.n	800e592 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e524:	4b20      	ldr	r3, [pc, #128]	; (800e5a8 <tcp_input+0x800>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	899b      	ldrh	r3, [r3, #12]
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fc fad5 	bl	800aadc <lwip_htons>
 800e532:	4603      	mov	r3, r0
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f003 0304 	and.w	r3, r3, #4
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d118      	bne.n	800e570 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e53e:	4b1b      	ldr	r3, [pc, #108]	; (800e5ac <tcp_input+0x804>)
 800e540:	6819      	ldr	r1, [r3, #0]
 800e542:	4b1b      	ldr	r3, [pc, #108]	; (800e5b0 <tcp_input+0x808>)
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <tcp_input+0x80c>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e54e:	4b16      	ldr	r3, [pc, #88]	; (800e5a8 <tcp_input+0x800>)
 800e550:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e552:	885b      	ldrh	r3, [r3, #2]
 800e554:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e556:	4a14      	ldr	r2, [pc, #80]	; (800e5a8 <tcp_input+0x800>)
 800e558:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e55a:	8812      	ldrh	r2, [r2, #0]
 800e55c:	b292      	uxth	r2, r2
 800e55e:	9202      	str	r2, [sp, #8]
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	4b15      	ldr	r3, [pc, #84]	; (800e5b8 <tcp_input+0x810>)
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	4b15      	ldr	r3, [pc, #84]	; (800e5bc <tcp_input+0x814>)
 800e568:	4602      	mov	r2, r0
 800e56a:	2000      	movs	r0, #0
 800e56c:	f003 f81c 	bl	80115a8 <tcp_rst>
    pbuf_free(p);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7fd fdf1 	bl	800c158 <pbuf_free>
  return;
 800e576:	e00c      	b.n	800e592 <tcp_input+0x7ea>
    goto dropped;
 800e578:	bf00      	nop
 800e57a:	e006      	b.n	800e58a <tcp_input+0x7e2>
    goto dropped;
 800e57c:	bf00      	nop
 800e57e:	e004      	b.n	800e58a <tcp_input+0x7e2>
    goto dropped;
 800e580:	bf00      	nop
 800e582:	e002      	b.n	800e58a <tcp_input+0x7e2>
      goto dropped;
 800e584:	bf00      	nop
 800e586:	e000      	b.n	800e58a <tcp_input+0x7e2>
      goto dropped;
 800e588:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7fd fde4 	bl	800c158 <pbuf_free>
 800e590:	e000      	b.n	800e594 <tcp_input+0x7ec>
  return;
 800e592:	bf00      	nop
}
 800e594:	3724      	adds	r7, #36	; 0x24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd90      	pop	{r4, r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20008d94 	.word	0x20008d94
 800e5a0:	20008d90 	.word	0x20008d90
 800e5a4:	20008d60 	.word	0x20008d60
 800e5a8:	20008d70 	.word	0x20008d70
 800e5ac:	20008d84 	.word	0x20008d84
 800e5b0:	20008d8a 	.word	0x20008d8a
 800e5b4:	20008d80 	.word	0x20008d80
 800e5b8:	200057e8 	.word	0x200057e8
 800e5bc:	200057ec 	.word	0x200057ec

0800e5c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <tcp_input_delayed_close+0x1c>
 800e5ce:	4b17      	ldr	r3, [pc, #92]	; (800e62c <tcp_input_delayed_close+0x6c>)
 800e5d0:	f240 225a 	movw	r2, #602	; 0x25a
 800e5d4:	4916      	ldr	r1, [pc, #88]	; (800e630 <tcp_input_delayed_close+0x70>)
 800e5d6:	4817      	ldr	r0, [pc, #92]	; (800e634 <tcp_input_delayed_close+0x74>)
 800e5d8:	f006 f870 	bl	80146bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e5dc:	4b16      	ldr	r3, [pc, #88]	; (800e638 <tcp_input_delayed_close+0x78>)
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f003 0310 	and.w	r3, r3, #16
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d01c      	beq.n	800e622 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8b5b      	ldrh	r3, [r3, #26]
 800e5ec:	f003 0310 	and.w	r3, r3, #16
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10d      	bne.n	800e610 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d008      	beq.n	800e610 <tcp_input_delayed_close+0x50>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	6912      	ldr	r2, [r2, #16]
 800e608:	f06f 010e 	mvn.w	r1, #14
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e610:	6879      	ldr	r1, [r7, #4]
 800e612:	480a      	ldr	r0, [pc, #40]	; (800e63c <tcp_input_delayed_close+0x7c>)
 800e614:	f7ff fa50 	bl	800dab8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7fe f83d 	bl	800c698 <tcp_free>
    return 1;
 800e61e:	2301      	movs	r3, #1
 800e620:	e000      	b.n	800e624 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	08016a94 	.word	0x08016a94
 800e630:	08016c64 	.word	0x08016c64
 800e634:	08016ae0 	.word	0x08016ae0
 800e638:	20008d8d 	.word	0x20008d8d
 800e63c:	20008d54 	.word	0x20008d54

0800e640 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e640:	b590      	push	{r4, r7, lr}
 800e642:	b08b      	sub	sp, #44	; 0x2c
 800e644:	af04      	add	r7, sp, #16
 800e646:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e648:	4b6f      	ldr	r3, [pc, #444]	; (800e808 <tcp_listen_input+0x1c8>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 0304 	and.w	r3, r3, #4
 800e650:	2b00      	cmp	r3, #0
 800e652:	f040 80d2 	bne.w	800e7fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d106      	bne.n	800e66a <tcp_listen_input+0x2a>
 800e65c:	4b6b      	ldr	r3, [pc, #428]	; (800e80c <tcp_listen_input+0x1cc>)
 800e65e:	f240 2281 	movw	r2, #641	; 0x281
 800e662:	496b      	ldr	r1, [pc, #428]	; (800e810 <tcp_listen_input+0x1d0>)
 800e664:	486b      	ldr	r0, [pc, #428]	; (800e814 <tcp_listen_input+0x1d4>)
 800e666:	f006 f829 	bl	80146bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e66a:	4b67      	ldr	r3, [pc, #412]	; (800e808 <tcp_listen_input+0x1c8>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	f003 0310 	and.w	r3, r3, #16
 800e672:	2b00      	cmp	r3, #0
 800e674:	d019      	beq.n	800e6aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e676:	4b68      	ldr	r3, [pc, #416]	; (800e818 <tcp_listen_input+0x1d8>)
 800e678:	6819      	ldr	r1, [r3, #0]
 800e67a:	4b68      	ldr	r3, [pc, #416]	; (800e81c <tcp_listen_input+0x1dc>)
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	4b67      	ldr	r3, [pc, #412]	; (800e820 <tcp_listen_input+0x1e0>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e686:	4b67      	ldr	r3, [pc, #412]	; (800e824 <tcp_listen_input+0x1e4>)
 800e688:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e68a:	885b      	ldrh	r3, [r3, #2]
 800e68c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e68e:	4a65      	ldr	r2, [pc, #404]	; (800e824 <tcp_listen_input+0x1e4>)
 800e690:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e692:	8812      	ldrh	r2, [r2, #0]
 800e694:	b292      	uxth	r2, r2
 800e696:	9202      	str	r2, [sp, #8]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	4b63      	ldr	r3, [pc, #396]	; (800e828 <tcp_listen_input+0x1e8>)
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	4b63      	ldr	r3, [pc, #396]	; (800e82c <tcp_listen_input+0x1ec>)
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f002 ff80 	bl	80115a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e6a8:	e0a9      	b.n	800e7fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e6aa:	4b57      	ldr	r3, [pc, #348]	; (800e808 <tcp_listen_input+0x1c8>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f000 80a3 	beq.w	800e7fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7d5b      	ldrb	r3, [r3, #21]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7ff f927 	bl	800d910 <tcp_alloc>
 800e6c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d111      	bne.n	800e6ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <tcp_listen_input+0xa8>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	6910      	ldr	r0, [r2, #16]
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295
 800e6de:	2100      	movs	r1, #0
 800e6e0:	4798      	blx	r3
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73bb      	strb	r3, [r7, #14]
      return;
 800e6e6:	e08b      	b.n	800e800 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6e8:	23f0      	movs	r3, #240	; 0xf0
 800e6ea:	73bb      	strb	r3, [r7, #14]
      return;
 800e6ec:	e088      	b.n	800e800 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6ee:	4b50      	ldr	r3, [pc, #320]	; (800e830 <tcp_listen_input+0x1f0>)
 800e6f0:	695a      	ldr	r2, [r3, #20]
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6f6:	4b4e      	ldr	r3, [pc, #312]	; (800e830 <tcp_listen_input+0x1f0>)
 800e6f8:	691a      	ldr	r2, [r3, #16]
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	8ada      	ldrh	r2, [r3, #22]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e706:	4b47      	ldr	r3, [pc, #284]	; (800e824 <tcp_listen_input+0x1e4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	2203      	movs	r2, #3
 800e716:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e718:	4b41      	ldr	r3, [pc, #260]	; (800e820 <tcp_listen_input+0x1e0>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e72a:	6978      	ldr	r0, [r7, #20]
 800e72c:	f7ff fa58 	bl	800dbe0 <tcp_next_iss>
 800e730:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	693a      	ldr	r2, [r7, #16]
 800e748:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e74a:	4b35      	ldr	r3, [pc, #212]	; (800e820 <tcp_listen_input+0x1e0>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	1e5a      	subs	r2, r3, #1
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	691a      	ldr	r2, [r3, #16]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7a5b      	ldrb	r3, [r3, #9]
 800e766:	f003 030c 	and.w	r3, r3, #12
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	7a1a      	ldrb	r2, [r3, #8]
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e778:	4b2e      	ldr	r3, [pc, #184]	; (800e834 <tcp_listen_input+0x1f4>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	60da      	str	r2, [r3, #12]
 800e780:	4a2c      	ldr	r2, [pc, #176]	; (800e834 <tcp_listen_input+0x1f4>)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	6013      	str	r3, [r2, #0]
 800e786:	f003 f8d1 	bl	801192c <tcp_timer_needed>
 800e78a:	4b2b      	ldr	r3, [pc, #172]	; (800e838 <tcp_listen_input+0x1f8>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e790:	6978      	ldr	r0, [r7, #20]
 800e792:	f001 fd8f 	bl	80102b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e796:	4b23      	ldr	r3, [pc, #140]	; (800e824 <tcp_listen_input+0x1e4>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	89db      	ldrh	r3, [r3, #14]
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f004 fc53 	bl	8013064 <ip4_route>
 800e7be:	4601      	mov	r1, r0
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f7ff fa30 	bl	800dc2c <tcp_eff_send_mss_netif>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7d4:	2112      	movs	r1, #18
 800e7d6:	6978      	ldr	r0, [r7, #20]
 800e7d8:	f002 f844 	bl	8010864 <tcp_enqueue_flags>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d004      	beq.n	800e7f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	6978      	ldr	r0, [r7, #20]
 800e7ec:	f7fe f97e 	bl	800caec <tcp_abandon>
      return;
 800e7f0:	e006      	b.n	800e800 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e7f2:	6978      	ldr	r0, [r7, #20]
 800e7f4:	f002 f924 	bl	8010a40 <tcp_output>
  return;
 800e7f8:	e001      	b.n	800e7fe <tcp_listen_input+0x1be>
    return;
 800e7fa:	bf00      	nop
 800e7fc:	e000      	b.n	800e800 <tcp_listen_input+0x1c0>
  return;
 800e7fe:	bf00      	nop
}
 800e800:	371c      	adds	r7, #28
 800e802:	46bd      	mov	sp, r7
 800e804:	bd90      	pop	{r4, r7, pc}
 800e806:	bf00      	nop
 800e808:	20008d8c 	.word	0x20008d8c
 800e80c:	08016a94 	.word	0x08016a94
 800e810:	08016c8c 	.word	0x08016c8c
 800e814:	08016ae0 	.word	0x08016ae0
 800e818:	20008d84 	.word	0x20008d84
 800e81c:	20008d8a 	.word	0x20008d8a
 800e820:	20008d80 	.word	0x20008d80
 800e824:	20008d70 	.word	0x20008d70
 800e828:	200057e8 	.word	0x200057e8
 800e82c:	200057ec 	.word	0x200057ec
 800e830:	200057d8 	.word	0x200057d8
 800e834:	20008d54 	.word	0x20008d54
 800e838:	20008d5c 	.word	0x20008d5c

0800e83c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af04      	add	r7, sp, #16
 800e842:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e844:	4b2f      	ldr	r3, [pc, #188]	; (800e904 <tcp_timewait_input+0xc8>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d153      	bne.n	800e8f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d106      	bne.n	800e864 <tcp_timewait_input+0x28>
 800e856:	4b2c      	ldr	r3, [pc, #176]	; (800e908 <tcp_timewait_input+0xcc>)
 800e858:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e85c:	492b      	ldr	r1, [pc, #172]	; (800e90c <tcp_timewait_input+0xd0>)
 800e85e:	482c      	ldr	r0, [pc, #176]	; (800e910 <tcp_timewait_input+0xd4>)
 800e860:	f005 ff2c 	bl	80146bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e864:	4b27      	ldr	r3, [pc, #156]	; (800e904 <tcp_timewait_input+0xc8>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d02a      	beq.n	800e8c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e870:	4b28      	ldr	r3, [pc, #160]	; (800e914 <tcp_timewait_input+0xd8>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	db2d      	blt.n	800e8da <tcp_timewait_input+0x9e>
 800e87e:	4b25      	ldr	r3, [pc, #148]	; (800e914 <tcp_timewait_input+0xd8>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e88a:	440b      	add	r3, r1
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	dc23      	bgt.n	800e8da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e892:	4b21      	ldr	r3, [pc, #132]	; (800e918 <tcp_timewait_input+0xdc>)
 800e894:	6819      	ldr	r1, [r3, #0]
 800e896:	4b21      	ldr	r3, [pc, #132]	; (800e91c <tcp_timewait_input+0xe0>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	4b1d      	ldr	r3, [pc, #116]	; (800e914 <tcp_timewait_input+0xd8>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8a2:	4b1f      	ldr	r3, [pc, #124]	; (800e920 <tcp_timewait_input+0xe4>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8a6:	885b      	ldrh	r3, [r3, #2]
 800e8a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8aa:	4a1d      	ldr	r2, [pc, #116]	; (800e920 <tcp_timewait_input+0xe4>)
 800e8ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8ae:	8812      	ldrh	r2, [r2, #0]
 800e8b0:	b292      	uxth	r2, r2
 800e8b2:	9202      	str	r2, [sp, #8]
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	4b1b      	ldr	r3, [pc, #108]	; (800e924 <tcp_timewait_input+0xe8>)
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	4b1b      	ldr	r3, [pc, #108]	; (800e928 <tcp_timewait_input+0xec>)
 800e8bc:	4602      	mov	r2, r0
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f002 fe72 	bl	80115a8 <tcp_rst>
      return;
 800e8c4:	e01b      	b.n	800e8fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e8c6:	4b0f      	ldr	r3, [pc, #60]	; (800e904 <tcp_timewait_input+0xc8>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d003      	beq.n	800e8da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e8d2:	4b16      	ldr	r3, [pc, #88]	; (800e92c <tcp_timewait_input+0xf0>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e8da:	4b10      	ldr	r3, [pc, #64]	; (800e91c <tcp_timewait_input+0xe0>)
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00c      	beq.n	800e8fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	8b5b      	ldrh	r3, [r3, #26]
 800e8e6:	f043 0302 	orr.w	r3, r3, #2
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f002 f8a5 	bl	8010a40 <tcp_output>
  }
  return;
 800e8f6:	e001      	b.n	800e8fc <tcp_timewait_input+0xc0>
    return;
 800e8f8:	bf00      	nop
 800e8fa:	e000      	b.n	800e8fe <tcp_timewait_input+0xc2>
  return;
 800e8fc:	bf00      	nop
}
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20008d8c 	.word	0x20008d8c
 800e908:	08016a94 	.word	0x08016a94
 800e90c:	08016cac 	.word	0x08016cac
 800e910:	08016ae0 	.word	0x08016ae0
 800e914:	20008d80 	.word	0x20008d80
 800e918:	20008d84 	.word	0x20008d84
 800e91c:	20008d8a 	.word	0x20008d8a
 800e920:	20008d70 	.word	0x20008d70
 800e924:	200057e8 	.word	0x200057e8
 800e928:	200057ec 	.word	0x200057ec
 800e92c:	20008d48 	.word	0x20008d48

0800e930 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e930:	b590      	push	{r4, r7, lr}
 800e932:	b08d      	sub	sp, #52	; 0x34
 800e934:	af04      	add	r7, sp, #16
 800e936:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <tcp_process+0x24>
 800e946:	4b9d      	ldr	r3, [pc, #628]	; (800ebbc <tcp_process+0x28c>)
 800e948:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e94c:	499c      	ldr	r1, [pc, #624]	; (800ebc0 <tcp_process+0x290>)
 800e94e:	489d      	ldr	r0, [pc, #628]	; (800ebc4 <tcp_process+0x294>)
 800e950:	f005 feb4 	bl	80146bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e954:	4b9c      	ldr	r3, [pc, #624]	; (800ebc8 <tcp_process+0x298>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0304 	and.w	r3, r3, #4
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d04e      	beq.n	800e9fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	7d1b      	ldrb	r3, [r3, #20]
 800e964:	2b02      	cmp	r3, #2
 800e966:	d108      	bne.n	800e97a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e96c:	4b97      	ldr	r3, [pc, #604]	; (800ebcc <tcp_process+0x29c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	429a      	cmp	r2, r3
 800e972:	d123      	bne.n	800e9bc <tcp_process+0x8c>
        acceptable = 1;
 800e974:	2301      	movs	r3, #1
 800e976:	76fb      	strb	r3, [r7, #27]
 800e978:	e020      	b.n	800e9bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e97e:	4b94      	ldr	r3, [pc, #592]	; (800ebd0 <tcp_process+0x2a0>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	d102      	bne.n	800e98c <tcp_process+0x5c>
        acceptable = 1;
 800e986:	2301      	movs	r3, #1
 800e988:	76fb      	strb	r3, [r7, #27]
 800e98a:	e017      	b.n	800e9bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e98c:	4b90      	ldr	r3, [pc, #576]	; (800ebd0 <tcp_process+0x2a0>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	db10      	blt.n	800e9bc <tcp_process+0x8c>
 800e99a:	4b8d      	ldr	r3, [pc, #564]	; (800ebd0 <tcp_process+0x2a0>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9a6:	440b      	add	r3, r1
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	dc06      	bgt.n	800e9bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	8b5b      	ldrh	r3, [r3, #26]
 800e9b2:	f043 0302 	orr.w	r3, r3, #2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e9bc:	7efb      	ldrb	r3, [r7, #27]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d01b      	beq.n	800e9fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	7d1b      	ldrb	r3, [r3, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <tcp_process+0xa8>
 800e9ca:	4b7c      	ldr	r3, [pc, #496]	; (800ebbc <tcp_process+0x28c>)
 800e9cc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e9d0:	4980      	ldr	r1, [pc, #512]	; (800ebd4 <tcp_process+0x2a4>)
 800e9d2:	487c      	ldr	r0, [pc, #496]	; (800ebc4 <tcp_process+0x294>)
 800e9d4:	f005 fe72 	bl	80146bc <iprintf>
      recv_flags |= TF_RESET;
 800e9d8:	4b7f      	ldr	r3, [pc, #508]	; (800ebd8 <tcp_process+0x2a8>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f043 0308 	orr.w	r3, r3, #8
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	4b7d      	ldr	r3, [pc, #500]	; (800ebd8 <tcp_process+0x2a8>)
 800e9e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ea:	f023 0301 	bic.w	r3, r3, #1
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9f4:	f06f 030d 	mvn.w	r3, #13
 800e9f8:	e37a      	b.n	800f0f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e378      	b.n	800f0f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9fe:	4b72      	ldr	r3, [pc, #456]	; (800ebc8 <tcp_process+0x298>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0302 	and.w	r3, r3, #2
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d010      	beq.n	800ea2c <tcp_process+0xfc>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d00c      	beq.n	800ea2c <tcp_process+0xfc>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7d1b      	ldrb	r3, [r3, #20]
 800ea16:	2b03      	cmp	r3, #3
 800ea18:	d008      	beq.n	800ea2c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	8b5b      	ldrh	r3, [r3, #26]
 800ea1e:	f043 0302 	orr.w	r3, r3, #2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e361      	b.n	800f0f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	8b5b      	ldrh	r3, [r3, #26]
 800ea30:	f003 0310 	and.w	r3, r3, #16
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d103      	bne.n	800ea40 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea38:	4b68      	ldr	r3, [pc, #416]	; (800ebdc <tcp_process+0x2ac>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 fc2f 	bl	80102b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	3b02      	subs	r3, #2
 800ea5c:	2b07      	cmp	r3, #7
 800ea5e:	f200 8337 	bhi.w	800f0d0 <tcp_process+0x7a0>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <tcp_process+0x138>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea89 	.word	0x0800ea89
 800ea6c:	0800ecb9 	.word	0x0800ecb9
 800ea70:	0800ee31 	.word	0x0800ee31
 800ea74:	0800ee5b 	.word	0x0800ee5b
 800ea78:	0800ef7f 	.word	0x0800ef7f
 800ea7c:	0800ee31 	.word	0x0800ee31
 800ea80:	0800f00b 	.word	0x0800f00b
 800ea84:	0800f09b 	.word	0x0800f09b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea88:	4b4f      	ldr	r3, [pc, #316]	; (800ebc8 <tcp_process+0x298>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	f003 0310 	and.w	r3, r3, #16
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f000 80e4 	beq.w	800ec5e <tcp_process+0x32e>
 800ea96:	4b4c      	ldr	r3, [pc, #304]	; (800ebc8 <tcp_process+0x298>)
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 80dd 	beq.w	800ec5e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	4b48      	ldr	r3, [pc, #288]	; (800ebcc <tcp_process+0x29c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	f040 80d5 	bne.w	800ec5e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eab4:	4b46      	ldr	r3, [pc, #280]	; (800ebd0 <tcp_process+0x2a0>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eac6:	4b41      	ldr	r3, [pc, #260]	; (800ebcc <tcp_process+0x29c>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eace:	4b44      	ldr	r3, [pc, #272]	; (800ebe0 <tcp_process+0x2b0>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	89db      	ldrh	r3, [r3, #14]
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eae8:	4b39      	ldr	r3, [pc, #228]	; (800ebd0 <tcp_process+0x2a0>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	1e5a      	subs	r2, r3, #1
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2204      	movs	r2, #4
 800eaf6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	3304      	adds	r3, #4
 800eb00:	4618      	mov	r0, r3
 800eb02:	f004 faaf 	bl	8013064 <ip4_route>
 800eb06:	4601      	mov	r1, r0
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f7ff f88c 	bl	800dc2c <tcp_eff_send_mss_netif>
 800eb14:	4603      	mov	r3, r0
 800eb16:	461a      	mov	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb20:	009a      	lsls	r2, r3, #2
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb2c:	428b      	cmp	r3, r1
 800eb2e:	bf38      	it	cc
 800eb30:	460b      	movcc	r3, r1
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d204      	bcs.n	800eb40 <tcp_process+0x210>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	e00d      	b.n	800eb5c <tcp_process+0x22c>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d904      	bls.n	800eb58 <tcp_process+0x228>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	e001      	b.n	800eb5c <tcp_process+0x22c>
 800eb58:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d106      	bne.n	800eb7a <tcp_process+0x24a>
 800eb6c:	4b13      	ldr	r3, [pc, #76]	; (800ebbc <tcp_process+0x28c>)
 800eb6e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eb72:	491c      	ldr	r1, [pc, #112]	; (800ebe4 <tcp_process+0x2b4>)
 800eb74:	4813      	ldr	r0, [pc, #76]	; (800ebc4 <tcp_process+0x294>)
 800eb76:	f005 fda1 	bl	80146bc <iprintf>
        --pcb->snd_queuelen;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb80:	3b01      	subs	r3, #1
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb8e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d12a      	bne.n	800ebec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <tcp_process+0x280>
 800eba2:	4b06      	ldr	r3, [pc, #24]	; (800ebbc <tcp_process+0x28c>)
 800eba4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eba8:	490f      	ldr	r1, [pc, #60]	; (800ebe8 <tcp_process+0x2b8>)
 800ebaa:	4806      	ldr	r0, [pc, #24]	; (800ebc4 <tcp_process+0x294>)
 800ebac:	f005 fd86 	bl	80146bc <iprintf>
          pcb->unsent = rseg->next;
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	66da      	str	r2, [r3, #108]	; 0x6c
 800ebb8:	e01c      	b.n	800ebf4 <tcp_process+0x2c4>
 800ebba:	bf00      	nop
 800ebbc:	08016a94 	.word	0x08016a94
 800ebc0:	08016ccc 	.word	0x08016ccc
 800ebc4:	08016ae0 	.word	0x08016ae0
 800ebc8:	20008d8c 	.word	0x20008d8c
 800ebcc:	20008d84 	.word	0x20008d84
 800ebd0:	20008d80 	.word	0x20008d80
 800ebd4:	08016ce8 	.word	0x08016ce8
 800ebd8:	20008d8d 	.word	0x20008d8d
 800ebdc:	20008d48 	.word	0x20008d48
 800ebe0:	20008d70 	.word	0x20008d70
 800ebe4:	08016d08 	.word	0x08016d08
 800ebe8:	08016d20 	.word	0x08016d20
        } else {
          pcb->unacked = rseg->next;
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ebf4:	69f8      	ldr	r0, [r7, #28]
 800ebf6:	f7fe fd22 	bl	800d63e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d104      	bne.n	800ec0c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec08:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec0a:	e006      	b.n	800ec1a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <tcp_process+0x30a>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	6910      	ldr	r0, [r2, #16]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	4798      	blx	r3
 800ec34:	4603      	mov	r3, r0
 800ec36:	76bb      	strb	r3, [r7, #26]
 800ec38:	e001      	b.n	800ec3e <tcp_process+0x30e>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec3e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec42:	f113 0f0d 	cmn.w	r3, #13
 800ec46:	d102      	bne.n	800ec4e <tcp_process+0x31e>
          return ERR_ABRT;
 800ec48:	f06f 030c 	mvn.w	r3, #12
 800ec4c:	e250      	b.n	800f0f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8b5b      	ldrh	r3, [r3, #26]
 800ec52:	f043 0302 	orr.w	r3, r3, #2
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec5c:	e23a      	b.n	800f0d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec5e:	4b98      	ldr	r3, [pc, #608]	; (800eec0 <tcp_process+0x590>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	f003 0310 	and.w	r3, r3, #16
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 8234 	beq.w	800f0d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec6c:	4b95      	ldr	r3, [pc, #596]	; (800eec4 <tcp_process+0x594>)
 800ec6e:	6819      	ldr	r1, [r3, #0]
 800ec70:	4b95      	ldr	r3, [pc, #596]	; (800eec8 <tcp_process+0x598>)
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	4b95      	ldr	r3, [pc, #596]	; (800eecc <tcp_process+0x59c>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec7c:	4b94      	ldr	r3, [pc, #592]	; (800eed0 <tcp_process+0x5a0>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec80:	885b      	ldrh	r3, [r3, #2]
 800ec82:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec84:	4a92      	ldr	r2, [pc, #584]	; (800eed0 <tcp_process+0x5a0>)
 800ec86:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec88:	8812      	ldrh	r2, [r2, #0]
 800ec8a:	b292      	uxth	r2, r2
 800ec8c:	9202      	str	r2, [sp, #8]
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	4b90      	ldr	r3, [pc, #576]	; (800eed4 <tcp_process+0x5a4>)
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	4b90      	ldr	r3, [pc, #576]	; (800eed8 <tcp_process+0x5a8>)
 800ec96:	4602      	mov	r2, r0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f002 fc85 	bl	80115a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eca4:	2b05      	cmp	r3, #5
 800eca6:	f200 8215 	bhi.w	800f0d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f002 fa4f 	bl	8011154 <tcp_rexmit_rto>
      break;
 800ecb6:	e20d      	b.n	800f0d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ecb8:	4b81      	ldr	r3, [pc, #516]	; (800eec0 <tcp_process+0x590>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	f003 0310 	and.w	r3, r3, #16
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 80a1 	beq.w	800ee08 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ecc6:	4b7f      	ldr	r3, [pc, #508]	; (800eec4 <tcp_process+0x594>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	db7e      	blt.n	800edd4 <tcp_process+0x4a4>
 800ecd6:	4b7b      	ldr	r3, [pc, #492]	; (800eec4 <tcp_process+0x594>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	dc77      	bgt.n	800edd4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2204      	movs	r2, #4
 800ece8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d102      	bne.n	800ecf8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ecf2:	23fa      	movs	r3, #250	; 0xfa
 800ecf4:	76bb      	strb	r3, [r7, #26]
 800ecf6:	e01d      	b.n	800ed34 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d106      	bne.n	800ed10 <tcp_process+0x3e0>
 800ed02:	4b76      	ldr	r3, [pc, #472]	; (800eedc <tcp_process+0x5ac>)
 800ed04:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ed08:	4975      	ldr	r1, [pc, #468]	; (800eee0 <tcp_process+0x5b0>)
 800ed0a:	4876      	ldr	r0, [pc, #472]	; (800eee4 <tcp_process+0x5b4>)
 800ed0c:	f005 fcd6 	bl	80146bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00a      	beq.n	800ed30 <tcp_process+0x400>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	6910      	ldr	r0, [r2, #16]
 800ed24:	2200      	movs	r2, #0
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	4798      	blx	r3
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	76bb      	strb	r3, [r7, #26]
 800ed2e:	e001      	b.n	800ed34 <tcp_process+0x404>
 800ed30:	23f0      	movs	r3, #240	; 0xf0
 800ed32:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed40:	f113 0f0d 	cmn.w	r3, #13
 800ed44:	d002      	beq.n	800ed4c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fd ff8e 	bl	800cc68 <tcp_abort>
            }
            return ERR_ABRT;
 800ed4c:	f06f 030c 	mvn.w	r3, #12
 800ed50:	e1ce      	b.n	800f0f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fae0 	bl	800f318 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed58:	4b63      	ldr	r3, [pc, #396]	; (800eee8 <tcp_process+0x5b8>)
 800ed5a:	881b      	ldrh	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d005      	beq.n	800ed6c <tcp_process+0x43c>
            recv_acked--;
 800ed60:	4b61      	ldr	r3, [pc, #388]	; (800eee8 <tcp_process+0x5b8>)
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	4b5f      	ldr	r3, [pc, #380]	; (800eee8 <tcp_process+0x5b8>)
 800ed6a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed70:	009a      	lsls	r2, r3, #2
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed7c:	428b      	cmp	r3, r1
 800ed7e:	bf38      	it	cc
 800ed80:	460b      	movcc	r3, r1
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d204      	bcs.n	800ed90 <tcp_process+0x460>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	e00d      	b.n	800edac <tcp_process+0x47c>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d904      	bls.n	800eda8 <tcp_process+0x478>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eda2:	005b      	lsls	r3, r3, #1
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	e001      	b.n	800edac <tcp_process+0x47c>
 800eda8:	f241 131c 	movw	r3, #4380	; 0x111c
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800edb2:	4b4e      	ldr	r3, [pc, #312]	; (800eeec <tcp_process+0x5bc>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	f003 0320 	and.w	r3, r3, #32
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d037      	beq.n	800ee2e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	8b5b      	ldrh	r3, [r3, #26]
 800edc2:	f043 0302 	orr.w	r3, r3, #2
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2207      	movs	r2, #7
 800edd0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800edd2:	e02c      	b.n	800ee2e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd4:	4b3b      	ldr	r3, [pc, #236]	; (800eec4 <tcp_process+0x594>)
 800edd6:	6819      	ldr	r1, [r3, #0]
 800edd8:	4b3b      	ldr	r3, [pc, #236]	; (800eec8 <tcp_process+0x598>)
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	461a      	mov	r2, r3
 800edde:	4b3b      	ldr	r3, [pc, #236]	; (800eecc <tcp_process+0x59c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ede4:	4b3a      	ldr	r3, [pc, #232]	; (800eed0 <tcp_process+0x5a0>)
 800ede6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ede8:	885b      	ldrh	r3, [r3, #2]
 800edea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edec:	4a38      	ldr	r2, [pc, #224]	; (800eed0 <tcp_process+0x5a0>)
 800edee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edf0:	8812      	ldrh	r2, [r2, #0]
 800edf2:	b292      	uxth	r2, r2
 800edf4:	9202      	str	r2, [sp, #8]
 800edf6:	9301      	str	r3, [sp, #4]
 800edf8:	4b36      	ldr	r3, [pc, #216]	; (800eed4 <tcp_process+0x5a4>)
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	4b36      	ldr	r3, [pc, #216]	; (800eed8 <tcp_process+0x5a8>)
 800edfe:	4602      	mov	r2, r0
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f002 fbd1 	bl	80115a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ee06:	e167      	b.n	800f0d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee08:	4b2d      	ldr	r3, [pc, #180]	; (800eec0 <tcp_process+0x590>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	f003 0302 	and.w	r3, r3, #2
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 8161 	beq.w	800f0d8 <tcp_process+0x7a8>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1a:	1e5a      	subs	r2, r3, #1
 800ee1c:	4b2b      	ldr	r3, [pc, #172]	; (800eecc <tcp_process+0x59c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	f040 8159 	bne.w	800f0d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f002 f9b6 	bl	8011198 <tcp_rexmit>
      break;
 800ee2c:	e154      	b.n	800f0d8 <tcp_process+0x7a8>
 800ee2e:	e153      	b.n	800f0d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 fa71 	bl	800f318 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee36:	4b2d      	ldr	r3, [pc, #180]	; (800eeec <tcp_process+0x5bc>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	f003 0320 	and.w	r3, r3, #32
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f000 814c 	beq.w	800f0dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8b5b      	ldrh	r3, [r3, #26]
 800ee48:	f043 0302 	orr.w	r3, r3, #2
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2207      	movs	r2, #7
 800ee56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee58:	e140      	b.n	800f0dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 fa5c 	bl	800f318 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee60:	4b22      	ldr	r3, [pc, #136]	; (800eeec <tcp_process+0x5bc>)
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f003 0320 	and.w	r3, r3, #32
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d071      	beq.n	800ef50 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee6c:	4b14      	ldr	r3, [pc, #80]	; (800eec0 <tcp_process+0x590>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0310 	and.w	r3, r3, #16
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d060      	beq.n	800ef3a <tcp_process+0x60a>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee7c:	4b11      	ldr	r3, [pc, #68]	; (800eec4 <tcp_process+0x594>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d15a      	bne.n	800ef3a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d156      	bne.n	800ef3a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8b5b      	ldrh	r3, [r3, #26]
 800ee90:	f043 0302 	orr.w	r3, r3, #2
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7fe fdbc 	bl	800da18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eea0:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <tcp_process+0x5c0>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d105      	bne.n	800eeb6 <tcp_process+0x586>
 800eeaa:	4b11      	ldr	r3, [pc, #68]	; (800eef0 <tcp_process+0x5c0>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	4a0f      	ldr	r2, [pc, #60]	; (800eef0 <tcp_process+0x5c0>)
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	e02e      	b.n	800ef14 <tcp_process+0x5e4>
 800eeb6:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <tcp_process+0x5c0>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	617b      	str	r3, [r7, #20]
 800eebc:	e027      	b.n	800ef0e <tcp_process+0x5de>
 800eebe:	bf00      	nop
 800eec0:	20008d8c 	.word	0x20008d8c
 800eec4:	20008d84 	.word	0x20008d84
 800eec8:	20008d8a 	.word	0x20008d8a
 800eecc:	20008d80 	.word	0x20008d80
 800eed0:	20008d70 	.word	0x20008d70
 800eed4:	200057e8 	.word	0x200057e8
 800eed8:	200057ec 	.word	0x200057ec
 800eedc:	08016a94 	.word	0x08016a94
 800eee0:	08016d34 	.word	0x08016d34
 800eee4:	08016ae0 	.word	0x08016ae0
 800eee8:	20008d88 	.word	0x20008d88
 800eeec:	20008d8d 	.word	0x20008d8d
 800eef0:	20008d54 	.word	0x20008d54
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d104      	bne.n	800ef08 <tcp_process+0x5d8>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68da      	ldr	r2, [r3, #12]
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	60da      	str	r2, [r3, #12]
 800ef06:	e005      	b.n	800ef14 <tcp_process+0x5e4>
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1ef      	bne.n	800eef4 <tcp_process+0x5c4>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	60da      	str	r2, [r3, #12]
 800ef1a:	4b77      	ldr	r3, [pc, #476]	; (800f0f8 <tcp_process+0x7c8>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	220a      	movs	r2, #10
 800ef24:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef26:	4b75      	ldr	r3, [pc, #468]	; (800f0fc <tcp_process+0x7cc>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	60da      	str	r2, [r3, #12]
 800ef2e:	4a73      	ldr	r2, [pc, #460]	; (800f0fc <tcp_process+0x7cc>)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	f002 fcfa 	bl	801192c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef38:	e0d2      	b.n	800f0e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	8b5b      	ldrh	r3, [r3, #26]
 800ef3e:	f043 0302 	orr.w	r3, r3, #2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2208      	movs	r2, #8
 800ef4c:	751a      	strb	r2, [r3, #20]
      break;
 800ef4e:	e0c7      	b.n	800f0e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef50:	4b6b      	ldr	r3, [pc, #428]	; (800f100 <tcp_process+0x7d0>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 0310 	and.w	r3, r3, #16
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	f000 80c1 	beq.w	800f0e0 <tcp_process+0x7b0>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef62:	4b68      	ldr	r3, [pc, #416]	; (800f104 <tcp_process+0x7d4>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	f040 80ba 	bne.w	800f0e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f040 80b5 	bne.w	800f0e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2206      	movs	r2, #6
 800ef7a:	751a      	strb	r2, [r3, #20]
      break;
 800ef7c:	e0b0      	b.n	800f0e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f9ca 	bl	800f318 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef84:	4b60      	ldr	r3, [pc, #384]	; (800f108 <tcp_process+0x7d8>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 0320 	and.w	r3, r3, #32
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 80a9 	beq.w	800f0e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	8b5b      	ldrh	r3, [r3, #26]
 800ef96:	f043 0302 	orr.w	r3, r3, #2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7fe fd39 	bl	800da18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800efa6:	4b59      	ldr	r3, [pc, #356]	; (800f10c <tcp_process+0x7dc>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	d105      	bne.n	800efbc <tcp_process+0x68c>
 800efb0:	4b56      	ldr	r3, [pc, #344]	; (800f10c <tcp_process+0x7dc>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	4a55      	ldr	r2, [pc, #340]	; (800f10c <tcp_process+0x7dc>)
 800efb8:	6013      	str	r3, [r2, #0]
 800efba:	e013      	b.n	800efe4 <tcp_process+0x6b4>
 800efbc:	4b53      	ldr	r3, [pc, #332]	; (800f10c <tcp_process+0x7dc>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	613b      	str	r3, [r7, #16]
 800efc2:	e00c      	b.n	800efde <tcp_process+0x6ae>
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d104      	bne.n	800efd8 <tcp_process+0x6a8>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	60da      	str	r2, [r3, #12]
 800efd6:	e005      	b.n	800efe4 <tcp_process+0x6b4>
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	613b      	str	r3, [r7, #16]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1ef      	bne.n	800efc4 <tcp_process+0x694>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	60da      	str	r2, [r3, #12]
 800efea:	4b43      	ldr	r3, [pc, #268]	; (800f0f8 <tcp_process+0x7c8>)
 800efec:	2201      	movs	r2, #1
 800efee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	220a      	movs	r2, #10
 800eff4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eff6:	4b41      	ldr	r3, [pc, #260]	; (800f0fc <tcp_process+0x7cc>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60da      	str	r2, [r3, #12]
 800effe:	4a3f      	ldr	r2, [pc, #252]	; (800f0fc <tcp_process+0x7cc>)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	f002 fc92 	bl	801192c <tcp_timer_needed>
      }
      break;
 800f008:	e06c      	b.n	800f0e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f984 	bl	800f318 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f010:	4b3b      	ldr	r3, [pc, #236]	; (800f100 <tcp_process+0x7d0>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	f003 0310 	and.w	r3, r3, #16
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d065      	beq.n	800f0e8 <tcp_process+0x7b8>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f020:	4b38      	ldr	r3, [pc, #224]	; (800f104 <tcp_process+0x7d4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	429a      	cmp	r2, r3
 800f026:	d15f      	bne.n	800f0e8 <tcp_process+0x7b8>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d15b      	bne.n	800f0e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7fe fcf1 	bl	800da18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f036:	4b35      	ldr	r3, [pc, #212]	; (800f10c <tcp_process+0x7dc>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d105      	bne.n	800f04c <tcp_process+0x71c>
 800f040:	4b32      	ldr	r3, [pc, #200]	; (800f10c <tcp_process+0x7dc>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	4a31      	ldr	r2, [pc, #196]	; (800f10c <tcp_process+0x7dc>)
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	e013      	b.n	800f074 <tcp_process+0x744>
 800f04c:	4b2f      	ldr	r3, [pc, #188]	; (800f10c <tcp_process+0x7dc>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	60fb      	str	r3, [r7, #12]
 800f052:	e00c      	b.n	800f06e <tcp_process+0x73e>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d104      	bne.n	800f068 <tcp_process+0x738>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	68da      	ldr	r2, [r3, #12]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	e005      	b.n	800f074 <tcp_process+0x744>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	60fb      	str	r3, [r7, #12]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1ef      	bne.n	800f054 <tcp_process+0x724>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	60da      	str	r2, [r3, #12]
 800f07a:	4b1f      	ldr	r3, [pc, #124]	; (800f0f8 <tcp_process+0x7c8>)
 800f07c:	2201      	movs	r2, #1
 800f07e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	220a      	movs	r2, #10
 800f084:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f086:	4b1d      	ldr	r3, [pc, #116]	; (800f0fc <tcp_process+0x7cc>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	60da      	str	r2, [r3, #12]
 800f08e:	4a1b      	ldr	r2, [pc, #108]	; (800f0fc <tcp_process+0x7cc>)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	f002 fc4a 	bl	801192c <tcp_timer_needed>
      }
      break;
 800f098:	e026      	b.n	800f0e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f93c 	bl	800f318 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0a0:	4b17      	ldr	r3, [pc, #92]	; (800f100 <tcp_process+0x7d0>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	f003 0310 	and.w	r3, r3, #16
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01f      	beq.n	800f0ec <tcp_process+0x7bc>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b0:	4b14      	ldr	r3, [pc, #80]	; (800f104 <tcp_process+0x7d4>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d119      	bne.n	800f0ec <tcp_process+0x7bc>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d115      	bne.n	800f0ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f0c0:	4b11      	ldr	r3, [pc, #68]	; (800f108 <tcp_process+0x7d8>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f043 0310 	orr.w	r3, r3, #16
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	4b0f      	ldr	r3, [pc, #60]	; (800f108 <tcp_process+0x7d8>)
 800f0cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f0ce:	e00d      	b.n	800f0ec <tcp_process+0x7bc>
    default:
      break;
 800f0d0:	bf00      	nop
 800f0d2:	e00c      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0d4:	bf00      	nop
 800f0d6:	e00a      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0d8:	bf00      	nop
 800f0da:	e008      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0dc:	bf00      	nop
 800f0de:	e006      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0e0:	bf00      	nop
 800f0e2:	e004      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0e4:	bf00      	nop
 800f0e6:	e002      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0e8:	bf00      	nop
 800f0ea:	e000      	b.n	800f0ee <tcp_process+0x7be>
      break;
 800f0ec:	bf00      	nop
  }
  return ERR_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3724      	adds	r7, #36	; 0x24
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd90      	pop	{r4, r7, pc}
 800f0f8:	20008d5c 	.word	0x20008d5c
 800f0fc:	20008d58 	.word	0x20008d58
 800f100:	20008d8c 	.word	0x20008d8c
 800f104:	20008d84 	.word	0x20008d84
 800f108:	20008d8d 	.word	0x20008d8d
 800f10c:	20008d54 	.word	0x20008d54

0800f110 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d106      	bne.n	800f12e <tcp_oos_insert_segment+0x1e>
 800f120:	4b3b      	ldr	r3, [pc, #236]	; (800f210 <tcp_oos_insert_segment+0x100>)
 800f122:	f240 421f 	movw	r2, #1055	; 0x41f
 800f126:	493b      	ldr	r1, [pc, #236]	; (800f214 <tcp_oos_insert_segment+0x104>)
 800f128:	483b      	ldr	r0, [pc, #236]	; (800f218 <tcp_oos_insert_segment+0x108>)
 800f12a:	f005 fac7 	bl	80146bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	899b      	ldrh	r3, [r3, #12]
 800f134:	b29b      	uxth	r3, r3
 800f136:	4618      	mov	r0, r3
 800f138:	f7fb fcd0 	bl	800aadc <lwip_htons>
 800f13c:	4603      	mov	r3, r0
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f003 0301 	and.w	r3, r3, #1
 800f144:	2b00      	cmp	r3, #0
 800f146:	d028      	beq.n	800f19a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f148:	6838      	ldr	r0, [r7, #0]
 800f14a:	f7fe fa63 	bl	800d614 <tcp_segs_free>
    next = NULL;
 800f14e:	2300      	movs	r3, #0
 800f150:	603b      	str	r3, [r7, #0]
 800f152:	e056      	b.n	800f202 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	899b      	ldrh	r3, [r3, #12]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fb fcbd 	bl	800aadc <lwip_htons>
 800f162:	4603      	mov	r3, r0
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00d      	beq.n	800f18a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	899b      	ldrh	r3, [r3, #12]
 800f174:	b29c      	uxth	r4, r3
 800f176:	2001      	movs	r0, #1
 800f178:	f7fb fcb0 	bl	800aadc <lwip_htons>
 800f17c:	4603      	mov	r3, r0
 800f17e:	461a      	mov	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	4322      	orrs	r2, r4
 800f186:	b292      	uxth	r2, r2
 800f188:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7fe fa52 	bl	800d63e <tcp_seg_free>
    while (next &&
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00e      	beq.n	800f1be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	891b      	ldrh	r3, [r3, #8]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	4b1d      	ldr	r3, [pc, #116]	; (800f21c <tcp_oos_insert_segment+0x10c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	441a      	add	r2, r3
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	8909      	ldrh	r1, [r1, #8]
 800f1b6:	440b      	add	r3, r1
 800f1b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	daca      	bge.n	800f154 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d01e      	beq.n	800f202 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	891b      	ldrh	r3, [r3, #8]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	4b14      	ldr	r3, [pc, #80]	; (800f21c <tcp_oos_insert_segment+0x10c>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	441a      	add	r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dd12      	ble.n	800f202 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	4b0d      	ldr	r3, [pc, #52]	; (800f21c <tcp_oos_insert_segment+0x10c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	891b      	ldrh	r3, [r3, #8]
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7fc fe25 	bl	800be4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	601a      	str	r2, [r3, #0]
}
 800f208:	bf00      	nop
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd90      	pop	{r4, r7, pc}
 800f210:	08016a94 	.word	0x08016a94
 800f214:	08016d54 	.word	0x08016d54
 800f218:	08016ae0 	.word	0x08016ae0
 800f21c:	20008d80 	.word	0x20008d80

0800f220 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f220:	b5b0      	push	{r4, r5, r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
 800f22c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f22e:	e03e      	b.n	800f2ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fd f812 	bl	800c268 <pbuf_clen>
 800f244:	4603      	mov	r3, r0
 800f246:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f24e:	8a7a      	ldrh	r2, [r7, #18]
 800f250:	429a      	cmp	r2, r3
 800f252:	d906      	bls.n	800f262 <tcp_free_acked_segments+0x42>
 800f254:	4b2a      	ldr	r3, [pc, #168]	; (800f300 <tcp_free_acked_segments+0xe0>)
 800f256:	f240 4257 	movw	r2, #1111	; 0x457
 800f25a:	492a      	ldr	r1, [pc, #168]	; (800f304 <tcp_free_acked_segments+0xe4>)
 800f25c:	482a      	ldr	r0, [pc, #168]	; (800f308 <tcp_free_acked_segments+0xe8>)
 800f25e:	f005 fa2d 	bl	80146bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f268:	8a7b      	ldrh	r3, [r7, #18]
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	891a      	ldrh	r2, [r3, #8]
 800f278:	4b24      	ldr	r3, [pc, #144]	; (800f30c <tcp_free_acked_segments+0xec>)
 800f27a:	881b      	ldrh	r3, [r3, #0]
 800f27c:	4413      	add	r3, r2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	4b22      	ldr	r3, [pc, #136]	; (800f30c <tcp_free_acked_segments+0xec>)
 800f282:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f284:	6978      	ldr	r0, [r7, #20]
 800f286:	f7fe f9da 	bl	800d63e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00c      	beq.n	800f2ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d109      	bne.n	800f2ae <tcp_free_acked_segments+0x8e>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d106      	bne.n	800f2ae <tcp_free_acked_segments+0x8e>
 800f2a0:	4b17      	ldr	r3, [pc, #92]	; (800f300 <tcp_free_acked_segments+0xe0>)
 800f2a2:	f240 4261 	movw	r2, #1121	; 0x461
 800f2a6:	491a      	ldr	r1, [pc, #104]	; (800f310 <tcp_free_acked_segments+0xf0>)
 800f2a8:	4817      	ldr	r0, [pc, #92]	; (800f308 <tcp_free_acked_segments+0xe8>)
 800f2aa:	f005 fa07 	bl	80146bc <iprintf>
  while (seg_list != NULL &&
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d020      	beq.n	800f2f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fb fc23 	bl	800ab06 <lwip_htonl>
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	891b      	ldrh	r3, [r3, #8]
 800f2c6:	461d      	mov	r5, r3
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	899b      	ldrh	r3, [r3, #12]
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fb fc03 	bl	800aadc <lwip_htons>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	f003 0303 	and.w	r3, r3, #3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <tcp_free_acked_segments+0xc6>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <tcp_free_acked_segments+0xc8>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	442b      	add	r3, r5
 800f2ea:	18e2      	adds	r2, r4, r3
 800f2ec:	4b09      	ldr	r3, [pc, #36]	; (800f314 <tcp_free_acked_segments+0xf4>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	dd9c      	ble.n	800f230 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3718      	adds	r7, #24
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bdb0      	pop	{r4, r5, r7, pc}
 800f300:	08016a94 	.word	0x08016a94
 800f304:	08016d7c 	.word	0x08016d7c
 800f308:	08016ae0 	.word	0x08016ae0
 800f30c:	20008d88 	.word	0x20008d88
 800f310:	08016da4 	.word	0x08016da4
 800f314:	20008d84 	.word	0x20008d84

0800f318 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f318:	b5b0      	push	{r4, r5, r7, lr}
 800f31a:	b094      	sub	sp, #80	; 0x50
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d106      	bne.n	800f338 <tcp_receive+0x20>
 800f32a:	4b91      	ldr	r3, [pc, #580]	; (800f570 <tcp_receive+0x258>)
 800f32c:	f240 427b 	movw	r2, #1147	; 0x47b
 800f330:	4990      	ldr	r1, [pc, #576]	; (800f574 <tcp_receive+0x25c>)
 800f332:	4891      	ldr	r0, [pc, #580]	; (800f578 <tcp_receive+0x260>)
 800f334:	f005 f9c2 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7d1b      	ldrb	r3, [r3, #20]
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d806      	bhi.n	800f34e <tcp_receive+0x36>
 800f340:	4b8b      	ldr	r3, [pc, #556]	; (800f570 <tcp_receive+0x258>)
 800f342:	f240 427c 	movw	r2, #1148	; 0x47c
 800f346:	498d      	ldr	r1, [pc, #564]	; (800f57c <tcp_receive+0x264>)
 800f348:	488b      	ldr	r0, [pc, #556]	; (800f578 <tcp_receive+0x260>)
 800f34a:	f005 f9b7 	bl	80146bc <iprintf>

  if (flags & TCP_ACK) {
 800f34e:	4b8c      	ldr	r3, [pc, #560]	; (800f580 <tcp_receive+0x268>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	f003 0310 	and.w	r3, r3, #16
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8264 	beq.w	800f824 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f362:	461a      	mov	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f368:	4413      	add	r3, r2
 800f36a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f370:	4b84      	ldr	r3, [pc, #528]	; (800f584 <tcp_receive+0x26c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	db1b      	blt.n	800f3b2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f37e:	4b81      	ldr	r3, [pc, #516]	; (800f584 <tcp_receive+0x26c>)
 800f380:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f382:	429a      	cmp	r2, r3
 800f384:	d106      	bne.n	800f394 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f38a:	4b7f      	ldr	r3, [pc, #508]	; (800f588 <tcp_receive+0x270>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	db0e      	blt.n	800f3b2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f398:	4b7b      	ldr	r3, [pc, #492]	; (800f588 <tcp_receive+0x270>)
 800f39a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d125      	bne.n	800f3ec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3a0:	4b7a      	ldr	r3, [pc, #488]	; (800f58c <tcp_receive+0x274>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	89db      	ldrh	r3, [r3, #14]
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d91c      	bls.n	800f3ec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f3b2:	4b76      	ldr	r3, [pc, #472]	; (800f58c <tcp_receive+0x274>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	89db      	ldrh	r3, [r3, #14]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d205      	bcs.n	800f3dc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f3dc:	4b69      	ldr	r3, [pc, #420]	; (800f584 <tcp_receive+0x26c>)
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f3e4:	4b68      	ldr	r3, [pc, #416]	; (800f588 <tcp_receive+0x270>)
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3ec:	4b66      	ldr	r3, [pc, #408]	; (800f588 <tcp_receive+0x270>)
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	dc58      	bgt.n	800f4ac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3fa:	4b65      	ldr	r3, [pc, #404]	; (800f590 <tcp_receive+0x278>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d14b      	bne.n	800f49a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f40c:	4413      	add	r3, r2
 800f40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f410:	429a      	cmp	r2, r3
 800f412:	d142      	bne.n	800f49a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	db3d      	blt.n	800f49a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f422:	4b59      	ldr	r3, [pc, #356]	; (800f588 <tcp_receive+0x270>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	429a      	cmp	r2, r3
 800f428:	d137      	bne.n	800f49a <tcp_receive+0x182>
              found_dupack = 1;
 800f42a:	2301      	movs	r3, #1
 800f42c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f434:	2bff      	cmp	r3, #255	; 0xff
 800f436:	d007      	beq.n	800f448 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f43e:	3301      	adds	r3, #1
 800f440:	b2da      	uxtb	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d91b      	bls.n	800f48a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f45c:	4413      	add	r3, r2
 800f45e:	b29a      	uxth	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f466:	429a      	cmp	r2, r3
 800f468:	d30a      	bcc.n	800f480 <tcp_receive+0x168>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f474:	4413      	add	r3, r2
 800f476:	b29a      	uxth	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f47e:	e004      	b.n	800f48a <tcp_receive+0x172>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f486:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f490:	2b02      	cmp	r3, #2
 800f492:	d902      	bls.n	800f49a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f001 feeb 	bl	8011270 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f040 8161 	bne.w	800f764 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4aa:	e15b      	b.n	800f764 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4ac:	4b36      	ldr	r3, [pc, #216]	; (800f588 <tcp_receive+0x270>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f2c0 814e 	blt.w	800f75a <tcp_receive+0x442>
 800f4be:	4b32      	ldr	r3, [pc, #200]	; (800f588 <tcp_receive+0x270>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f300 8146 	bgt.w	800f75a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	8b5b      	ldrh	r3, [r3, #26]
 800f4d2:	f003 0304 	and.w	r3, r3, #4
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d010      	beq.n	800f4fc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	8b5b      	ldrh	r3, [r3, #26]
 800f4de:	f023 0304 	bic.w	r3, r3, #4
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f50a:	10db      	asrs	r3, r3, #3
 800f50c:	b21b      	sxth	r3, r3
 800f50e:	b29a      	uxth	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f516:	b29b      	uxth	r3, r3
 800f518:	4413      	add	r3, r2
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	b21a      	sxth	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f524:	4b18      	ldr	r3, [pc, #96]	; (800f588 <tcp_receive+0x270>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	b29a      	uxth	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f52e:	b29b      	uxth	r3, r3
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f53c:	4b12      	ldr	r3, [pc, #72]	; (800f588 <tcp_receive+0x270>)
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	7d1b      	ldrb	r3, [r3, #20]
 800f548:	2b03      	cmp	r3, #3
 800f54a:	f240 8097 	bls.w	800f67c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d245      	bcs.n	800f5ea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f566:	2b00      	cmp	r3, #0
 800f568:	d014      	beq.n	800f594 <tcp_receive+0x27c>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e013      	b.n	800f596 <tcp_receive+0x27e>
 800f56e:	bf00      	nop
 800f570:	08016a94 	.word	0x08016a94
 800f574:	08016dc4 	.word	0x08016dc4
 800f578:	08016ae0 	.word	0x08016ae0
 800f57c:	08016de0 	.word	0x08016de0
 800f580:	20008d8c 	.word	0x20008d8c
 800f584:	20008d80 	.word	0x20008d80
 800f588:	20008d84 	.word	0x20008d84
 800f58c:	20008d70 	.word	0x20008d70
 800f590:	20008d8a 	.word	0x20008d8a
 800f594:	2302      	movs	r3, #2
 800f596:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f59a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5a4:	fb12 f303 	smulbb	r3, r2, r3
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	bf28      	it	cs
 800f5b0:	4613      	movcs	r3, r2
 800f5b2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5bc:	4413      	add	r3, r2
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d309      	bcc.n	800f5de <tcp_receive+0x2c6>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5d2:	4413      	add	r3, r2
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5dc:	e04e      	b.n	800f67c <tcp_receive+0x364>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5e8:	e048      	b.n	800f67c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5f2:	4413      	add	r3, r2
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d309      	bcc.n	800f614 <tcp_receive+0x2fc>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f608:	4413      	add	r3, r2
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f612:	e004      	b.n	800f61e <tcp_receive+0x306>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f61a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d326      	bcc.n	800f67c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f64e:	4413      	add	r3, r2
 800f650:	b29a      	uxth	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f658:	429a      	cmp	r2, r3
 800f65a:	d30a      	bcc.n	800f672 <tcp_receive+0x35a>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f666:	4413      	add	r3, r2
 800f668:	b29a      	uxth	r2, r3
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f670:	e004      	b.n	800f67c <tcp_receive+0x364>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f678:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f684:	4a98      	ldr	r2, [pc, #608]	; (800f8e8 <tcp_receive+0x5d0>)
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff fdca 	bl	800f220 <tcp_free_acked_segments>
 800f68c:	4602      	mov	r2, r0
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f69a:	4a94      	ldr	r2, [pc, #592]	; (800f8ec <tcp_receive+0x5d4>)
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff fdbf 	bl	800f220 <tcp_free_acked_segments>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d104      	bne.n	800f6ba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6b6:	861a      	strh	r2, [r3, #48]	; 0x30
 800f6b8:	e002      	b.n	800f6c0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d103      	bne.n	800f6d6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f6dc:	4b84      	ldr	r3, [pc, #528]	; (800f8f0 <tcp_receive+0x5d8>)
 800f6de:	881b      	ldrh	r3, [r3, #0]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	8b5b      	ldrh	r3, [r3, #26]
 800f6ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d035      	beq.n	800f762 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d118      	bne.n	800f730 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00c      	beq.n	800f720 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f7fb f9f7 	bl	800ab06 <lwip_htonl>
 800f718:	4603      	mov	r3, r0
 800f71a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc20      	bgt.n	800f762 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	8b5b      	ldrh	r3, [r3, #26]
 800f724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f728:	b29a      	uxth	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f72e:	e018      	b.n	800f762 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fb f9e2 	bl	800ab06 <lwip_htonl>
 800f742:	4603      	mov	r3, r0
 800f744:	1ae3      	subs	r3, r4, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	dc0b      	bgt.n	800f762 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8b5b      	ldrh	r3, [r3, #26]
 800f74e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f758:	e003      	b.n	800f762 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f001 ff76 	bl	801164c <tcp_send_empty_ack>
 800f760:	e000      	b.n	800f764 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f762:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d05b      	beq.n	800f824 <tcp_receive+0x50c>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f770:	4b60      	ldr	r3, [pc, #384]	; (800f8f4 <tcp_receive+0x5dc>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	da54      	bge.n	800f824 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f77a:	4b5f      	ldr	r3, [pc, #380]	; (800f8f8 <tcp_receive+0x5e0>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f784:	b29b      	uxth	r3, r3
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	b29b      	uxth	r3, r3
 800f78a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f78e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f798:	10db      	asrs	r3, r3, #3
 800f79a:	b21b      	sxth	r3, r3
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7b2:	4413      	add	r3, r2
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	b21a      	sxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f7bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	da05      	bge.n	800f7d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f7c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7c8:	425b      	negs	r3, r3
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f7d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7da:	109b      	asrs	r3, r3, #2
 800f7dc:	b21b      	sxth	r3, r3
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7f4:	4413      	add	r3, r2
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b21a      	sxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f804:	10db      	asrs	r3, r3, #3
 800f806:	b21b      	sxth	r3, r3
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f810:	b29b      	uxth	r3, r3
 800f812:	4413      	add	r3, r2
 800f814:	b29b      	uxth	r3, r3
 800f816:	b21a      	sxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f824:	4b35      	ldr	r3, [pc, #212]	; (800f8fc <tcp_receive+0x5e4>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f000 84e2 	beq.w	80101f2 <tcp_receive+0xeda>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	7d1b      	ldrb	r3, [r3, #20]
 800f832:	2b06      	cmp	r3, #6
 800f834:	f200 84dd 	bhi.w	80101f2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f83c:	4b30      	ldr	r3, [pc, #192]	; (800f900 <tcp_receive+0x5e8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	1ad3      	subs	r3, r2, r3
 800f842:	3b01      	subs	r3, #1
 800f844:	2b00      	cmp	r3, #0
 800f846:	f2c0 808f 	blt.w	800f968 <tcp_receive+0x650>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f84e:	4b2b      	ldr	r3, [pc, #172]	; (800f8fc <tcp_receive+0x5e4>)
 800f850:	881b      	ldrh	r3, [r3, #0]
 800f852:	4619      	mov	r1, r3
 800f854:	4b2a      	ldr	r3, [pc, #168]	; (800f900 <tcp_receive+0x5e8>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	440b      	add	r3, r1
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	3301      	adds	r3, #1
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f300 8082 	bgt.w	800f968 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f864:	4b27      	ldr	r3, [pc, #156]	; (800f904 <tcp_receive+0x5ec>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f86e:	4b24      	ldr	r3, [pc, #144]	; (800f900 <tcp_receive+0x5e8>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f876:	4b23      	ldr	r3, [pc, #140]	; (800f904 <tcp_receive+0x5ec>)
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <tcp_receive+0x574>
 800f87e:	4b22      	ldr	r3, [pc, #136]	; (800f908 <tcp_receive+0x5f0>)
 800f880:	f240 5294 	movw	r2, #1428	; 0x594
 800f884:	4921      	ldr	r1, [pc, #132]	; (800f90c <tcp_receive+0x5f4>)
 800f886:	4822      	ldr	r0, [pc, #136]	; (800f910 <tcp_receive+0x5f8>)
 800f888:	f004 ff18 	bl	80146bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f892:	4293      	cmp	r3, r2
 800f894:	d906      	bls.n	800f8a4 <tcp_receive+0x58c>
 800f896:	4b1c      	ldr	r3, [pc, #112]	; (800f908 <tcp_receive+0x5f0>)
 800f898:	f240 5295 	movw	r2, #1429	; 0x595
 800f89c:	491d      	ldr	r1, [pc, #116]	; (800f914 <tcp_receive+0x5fc>)
 800f89e:	481c      	ldr	r0, [pc, #112]	; (800f910 <tcp_receive+0x5f8>)
 800f8a0:	f004 ff0c 	bl	80146bc <iprintf>
      off = (u16_t)off32;
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f8aa:	4b16      	ldr	r3, [pc, #88]	; (800f904 <tcp_receive+0x5ec>)
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	891b      	ldrh	r3, [r3, #8]
 800f8b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d906      	bls.n	800f8c6 <tcp_receive+0x5ae>
 800f8b8:	4b13      	ldr	r3, [pc, #76]	; (800f908 <tcp_receive+0x5f0>)
 800f8ba:	f240 5297 	movw	r2, #1431	; 0x597
 800f8be:	4916      	ldr	r1, [pc, #88]	; (800f918 <tcp_receive+0x600>)
 800f8c0:	4813      	ldr	r0, [pc, #76]	; (800f910 <tcp_receive+0x5f8>)
 800f8c2:	f004 fefb 	bl	80146bc <iprintf>
      inseg.len -= off;
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <tcp_receive+0x5ec>)
 800f8c8:	891a      	ldrh	r2, [r3, #8]
 800f8ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	4b0c      	ldr	r3, [pc, #48]	; (800f904 <tcp_receive+0x5ec>)
 800f8d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f8d6:	4b0b      	ldr	r3, [pc, #44]	; (800f904 <tcp_receive+0x5ec>)
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	891a      	ldrh	r2, [r3, #8]
 800f8dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f8e4:	e02a      	b.n	800f93c <tcp_receive+0x624>
 800f8e6:	bf00      	nop
 800f8e8:	08016dfc 	.word	0x08016dfc
 800f8ec:	08016e04 	.word	0x08016e04
 800f8f0:	20008d88 	.word	0x20008d88
 800f8f4:	20008d84 	.word	0x20008d84
 800f8f8:	20008d48 	.word	0x20008d48
 800f8fc:	20008d8a 	.word	0x20008d8a
 800f900:	20008d80 	.word	0x20008d80
 800f904:	20008d60 	.word	0x20008d60
 800f908:	08016a94 	.word	0x08016a94
 800f90c:	08016e0c 	.word	0x08016e0c
 800f910:	08016ae0 	.word	0x08016ae0
 800f914:	08016e1c 	.word	0x08016e1c
 800f918:	08016e2c 	.word	0x08016e2c
        off -= p->len;
 800f91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f91e:	895b      	ldrh	r3, [r3, #10]
 800f920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f92c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f92e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f932:	2200      	movs	r2, #0
 800f934:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f93e:	895b      	ldrh	r3, [r3, #10]
 800f940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f944:	429a      	cmp	r2, r3
 800f946:	d8e9      	bhi.n	800f91c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f94c:	4619      	mov	r1, r3
 800f94e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f950:	f7fc fb7c 	bl	800c04c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f958:	4a91      	ldr	r2, [pc, #580]	; (800fba0 <tcp_receive+0x888>)
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	4b91      	ldr	r3, [pc, #580]	; (800fba4 <tcp_receive+0x88c>)
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	4a8f      	ldr	r2, [pc, #572]	; (800fba0 <tcp_receive+0x888>)
 800f962:	6812      	ldr	r2, [r2, #0]
 800f964:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f966:	e00d      	b.n	800f984 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f968:	4b8d      	ldr	r3, [pc, #564]	; (800fba0 <tcp_receive+0x888>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	da06      	bge.n	800f984 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8b5b      	ldrh	r3, [r3, #26]
 800f97a:	f043 0302 	orr.w	r3, r3, #2
 800f97e:	b29a      	uxth	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f984:	4b86      	ldr	r3, [pc, #536]	; (800fba0 <tcp_receive+0x888>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f2c0 842a 	blt.w	80101e8 <tcp_receive+0xed0>
 800f994:	4b82      	ldr	r3, [pc, #520]	; (800fba0 <tcp_receive+0x888>)
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	6879      	ldr	r1, [r7, #4]
 800f99e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9a0:	440b      	add	r3, r1
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f300 841e 	bgt.w	80101e8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9b0:	4b7b      	ldr	r3, [pc, #492]	; (800fba0 <tcp_receive+0x888>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	f040 829a 	bne.w	800feee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9ba:	4b7a      	ldr	r3, [pc, #488]	; (800fba4 <tcp_receive+0x88c>)
 800f9bc:	891c      	ldrh	r4, [r3, #8]
 800f9be:	4b79      	ldr	r3, [pc, #484]	; (800fba4 <tcp_receive+0x88c>)
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	899b      	ldrh	r3, [r3, #12]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fb f888 	bl	800aadc <lwip_htons>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 0303 	and.w	r3, r3, #3
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d001      	beq.n	800f9dc <tcp_receive+0x6c4>
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e000      	b.n	800f9de <tcp_receive+0x6c6>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	4423      	add	r3, r4
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	4b71      	ldr	r3, [pc, #452]	; (800fba8 <tcp_receive+0x890>)
 800f9e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9ea:	4b6f      	ldr	r3, [pc, #444]	; (800fba8 <tcp_receive+0x890>)
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d275      	bcs.n	800fade <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9f2:	4b6c      	ldr	r3, [pc, #432]	; (800fba4 <tcp_receive+0x88c>)
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	899b      	ldrh	r3, [r3, #12]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fb f86e 	bl	800aadc <lwip_htons>
 800fa00:	4603      	mov	r3, r0
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d01f      	beq.n	800fa4c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa0c:	4b65      	ldr	r3, [pc, #404]	; (800fba4 <tcp_receive+0x88c>)
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	b21b      	sxth	r3, r3
 800fa16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa1a:	b21c      	sxth	r4, r3
 800fa1c:	4b61      	ldr	r3, [pc, #388]	; (800fba4 <tcp_receive+0x88c>)
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	899b      	ldrh	r3, [r3, #12]
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fb f859 	bl	800aadc <lwip_htons>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fb f850 	bl	800aadc <lwip_htons>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	b21b      	sxth	r3, r3
 800fa40:	4323      	orrs	r3, r4
 800fa42:	b21a      	sxth	r2, r3
 800fa44:	4b57      	ldr	r3, [pc, #348]	; (800fba4 <tcp_receive+0x88c>)
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	b292      	uxth	r2, r2
 800fa4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa50:	4b54      	ldr	r3, [pc, #336]	; (800fba4 <tcp_receive+0x88c>)
 800fa52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa54:	4b53      	ldr	r3, [pc, #332]	; (800fba4 <tcp_receive+0x88c>)
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	899b      	ldrh	r3, [r3, #12]
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fb f83d 	bl	800aadc <lwip_htons>
 800fa62:	4603      	mov	r3, r0
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f003 0302 	and.w	r3, r3, #2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d005      	beq.n	800fa7a <tcp_receive+0x762>
            inseg.len -= 1;
 800fa6e:	4b4d      	ldr	r3, [pc, #308]	; (800fba4 <tcp_receive+0x88c>)
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	b29a      	uxth	r2, r3
 800fa76:	4b4b      	ldr	r3, [pc, #300]	; (800fba4 <tcp_receive+0x88c>)
 800fa78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa7a:	4b4a      	ldr	r3, [pc, #296]	; (800fba4 <tcp_receive+0x88c>)
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	4a49      	ldr	r2, [pc, #292]	; (800fba4 <tcp_receive+0x88c>)
 800fa80:	8912      	ldrh	r2, [r2, #8]
 800fa82:	4611      	mov	r1, r2
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fc f9e1 	bl	800be4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa8a:	4b46      	ldr	r3, [pc, #280]	; (800fba4 <tcp_receive+0x88c>)
 800fa8c:	891c      	ldrh	r4, [r3, #8]
 800fa8e:	4b45      	ldr	r3, [pc, #276]	; (800fba4 <tcp_receive+0x88c>)
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	899b      	ldrh	r3, [r3, #12]
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fb f820 	bl	800aadc <lwip_htons>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <tcp_receive+0x794>
 800faa8:	2301      	movs	r3, #1
 800faaa:	e000      	b.n	800faae <tcp_receive+0x796>
 800faac:	2300      	movs	r3, #0
 800faae:	4423      	add	r3, r4
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	4b3d      	ldr	r3, [pc, #244]	; (800fba8 <tcp_receive+0x890>)
 800fab4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fab6:	4b3c      	ldr	r3, [pc, #240]	; (800fba8 <tcp_receive+0x890>)
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	4b38      	ldr	r3, [pc, #224]	; (800fba0 <tcp_receive+0x888>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	441a      	add	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac6:	6879      	ldr	r1, [r7, #4]
 800fac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800faca:	440b      	add	r3, r1
 800facc:	429a      	cmp	r2, r3
 800face:	d006      	beq.n	800fade <tcp_receive+0x7c6>
 800fad0:	4b36      	ldr	r3, [pc, #216]	; (800fbac <tcp_receive+0x894>)
 800fad2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fad6:	4936      	ldr	r1, [pc, #216]	; (800fbb0 <tcp_receive+0x898>)
 800fad8:	4836      	ldr	r0, [pc, #216]	; (800fbb4 <tcp_receive+0x89c>)
 800fada:	f004 fdef 	bl	80146bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 80e7 	beq.w	800fcb6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fae8:	4b2e      	ldr	r3, [pc, #184]	; (800fba4 <tcp_receive+0x88c>)
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	899b      	ldrh	r3, [r3, #12]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fa fff3 	bl	800aadc <lwip_htons>
 800faf6:	4603      	mov	r3, r0
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	f003 0301 	and.w	r3, r3, #1
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d010      	beq.n	800fb24 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fb02:	e00a      	b.n	800fb1a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7fd fd92 	bl	800d63e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1f0      	bne.n	800fb04 <tcp_receive+0x7ec>
 800fb22:	e0c8      	b.n	800fcb6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb2a:	e052      	b.n	800fbd2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	899b      	ldrh	r3, [r3, #12]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fa ffd1 	bl	800aadc <lwip_htons>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	f003 0301 	and.w	r3, r3, #1
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d03d      	beq.n	800fbc2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb46:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <tcp_receive+0x88c>)
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	899b      	ldrh	r3, [r3, #12]
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fa ffc4 	bl	800aadc <lwip_htons>
 800fb54:	4603      	mov	r3, r0
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d130      	bne.n	800fbc2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb60:	4b10      	ldr	r3, [pc, #64]	; (800fba4 <tcp_receive+0x88c>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	899b      	ldrh	r3, [r3, #12]
 800fb66:	b29c      	uxth	r4, r3
 800fb68:	2001      	movs	r0, #1
 800fb6a:	f7fa ffb7 	bl	800aadc <lwip_htons>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	461a      	mov	r2, r3
 800fb72:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <tcp_receive+0x88c>)
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	4322      	orrs	r2, r4
 800fb78:	b292      	uxth	r2, r2
 800fb7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb7c:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <tcp_receive+0x88c>)
 800fb7e:	891c      	ldrh	r4, [r3, #8]
 800fb80:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <tcp_receive+0x88c>)
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	899b      	ldrh	r3, [r3, #12]
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fa ffa7 	bl	800aadc <lwip_htons>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	f003 0303 	and.w	r3, r3, #3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00e      	beq.n	800fbb8 <tcp_receive+0x8a0>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e00d      	b.n	800fbba <tcp_receive+0x8a2>
 800fb9e:	bf00      	nop
 800fba0:	20008d80 	.word	0x20008d80
 800fba4:	20008d60 	.word	0x20008d60
 800fba8:	20008d8a 	.word	0x20008d8a
 800fbac:	08016a94 	.word	0x08016a94
 800fbb0:	08016e3c 	.word	0x08016e3c
 800fbb4:	08016ae0 	.word	0x08016ae0
 800fbb8:	2300      	movs	r3, #0
 800fbba:	4423      	add	r3, r4
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	4b98      	ldr	r3, [pc, #608]	; (800fe20 <tcp_receive+0xb08>)
 800fbc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fbcc:	6938      	ldr	r0, [r7, #16]
 800fbce:	f7fd fd36 	bl	800d63e <tcp_seg_free>
            while (next &&
 800fbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00e      	beq.n	800fbf6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbd8:	4b91      	ldr	r3, [pc, #580]	; (800fe20 <tcp_receive+0xb08>)
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4b91      	ldr	r3, [pc, #580]	; (800fe24 <tcp_receive+0xb0c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbec:	8909      	ldrh	r1, [r1, #8]
 800fbee:	440b      	add	r3, r1
 800fbf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	da9a      	bge.n	800fb2c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d059      	beq.n	800fcb0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fbfc:	4b88      	ldr	r3, [pc, #544]	; (800fe20 <tcp_receive+0xb08>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b88      	ldr	r3, [pc, #544]	; (800fe24 <tcp_receive+0xb0c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	441a      	add	r2, r3
 800fc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	dd4d      	ble.n	800fcb0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	4b81      	ldr	r3, [pc, #516]	; (800fe24 <tcp_receive+0xb0c>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	4b80      	ldr	r3, [pc, #512]	; (800fe28 <tcp_receive+0xb10>)
 800fc28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc2a:	4b7f      	ldr	r3, [pc, #508]	; (800fe28 <tcp_receive+0xb10>)
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fa ff52 	bl	800aadc <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0302 	and.w	r3, r3, #2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d005      	beq.n	800fc50 <tcp_receive+0x938>
                inseg.len -= 1;
 800fc44:	4b78      	ldr	r3, [pc, #480]	; (800fe28 <tcp_receive+0xb10>)
 800fc46:	891b      	ldrh	r3, [r3, #8]
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	4b76      	ldr	r3, [pc, #472]	; (800fe28 <tcp_receive+0xb10>)
 800fc4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc50:	4b75      	ldr	r3, [pc, #468]	; (800fe28 <tcp_receive+0xb10>)
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	4a74      	ldr	r2, [pc, #464]	; (800fe28 <tcp_receive+0xb10>)
 800fc56:	8912      	ldrh	r2, [r2, #8]
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fc f8f6 	bl	800be4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc60:	4b71      	ldr	r3, [pc, #452]	; (800fe28 <tcp_receive+0xb10>)
 800fc62:	891c      	ldrh	r4, [r3, #8]
 800fc64:	4b70      	ldr	r3, [pc, #448]	; (800fe28 <tcp_receive+0xb10>)
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fa ff35 	bl	800aadc <lwip_htons>
 800fc72:	4603      	mov	r3, r0
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	f003 0303 	and.w	r3, r3, #3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <tcp_receive+0x96a>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e000      	b.n	800fc84 <tcp_receive+0x96c>
 800fc82:	2300      	movs	r3, #0
 800fc84:	4423      	add	r3, r4
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	4b65      	ldr	r3, [pc, #404]	; (800fe20 <tcp_receive+0xb08>)
 800fc8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc8c:	4b64      	ldr	r3, [pc, #400]	; (800fe20 <tcp_receive+0xb08>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	4b64      	ldr	r3, [pc, #400]	; (800fe24 <tcp_receive+0xb0c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	441a      	add	r2, r3
 800fc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d006      	beq.n	800fcb0 <tcp_receive+0x998>
 800fca2:	4b62      	ldr	r3, [pc, #392]	; (800fe2c <tcp_receive+0xb14>)
 800fca4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fca8:	4961      	ldr	r1, [pc, #388]	; (800fe30 <tcp_receive+0xb18>)
 800fcaa:	4862      	ldr	r0, [pc, #392]	; (800fe34 <tcp_receive+0xb1c>)
 800fcac:	f004 fd06 	bl	80146bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fcb6:	4b5a      	ldr	r3, [pc, #360]	; (800fe20 <tcp_receive+0xb08>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	4b59      	ldr	r3, [pc, #356]	; (800fe24 <tcp_receive+0xb0c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcca:	4b55      	ldr	r3, [pc, #340]	; (800fe20 <tcp_receive+0xb08>)
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d206      	bcs.n	800fce0 <tcp_receive+0x9c8>
 800fcd2:	4b56      	ldr	r3, [pc, #344]	; (800fe2c <tcp_receive+0xb14>)
 800fcd4:	f240 6207 	movw	r2, #1543	; 0x607
 800fcd8:	4957      	ldr	r1, [pc, #348]	; (800fe38 <tcp_receive+0xb20>)
 800fcda:	4856      	ldr	r0, [pc, #344]	; (800fe34 <tcp_receive+0xb1c>)
 800fcdc:	f004 fcee 	bl	80146bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fce4:	4b4e      	ldr	r3, [pc, #312]	; (800fe20 <tcp_receive+0xb08>)
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	1ad3      	subs	r3, r2, r3
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fc ffc5 	bl	800cc80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcf6:	4b4c      	ldr	r3, [pc, #304]	; (800fe28 <tcp_receive+0xb10>)
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	891b      	ldrh	r3, [r3, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d006      	beq.n	800fd0e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fd00:	4b49      	ldr	r3, [pc, #292]	; (800fe28 <tcp_receive+0xb10>)
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4a4d      	ldr	r2, [pc, #308]	; (800fe3c <tcp_receive+0xb24>)
 800fd06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fd08:	4b47      	ldr	r3, [pc, #284]	; (800fe28 <tcp_receive+0xb10>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd0e:	4b46      	ldr	r3, [pc, #280]	; (800fe28 <tcp_receive+0xb10>)
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	899b      	ldrh	r3, [r3, #12]
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fa fee0 	bl	800aadc <lwip_htons>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0301 	and.w	r3, r3, #1
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 80b8 	beq.w	800fe9a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd2a:	4b45      	ldr	r3, [pc, #276]	; (800fe40 <tcp_receive+0xb28>)
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f043 0320 	orr.w	r3, r3, #32
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	4b42      	ldr	r3, [pc, #264]	; (800fe40 <tcp_receive+0xb28>)
 800fd36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd38:	e0af      	b.n	800fe9a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4a36      	ldr	r2, [pc, #216]	; (800fe24 <tcp_receive+0xb0c>)
 800fd4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	891b      	ldrh	r3, [r3, #8]
 800fd50:	461c      	mov	r4, r3
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	899b      	ldrh	r3, [r3, #12]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fa febe 	bl	800aadc <lwip_htons>
 800fd60:	4603      	mov	r3, r0
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 0303 	and.w	r3, r3, #3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d001      	beq.n	800fd70 <tcp_receive+0xa58>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e000      	b.n	800fd72 <tcp_receive+0xa5a>
 800fd70:	2300      	movs	r3, #0
 800fd72:	191a      	adds	r2, r3, r4
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd78:	441a      	add	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd82:	461c      	mov	r4, r3
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	891b      	ldrh	r3, [r3, #8]
 800fd88:	461d      	mov	r5, r3
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	899b      	ldrh	r3, [r3, #12]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fa fea2 	bl	800aadc <lwip_htons>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	f003 0303 	and.w	r3, r3, #3
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d001      	beq.n	800fda8 <tcp_receive+0xa90>
 800fda4:	2301      	movs	r3, #1
 800fda6:	e000      	b.n	800fdaa <tcp_receive+0xa92>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	442b      	add	r3, r5
 800fdac:	429c      	cmp	r4, r3
 800fdae:	d206      	bcs.n	800fdbe <tcp_receive+0xaa6>
 800fdb0:	4b1e      	ldr	r3, [pc, #120]	; (800fe2c <tcp_receive+0xb14>)
 800fdb2:	f240 622b 	movw	r2, #1579	; 0x62b
 800fdb6:	4923      	ldr	r1, [pc, #140]	; (800fe44 <tcp_receive+0xb2c>)
 800fdb8:	481e      	ldr	r0, [pc, #120]	; (800fe34 <tcp_receive+0xb1c>)
 800fdba:	f004 fc7f 	bl	80146bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	891b      	ldrh	r3, [r3, #8]
 800fdc2:	461c      	mov	r4, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	899b      	ldrh	r3, [r3, #12]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fa fe85 	bl	800aadc <lwip_htons>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	f003 0303 	and.w	r3, r3, #3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <tcp_receive+0xaca>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e000      	b.n	800fde4 <tcp_receive+0xacc>
 800fde2:	2300      	movs	r3, #0
 800fde4:	1919      	adds	r1, r3, r4
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdea:	b28b      	uxth	r3, r1
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7fc ff43 	bl	800cc80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	891b      	ldrh	r3, [r3, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d028      	beq.n	800fe56 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fe04:	4b0d      	ldr	r3, [pc, #52]	; (800fe3c <tcp_receive+0xb24>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d01d      	beq.n	800fe48 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fe0c:	4b0b      	ldr	r3, [pc, #44]	; (800fe3c <tcp_receive+0xb24>)
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	4619      	mov	r1, r3
 800fe16:	4610      	mov	r0, r2
 800fe18:	f7fc fa60 	bl	800c2dc <pbuf_cat>
 800fe1c:	e018      	b.n	800fe50 <tcp_receive+0xb38>
 800fe1e:	bf00      	nop
 800fe20:	20008d8a 	.word	0x20008d8a
 800fe24:	20008d80 	.word	0x20008d80
 800fe28:	20008d60 	.word	0x20008d60
 800fe2c:	08016a94 	.word	0x08016a94
 800fe30:	08016e74 	.word	0x08016e74
 800fe34:	08016ae0 	.word	0x08016ae0
 800fe38:	08016eb0 	.word	0x08016eb0
 800fe3c:	20008d90 	.word	0x20008d90
 800fe40:	20008d8d 	.word	0x20008d8d
 800fe44:	08016ed0 	.word	0x08016ed0
            } else {
              recv_data = cseg->p;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	4a70      	ldr	r2, [pc, #448]	; (8010010 <tcp_receive+0xcf8>)
 800fe4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	2200      	movs	r2, #0
 800fe54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	899b      	ldrh	r3, [r3, #12]
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fa fe3c 	bl	800aadc <lwip_htons>
 800fe64:	4603      	mov	r3, r0
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00d      	beq.n	800fe8c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe70:	4b68      	ldr	r3, [pc, #416]	; (8010014 <tcp_receive+0xcfc>)
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	f043 0320 	orr.w	r3, r3, #32
 800fe78:	b2da      	uxtb	r2, r3
 800fe7a:	4b66      	ldr	r3, [pc, #408]	; (8010014 <tcp_receive+0xcfc>)
 800fe7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	7d1b      	ldrb	r3, [r3, #20]
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	d102      	bne.n	800fe8c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2207      	movs	r2, #7
 800fe8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fe94:	68b8      	ldr	r0, [r7, #8]
 800fe96:	f7fd fbd2 	bl	800d63e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d008      	beq.n	800feb4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800feae:	429a      	cmp	r2, r3
 800feb0:	f43f af43 	beq.w	800fd3a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	8b5b      	ldrh	r3, [r3, #26]
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00e      	beq.n	800fede <tcp_receive+0xbc6>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	8b5b      	ldrh	r3, [r3, #26]
 800fec4:	f023 0301 	bic.w	r3, r3, #1
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	835a      	strh	r2, [r3, #26]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	8b5b      	ldrh	r3, [r3, #26]
 800fed2:	f043 0302 	orr.w	r3, r3, #2
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fedc:	e188      	b.n	80101f0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	8b5b      	ldrh	r3, [r3, #26]
 800fee2:	f043 0301 	orr.w	r3, r3, #1
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800feec:	e180      	b.n	80101f0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fef6:	4848      	ldr	r0, [pc, #288]	; (8010018 <tcp_receive+0xd00>)
 800fef8:	f7fd fbba 	bl	800d670 <tcp_seg_copy>
 800fefc:	4602      	mov	r2, r0
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	675a      	str	r2, [r3, #116]	; 0x74
 800ff02:	e16d      	b.n	80101e0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ff04:	2300      	movs	r3, #0
 800ff06:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff0e:	e157      	b.n	80101c0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	4b41      	ldr	r3, [pc, #260]	; (801001c <tcp_receive+0xd04>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d11d      	bne.n	800ff5a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff1e:	4b3e      	ldr	r3, [pc, #248]	; (8010018 <tcp_receive+0xd00>)
 800ff20:	891a      	ldrh	r2, [r3, #8]
 800ff22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff24:	891b      	ldrh	r3, [r3, #8]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	f240 814f 	bls.w	80101ca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff2c:	483a      	ldr	r0, [pc, #232]	; (8010018 <tcp_receive+0xd00>)
 800ff2e:	f7fd fb9f 	bl	800d670 <tcp_seg_copy>
 800ff32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 8149 	beq.w	80101ce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d003      	beq.n	800ff4a <tcp_receive+0xc32>
                    prev->next = cseg;
 800ff42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	601a      	str	r2, [r3, #0]
 800ff48:	e002      	b.n	800ff50 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	697a      	ldr	r2, [r7, #20]
 800ff4e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff52:	6978      	ldr	r0, [r7, #20]
 800ff54:	f7ff f8dc 	bl	800f110 <tcp_oos_insert_segment>
                }
                break;
 800ff58:	e139      	b.n	80101ce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d117      	bne.n	800ff90 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff60:	4b2e      	ldr	r3, [pc, #184]	; (801001c <tcp_receive+0xd04>)
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	da57      	bge.n	8010020 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff70:	4829      	ldr	r0, [pc, #164]	; (8010018 <tcp_receive+0xd00>)
 800ff72:	f7fd fb7d 	bl	800d670 <tcp_seg_copy>
 800ff76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 8129 	beq.w	80101d2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	69ba      	ldr	r2, [r7, #24]
 800ff84:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff88:	69b8      	ldr	r0, [r7, #24]
 800ff8a:	f7ff f8c1 	bl	800f110 <tcp_oos_insert_segment>
                  }
                  break;
 800ff8e:	e120      	b.n	80101d2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff90:	4b22      	ldr	r3, [pc, #136]	; (801001c <tcp_receive+0xd04>)
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	db3e      	blt.n	8010020 <tcp_receive+0xd08>
 800ffa2:	4b1e      	ldr	r3, [pc, #120]	; (801001c <tcp_receive+0xd04>)
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	3301      	adds	r3, #1
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dc35      	bgt.n	8010020 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ffb4:	4818      	ldr	r0, [pc, #96]	; (8010018 <tcp_receive+0xd00>)
 800ffb6:	f7fd fb5b 	bl	800d670 <tcp_seg_copy>
 800ffba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f000 8109 	beq.w	80101d6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffcc:	8912      	ldrh	r2, [r2, #8]
 800ffce:	441a      	add	r2, r3
 800ffd0:	4b12      	ldr	r3, [pc, #72]	; (801001c <tcp_receive+0xd04>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	dd12      	ble.n	8010000 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffda:	4b10      	ldr	r3, [pc, #64]	; (801001c <tcp_receive+0xd04>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff6:	891b      	ldrh	r3, [r3, #8]
 800fff8:	4619      	mov	r1, r3
 800fffa:	4610      	mov	r0, r2
 800fffc:	f7fb ff26 	bl	800be4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010002:	69fa      	ldr	r2, [r7, #28]
 8010004:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010008:	69f8      	ldr	r0, [r7, #28]
 801000a:	f7ff f881 	bl	800f110 <tcp_oos_insert_segment>
                  }
                  break;
 801000e:	e0e2      	b.n	80101d6 <tcp_receive+0xebe>
 8010010:	20008d90 	.word	0x20008d90
 8010014:	20008d8d 	.word	0x20008d8d
 8010018:	20008d60 	.word	0x20008d60
 801001c:	20008d80 	.word	0x20008d80
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f040 80c6 	bne.w	80101ba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801002e:	4b80      	ldr	r3, [pc, #512]	; (8010230 <tcp_receive+0xf18>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801003a:	2b00      	cmp	r3, #0
 801003c:	f340 80bd 	ble.w	80101ba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	4618      	mov	r0, r3
 801004a:	f7fa fd47 	bl	800aadc <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	b2db      	uxtb	r3, r3
 8010052:	f003 0301 	and.w	r3, r3, #1
 8010056:	2b00      	cmp	r3, #0
 8010058:	f040 80bf 	bne.w	80101da <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801005c:	4875      	ldr	r0, [pc, #468]	; (8010234 <tcp_receive+0xf1c>)
 801005e:	f7fd fb07 	bl	800d670 <tcp_seg_copy>
 8010062:	4602      	mov	r2, r0
 8010064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010066:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	f000 80b6 	beq.w	80101de <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801007a:	8912      	ldrh	r2, [r2, #8]
 801007c:	441a      	add	r2, r3
 801007e:	4b6c      	ldr	r3, [pc, #432]	; (8010230 <tcp_receive+0xf18>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	2b00      	cmp	r3, #0
 8010086:	dd12      	ble.n	80100ae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010088:	4b69      	ldr	r3, [pc, #420]	; (8010230 <tcp_receive+0xf18>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	b29a      	uxth	r2, r3
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	b29b      	uxth	r3, r3
 8010096:	1ad3      	subs	r3, r2, r3
 8010098:	b29a      	uxth	r2, r3
 801009a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	4619      	mov	r1, r3
 80100a8:	4610      	mov	r0, r2
 80100aa:	f7fb fecf 	bl	800be4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80100ae:	4b62      	ldr	r3, [pc, #392]	; (8010238 <tcp_receive+0xf20>)
 80100b0:	881b      	ldrh	r3, [r3, #0]
 80100b2:	461a      	mov	r2, r3
 80100b4:	4b5e      	ldr	r3, [pc, #376]	; (8010230 <tcp_receive+0xf18>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	441a      	add	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100be:	6879      	ldr	r1, [r7, #4]
 80100c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100c2:	440b      	add	r3, r1
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f340 8089 	ble.w	80101de <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	899b      	ldrh	r3, [r3, #12]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fa fd00 	bl	800aadc <lwip_htons>
 80100dc:	4603      	mov	r3, r0
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	f003 0301 	and.w	r3, r3, #1
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d022      	beq.n	801012e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	899b      	ldrh	r3, [r3, #12]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100f8:	b21c      	sxth	r4, r3
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	b29b      	uxth	r3, r3
 8010104:	4618      	mov	r0, r3
 8010106:	f7fa fce9 	bl	800aadc <lwip_htons>
 801010a:	4603      	mov	r3, r0
 801010c:	b2db      	uxtb	r3, r3
 801010e:	b29b      	uxth	r3, r3
 8010110:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010114:	b29b      	uxth	r3, r3
 8010116:	4618      	mov	r0, r3
 8010118:	f7fa fce0 	bl	800aadc <lwip_htons>
 801011c:	4603      	mov	r3, r0
 801011e:	b21b      	sxth	r3, r3
 8010120:	4323      	orrs	r3, r4
 8010122:	b21a      	sxth	r2, r3
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	b292      	uxth	r2, r2
 801012c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010132:	b29a      	uxth	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010138:	4413      	add	r3, r2
 801013a:	b299      	uxth	r1, r3
 801013c:	4b3c      	ldr	r3, [pc, #240]	; (8010230 <tcp_receive+0xf18>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	b29a      	uxth	r2, r3
 8010142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	1a8a      	subs	r2, r1, r2
 8010148:	b292      	uxth	r2, r2
 801014a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	891b      	ldrh	r3, [r3, #8]
 8010158:	4619      	mov	r1, r3
 801015a:	4610      	mov	r0, r2
 801015c:	f7fb fe76 	bl	800be4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	891c      	ldrh	r4, [r3, #8]
 8010166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	899b      	ldrh	r3, [r3, #12]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4618      	mov	r0, r3
 8010172:	f7fa fcb3 	bl	800aadc <lwip_htons>
 8010176:	4603      	mov	r3, r0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	f003 0303 	and.w	r3, r3, #3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <tcp_receive+0xe6e>
 8010182:	2301      	movs	r3, #1
 8010184:	e000      	b.n	8010188 <tcp_receive+0xe70>
 8010186:	2300      	movs	r3, #0
 8010188:	4423      	add	r3, r4
 801018a:	b29a      	uxth	r2, r3
 801018c:	4b2a      	ldr	r3, [pc, #168]	; (8010238 <tcp_receive+0xf20>)
 801018e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010190:	4b29      	ldr	r3, [pc, #164]	; (8010238 <tcp_receive+0xf20>)
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	461a      	mov	r2, r3
 8010196:	4b26      	ldr	r3, [pc, #152]	; (8010230 <tcp_receive+0xf18>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	441a      	add	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a0:	6879      	ldr	r1, [r7, #4]
 80101a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101a4:	440b      	add	r3, r1
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d019      	beq.n	80101de <tcp_receive+0xec6>
 80101aa:	4b24      	ldr	r3, [pc, #144]	; (801023c <tcp_receive+0xf24>)
 80101ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80101b0:	4923      	ldr	r1, [pc, #140]	; (8010240 <tcp_receive+0xf28>)
 80101b2:	4824      	ldr	r0, [pc, #144]	; (8010244 <tcp_receive+0xf2c>)
 80101b4:	f004 fa82 	bl	80146bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80101b8:	e011      	b.n	80101de <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	63bb      	str	r3, [r7, #56]	; 0x38
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f47f aea4 	bne.w	800ff10 <tcp_receive+0xbf8>
 80101c8:	e00a      	b.n	80101e0 <tcp_receive+0xec8>
                break;
 80101ca:	bf00      	nop
 80101cc:	e008      	b.n	80101e0 <tcp_receive+0xec8>
                break;
 80101ce:	bf00      	nop
 80101d0:	e006      	b.n	80101e0 <tcp_receive+0xec8>
                  break;
 80101d2:	bf00      	nop
 80101d4:	e004      	b.n	80101e0 <tcp_receive+0xec8>
                  break;
 80101d6:	bf00      	nop
 80101d8:	e002      	b.n	80101e0 <tcp_receive+0xec8>
                  break;
 80101da:	bf00      	nop
 80101dc:	e000      	b.n	80101e0 <tcp_receive+0xec8>
                break;
 80101de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f001 fa33 	bl	801164c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80101e6:	e003      	b.n	80101f0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f001 fa2f 	bl	801164c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101ee:	e01a      	b.n	8010226 <tcp_receive+0xf0e>
 80101f0:	e019      	b.n	8010226 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101f2:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <tcp_receive+0xf18>)
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	db0a      	blt.n	8010216 <tcp_receive+0xefe>
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <tcp_receive+0xf18>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801020c:	440b      	add	r3, r1
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	3301      	adds	r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	dd07      	ble.n	8010226 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8b5b      	ldrh	r3, [r3, #26]
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010224:	e7ff      	b.n	8010226 <tcp_receive+0xf0e>
 8010226:	bf00      	nop
 8010228:	3750      	adds	r7, #80	; 0x50
 801022a:	46bd      	mov	sp, r7
 801022c:	bdb0      	pop	{r4, r5, r7, pc}
 801022e:	bf00      	nop
 8010230:	20008d80 	.word	0x20008d80
 8010234:	20008d60 	.word	0x20008d60
 8010238:	20008d8a 	.word	0x20008d8a
 801023c:	08016a94 	.word	0x08016a94
 8010240:	08016e3c 	.word	0x08016e3c
 8010244:	08016ae0 	.word	0x08016ae0

08010248 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801024e:	4b15      	ldr	r3, [pc, #84]	; (80102a4 <tcp_get_next_optbyte+0x5c>)
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	b291      	uxth	r1, r2
 8010256:	4a13      	ldr	r2, [pc, #76]	; (80102a4 <tcp_get_next_optbyte+0x5c>)
 8010258:	8011      	strh	r1, [r2, #0]
 801025a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801025c:	4b12      	ldr	r3, [pc, #72]	; (80102a8 <tcp_get_next_optbyte+0x60>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d004      	beq.n	801026e <tcp_get_next_optbyte+0x26>
 8010264:	4b11      	ldr	r3, [pc, #68]	; (80102ac <tcp_get_next_optbyte+0x64>)
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	88fa      	ldrh	r2, [r7, #6]
 801026a:	429a      	cmp	r2, r3
 801026c:	d208      	bcs.n	8010280 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801026e:	4b10      	ldr	r3, [pc, #64]	; (80102b0 <tcp_get_next_optbyte+0x68>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3314      	adds	r3, #20
 8010274:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010276:	88fb      	ldrh	r3, [r7, #6]
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	4413      	add	r3, r2
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	e00b      	b.n	8010298 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010280:	88fb      	ldrh	r3, [r7, #6]
 8010282:	b2da      	uxtb	r2, r3
 8010284:	4b09      	ldr	r3, [pc, #36]	; (80102ac <tcp_get_next_optbyte+0x64>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	b2db      	uxtb	r3, r3
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801028e:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <tcp_get_next_optbyte+0x60>)
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	797b      	ldrb	r3, [r7, #5]
 8010294:	4413      	add	r3, r2
 8010296:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010298:	4618      	mov	r0, r3
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20008d7c 	.word	0x20008d7c
 80102a8:	20008d78 	.word	0x20008d78
 80102ac:	20008d76 	.word	0x20008d76
 80102b0:	20008d70 	.word	0x20008d70

080102b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d106      	bne.n	80102d0 <tcp_parseopt+0x1c>
 80102c2:	4b32      	ldr	r3, [pc, #200]	; (801038c <tcp_parseopt+0xd8>)
 80102c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80102c8:	4931      	ldr	r1, [pc, #196]	; (8010390 <tcp_parseopt+0xdc>)
 80102ca:	4832      	ldr	r0, [pc, #200]	; (8010394 <tcp_parseopt+0xe0>)
 80102cc:	f004 f9f6 	bl	80146bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80102d0:	4b31      	ldr	r3, [pc, #196]	; (8010398 <tcp_parseopt+0xe4>)
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d055      	beq.n	8010384 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102d8:	4b30      	ldr	r3, [pc, #192]	; (801039c <tcp_parseopt+0xe8>)
 80102da:	2200      	movs	r2, #0
 80102dc:	801a      	strh	r2, [r3, #0]
 80102de:	e045      	b.n	801036c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80102e0:	f7ff ffb2 	bl	8010248 <tcp_get_next_optbyte>
 80102e4:	4603      	mov	r3, r0
 80102e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
 80102ea:	2b02      	cmp	r3, #2
 80102ec:	d006      	beq.n	80102fc <tcp_parseopt+0x48>
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	dc2b      	bgt.n	801034a <tcp_parseopt+0x96>
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d041      	beq.n	801037a <tcp_parseopt+0xc6>
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d127      	bne.n	801034a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80102fa:	e037      	b.n	801036c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102fc:	f7ff ffa4 	bl	8010248 <tcp_get_next_optbyte>
 8010300:	4603      	mov	r3, r0
 8010302:	2b04      	cmp	r3, #4
 8010304:	d13b      	bne.n	801037e <tcp_parseopt+0xca>
 8010306:	4b25      	ldr	r3, [pc, #148]	; (801039c <tcp_parseopt+0xe8>)
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	4a22      	ldr	r2, [pc, #136]	; (8010398 <tcp_parseopt+0xe4>)
 801030e:	8812      	ldrh	r2, [r2, #0]
 8010310:	4293      	cmp	r3, r2
 8010312:	da34      	bge.n	801037e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010314:	f7ff ff98 	bl	8010248 <tcp_get_next_optbyte>
 8010318:	4603      	mov	r3, r0
 801031a:	b29b      	uxth	r3, r3
 801031c:	021b      	lsls	r3, r3, #8
 801031e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010320:	f7ff ff92 	bl	8010248 <tcp_get_next_optbyte>
 8010324:	4603      	mov	r3, r0
 8010326:	b29a      	uxth	r2, r3
 8010328:	89bb      	ldrh	r3, [r7, #12]
 801032a:	4313      	orrs	r3, r2
 801032c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801032e:	89bb      	ldrh	r3, [r7, #12]
 8010330:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010334:	d804      	bhi.n	8010340 <tcp_parseopt+0x8c>
 8010336:	89bb      	ldrh	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <tcp_parseopt+0x8c>
 801033c:	89ba      	ldrh	r2, [r7, #12]
 801033e:	e001      	b.n	8010344 <tcp_parseopt+0x90>
 8010340:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010348:	e010      	b.n	801036c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801034a:	f7ff ff7d 	bl	8010248 <tcp_get_next_optbyte>
 801034e:	4603      	mov	r3, r0
 8010350:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010352:	7afb      	ldrb	r3, [r7, #11]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d914      	bls.n	8010382 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010358:	7afb      	ldrb	r3, [r7, #11]
 801035a:	b29a      	uxth	r2, r3
 801035c:	4b0f      	ldr	r3, [pc, #60]	; (801039c <tcp_parseopt+0xe8>)
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	4413      	add	r3, r2
 8010362:	b29b      	uxth	r3, r3
 8010364:	3b02      	subs	r3, #2
 8010366:	b29a      	uxth	r2, r3
 8010368:	4b0c      	ldr	r3, [pc, #48]	; (801039c <tcp_parseopt+0xe8>)
 801036a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801036c:	4b0b      	ldr	r3, [pc, #44]	; (801039c <tcp_parseopt+0xe8>)
 801036e:	881a      	ldrh	r2, [r3, #0]
 8010370:	4b09      	ldr	r3, [pc, #36]	; (8010398 <tcp_parseopt+0xe4>)
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	429a      	cmp	r2, r3
 8010376:	d3b3      	bcc.n	80102e0 <tcp_parseopt+0x2c>
 8010378:	e004      	b.n	8010384 <tcp_parseopt+0xd0>
          return;
 801037a:	bf00      	nop
 801037c:	e002      	b.n	8010384 <tcp_parseopt+0xd0>
            return;
 801037e:	bf00      	nop
 8010380:	e000      	b.n	8010384 <tcp_parseopt+0xd0>
            return;
 8010382:	bf00      	nop
      }
    }
  }
}
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	08016a94 	.word	0x08016a94
 8010390:	08016ef8 	.word	0x08016ef8
 8010394:	08016ae0 	.word	0x08016ae0
 8010398:	20008d74 	.word	0x20008d74
 801039c:	20008d7c 	.word	0x20008d7c

080103a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80103a0:	b480      	push	{r7}
 80103a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80103a4:	4b05      	ldr	r3, [pc, #20]	; (80103bc <tcp_trigger_input_pcb_close+0x1c>)
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	f043 0310 	orr.w	r3, r3, #16
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	4b03      	ldr	r3, [pc, #12]	; (80103bc <tcp_trigger_input_pcb_close+0x1c>)
 80103b0:	701a      	strb	r2, [r3, #0]
}
 80103b2:	bf00      	nop
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr
 80103bc:	20008d8d 	.word	0x20008d8d

080103c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d00a      	beq.n	80103e8 <tcp_route+0x28>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	7a1b      	ldrb	r3, [r3, #8]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d006      	beq.n	80103e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	7a1b      	ldrb	r3, [r3, #8]
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fb fb7a 	bl	800bad8 <netif_get_by_index>
 80103e4:	4603      	mov	r3, r0
 80103e6:	e003      	b.n	80103f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f002 fe3b 	bl	8013064 <ip4_route>
 80103ee:	4603      	mov	r3, r0
  }
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b087      	sub	sp, #28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	603b      	str	r3, [r7, #0]
 8010404:	4613      	mov	r3, r2
 8010406:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <tcp_create_segment+0x22>
 801040e:	4b44      	ldr	r3, [pc, #272]	; (8010520 <tcp_create_segment+0x128>)
 8010410:	22a3      	movs	r2, #163	; 0xa3
 8010412:	4944      	ldr	r1, [pc, #272]	; (8010524 <tcp_create_segment+0x12c>)
 8010414:	4844      	ldr	r0, [pc, #272]	; (8010528 <tcp_create_segment+0x130>)
 8010416:	f004 f951 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d105      	bne.n	801042c <tcp_create_segment+0x34>
 8010420:	4b3f      	ldr	r3, [pc, #252]	; (8010520 <tcp_create_segment+0x128>)
 8010422:	22a4      	movs	r2, #164	; 0xa4
 8010424:	4941      	ldr	r1, [pc, #260]	; (801052c <tcp_create_segment+0x134>)
 8010426:	4840      	ldr	r0, [pc, #256]	; (8010528 <tcp_create_segment+0x130>)
 8010428:	f004 f948 	bl	80146bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801042c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	b2db      	uxtb	r3, r3
 8010434:	f003 0304 	and.w	r3, r3, #4
 8010438:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801043a:	2003      	movs	r0, #3
 801043c:	f7fa ffc6 	bl	800b3cc <memp_malloc>
 8010440:	6138      	str	r0, [r7, #16]
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d104      	bne.n	8010452 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010448:	68b8      	ldr	r0, [r7, #8]
 801044a:	f7fb fe85 	bl	800c158 <pbuf_free>
    return NULL;
 801044e:	2300      	movs	r3, #0
 8010450:	e061      	b.n	8010516 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010458:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	68ba      	ldr	r2, [r7, #8]
 8010464:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	891a      	ldrh	r2, [r3, #8]
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	b29b      	uxth	r3, r3
 801046e:	429a      	cmp	r2, r3
 8010470:	d205      	bcs.n	801047e <tcp_create_segment+0x86>
 8010472:	4b2b      	ldr	r3, [pc, #172]	; (8010520 <tcp_create_segment+0x128>)
 8010474:	22b0      	movs	r2, #176	; 0xb0
 8010476:	492e      	ldr	r1, [pc, #184]	; (8010530 <tcp_create_segment+0x138>)
 8010478:	482b      	ldr	r0, [pc, #172]	; (8010528 <tcp_create_segment+0x130>)
 801047a:	f004 f91f 	bl	80146bc <iprintf>
  seg->len = p->tot_len - optlen;
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	891a      	ldrh	r2, [r3, #8]
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	b29b      	uxth	r3, r3
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	b29a      	uxth	r2, r3
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801048e:	2114      	movs	r1, #20
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	f7fb fdcb 	bl	800c02c <pbuf_add_header>
 8010496:	4603      	mov	r3, r0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801049c:	6938      	ldr	r0, [r7, #16]
 801049e:	f7fd f8ce 	bl	800d63e <tcp_seg_free>
    return NULL;
 80104a2:	2300      	movs	r3, #0
 80104a4:	e037      	b.n	8010516 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	8ada      	ldrh	r2, [r3, #22]
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	68dc      	ldr	r4, [r3, #12]
 80104b8:	4610      	mov	r0, r2
 80104ba:	f7fa fb0f 	bl	800aadc <lwip_htons>
 80104be:	4603      	mov	r3, r0
 80104c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	8b1a      	ldrh	r2, [r3, #24]
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	68dc      	ldr	r4, [r3, #12]
 80104ca:	4610      	mov	r0, r2
 80104cc:	f7fa fb06 	bl	800aadc <lwip_htons>
 80104d0:	4603      	mov	r3, r0
 80104d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	68dc      	ldr	r4, [r3, #12]
 80104d8:	6838      	ldr	r0, [r7, #0]
 80104da:	f7fa fb14 	bl	800ab06 <lwip_htonl>
 80104de:	4603      	mov	r3, r0
 80104e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80104e2:	7dfb      	ldrb	r3, [r7, #23]
 80104e4:	089b      	lsrs	r3, r3, #2
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	3305      	adds	r3, #5
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	031b      	lsls	r3, r3, #12
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	79fb      	ldrb	r3, [r7, #7]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	4313      	orrs	r3, r2
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	68dc      	ldr	r4, [r3, #12]
 80104fe:	4610      	mov	r0, r2
 8010500:	f7fa faec 	bl	800aadc <lwip_htons>
 8010504:	4603      	mov	r3, r0
 8010506:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	2200      	movs	r2, #0
 801050e:	749a      	strb	r2, [r3, #18]
 8010510:	2200      	movs	r2, #0
 8010512:	74da      	strb	r2, [r3, #19]
  return seg;
 8010514:	693b      	ldr	r3, [r7, #16]
}
 8010516:	4618      	mov	r0, r3
 8010518:	371c      	adds	r7, #28
 801051a:	46bd      	mov	sp, r7
 801051c:	bd90      	pop	{r4, r7, pc}
 801051e:	bf00      	nop
 8010520:	08016f14 	.word	0x08016f14
 8010524:	08016f48 	.word	0x08016f48
 8010528:	08016f68 	.word	0x08016f68
 801052c:	08016f90 	.word	0x08016f90
 8010530:	08016fb4 	.word	0x08016fb4

08010534 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b08b      	sub	sp, #44	; 0x2c
 8010538:	af02      	add	r7, sp, #8
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010540:	2300      	movs	r3, #0
 8010542:	61fb      	str	r3, [r7, #28]
 8010544:	2300      	movs	r3, #0
 8010546:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010548:	2300      	movs	r3, #0
 801054a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_split_unsent_seg+0x2c>
 8010552:	4b95      	ldr	r3, [pc, #596]	; (80107a8 <tcp_split_unsent_seg+0x274>)
 8010554:	f240 324b 	movw	r2, #843	; 0x34b
 8010558:	4994      	ldr	r1, [pc, #592]	; (80107ac <tcp_split_unsent_seg+0x278>)
 801055a:	4895      	ldr	r0, [pc, #596]	; (80107b0 <tcp_split_unsent_seg+0x27c>)
 801055c:	f004 f8ae 	bl	80146bc <iprintf>

  useg = pcb->unsent;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010564:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d102      	bne.n	8010572 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801056c:	f04f 33ff 	mov.w	r3, #4294967295
 8010570:	e116      	b.n	80107a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010572:	887b      	ldrh	r3, [r7, #2]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d109      	bne.n	801058c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010578:	4b8b      	ldr	r3, [pc, #556]	; (80107a8 <tcp_split_unsent_seg+0x274>)
 801057a:	f240 3253 	movw	r2, #851	; 0x353
 801057e:	498d      	ldr	r1, [pc, #564]	; (80107b4 <tcp_split_unsent_seg+0x280>)
 8010580:	488b      	ldr	r0, [pc, #556]	; (80107b0 <tcp_split_unsent_seg+0x27c>)
 8010582:	f004 f89b 	bl	80146bc <iprintf>
    return ERR_VAL;
 8010586:	f06f 0305 	mvn.w	r3, #5
 801058a:	e109      	b.n	80107a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	891b      	ldrh	r3, [r3, #8]
 8010590:	887a      	ldrh	r2, [r7, #2]
 8010592:	429a      	cmp	r2, r3
 8010594:	d301      	bcc.n	801059a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	e102      	b.n	80107a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801059e:	887a      	ldrh	r2, [r7, #2]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d906      	bls.n	80105b2 <tcp_split_unsent_seg+0x7e>
 80105a4:	4b80      	ldr	r3, [pc, #512]	; (80107a8 <tcp_split_unsent_seg+0x274>)
 80105a6:	f240 325b 	movw	r2, #859	; 0x35b
 80105aa:	4983      	ldr	r1, [pc, #524]	; (80107b8 <tcp_split_unsent_seg+0x284>)
 80105ac:	4880      	ldr	r0, [pc, #512]	; (80107b0 <tcp_split_unsent_seg+0x27c>)
 80105ae:	f004 f885 	bl	80146bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	891b      	ldrh	r3, [r3, #8]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d106      	bne.n	80105c8 <tcp_split_unsent_seg+0x94>
 80105ba:	4b7b      	ldr	r3, [pc, #492]	; (80107a8 <tcp_split_unsent_seg+0x274>)
 80105bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80105c0:	497e      	ldr	r1, [pc, #504]	; (80107bc <tcp_split_unsent_seg+0x288>)
 80105c2:	487b      	ldr	r0, [pc, #492]	; (80107b0 <tcp_split_unsent_seg+0x27c>)
 80105c4:	f004 f87a 	bl	80146bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	7a9b      	ldrb	r3, [r3, #10]
 80105cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80105ce:	7bfb      	ldrb	r3, [r7, #15]
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	f003 0304 	and.w	r3, r3, #4
 80105d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	891a      	ldrh	r2, [r3, #8]
 80105de:	887b      	ldrh	r3, [r7, #2]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80105e4:	7bbb      	ldrb	r3, [r7, #14]
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	89bb      	ldrh	r3, [r7, #12]
 80105ea:	4413      	add	r3, r2
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105f2:	4619      	mov	r1, r3
 80105f4:	2036      	movs	r0, #54	; 0x36
 80105f6:	f7fb facb 	bl	800bb90 <pbuf_alloc>
 80105fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 80b7 	beq.w	8010772 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	891a      	ldrh	r2, [r3, #8]
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	891b      	ldrh	r3, [r3, #8]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	b29a      	uxth	r2, r3
 8010612:	887b      	ldrh	r3, [r7, #2]
 8010614:	4413      	add	r3, r2
 8010616:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	6858      	ldr	r0, [r3, #4]
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	7bbb      	ldrb	r3, [r7, #14]
 8010622:	18d1      	adds	r1, r2, r3
 8010624:	897b      	ldrh	r3, [r7, #10]
 8010626:	89ba      	ldrh	r2, [r7, #12]
 8010628:	f7fb ff80 	bl	800c52c <pbuf_copy_partial>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	89bb      	ldrh	r3, [r7, #12]
 8010632:	4293      	cmp	r3, r2
 8010634:	f040 809f 	bne.w	8010776 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	899b      	ldrh	r3, [r3, #12]
 801063e:	b29b      	uxth	r3, r3
 8010640:	4618      	mov	r0, r3
 8010642:	f7fa fa4b 	bl	800aadc <lwip_htons>
 8010646:	4603      	mov	r3, r0
 8010648:	b2db      	uxtb	r3, r3
 801064a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801064e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010650:	2300      	movs	r3, #0
 8010652:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010654:	7efb      	ldrb	r3, [r7, #27]
 8010656:	f003 0308 	and.w	r3, r3, #8
 801065a:	2b00      	cmp	r3, #0
 801065c:	d007      	beq.n	801066e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801065e:	7efb      	ldrb	r3, [r7, #27]
 8010660:	f023 0308 	bic.w	r3, r3, #8
 8010664:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010666:	7ebb      	ldrb	r3, [r7, #26]
 8010668:	f043 0308 	orr.w	r3, r3, #8
 801066c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801066e:	7efb      	ldrb	r3, [r7, #27]
 8010670:	f003 0301 	and.w	r3, r3, #1
 8010674:	2b00      	cmp	r3, #0
 8010676:	d007      	beq.n	8010688 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010678:	7efb      	ldrb	r3, [r7, #27]
 801067a:	f023 0301 	bic.w	r3, r3, #1
 801067e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010680:	7ebb      	ldrb	r3, [r7, #26]
 8010682:	f043 0301 	orr.w	r3, r3, #1
 8010686:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	4618      	mov	r0, r3
 8010690:	f7fa fa39 	bl	800ab06 <lwip_htonl>
 8010694:	4602      	mov	r2, r0
 8010696:	887b      	ldrh	r3, [r7, #2]
 8010698:	18d1      	adds	r1, r2, r3
 801069a:	7eba      	ldrb	r2, [r7, #26]
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	460b      	mov	r3, r1
 80106a2:	6939      	ldr	r1, [r7, #16]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff fea7 	bl	80103f8 <tcp_create_segment>
 80106aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d063      	beq.n	801077a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fb fdd6 	bl	800c268 <pbuf_clen>
 80106bc:	4603      	mov	r3, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106c6:	1a9b      	subs	r3, r3, r2
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	6858      	ldr	r0, [r3, #4]
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	891a      	ldrh	r2, [r3, #8]
 80106da:	89bb      	ldrh	r3, [r7, #12]
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	b29b      	uxth	r3, r3
 80106e0:	4619      	mov	r1, r3
 80106e2:	f7fb fbb3 	bl	800be4c <pbuf_realloc>
  useg->len -= remainder;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	891a      	ldrh	r2, [r3, #8]
 80106ea:	89bb      	ldrh	r3, [r7, #12]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	899b      	ldrh	r3, [r3, #12]
 80106fa:	b29c      	uxth	r4, r3
 80106fc:	7efb      	ldrb	r3, [r7, #27]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	4618      	mov	r0, r3
 8010702:	f7fa f9eb 	bl	800aadc <lwip_htons>
 8010706:	4603      	mov	r3, r0
 8010708:	461a      	mov	r2, r3
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	4322      	orrs	r2, r4
 8010710:	b292      	uxth	r2, r2
 8010712:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7fb fda5 	bl	800c268 <pbuf_clen>
 801071e:	4603      	mov	r3, r0
 8010720:	461a      	mov	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010728:	4413      	add	r3, r2
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	4618      	mov	r0, r3
 8010738:	f7fb fd96 	bl	800c268 <pbuf_clen>
 801073c:	4603      	mov	r3, r0
 801073e:	461a      	mov	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010746:	4413      	add	r3, r2
 8010748:	b29a      	uxth	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d103      	bne.n	801076e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801076e:	2300      	movs	r3, #0
 8010770:	e016      	b.n	80107a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010772:	bf00      	nop
 8010774:	e002      	b.n	801077c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010776:	bf00      	nop
 8010778:	e000      	b.n	801077c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801077a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d006      	beq.n	8010790 <tcp_split_unsent_seg+0x25c>
 8010782:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <tcp_split_unsent_seg+0x274>)
 8010784:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010788:	490d      	ldr	r1, [pc, #52]	; (80107c0 <tcp_split_unsent_seg+0x28c>)
 801078a:	4809      	ldr	r0, [pc, #36]	; (80107b0 <tcp_split_unsent_seg+0x27c>)
 801078c:	f003 ff96 	bl	80146bc <iprintf>
  if (p != NULL) {
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010796:	6938      	ldr	r0, [r7, #16]
 8010798:	f7fb fcde 	bl	800c158 <pbuf_free>
  }

  return ERR_MEM;
 801079c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3724      	adds	r7, #36	; 0x24
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd90      	pop	{r4, r7, pc}
 80107a8:	08016f14 	.word	0x08016f14
 80107ac:	080172a8 	.word	0x080172a8
 80107b0:	08016f68 	.word	0x08016f68
 80107b4:	080172cc 	.word	0x080172cc
 80107b8:	080172f0 	.word	0x080172f0
 80107bc:	08017300 	.word	0x08017300
 80107c0:	08017310 	.word	0x08017310

080107c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80107c4:	b590      	push	{r4, r7, lr}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <tcp_send_fin+0x1c>
 80107d2:	4b21      	ldr	r3, [pc, #132]	; (8010858 <tcp_send_fin+0x94>)
 80107d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80107d8:	4920      	ldr	r1, [pc, #128]	; (801085c <tcp_send_fin+0x98>)
 80107da:	4821      	ldr	r0, [pc, #132]	; (8010860 <tcp_send_fin+0x9c>)
 80107dc:	f003 ff6e 	bl	80146bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d02e      	beq.n	8010846 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ec:	60fb      	str	r3, [r7, #12]
 80107ee:	e002      	b.n	80107f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d1f8      	bne.n	80107f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	899b      	ldrh	r3, [r3, #12]
 8010804:	b29b      	uxth	r3, r3
 8010806:	4618      	mov	r0, r3
 8010808:	f7fa f968 	bl	800aadc <lwip_htons>
 801080c:	4603      	mov	r3, r0
 801080e:	b2db      	uxtb	r3, r3
 8010810:	f003 0307 	and.w	r3, r3, #7
 8010814:	2b00      	cmp	r3, #0
 8010816:	d116      	bne.n	8010846 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	899b      	ldrh	r3, [r3, #12]
 801081e:	b29c      	uxth	r4, r3
 8010820:	2001      	movs	r0, #1
 8010822:	f7fa f95b 	bl	800aadc <lwip_htons>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	4322      	orrs	r2, r4
 8010830:	b292      	uxth	r2, r2
 8010832:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	8b5b      	ldrh	r3, [r3, #26]
 8010838:	f043 0320 	orr.w	r3, r3, #32
 801083c:	b29a      	uxth	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	e004      	b.n	8010850 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010846:	2101      	movs	r1, #1
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 f80b 	bl	8010864 <tcp_enqueue_flags>
 801084e:	4603      	mov	r3, r0
}
 8010850:	4618      	mov	r0, r3
 8010852:	3714      	adds	r7, #20
 8010854:	46bd      	mov	sp, r7
 8010856:	bd90      	pop	{r4, r7, pc}
 8010858:	08016f14 	.word	0x08016f14
 801085c:	0801731c 	.word	0x0801731c
 8010860:	08016f68 	.word	0x08016f68

08010864 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b08a      	sub	sp, #40	; 0x28
 8010868:	af02      	add	r7, sp, #8
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010870:	2300      	movs	r3, #0
 8010872:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010874:	2300      	movs	r3, #0
 8010876:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010878:	78fb      	ldrb	r3, [r7, #3]
 801087a:	f003 0303 	and.w	r3, r3, #3
 801087e:	2b00      	cmp	r3, #0
 8010880:	d106      	bne.n	8010890 <tcp_enqueue_flags+0x2c>
 8010882:	4b67      	ldr	r3, [pc, #412]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 8010884:	f240 4211 	movw	r2, #1041	; 0x411
 8010888:	4966      	ldr	r1, [pc, #408]	; (8010a24 <tcp_enqueue_flags+0x1c0>)
 801088a:	4867      	ldr	r0, [pc, #412]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 801088c:	f003 ff16 	bl	80146bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <tcp_enqueue_flags+0x40>
 8010896:	4b62      	ldr	r3, [pc, #392]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 8010898:	f240 4213 	movw	r2, #1043	; 0x413
 801089c:	4963      	ldr	r1, [pc, #396]	; (8010a2c <tcp_enqueue_flags+0x1c8>)
 801089e:	4862      	ldr	r0, [pc, #392]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 80108a0:	f003 ff0c 	bl	80146bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80108a4:	78fb      	ldrb	r3, [r7, #3]
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80108ae:	2301      	movs	r3, #1
 80108b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108b2:	7ffb      	ldrb	r3, [r7, #31]
 80108b4:	009b      	lsls	r3, r3, #2
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	f003 0304 	and.w	r3, r3, #4
 80108bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108c6:	4619      	mov	r1, r3
 80108c8:	2036      	movs	r0, #54	; 0x36
 80108ca:	f7fb f961 	bl	800bb90 <pbuf_alloc>
 80108ce:	6138      	str	r0, [r7, #16]
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d109      	bne.n	80108ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	8b5b      	ldrh	r3, [r3, #26]
 80108da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108de:	b29a      	uxth	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80108e4:	f04f 33ff 	mov.w	r3, #4294967295
 80108e8:	e095      	b.n	8010a16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	895a      	ldrh	r2, [r3, #10]
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d206      	bcs.n	8010904 <tcp_enqueue_flags+0xa0>
 80108f6:	4b4a      	ldr	r3, [pc, #296]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 80108f8:	f240 4239 	movw	r2, #1081	; 0x439
 80108fc:	494c      	ldr	r1, [pc, #304]	; (8010a30 <tcp_enqueue_flags+0x1cc>)
 80108fe:	484a      	ldr	r0, [pc, #296]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 8010900:	f003 fedc 	bl	80146bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010908:	78fa      	ldrb	r2, [r7, #3]
 801090a:	7ffb      	ldrb	r3, [r7, #31]
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	460b      	mov	r3, r1
 8010910:	6939      	ldr	r1, [r7, #16]
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fd70 	bl	80103f8 <tcp_create_segment>
 8010918:	60f8      	str	r0, [r7, #12]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d109      	bne.n	8010934 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	8b5b      	ldrh	r3, [r3, #26]
 8010924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010928:	b29a      	uxth	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801092e:	f04f 33ff 	mov.w	r3, #4294967295
 8010932:	e070      	b.n	8010a16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f003 0303 	and.w	r3, r3, #3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d006      	beq.n	801094e <tcp_enqueue_flags+0xea>
 8010940:	4b37      	ldr	r3, [pc, #220]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 8010942:	f240 4242 	movw	r2, #1090	; 0x442
 8010946:	493b      	ldr	r1, [pc, #236]	; (8010a34 <tcp_enqueue_flags+0x1d0>)
 8010948:	4837      	ldr	r0, [pc, #220]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 801094a:	f003 feb7 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	891b      	ldrh	r3, [r3, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d006      	beq.n	8010964 <tcp_enqueue_flags+0x100>
 8010956:	4b32      	ldr	r3, [pc, #200]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 8010958:	f240 4243 	movw	r2, #1091	; 0x443
 801095c:	4936      	ldr	r1, [pc, #216]	; (8010a38 <tcp_enqueue_flags+0x1d4>)
 801095e:	4832      	ldr	r0, [pc, #200]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 8010960:	f003 feac 	bl	80146bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010968:	2b00      	cmp	r3, #0
 801096a:	d103      	bne.n	8010974 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	66da      	str	r2, [r3, #108]	; 0x6c
 8010972:	e00d      	b.n	8010990 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010978:	61bb      	str	r3, [r7, #24]
 801097a:	e002      	b.n	8010982 <tcp_enqueue_flags+0x11e>
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	61bb      	str	r3, [r7, #24]
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d1f8      	bne.n	801097c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010998:	78fb      	ldrb	r3, [r7, #3]
 801099a:	f003 0302 	and.w	r3, r3, #2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d104      	bne.n	80109ac <tcp_enqueue_flags+0x148>
 80109a2:	78fb      	ldrb	r3, [r7, #3]
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d004      	beq.n	80109b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80109b6:	78fb      	ldrb	r3, [r7, #3]
 80109b8:	f003 0301 	and.w	r3, r3, #1
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d006      	beq.n	80109ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	8b5b      	ldrh	r3, [r3, #26]
 80109c4:	f043 0320 	orr.w	r3, r3, #32
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fb fc48 	bl	800c268 <pbuf_clen>
 80109d8:	4603      	mov	r3, r0
 80109da:	461a      	mov	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109e2:	4413      	add	r3, r2
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00e      	beq.n	8010a14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10a      	bne.n	8010a14 <tcp_enqueue_flags+0x1b0>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <tcp_enqueue_flags+0x1b0>
 8010a06:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <tcp_enqueue_flags+0x1bc>)
 8010a08:	f240 4265 	movw	r2, #1125	; 0x465
 8010a0c:	490b      	ldr	r1, [pc, #44]	; (8010a3c <tcp_enqueue_flags+0x1d8>)
 8010a0e:	4806      	ldr	r0, [pc, #24]	; (8010a28 <tcp_enqueue_flags+0x1c4>)
 8010a10:	f003 fe54 	bl	80146bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3720      	adds	r7, #32
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	08016f14 	.word	0x08016f14
 8010a24:	08017338 	.word	0x08017338
 8010a28:	08016f68 	.word	0x08016f68
 8010a2c:	08017390 	.word	0x08017390
 8010a30:	080173b0 	.word	0x080173b0
 8010a34:	080173ec 	.word	0x080173ec
 8010a38:	08017404 	.word	0x08017404
 8010a3c:	08017430 	.word	0x08017430

08010a40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a40:	b5b0      	push	{r4, r5, r7, lr}
 8010a42:	b08a      	sub	sp, #40	; 0x28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d106      	bne.n	8010a5c <tcp_output+0x1c>
 8010a4e:	4b8a      	ldr	r3, [pc, #552]	; (8010c78 <tcp_output+0x238>)
 8010a50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010a54:	4989      	ldr	r1, [pc, #548]	; (8010c7c <tcp_output+0x23c>)
 8010a56:	488a      	ldr	r0, [pc, #552]	; (8010c80 <tcp_output+0x240>)
 8010a58:	f003 fe30 	bl	80146bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	7d1b      	ldrb	r3, [r3, #20]
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d106      	bne.n	8010a72 <tcp_output+0x32>
 8010a64:	4b84      	ldr	r3, [pc, #528]	; (8010c78 <tcp_output+0x238>)
 8010a66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010a6a:	4986      	ldr	r1, [pc, #536]	; (8010c84 <tcp_output+0x244>)
 8010a6c:	4884      	ldr	r0, [pc, #528]	; (8010c80 <tcp_output+0x240>)
 8010a6e:	f003 fe25 	bl	80146bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010a72:	4b85      	ldr	r3, [pc, #532]	; (8010c88 <tcp_output+0x248>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d101      	bne.n	8010a80 <tcp_output+0x40>
    return ERR_OK;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	e1ce      	b.n	8010e1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	bf28      	it	cs
 8010a90:	4613      	movcs	r3, r2
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10b      	bne.n	8010aba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	8b5b      	ldrh	r3, [r3, #26]
 8010aa6:	f003 0302 	and.w	r3, r3, #2
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 81aa 	beq.w	8010e04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 fdcb 	bl	801164c <tcp_send_empty_ack>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	e1b1      	b.n	8010e1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff fc7c 	bl	80103c0 <tcp_route>
 8010ac8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d102      	bne.n	8010ad6 <tcp_output+0x96>
    return ERR_RTE;
 8010ad0:	f06f 0303 	mvn.w	r3, #3
 8010ad4:	e1a3      	b.n	8010e1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d003      	beq.n	8010ae4 <tcp_output+0xa4>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d111      	bne.n	8010b08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d002      	beq.n	8010af0 <tcp_output+0xb0>
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	3304      	adds	r3, #4
 8010aee:	e000      	b.n	8010af2 <tcp_output+0xb2>
 8010af0:	2300      	movs	r3, #0
 8010af2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <tcp_output+0xc0>
      return ERR_RTE;
 8010afa:	f06f 0303 	mvn.w	r3, #3
 8010afe:	e18e      	b.n	8010e1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7f9 fff9 	bl	800ab06 <lwip_htonl>
 8010b14:	4602      	mov	r2, r0
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b1e:	8912      	ldrh	r2, [r2, #8]
 8010b20:	4413      	add	r3, r2
 8010b22:	69ba      	ldr	r2, [r7, #24]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d227      	bcs.n	8010b78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b2e:	461a      	mov	r2, r3
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d114      	bne.n	8010b60 <tcp_output+0x120>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d110      	bne.n	8010b60 <tcp_output+0x120>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10b      	bne.n	8010b60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2201      	movs	r2, #1
 8010b54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	8b5b      	ldrh	r3, [r3, #26]
 8010b64:	f003 0302 	and.w	r3, r3, #2
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 814d 	beq.w	8010e08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 fd6c 	bl	801164c <tcp_send_empty_ack>
 8010b74:	4603      	mov	r3, r0
 8010b76:	e152      	b.n	8010e1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010b86:	6a3b      	ldr	r3, [r7, #32]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 811c 	beq.w	8010dc6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010b8e:	e002      	b.n	8010b96 <tcp_output+0x156>
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	623b      	str	r3, [r7, #32]
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1f8      	bne.n	8010b90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010b9e:	e112      	b.n	8010dc6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	899b      	ldrh	r3, [r3, #12]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f9 ff97 	bl	800aadc <lwip_htons>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	f003 0304 	and.w	r3, r3, #4
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d006      	beq.n	8010bc8 <tcp_output+0x188>
 8010bba:	4b2f      	ldr	r3, [pc, #188]	; (8010c78 <tcp_output+0x238>)
 8010bbc:	f240 5236 	movw	r2, #1334	; 0x536
 8010bc0:	4932      	ldr	r1, [pc, #200]	; (8010c8c <tcp_output+0x24c>)
 8010bc2:	482f      	ldr	r0, [pc, #188]	; (8010c80 <tcp_output+0x240>)
 8010bc4:	f003 fd7a 	bl	80146bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d01f      	beq.n	8010c10 <tcp_output+0x1d0>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8b5b      	ldrh	r3, [r3, #26]
 8010bd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d119      	bne.n	8010c10 <tcp_output+0x1d0>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00b      	beq.n	8010bfc <tcp_output+0x1bc>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d110      	bne.n	8010c10 <tcp_output+0x1d0>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf2:	891a      	ldrh	r2, [r3, #8]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d209      	bcs.n	8010c10 <tcp_output+0x1d0>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d004      	beq.n	8010c10 <tcp_output+0x1d0>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c0c:	2b08      	cmp	r3, #8
 8010c0e:	d901      	bls.n	8010c14 <tcp_output+0x1d4>
 8010c10:	2301      	movs	r3, #1
 8010c12:	e000      	b.n	8010c16 <tcp_output+0x1d6>
 8010c14:	2300      	movs	r3, #0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f000 80e4 	beq.w	8010df0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7d1b      	ldrb	r3, [r3, #20]
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d00d      	beq.n	8010c4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	899b      	ldrh	r3, [r3, #12]
 8010c36:	b29c      	uxth	r4, r3
 8010c38:	2010      	movs	r0, #16
 8010c3a:	f7f9 ff4f 	bl	800aadc <lwip_htons>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	461a      	mov	r2, r3
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	4322      	orrs	r2, r4
 8010c48:	b292      	uxth	r2, r2
 8010c4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c4c:	697a      	ldr	r2, [r7, #20]
 8010c4e:	6879      	ldr	r1, [r7, #4]
 8010c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c52:	f000 f909 	bl	8010e68 <tcp_output_segment>
 8010c56:	4603      	mov	r3, r0
 8010c58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d016      	beq.n	8010c90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8b5b      	ldrh	r3, [r3, #26]
 8010c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	835a      	strh	r2, [r3, #26]
      return err;
 8010c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c74:	e0d3      	b.n	8010e1e <tcp_output+0x3de>
 8010c76:	bf00      	nop
 8010c78:	08016f14 	.word	0x08016f14
 8010c7c:	08017458 	.word	0x08017458
 8010c80:	08016f68 	.word	0x08016f68
 8010c84:	08017470 	.word	0x08017470
 8010c88:	20008d94 	.word	0x20008d94
 8010c8c:	08017498 	.word	0x08017498
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d006      	beq.n	8010cae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	8b5b      	ldrh	r3, [r3, #26]
 8010ca4:	f023 0303 	bic.w	r3, r3, #3
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f9 ff26 	bl	800ab06 <lwip_htonl>
 8010cba:	4604      	mov	r4, r0
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	891b      	ldrh	r3, [r3, #8]
 8010cc0:	461d      	mov	r5, r3
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	899b      	ldrh	r3, [r3, #12]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7f9 ff06 	bl	800aadc <lwip_htons>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	f003 0303 	and.w	r3, r3, #3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <tcp_output+0x2a0>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e000      	b.n	8010ce2 <tcp_output+0x2a2>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	442b      	add	r3, r5
 8010ce4:	4423      	add	r3, r4
 8010ce6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da02      	bge.n	8010cfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfc:	891b      	ldrh	r3, [r3, #8]
 8010cfe:	461c      	mov	r4, r3
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	899b      	ldrh	r3, [r3, #12]
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7f9 fee7 	bl	800aadc <lwip_htons>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	f003 0303 	and.w	r3, r3, #3
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <tcp_output+0x2de>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e000      	b.n	8010d20 <tcp_output+0x2e0>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	4423      	add	r3, r4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d049      	beq.n	8010dba <tcp_output+0x37a>
      seg->next = NULL;
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	2200      	movs	r2, #0
 8010d2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d105      	bne.n	8010d40 <tcp_output+0x300>
        pcb->unacked = seg;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3c:	623b      	str	r3, [r7, #32]
 8010d3e:	e03f      	b.n	8010dc0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7f9 fedd 	bl	800ab06 <lwip_htonl>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7f9 fed6 	bl	800ab06 <lwip_htonl>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	1ae3      	subs	r3, r4, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	da24      	bge.n	8010dac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	3370      	adds	r3, #112	; 0x70
 8010d66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d68:	e002      	b.n	8010d70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d011      	beq.n	8010d9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f9 fec0 	bl	800ab06 <lwip_htonl>
 8010d86:	4604      	mov	r4, r0
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7f9 feb9 	bl	800ab06 <lwip_htonl>
 8010d94:	4603      	mov	r3, r0
 8010d96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	dbe6      	blt.n	8010d6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da8:	601a      	str	r2, [r3, #0]
 8010daa:	e009      	b.n	8010dc0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010db2:	6a3b      	ldr	r3, [r7, #32]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	623b      	str	r3, [r7, #32]
 8010db8:	e002      	b.n	8010dc0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dbc:	f7fc fc3f 	bl	800d63e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d012      	beq.n	8010df2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f9 fe97 	bl	800ab06 <lwip_htonl>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de2:	8912      	ldrh	r2, [r2, #8]
 8010de4:	4413      	add	r3, r2
  while (seg != NULL &&
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	f4bf aed9 	bcs.w	8010ba0 <tcp_output+0x160>
 8010dee:	e000      	b.n	8010df2 <tcp_output+0x3b2>
      break;
 8010df0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d108      	bne.n	8010e0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010e02:	e004      	b.n	8010e0e <tcp_output+0x3ce>
    goto output_done;
 8010e04:	bf00      	nop
 8010e06:	e002      	b.n	8010e0e <tcp_output+0x3ce>
    goto output_done;
 8010e08:	bf00      	nop
 8010e0a:	e000      	b.n	8010e0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010e0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	8b5b      	ldrh	r3, [r3, #26]
 8010e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3728      	adds	r7, #40	; 0x28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bdb0      	pop	{r4, r5, r7, pc}
 8010e26:	bf00      	nop

08010e28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d106      	bne.n	8010e44 <tcp_output_segment_busy+0x1c>
 8010e36:	4b09      	ldr	r3, [pc, #36]	; (8010e5c <tcp_output_segment_busy+0x34>)
 8010e38:	f240 529a 	movw	r2, #1434	; 0x59a
 8010e3c:	4908      	ldr	r1, [pc, #32]	; (8010e60 <tcp_output_segment_busy+0x38>)
 8010e3e:	4809      	ldr	r0, [pc, #36]	; (8010e64 <tcp_output_segment_busy+0x3c>)
 8010e40:	f003 fc3c 	bl	80146bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	7b9b      	ldrb	r3, [r3, #14]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d001      	beq.n	8010e52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e000      	b.n	8010e54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	08016f14 	.word	0x08016f14
 8010e60:	080174b0 	.word	0x080174b0
 8010e64:	08016f68 	.word	0x08016f68

08010e68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010e68:	b5b0      	push	{r4, r5, r7, lr}
 8010e6a:	b08c      	sub	sp, #48	; 0x30
 8010e6c:	af04      	add	r7, sp, #16
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d106      	bne.n	8010e88 <tcp_output_segment+0x20>
 8010e7a:	4b63      	ldr	r3, [pc, #396]	; (8011008 <tcp_output_segment+0x1a0>)
 8010e7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010e80:	4962      	ldr	r1, [pc, #392]	; (801100c <tcp_output_segment+0x1a4>)
 8010e82:	4863      	ldr	r0, [pc, #396]	; (8011010 <tcp_output_segment+0x1a8>)
 8010e84:	f003 fc1a 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d106      	bne.n	8010e9c <tcp_output_segment+0x34>
 8010e8e:	4b5e      	ldr	r3, [pc, #376]	; (8011008 <tcp_output_segment+0x1a0>)
 8010e90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010e94:	495f      	ldr	r1, [pc, #380]	; (8011014 <tcp_output_segment+0x1ac>)
 8010e96:	485e      	ldr	r0, [pc, #376]	; (8011010 <tcp_output_segment+0x1a8>)
 8010e98:	f003 fc10 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d106      	bne.n	8010eb0 <tcp_output_segment+0x48>
 8010ea2:	4b59      	ldr	r3, [pc, #356]	; (8011008 <tcp_output_segment+0x1a0>)
 8010ea4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010ea8:	495b      	ldr	r1, [pc, #364]	; (8011018 <tcp_output_segment+0x1b0>)
 8010eaa:	4859      	ldr	r0, [pc, #356]	; (8011010 <tcp_output_segment+0x1a8>)
 8010eac:	f003 fc06 	bl	80146bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f7ff ffb9 	bl	8010e28 <tcp_output_segment_busy>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e09f      	b.n	8011000 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	68dc      	ldr	r4, [r3, #12]
 8010ec8:	4610      	mov	r0, r2
 8010eca:	f7f9 fe1c 	bl	800ab06 <lwip_htonl>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	68dc      	ldr	r4, [r3, #12]
 8010eda:	4610      	mov	r0, r2
 8010edc:	f7f9 fdfe 	bl	800aadc <lwip_htons>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010eec:	441a      	add	r2, r3
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	3314      	adds	r3, #20
 8010ef8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	7a9b      	ldrb	r3, [r3, #10]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d015      	beq.n	8010f32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	6879      	ldr	r1, [r7, #4]
 8010f0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010f12:	f7fc fe8b 	bl	800dc2c <tcp_eff_send_mss_netif>
 8010f16:	4603      	mov	r3, r0
 8010f18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010f1a:	8b7b      	ldrh	r3, [r7, #26]
 8010f1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f9 fdf0 	bl	800ab06 <lwip_htonl>
 8010f26:	4602      	mov	r2, r0
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	da02      	bge.n	8010f42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10c      	bne.n	8010f64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010f4a:	4b34      	ldr	r3, [pc, #208]	; (801101c <tcp_output_segment+0x1b4>)
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f9 fdd4 	bl	800ab06 <lwip_htonl>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	68da      	ldr	r2, [r3, #12]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	8959      	ldrh	r1, [r3, #10]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	8b3a      	ldrh	r2, [r7, #24]
 8010f7e:	1a8a      	subs	r2, r1, r2
 8010f80:	b292      	uxth	r2, r2
 8010f82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	8919      	ldrh	r1, [r3, #8]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	8b3a      	ldrh	r2, [r7, #24]
 8010f90:	1a8a      	subs	r2, r1, r2
 8010f92:	b292      	uxth	r2, r2
 8010f94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	68fa      	ldr	r2, [r7, #12]
 8010f9c:	68d2      	ldr	r2, [r2, #12]
 8010f9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	741a      	strb	r2, [r3, #16]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	f103 0214 	add.w	r2, r3, #20
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	7a9b      	ldrb	r3, [r3, #10]
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	f003 0304 	and.w	r3, r3, #4
 8010fbe:	4413      	add	r3, r2
 8010fc0:	69fa      	ldr	r2, [r7, #28]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d006      	beq.n	8010fd4 <tcp_output_segment+0x16c>
 8010fc6:	4b10      	ldr	r3, [pc, #64]	; (8011008 <tcp_output_segment+0x1a0>)
 8010fc8:	f240 621c 	movw	r2, #1564	; 0x61c
 8010fcc:	4914      	ldr	r1, [pc, #80]	; (8011020 <tcp_output_segment+0x1b8>)
 8010fce:	4810      	ldr	r0, [pc, #64]	; (8011010 <tcp_output_segment+0x1a8>)
 8010fd0:	f003 fb74 	bl	80146bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	6858      	ldr	r0, [r3, #4]
 8010fd8:	68b9      	ldr	r1, [r7, #8]
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	1d1c      	adds	r4, r3, #4
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	7add      	ldrb	r5, [r3, #11]
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	7a9b      	ldrb	r3, [r3, #10]
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	9202      	str	r2, [sp, #8]
 8010fea:	2206      	movs	r2, #6
 8010fec:	9201      	str	r2, [sp, #4]
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	462b      	mov	r3, r5
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	f002 f9f4 	bl	80133e0 <ip4_output_if>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3720      	adds	r7, #32
 8011004:	46bd      	mov	sp, r7
 8011006:	bdb0      	pop	{r4, r5, r7, pc}
 8011008:	08016f14 	.word	0x08016f14
 801100c:	080174d8 	.word	0x080174d8
 8011010:	08016f68 	.word	0x08016f68
 8011014:	080174f8 	.word	0x080174f8
 8011018:	08017518 	.word	0x08017518
 801101c:	20008d48 	.word	0x20008d48
 8011020:	0801753c 	.word	0x0801753c

08011024 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011024:	b5b0      	push	{r4, r5, r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <tcp_rexmit_rto_prepare+0x1c>
 8011032:	4b31      	ldr	r3, [pc, #196]	; (80110f8 <tcp_rexmit_rto_prepare+0xd4>)
 8011034:	f240 6263 	movw	r2, #1635	; 0x663
 8011038:	4930      	ldr	r1, [pc, #192]	; (80110fc <tcp_rexmit_rto_prepare+0xd8>)
 801103a:	4831      	ldr	r0, [pc, #196]	; (8011100 <tcp_rexmit_rto_prepare+0xdc>)
 801103c:	f003 fb3e 	bl	80146bc <iprintf>

  if (pcb->unacked == NULL) {
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011044:	2b00      	cmp	r3, #0
 8011046:	d102      	bne.n	801104e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011048:	f06f 0305 	mvn.w	r3, #5
 801104c:	e050      	b.n	80110f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	e00b      	b.n	801106e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f7ff fee6 	bl	8010e28 <tcp_output_segment_busy>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d002      	beq.n	8011068 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011062:	f06f 0305 	mvn.w	r3, #5
 8011066:	e043      	b.n	80110f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	60fb      	str	r3, [r7, #12]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1ef      	bne.n	8011056 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f7ff fed6 	bl	8010e28 <tcp_output_segment_busy>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d002      	beq.n	8011088 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011082:	f06f 0305 	mvn.w	r3, #5
 8011086:	e033      	b.n	80110f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	8b5b      	ldrh	r3, [r3, #26]
 80110a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7f9 fd27 	bl	800ab06 <lwip_htonl>
 80110b8:	4604      	mov	r4, r0
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	891b      	ldrh	r3, [r3, #8]
 80110be:	461d      	mov	r5, r3
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	899b      	ldrh	r3, [r3, #12]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7f9 fd07 	bl	800aadc <lwip_htons>
 80110ce:	4603      	mov	r3, r0
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	f003 0303 	and.w	r3, r3, #3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <tcp_rexmit_rto_prepare+0xba>
 80110da:	2301      	movs	r3, #1
 80110dc:	e000      	b.n	80110e0 <tcp_rexmit_rto_prepare+0xbc>
 80110de:	2300      	movs	r3, #0
 80110e0:	442b      	add	r3, r5
 80110e2:	18e2      	adds	r2, r4, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bdb0      	pop	{r4, r5, r7, pc}
 80110f8:	08016f14 	.word	0x08016f14
 80110fc:	08017550 	.word	0x08017550
 8011100:	08016f68 	.word	0x08016f68

08011104 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <tcp_rexmit_rto_commit+0x1c>
 8011112:	4b0d      	ldr	r3, [pc, #52]	; (8011148 <tcp_rexmit_rto_commit+0x44>)
 8011114:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011118:	490c      	ldr	r1, [pc, #48]	; (801114c <tcp_rexmit_rto_commit+0x48>)
 801111a:	480d      	ldr	r0, [pc, #52]	; (8011150 <tcp_rexmit_rto_commit+0x4c>)
 801111c:	f003 face 	bl	80146bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011126:	2bff      	cmp	r3, #255	; 0xff
 8011128:	d007      	beq.n	801113a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011130:	3301      	adds	r3, #1
 8011132:	b2da      	uxtb	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7ff fc80 	bl	8010a40 <tcp_output>
}
 8011140:	bf00      	nop
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	08016f14 	.word	0x08016f14
 801114c:	08017574 	.word	0x08017574
 8011150:	08016f68 	.word	0x08016f68

08011154 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_rexmit_rto+0x1c>
 8011162:	4b0a      	ldr	r3, [pc, #40]	; (801118c <tcp_rexmit_rto+0x38>)
 8011164:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011168:	4909      	ldr	r1, [pc, #36]	; (8011190 <tcp_rexmit_rto+0x3c>)
 801116a:	480a      	ldr	r0, [pc, #40]	; (8011194 <tcp_rexmit_rto+0x40>)
 801116c:	f003 faa6 	bl	80146bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff ff57 	bl	8011024 <tcp_rexmit_rto_prepare>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d102      	bne.n	8011182 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff ffc1 	bl	8011104 <tcp_rexmit_rto_commit>
  }
}
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	08016f14 	.word	0x08016f14
 8011190:	08017598 	.word	0x08017598
 8011194:	08016f68 	.word	0x08016f68

08011198 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011198:	b590      	push	{r4, r7, lr}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <tcp_rexmit+0x1c>
 80111a6:	4b2f      	ldr	r3, [pc, #188]	; (8011264 <tcp_rexmit+0xcc>)
 80111a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80111ac:	492e      	ldr	r1, [pc, #184]	; (8011268 <tcp_rexmit+0xd0>)
 80111ae:	482f      	ldr	r0, [pc, #188]	; (801126c <tcp_rexmit+0xd4>)
 80111b0:	f003 fa84 	bl	80146bc <iprintf>

  if (pcb->unacked == NULL) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d102      	bne.n	80111c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80111bc:	f06f 0305 	mvn.w	r3, #5
 80111c0:	e04c      	b.n	801125c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80111c8:	68b8      	ldr	r0, [r7, #8]
 80111ca:	f7ff fe2d 	bl	8010e28 <tcp_output_segment_busy>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80111d4:	f06f 0305 	mvn.w	r3, #5
 80111d8:	e040      	b.n	801125c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	336c      	adds	r3, #108	; 0x6c
 80111e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80111e8:	e002      	b.n	80111f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d011      	beq.n	801121c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	4618      	mov	r0, r3
 8011202:	f7f9 fc80 	bl	800ab06 <lwip_htonl>
 8011206:	4604      	mov	r4, r0
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f7f9 fc79 	bl	800ab06 <lwip_htonl>
 8011214:	4603      	mov	r3, r0
 8011216:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011218:	2b00      	cmp	r3, #0
 801121a:	dbe6      	blt.n	80111ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	68ba      	ldr	r2, [r7, #8]
 8011228:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d103      	bne.n	801123a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2200      	movs	r2, #0
 8011236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011240:	2bff      	cmp	r3, #255	; 0xff
 8011242:	d007      	beq.n	8011254 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801124a:	3301      	adds	r3, #1
 801124c:	b2da      	uxtb	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	bd90      	pop	{r4, r7, pc}
 8011264:	08016f14 	.word	0x08016f14
 8011268:	080175b4 	.word	0x080175b4
 801126c:	08016f68 	.word	0x08016f68

08011270 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <tcp_rexmit_fast+0x1c>
 801127e:	4b2a      	ldr	r3, [pc, #168]	; (8011328 <tcp_rexmit_fast+0xb8>)
 8011280:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011284:	4929      	ldr	r1, [pc, #164]	; (801132c <tcp_rexmit_fast+0xbc>)
 8011286:	482a      	ldr	r0, [pc, #168]	; (8011330 <tcp_rexmit_fast+0xc0>)
 8011288:	f003 fa18 	bl	80146bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011290:	2b00      	cmp	r3, #0
 8011292:	d045      	beq.n	8011320 <tcp_rexmit_fast+0xb0>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	8b5b      	ldrh	r3, [r3, #26]
 8011298:	f003 0304 	and.w	r3, r3, #4
 801129c:	2b00      	cmp	r3, #0
 801129e:	d13f      	bne.n	8011320 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7ff ff79 	bl	8011198 <tcp_rexmit>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d139      	bne.n	8011320 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112b8:	4293      	cmp	r3, r2
 80112ba:	bf28      	it	cs
 80112bc:	4613      	movcs	r3, r2
 80112be:	b29b      	uxth	r3, r3
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	da00      	bge.n	80112c6 <tcp_rexmit_fast+0x56>
 80112c4:	3301      	adds	r3, #1
 80112c6:	105b      	asrs	r3, r3, #1
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80112d6:	461a      	mov	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	429a      	cmp	r2, r3
 80112e0:	d206      	bcs.n	80112f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112fa:	4619      	mov	r1, r3
 80112fc:	0049      	lsls	r1, r1, #1
 80112fe:	440b      	add	r3, r1
 8011300:	b29b      	uxth	r3, r3
 8011302:	4413      	add	r3, r2
 8011304:	b29a      	uxth	r2, r3
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	8b5b      	ldrh	r3, [r3, #26]
 8011310:	f043 0304 	orr.w	r3, r3, #4
 8011314:	b29a      	uxth	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011320:	bf00      	nop
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	08016f14 	.word	0x08016f14
 801132c:	080175cc 	.word	0x080175cc
 8011330:	08016f68 	.word	0x08016f68

08011334 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b086      	sub	sp, #24
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	607b      	str	r3, [r7, #4]
 801133e:	460b      	mov	r3, r1
 8011340:	817b      	strh	r3, [r7, #10]
 8011342:	4613      	mov	r3, r2
 8011344:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011346:	897a      	ldrh	r2, [r7, #10]
 8011348:	893b      	ldrh	r3, [r7, #8]
 801134a:	4413      	add	r3, r2
 801134c:	b29b      	uxth	r3, r3
 801134e:	3314      	adds	r3, #20
 8011350:	b29b      	uxth	r3, r3
 8011352:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011356:	4619      	mov	r1, r3
 8011358:	2022      	movs	r0, #34	; 0x22
 801135a:	f7fa fc19 	bl	800bb90 <pbuf_alloc>
 801135e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d04d      	beq.n	8011402 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011366:	897b      	ldrh	r3, [r7, #10]
 8011368:	3313      	adds	r3, #19
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	8952      	ldrh	r2, [r2, #10]
 801136e:	4293      	cmp	r3, r2
 8011370:	db06      	blt.n	8011380 <tcp_output_alloc_header_common+0x4c>
 8011372:	4b26      	ldr	r3, [pc, #152]	; (801140c <tcp_output_alloc_header_common+0xd8>)
 8011374:	f240 7223 	movw	r2, #1827	; 0x723
 8011378:	4925      	ldr	r1, [pc, #148]	; (8011410 <tcp_output_alloc_header_common+0xdc>)
 801137a:	4826      	ldr	r0, [pc, #152]	; (8011414 <tcp_output_alloc_header_common+0xe0>)
 801137c:	f003 f99e 	bl	80146bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011386:	8c3b      	ldrh	r3, [r7, #32]
 8011388:	4618      	mov	r0, r3
 801138a:	f7f9 fba7 	bl	800aadc <lwip_htons>
 801138e:	4603      	mov	r3, r0
 8011390:	461a      	mov	r2, r3
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011398:	4618      	mov	r0, r3
 801139a:	f7f9 fb9f 	bl	800aadc <lwip_htons>
 801139e:	4603      	mov	r3, r0
 80113a0:	461a      	mov	r2, r3
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f7f9 fbaa 	bl	800ab06 <lwip_htonl>
 80113b2:	4602      	mov	r2, r0
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80113b8:	897b      	ldrh	r3, [r7, #10]
 80113ba:	089b      	lsrs	r3, r3, #2
 80113bc:	b29b      	uxth	r3, r3
 80113be:	3305      	adds	r3, #5
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	031b      	lsls	r3, r3, #12
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4313      	orrs	r3, r2
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f9 fb83 	bl	800aadc <lwip_htons>
 80113d6:	4603      	mov	r3, r0
 80113d8:	461a      	mov	r2, r3
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80113de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f9 fb7b 	bl	800aadc <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	461a      	mov	r2, r3
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	2200      	movs	r2, #0
 80113f2:	741a      	strb	r2, [r3, #16]
 80113f4:	2200      	movs	r2, #0
 80113f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	2200      	movs	r2, #0
 80113fc:	749a      	strb	r2, [r3, #18]
 80113fe:	2200      	movs	r2, #0
 8011400:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011402:	697b      	ldr	r3, [r7, #20]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	08016f14 	.word	0x08016f14
 8011410:	080175ec 	.word	0x080175ec
 8011414:	08016f68 	.word	0x08016f68

08011418 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011418:	b5b0      	push	{r4, r5, r7, lr}
 801141a:	b08a      	sub	sp, #40	; 0x28
 801141c:	af04      	add	r7, sp, #16
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	607b      	str	r3, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	817b      	strh	r3, [r7, #10]
 8011426:	4613      	mov	r3, r2
 8011428:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d106      	bne.n	801143e <tcp_output_alloc_header+0x26>
 8011430:	4b15      	ldr	r3, [pc, #84]	; (8011488 <tcp_output_alloc_header+0x70>)
 8011432:	f240 7242 	movw	r2, #1858	; 0x742
 8011436:	4915      	ldr	r1, [pc, #84]	; (801148c <tcp_output_alloc_header+0x74>)
 8011438:	4815      	ldr	r0, [pc, #84]	; (8011490 <tcp_output_alloc_header+0x78>)
 801143a:	f003 f93f 	bl	80146bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	8adb      	ldrh	r3, [r3, #22]
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	8b12      	ldrh	r2, [r2, #24]
 801144a:	68f9      	ldr	r1, [r7, #12]
 801144c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801144e:	893d      	ldrh	r5, [r7, #8]
 8011450:	897c      	ldrh	r4, [r7, #10]
 8011452:	9103      	str	r1, [sp, #12]
 8011454:	2110      	movs	r1, #16
 8011456:	9102      	str	r1, [sp, #8]
 8011458:	9201      	str	r2, [sp, #4]
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	462a      	mov	r2, r5
 8011460:	4621      	mov	r1, r4
 8011462:	f7ff ff67 	bl	8011334 <tcp_output_alloc_header_common>
 8011466:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d006      	beq.n	801147c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011472:	68fa      	ldr	r2, [r7, #12]
 8011474:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011476:	441a      	add	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801147c:	697b      	ldr	r3, [r7, #20]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3718      	adds	r7, #24
 8011482:	46bd      	mov	sp, r7
 8011484:	bdb0      	pop	{r4, r5, r7, pc}
 8011486:	bf00      	nop
 8011488:	08016f14 	.word	0x08016f14
 801148c:	0801761c 	.word	0x0801761c
 8011490:	08016f68 	.word	0x08016f68

08011494 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	4611      	mov	r1, r2
 80114a0:	461a      	mov	r2, r3
 80114a2:	460b      	mov	r3, r1
 80114a4:	71fb      	strb	r3, [r7, #7]
 80114a6:	4613      	mov	r3, r2
 80114a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d106      	bne.n	80114c2 <tcp_output_fill_options+0x2e>
 80114b4:	4b13      	ldr	r3, [pc, #76]	; (8011504 <tcp_output_fill_options+0x70>)
 80114b6:	f240 7256 	movw	r2, #1878	; 0x756
 80114ba:	4913      	ldr	r1, [pc, #76]	; (8011508 <tcp_output_fill_options+0x74>)
 80114bc:	4813      	ldr	r0, [pc, #76]	; (801150c <tcp_output_fill_options+0x78>)
 80114be:	f003 f8fd 	bl	80146bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	3314      	adds	r3, #20
 80114cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	f103 0214 	add.w	r2, r3, #20
 80114d4:	8bfb      	ldrh	r3, [r7, #30]
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	4619      	mov	r1, r3
 80114da:	79fb      	ldrb	r3, [r7, #7]
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	f003 0304 	and.w	r3, r3, #4
 80114e2:	440b      	add	r3, r1
 80114e4:	4413      	add	r3, r2
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d006      	beq.n	80114fa <tcp_output_fill_options+0x66>
 80114ec:	4b05      	ldr	r3, [pc, #20]	; (8011504 <tcp_output_fill_options+0x70>)
 80114ee:	f240 7275 	movw	r2, #1909	; 0x775
 80114f2:	4907      	ldr	r1, [pc, #28]	; (8011510 <tcp_output_fill_options+0x7c>)
 80114f4:	4805      	ldr	r0, [pc, #20]	; (801150c <tcp_output_fill_options+0x78>)
 80114f6:	f003 f8e1 	bl	80146bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80114fa:	bf00      	nop
 80114fc:	3720      	adds	r7, #32
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	08016f14 	.word	0x08016f14
 8011508:	08017644 	.word	0x08017644
 801150c:	08016f68 	.word	0x08016f68
 8011510:	0801753c 	.word	0x0801753c

08011514 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08a      	sub	sp, #40	; 0x28
 8011518:	af04      	add	r7, sp, #16
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
 8011520:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d106      	bne.n	8011536 <tcp_output_control_segment+0x22>
 8011528:	4b1c      	ldr	r3, [pc, #112]	; (801159c <tcp_output_control_segment+0x88>)
 801152a:	f240 7287 	movw	r2, #1927	; 0x787
 801152e:	491c      	ldr	r1, [pc, #112]	; (80115a0 <tcp_output_control_segment+0x8c>)
 8011530:	481c      	ldr	r0, [pc, #112]	; (80115a4 <tcp_output_control_segment+0x90>)
 8011532:	f003 f8c3 	bl	80146bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7fe ff40 	bl	80103c0 <tcp_route>
 8011540:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011548:	23fc      	movs	r3, #252	; 0xfc
 801154a:	75fb      	strb	r3, [r7, #23]
 801154c:	e01c      	b.n	8011588 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d006      	beq.n	8011562 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	7adb      	ldrb	r3, [r3, #11]
 8011558:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	7a9b      	ldrb	r3, [r3, #10]
 801155e:	757b      	strb	r3, [r7, #21]
 8011560:	e003      	b.n	801156a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011562:	23ff      	movs	r3, #255	; 0xff
 8011564:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801156a:	7dba      	ldrb	r2, [r7, #22]
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	9302      	str	r3, [sp, #8]
 8011570:	2306      	movs	r3, #6
 8011572:	9301      	str	r3, [sp, #4]
 8011574:	7d7b      	ldrb	r3, [r7, #21]
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	4613      	mov	r3, r2
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	6879      	ldr	r1, [r7, #4]
 801157e:	68b8      	ldr	r0, [r7, #8]
 8011580:	f001 ff2e 	bl	80133e0 <ip4_output_if>
 8011584:	4603      	mov	r3, r0
 8011586:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011588:	68b8      	ldr	r0, [r7, #8]
 801158a:	f7fa fde5 	bl	800c158 <pbuf_free>
  return err;
 801158e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	08016f14 	.word	0x08016f14
 80115a0:	0801766c 	.word	0x0801766c
 80115a4:	08016f68 	.word	0x08016f68

080115a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80115a8:	b590      	push	{r4, r7, lr}
 80115aa:	b08b      	sub	sp, #44	; 0x2c
 80115ac:	af04      	add	r7, sp, #16
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
 80115b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d106      	bne.n	80115ca <tcp_rst+0x22>
 80115bc:	4b1f      	ldr	r3, [pc, #124]	; (801163c <tcp_rst+0x94>)
 80115be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80115c2:	491f      	ldr	r1, [pc, #124]	; (8011640 <tcp_rst+0x98>)
 80115c4:	481f      	ldr	r0, [pc, #124]	; (8011644 <tcp_rst+0x9c>)
 80115c6:	f003 f879 	bl	80146bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d106      	bne.n	80115de <tcp_rst+0x36>
 80115d0:	4b1a      	ldr	r3, [pc, #104]	; (801163c <tcp_rst+0x94>)
 80115d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80115d6:	491c      	ldr	r1, [pc, #112]	; (8011648 <tcp_rst+0xa0>)
 80115d8:	481a      	ldr	r0, [pc, #104]	; (8011644 <tcp_rst+0x9c>)
 80115da:	f003 f86f 	bl	80146bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80115de:	2300      	movs	r3, #0
 80115e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80115e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80115e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80115e8:	7dfb      	ldrb	r3, [r7, #23]
 80115ea:	b29c      	uxth	r4, r3
 80115ec:	68b8      	ldr	r0, [r7, #8]
 80115ee:	f7f9 fa8a 	bl	800ab06 <lwip_htonl>
 80115f2:	4602      	mov	r2, r0
 80115f4:	8abb      	ldrh	r3, [r7, #20]
 80115f6:	9303      	str	r3, [sp, #12]
 80115f8:	2314      	movs	r3, #20
 80115fa:	9302      	str	r3, [sp, #8]
 80115fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80115fe:	9301      	str	r3, [sp, #4]
 8011600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	4613      	mov	r3, r2
 8011606:	2200      	movs	r2, #0
 8011608:	4621      	mov	r1, r4
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7ff fe92 	bl	8011334 <tcp_output_alloc_header_common>
 8011610:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00c      	beq.n	8011632 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011618:	7dfb      	ldrb	r3, [r7, #23]
 801161a:	2200      	movs	r2, #0
 801161c:	6939      	ldr	r1, [r7, #16]
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7ff ff38 	bl	8011494 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	6939      	ldr	r1, [r7, #16]
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f7ff ff72 	bl	8011514 <tcp_output_control_segment>
 8011630:	e000      	b.n	8011634 <tcp_rst+0x8c>
    return;
 8011632:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011634:	371c      	adds	r7, #28
 8011636:	46bd      	mov	sp, r7
 8011638:	bd90      	pop	{r4, r7, pc}
 801163a:	bf00      	nop
 801163c:	08016f14 	.word	0x08016f14
 8011640:	08017698 	.word	0x08017698
 8011644:	08016f68 	.word	0x08016f68
 8011648:	080176b4 	.word	0x080176b4

0801164c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801164c:	b590      	push	{r4, r7, lr}
 801164e:	b087      	sub	sp, #28
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011658:	2300      	movs	r3, #0
 801165a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d106      	bne.n	8011670 <tcp_send_empty_ack+0x24>
 8011662:	4b28      	ldr	r3, [pc, #160]	; (8011704 <tcp_send_empty_ack+0xb8>)
 8011664:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011668:	4927      	ldr	r1, [pc, #156]	; (8011708 <tcp_send_empty_ack+0xbc>)
 801166a:	4828      	ldr	r0, [pc, #160]	; (801170c <tcp_send_empty_ack+0xc0>)
 801166c:	f003 f826 	bl	80146bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011670:	7dfb      	ldrb	r3, [r7, #23]
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	b2db      	uxtb	r3, r3
 8011676:	f003 0304 	and.w	r3, r3, #4
 801167a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801167c:	7d7b      	ldrb	r3, [r7, #21]
 801167e:	b29c      	uxth	r4, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011684:	4618      	mov	r0, r3
 8011686:	f7f9 fa3e 	bl	800ab06 <lwip_htonl>
 801168a:	4603      	mov	r3, r0
 801168c:	2200      	movs	r2, #0
 801168e:	4621      	mov	r1, r4
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7ff fec1 	bl	8011418 <tcp_output_alloc_header>
 8011696:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d109      	bne.n	80116b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	8b5b      	ldrh	r3, [r3, #26]
 80116a2:	f043 0303 	orr.w	r3, r3, #3
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80116ac:	f06f 0301 	mvn.w	r3, #1
 80116b0:	e023      	b.n	80116fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80116b2:	7dbb      	ldrb	r3, [r7, #22]
 80116b4:	7dfa      	ldrb	r2, [r7, #23]
 80116b6:	6939      	ldr	r1, [r7, #16]
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff feeb 	bl	8011494 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	3304      	adds	r3, #4
 80116c4:	6939      	ldr	r1, [r7, #16]
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff ff24 	bl	8011514 <tcp_output_control_segment>
 80116cc:	4603      	mov	r3, r0
 80116ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80116d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d007      	beq.n	80116e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	8b5b      	ldrh	r3, [r3, #26]
 80116dc:	f043 0303 	orr.w	r3, r3, #3
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	835a      	strh	r2, [r3, #26]
 80116e6:	e006      	b.n	80116f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8b5b      	ldrh	r3, [r3, #26]
 80116ec:	f023 0303 	bic.w	r3, r3, #3
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80116f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	371c      	adds	r7, #28
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd90      	pop	{r4, r7, pc}
 8011702:	bf00      	nop
 8011704:	08016f14 	.word	0x08016f14
 8011708:	080176d0 	.word	0x080176d0
 801170c:	08016f68 	.word	0x08016f68

08011710 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011710:	b590      	push	{r4, r7, lr}
 8011712:	b087      	sub	sp, #28
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011718:	2300      	movs	r3, #0
 801171a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <tcp_keepalive+0x20>
 8011722:	4b18      	ldr	r3, [pc, #96]	; (8011784 <tcp_keepalive+0x74>)
 8011724:	f640 0224 	movw	r2, #2084	; 0x824
 8011728:	4917      	ldr	r1, [pc, #92]	; (8011788 <tcp_keepalive+0x78>)
 801172a:	4818      	ldr	r0, [pc, #96]	; (801178c <tcp_keepalive+0x7c>)
 801172c:	f002 ffc6 	bl	80146bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011730:	7dfb      	ldrb	r3, [r7, #23]
 8011732:	b29c      	uxth	r4, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011738:	3b01      	subs	r3, #1
 801173a:	4618      	mov	r0, r3
 801173c:	f7f9 f9e3 	bl	800ab06 <lwip_htonl>
 8011740:	4603      	mov	r3, r0
 8011742:	2200      	movs	r2, #0
 8011744:	4621      	mov	r1, r4
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff fe66 	bl	8011418 <tcp_output_alloc_header>
 801174c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d102      	bne.n	801175a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011754:	f04f 33ff 	mov.w	r3, #4294967295
 8011758:	e010      	b.n	801177c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	2200      	movs	r2, #0
 801175e:	6939      	ldr	r1, [r7, #16]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff fe97 	bl	8011494 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3304      	adds	r3, #4
 801176c:	6939      	ldr	r1, [r7, #16]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f7ff fed0 	bl	8011514 <tcp_output_control_segment>
 8011774:	4603      	mov	r3, r0
 8011776:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801177c:	4618      	mov	r0, r3
 801177e:	371c      	adds	r7, #28
 8011780:	46bd      	mov	sp, r7
 8011782:	bd90      	pop	{r4, r7, pc}
 8011784:	08016f14 	.word	0x08016f14
 8011788:	080176f0 	.word	0x080176f0
 801178c:	08016f68 	.word	0x08016f68

08011790 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b08b      	sub	sp, #44	; 0x2c
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011798:	2300      	movs	r3, #0
 801179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d106      	bne.n	80117b2 <tcp_zero_window_probe+0x22>
 80117a4:	4b4c      	ldr	r3, [pc, #304]	; (80118d8 <tcp_zero_window_probe+0x148>)
 80117a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80117aa:	494c      	ldr	r1, [pc, #304]	; (80118dc <tcp_zero_window_probe+0x14c>)
 80117ac:	484c      	ldr	r0, [pc, #304]	; (80118e0 <tcp_zero_window_probe+0x150>)
 80117ae:	f002 ff85 	bl	80146bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80117b8:	6a3b      	ldr	r3, [r7, #32]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d101      	bne.n	80117c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80117be:	2300      	movs	r3, #0
 80117c0:	e086      	b.n	80118d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117c8:	2bff      	cmp	r3, #255	; 0xff
 80117ca:	d007      	beq.n	80117dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117d2:	3301      	adds	r3, #1
 80117d4:	b2da      	uxtb	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7f9 f979 	bl	800aadc <lwip_htons>
 80117ea:	4603      	mov	r3, r0
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d005      	beq.n	8011802 <tcp_zero_window_probe+0x72>
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	891b      	ldrh	r3, [r3, #8]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d101      	bne.n	8011802 <tcp_zero_window_probe+0x72>
 80117fe:	2301      	movs	r3, #1
 8011800:	e000      	b.n	8011804 <tcp_zero_window_probe+0x74>
 8011802:	2300      	movs	r3, #0
 8011804:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011806:	7ffb      	ldrb	r3, [r7, #31]
 8011808:	2b00      	cmp	r3, #0
 801180a:	bf0c      	ite	eq
 801180c:	2301      	moveq	r3, #1
 801180e:	2300      	movne	r3, #0
 8011810:	b2db      	uxtb	r3, r3
 8011812:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011818:	b299      	uxth	r1, r3
 801181a:	6a3b      	ldr	r3, [r7, #32]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	8bba      	ldrh	r2, [r7, #28]
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7ff fdf8 	bl	8011418 <tcp_output_alloc_header>
 8011828:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d102      	bne.n	8011836 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011830:	f04f 33ff 	mov.w	r3, #4294967295
 8011834:	e04c      	b.n	80118d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801183c:	7ffb      	ldrb	r3, [r7, #31]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d011      	beq.n	8011866 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	899b      	ldrh	r3, [r3, #12]
 8011846:	b29b      	uxth	r3, r3
 8011848:	b21b      	sxth	r3, r3
 801184a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801184e:	b21c      	sxth	r4, r3
 8011850:	2011      	movs	r0, #17
 8011852:	f7f9 f943 	bl	800aadc <lwip_htons>
 8011856:	4603      	mov	r3, r0
 8011858:	b21b      	sxth	r3, r3
 801185a:	4323      	orrs	r3, r4
 801185c:	b21b      	sxth	r3, r3
 801185e:	b29a      	uxth	r2, r3
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	819a      	strh	r2, [r3, #12]
 8011864:	e010      	b.n	8011888 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	3314      	adds	r3, #20
 801186c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801186e:	6a3b      	ldr	r3, [r7, #32]
 8011870:	6858      	ldr	r0, [r3, #4]
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	891a      	ldrh	r2, [r3, #8]
 8011878:	6a3b      	ldr	r3, [r7, #32]
 801187a:	891b      	ldrh	r3, [r3, #8]
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	b29b      	uxth	r3, r3
 8011880:	2201      	movs	r2, #1
 8011882:	6939      	ldr	r1, [r7, #16]
 8011884:	f7fa fe52 	bl	800c52c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011888:	6a3b      	ldr	r3, [r7, #32]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	4618      	mov	r0, r3
 8011890:	f7f9 f939 	bl	800ab06 <lwip_htonl>
 8011894:	4603      	mov	r3, r0
 8011896:	3301      	adds	r3, #1
 8011898:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	da02      	bge.n	80118ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118b0:	2200      	movs	r2, #0
 80118b2:	69b9      	ldr	r1, [r7, #24]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f7ff fded 	bl	8011494 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	3304      	adds	r3, #4
 80118c0:	69b9      	ldr	r1, [r7, #24]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7ff fe26 	bl	8011514 <tcp_output_control_segment>
 80118c8:	4603      	mov	r3, r0
 80118ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	372c      	adds	r7, #44	; 0x2c
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd90      	pop	{r4, r7, pc}
 80118d8:	08016f14 	.word	0x08016f14
 80118dc:	0801770c 	.word	0x0801770c
 80118e0:	08016f68 	.word	0x08016f68

080118e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80118ec:	f7fa ff0c 	bl	800c708 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <tcpip_tcp_timer+0x38>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d103      	bne.n	8011900 <tcpip_tcp_timer+0x1c>
 80118f8:	4b09      	ldr	r3, [pc, #36]	; (8011920 <tcpip_tcp_timer+0x3c>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d005      	beq.n	801190c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011900:	2200      	movs	r2, #0
 8011902:	4908      	ldr	r1, [pc, #32]	; (8011924 <tcpip_tcp_timer+0x40>)
 8011904:	20fa      	movs	r0, #250	; 0xfa
 8011906:	f000 f8f3 	bl	8011af0 <sys_timeout>
 801190a:	e003      	b.n	8011914 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801190c:	4b06      	ldr	r3, [pc, #24]	; (8011928 <tcpip_tcp_timer+0x44>)
 801190e:	2200      	movs	r2, #0
 8011910:	601a      	str	r2, [r3, #0]
  }
}
 8011912:	bf00      	nop
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	20008d54 	.word	0x20008d54
 8011920:	20008d58 	.word	0x20008d58
 8011924:	080118e5 	.word	0x080118e5
 8011928:	20008da0 	.word	0x20008da0

0801192c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011930:	4b0a      	ldr	r3, [pc, #40]	; (801195c <tcp_timer_needed+0x30>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d10f      	bne.n	8011958 <tcp_timer_needed+0x2c>
 8011938:	4b09      	ldr	r3, [pc, #36]	; (8011960 <tcp_timer_needed+0x34>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d103      	bne.n	8011948 <tcp_timer_needed+0x1c>
 8011940:	4b08      	ldr	r3, [pc, #32]	; (8011964 <tcp_timer_needed+0x38>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d007      	beq.n	8011958 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011948:	4b04      	ldr	r3, [pc, #16]	; (801195c <tcp_timer_needed+0x30>)
 801194a:	2201      	movs	r2, #1
 801194c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801194e:	2200      	movs	r2, #0
 8011950:	4905      	ldr	r1, [pc, #20]	; (8011968 <tcp_timer_needed+0x3c>)
 8011952:	20fa      	movs	r0, #250	; 0xfa
 8011954:	f000 f8cc 	bl	8011af0 <sys_timeout>
  }
}
 8011958:	bf00      	nop
 801195a:	bd80      	pop	{r7, pc}
 801195c:	20008da0 	.word	0x20008da0
 8011960:	20008d54 	.word	0x20008d54
 8011964:	20008d58 	.word	0x20008d58
 8011968:	080118e5 	.word	0x080118e5

0801196c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	60b9      	str	r1, [r7, #8]
 8011976:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011978:	2006      	movs	r0, #6
 801197a:	f7f9 fd27 	bl	800b3cc <memp_malloc>
 801197e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d109      	bne.n	801199a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d151      	bne.n	8011a30 <sys_timeout_abs+0xc4>
 801198c:	4b2a      	ldr	r3, [pc, #168]	; (8011a38 <sys_timeout_abs+0xcc>)
 801198e:	22be      	movs	r2, #190	; 0xbe
 8011990:	492a      	ldr	r1, [pc, #168]	; (8011a3c <sys_timeout_abs+0xd0>)
 8011992:	482b      	ldr	r0, [pc, #172]	; (8011a40 <sys_timeout_abs+0xd4>)
 8011994:	f002 fe92 	bl	80146bc <iprintf>
    return;
 8011998:	e04a      	b.n	8011a30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2200      	movs	r2, #0
 801199e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80119b2:	4b24      	ldr	r3, [pc, #144]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d103      	bne.n	80119c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80119ba:	4a22      	ldr	r2, [pc, #136]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	6013      	str	r3, [r2, #0]
    return;
 80119c0:	e037      	b.n	8011a32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	685a      	ldr	r2, [r3, #4]
 80119c6:	4b1f      	ldr	r3, [pc, #124]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	0fdb      	lsrs	r3, r3, #31
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d007      	beq.n	80119ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80119da:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80119e2:	4a18      	ldr	r2, [pc, #96]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6013      	str	r3, [r2, #0]
 80119e8:	e023      	b.n	8011a32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80119ea:	4b16      	ldr	r3, [pc, #88]	; (8011a44 <sys_timeout_abs+0xd8>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	617b      	str	r3, [r7, #20]
 80119f0:	e01a      	b.n	8011a28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00b      	beq.n	8011a12 <sys_timeout_abs+0xa6>
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	685a      	ldr	r2, [r3, #4]
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	0fdb      	lsrs	r3, r3, #31
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d007      	beq.n	8011a22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	693a      	ldr	r2, [r7, #16]
 8011a1e:	601a      	str	r2, [r3, #0]
        break;
 8011a20:	e007      	b.n	8011a32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1e1      	bne.n	80119f2 <sys_timeout_abs+0x86>
 8011a2e:	e000      	b.n	8011a32 <sys_timeout_abs+0xc6>
    return;
 8011a30:	bf00      	nop
      }
    }
  }
}
 8011a32:	3718      	adds	r7, #24
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	08017730 	.word	0x08017730
 8011a3c:	08017764 	.word	0x08017764
 8011a40:	080177a4 	.word	0x080177a4
 8011a44:	20008d98 	.word	0x20008d98

08011a48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	4798      	blx	r3

  now = sys_now();
 8011a5a:	f7f8 fe65 	bl	800a728 <sys_now>
 8011a5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	4b0f      	ldr	r3, [pc, #60]	; (8011aa4 <lwip_cyclic_timer+0x5c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4413      	add	r3, r2
 8011a6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	1ad3      	subs	r3, r2, r3
 8011a72:	0fdb      	lsrs	r3, r3, #31
 8011a74:	f003 0301 	and.w	r3, r3, #1
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d009      	beq.n	8011a92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	4413      	add	r3, r2
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	4907      	ldr	r1, [pc, #28]	; (8011aa8 <lwip_cyclic_timer+0x60>)
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7ff ff6e 	bl	801196c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011a90:	e004      	b.n	8011a9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	4904      	ldr	r1, [pc, #16]	; (8011aa8 <lwip_cyclic_timer+0x60>)
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f7ff ff68 	bl	801196c <sys_timeout_abs>
}
 8011a9c:	bf00      	nop
 8011a9e:	3718      	adds	r7, #24
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	20008d9c 	.word	0x20008d9c
 8011aa8:	08011a49 	.word	0x08011a49

08011aac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	607b      	str	r3, [r7, #4]
 8011ab6:	e00e      	b.n	8011ad6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011ab8:	4a0b      	ldr	r2, [pc, #44]	; (8011ae8 <sys_timeouts_init+0x3c>)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	4a08      	ldr	r2, [pc, #32]	; (8011ae8 <sys_timeouts_init+0x3c>)
 8011ac6:	4413      	add	r3, r2
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4908      	ldr	r1, [pc, #32]	; (8011aec <sys_timeouts_init+0x40>)
 8011acc:	f000 f810 	bl	8011af0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	607b      	str	r3, [r7, #4]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d9ed      	bls.n	8011ab8 <sys_timeouts_init+0xc>
  }
}
 8011adc:	bf00      	nop
 8011ade:	bf00      	nop
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	0801837c 	.word	0x0801837c
 8011aec:	08011a49 	.word	0x08011a49

08011af0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b02:	d306      	bcc.n	8011b12 <sys_timeout+0x22>
 8011b04:	4b0a      	ldr	r3, [pc, #40]	; (8011b30 <sys_timeout+0x40>)
 8011b06:	f240 1229 	movw	r2, #297	; 0x129
 8011b0a:	490a      	ldr	r1, [pc, #40]	; (8011b34 <sys_timeout+0x44>)
 8011b0c:	480a      	ldr	r0, [pc, #40]	; (8011b38 <sys_timeout+0x48>)
 8011b0e:	f002 fdd5 	bl	80146bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011b12:	f7f8 fe09 	bl	800a728 <sys_now>
 8011b16:	4602      	mov	r2, r0
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	68b9      	ldr	r1, [r7, #8]
 8011b22:	6978      	ldr	r0, [r7, #20]
 8011b24:	f7ff ff22 	bl	801196c <sys_timeout_abs>
#endif
}
 8011b28:	bf00      	nop
 8011b2a:	3718      	adds	r7, #24
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	08017730 	.word	0x08017730
 8011b34:	080177cc 	.word	0x080177cc
 8011b38:	080177a4 	.word	0x080177a4

08011b3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b40:	f002 fe4a 	bl	80147d8 <rand>
 8011b44:	4603      	mov	r3, r0
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	4b01      	ldr	r3, [pc, #4]	; (8011b5c <udp_init+0x20>)
 8011b56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b58:	bf00      	nop
 8011b5a:	bd80      	pop	{r7, pc}
 8011b5c:	20000028 	.word	0x20000028

08011b60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d105      	bne.n	8011b80 <udp_input_local_match+0x20>
 8011b74:	4b27      	ldr	r3, [pc, #156]	; (8011c14 <udp_input_local_match+0xb4>)
 8011b76:	2287      	movs	r2, #135	; 0x87
 8011b78:	4927      	ldr	r1, [pc, #156]	; (8011c18 <udp_input_local_match+0xb8>)
 8011b7a:	4828      	ldr	r0, [pc, #160]	; (8011c1c <udp_input_local_match+0xbc>)
 8011b7c:	f002 fd9e 	bl	80146bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d105      	bne.n	8011b92 <udp_input_local_match+0x32>
 8011b86:	4b23      	ldr	r3, [pc, #140]	; (8011c14 <udp_input_local_match+0xb4>)
 8011b88:	2288      	movs	r2, #136	; 0x88
 8011b8a:	4925      	ldr	r1, [pc, #148]	; (8011c20 <udp_input_local_match+0xc0>)
 8011b8c:	4823      	ldr	r0, [pc, #140]	; (8011c1c <udp_input_local_match+0xbc>)
 8011b8e:	f002 fd95 	bl	80146bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	7a1b      	ldrb	r3, [r3, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00b      	beq.n	8011bb2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	7a1a      	ldrb	r2, [r3, #8]
 8011b9e:	4b21      	ldr	r3, [pc, #132]	; (8011c24 <udp_input_local_match+0xc4>)
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d001      	beq.n	8011bb2 <udp_input_local_match+0x52>
    return 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e02b      	b.n	8011c0a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011bb2:	79fb      	ldrb	r3, [r7, #7]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d018      	beq.n	8011bea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d013      	beq.n	8011be6 <udp_input_local_match+0x86>
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00f      	beq.n	8011be6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011bc6:	4b17      	ldr	r3, [pc, #92]	; (8011c24 <udp_input_local_match+0xc4>)
 8011bc8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bce:	d00a      	beq.n	8011be6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	4b13      	ldr	r3, [pc, #76]	; (8011c24 <udp_input_local_match+0xc4>)
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	405a      	eors	r2, r3
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	3308      	adds	r3, #8
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d110      	bne.n	8011c08 <udp_input_local_match+0xa8>
          return 1;
 8011be6:	2301      	movs	r3, #1
 8011be8:	e00f      	b.n	8011c0a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d009      	beq.n	8011c04 <udp_input_local_match+0xa4>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d005      	beq.n	8011c04 <udp_input_local_match+0xa4>
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <udp_input_local_match+0xc4>)
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d101      	bne.n	8011c08 <udp_input_local_match+0xa8>
        return 1;
 8011c04:	2301      	movs	r3, #1
 8011c06:	e000      	b.n	8011c0a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	08017818 	.word	0x08017818
 8011c18:	08017848 	.word	0x08017848
 8011c1c:	0801786c 	.word	0x0801786c
 8011c20:	08017894 	.word	0x08017894
 8011c24:	200057d8 	.word	0x200057d8

08011c28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011c28:	b590      	push	{r4, r7, lr}
 8011c2a:	b08d      	sub	sp, #52	; 0x34
 8011c2c:	af02      	add	r7, sp, #8
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d105      	bne.n	8011c48 <udp_input+0x20>
 8011c3c:	4b7c      	ldr	r3, [pc, #496]	; (8011e30 <udp_input+0x208>)
 8011c3e:	22cf      	movs	r2, #207	; 0xcf
 8011c40:	497c      	ldr	r1, [pc, #496]	; (8011e34 <udp_input+0x20c>)
 8011c42:	487d      	ldr	r0, [pc, #500]	; (8011e38 <udp_input+0x210>)
 8011c44:	f002 fd3a 	bl	80146bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d105      	bne.n	8011c5a <udp_input+0x32>
 8011c4e:	4b78      	ldr	r3, [pc, #480]	; (8011e30 <udp_input+0x208>)
 8011c50:	22d0      	movs	r2, #208	; 0xd0
 8011c52:	497a      	ldr	r1, [pc, #488]	; (8011e3c <udp_input+0x214>)
 8011c54:	4878      	ldr	r0, [pc, #480]	; (8011e38 <udp_input+0x210>)
 8011c56:	f002 fd31 	bl	80146bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	895b      	ldrh	r3, [r3, #10]
 8011c5e:	2b07      	cmp	r3, #7
 8011c60:	d803      	bhi.n	8011c6a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f7fa fa78 	bl	800c158 <pbuf_free>
    goto end;
 8011c68:	e0de      	b.n	8011e28 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011c70:	4b73      	ldr	r3, [pc, #460]	; (8011e40 <udp_input+0x218>)
 8011c72:	695b      	ldr	r3, [r3, #20]
 8011c74:	4a72      	ldr	r2, [pc, #456]	; (8011e40 <udp_input+0x218>)
 8011c76:	6812      	ldr	r2, [r2, #0]
 8011c78:	4611      	mov	r1, r2
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f001 fc88 	bl	8013590 <ip4_addr_isbroadcast_u32>
 8011c80:	4603      	mov	r3, r0
 8011c82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	881b      	ldrh	r3, [r3, #0]
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7f8 ff26 	bl	800aadc <lwip_htons>
 8011c90:	4603      	mov	r3, r0
 8011c92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	885b      	ldrh	r3, [r3, #2]
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f8 ff1e 	bl	800aadc <lwip_htons>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011cac:	2300      	movs	r3, #0
 8011cae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cb0:	4b64      	ldr	r3, [pc, #400]	; (8011e44 <udp_input+0x21c>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8011cb6:	e054      	b.n	8011d62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	8a5b      	ldrh	r3, [r3, #18]
 8011cbc:	89fa      	ldrh	r2, [r7, #14]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d14a      	bne.n	8011d58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011cc2:	7cfb      	ldrb	r3, [r7, #19]
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cca:	f7ff ff49 	bl	8011b60 <udp_input_local_match>
 8011cce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d041      	beq.n	8011d58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	7c1b      	ldrb	r3, [r3, #16]
 8011cd8:	f003 0304 	and.w	r3, r3, #4
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d11d      	bne.n	8011d1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d102      	bne.n	8011cec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	61fb      	str	r3, [r7, #28]
 8011cea:	e017      	b.n	8011d1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011cec:	7cfb      	ldrb	r3, [r7, #19]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d014      	beq.n	8011d1c <udp_input+0xf4>
 8011cf2:	4b53      	ldr	r3, [pc, #332]	; (8011e40 <udp_input+0x218>)
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfa:	d10f      	bne.n	8011d1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	3304      	adds	r3, #4
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d008      	beq.n	8011d1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	3304      	adds	r3, #4
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d101      	bne.n	8011d1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	8a9b      	ldrh	r3, [r3, #20]
 8011d20:	8a3a      	ldrh	r2, [r7, #16]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d118      	bne.n	8011d58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d005      	beq.n	8011d3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d30:	685a      	ldr	r2, [r3, #4]
 8011d32:	4b43      	ldr	r3, [pc, #268]	; (8011e40 <udp_input+0x218>)
 8011d34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d10e      	bne.n	8011d58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d014      	beq.n	8011d6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	68da      	ldr	r2, [r3, #12]
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011d48:	4b3e      	ldr	r3, [pc, #248]	; (8011e44 <udp_input+0x21c>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011d50:	4a3c      	ldr	r2, [pc, #240]	; (8011e44 <udp_input+0x21c>)
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011d56:	e008      	b.n	8011d6a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	627b      	str	r3, [r7, #36]	; 0x24
 8011d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1a7      	bne.n	8011cb8 <udp_input+0x90>
 8011d68:	e000      	b.n	8011d6c <udp_input+0x144>
        break;
 8011d6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d101      	bne.n	8011d76 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d002      	beq.n	8011d82 <udp_input+0x15a>
    for_us = 1;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	76fb      	strb	r3, [r7, #27]
 8011d80:	e00a      	b.n	8011d98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	3304      	adds	r3, #4
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	4b2d      	ldr	r3, [pc, #180]	; (8011e40 <udp_input+0x218>)
 8011d8a:	695b      	ldr	r3, [r3, #20]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	bf0c      	ite	eq
 8011d90:	2301      	moveq	r3, #1
 8011d92:	2300      	movne	r3, #0
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011d98:	7efb      	ldrb	r3, [r7, #27]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d041      	beq.n	8011e22 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011d9e:	2108      	movs	r1, #8
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7fa f953 	bl	800c04c <pbuf_remove_header>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00a      	beq.n	8011dc2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011dac:	4b20      	ldr	r3, [pc, #128]	; (8011e30 <udp_input+0x208>)
 8011dae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011db2:	4925      	ldr	r1, [pc, #148]	; (8011e48 <udp_input+0x220>)
 8011db4:	4820      	ldr	r0, [pc, #128]	; (8011e38 <udp_input+0x210>)
 8011db6:	f002 fc81 	bl	80146bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7fa f9cc 	bl	800c158 <pbuf_free>
      goto end;
 8011dc0:	e032      	b.n	8011e28 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d012      	beq.n	8011dee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dca:	699b      	ldr	r3, [r3, #24]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	699c      	ldr	r4, [r3, #24]
 8011dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd6:	69d8      	ldr	r0, [r3, #28]
 8011dd8:	8a3b      	ldrh	r3, [r7, #16]
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	4b1b      	ldr	r3, [pc, #108]	; (8011e4c <udp_input+0x224>)
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011de2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011de4:	e021      	b.n	8011e2a <udp_input+0x202>
        pbuf_free(p);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7fa f9b6 	bl	800c158 <pbuf_free>
        goto end;
 8011dec:	e01c      	b.n	8011e28 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011dee:	7cfb      	ldrb	r3, [r7, #19]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d112      	bne.n	8011e1a <udp_input+0x1f2>
 8011df4:	4b12      	ldr	r3, [pc, #72]	; (8011e40 <udp_input+0x218>)
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dfc:	2be0      	cmp	r3, #224	; 0xe0
 8011dfe:	d00c      	beq.n	8011e1a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011e00:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <udp_input+0x218>)
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	3308      	adds	r3, #8
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	b21b      	sxth	r3, r3
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7fa f990 	bl	800c132 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011e12:	2103      	movs	r1, #3
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f001 f89b 	bl	8012f50 <icmp_dest_unreach>
      pbuf_free(p);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7fa f99c 	bl	800c158 <pbuf_free>
  return;
 8011e20:	e003      	b.n	8011e2a <udp_input+0x202>
    pbuf_free(p);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f7fa f998 	bl	800c158 <pbuf_free>
  return;
 8011e28:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011e2a:	372c      	adds	r7, #44	; 0x2c
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd90      	pop	{r4, r7, pc}
 8011e30:	08017818 	.word	0x08017818
 8011e34:	080178bc 	.word	0x080178bc
 8011e38:	0801786c 	.word	0x0801786c
 8011e3c:	080178d4 	.word	0x080178d4
 8011e40:	200057d8 	.word	0x200057d8
 8011e44:	20008da4 	.word	0x20008da4
 8011e48:	080178f0 	.word	0x080178f0
 8011e4c:	200057e8 	.word	0x200057e8

08011e50 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b085      	sub	sp, #20
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d01e      	beq.n	8011e9e <udp_netif_ip_addr_changed+0x4e>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d01a      	beq.n	8011e9e <udp_netif_ip_addr_changed+0x4e>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d017      	beq.n	8011e9e <udp_netif_ip_addr_changed+0x4e>
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d013      	beq.n	8011e9e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e76:	4b0d      	ldr	r3, [pc, #52]	; (8011eac <udp_netif_ip_addr_changed+0x5c>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	60fb      	str	r3, [r7, #12]
 8011e7c:	e00c      	b.n	8011e98 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d103      	bne.n	8011e92 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	60fb      	str	r3, [r7, #12]
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d1ef      	bne.n	8011e7e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e9e:	bf00      	nop
 8011ea0:	3714      	adds	r7, #20
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	20008da4 	.word	0x20008da4

08011eb0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011eb8:	4915      	ldr	r1, [pc, #84]	; (8011f10 <etharp_free_entry+0x60>)
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	005b      	lsls	r3, r3, #1
 8011ec0:	4413      	add	r3, r2
 8011ec2:	00db      	lsls	r3, r3, #3
 8011ec4:	440b      	add	r3, r1
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d013      	beq.n	8011ef4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011ecc:	4910      	ldr	r1, [pc, #64]	; (8011f10 <etharp_free_entry+0x60>)
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	005b      	lsls	r3, r3, #1
 8011ed4:	4413      	add	r3, r2
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	440b      	add	r3, r1
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fa f93b 	bl	800c158 <pbuf_free>
    arp_table[i].q = NULL;
 8011ee2:	490b      	ldr	r1, [pc, #44]	; (8011f10 <etharp_free_entry+0x60>)
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	005b      	lsls	r3, r3, #1
 8011eea:	4413      	add	r3, r2
 8011eec:	00db      	lsls	r3, r3, #3
 8011eee:	440b      	add	r3, r1
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011ef4:	4906      	ldr	r1, [pc, #24]	; (8011f10 <etharp_free_entry+0x60>)
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	4413      	add	r3, r2
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	440b      	add	r3, r1
 8011f02:	3314      	adds	r3, #20
 8011f04:	2200      	movs	r2, #0
 8011f06:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011f08:	bf00      	nop
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20008da8 	.word	0x20008da8

08011f14 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	607b      	str	r3, [r7, #4]
 8011f1e:	e096      	b.n	801204e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011f20:	494f      	ldr	r1, [pc, #316]	; (8012060 <etharp_tmr+0x14c>)
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	4613      	mov	r3, r2
 8011f26:	005b      	lsls	r3, r3, #1
 8011f28:	4413      	add	r3, r2
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	440b      	add	r3, r1
 8011f2e:	3314      	adds	r3, #20
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	f000 8086 	beq.w	8012048 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011f3c:	4948      	ldr	r1, [pc, #288]	; (8012060 <etharp_tmr+0x14c>)
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	4613      	mov	r3, r2
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	440b      	add	r3, r1
 8011f4a:	3312      	adds	r3, #18
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	b298      	uxth	r0, r3
 8011f52:	4943      	ldr	r1, [pc, #268]	; (8012060 <etharp_tmr+0x14c>)
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	4613      	mov	r3, r2
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	4413      	add	r3, r2
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	440b      	add	r3, r1
 8011f60:	3312      	adds	r3, #18
 8011f62:	4602      	mov	r2, r0
 8011f64:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f66:	493e      	ldr	r1, [pc, #248]	; (8012060 <etharp_tmr+0x14c>)
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	3312      	adds	r3, #18
 8011f76:	881b      	ldrh	r3, [r3, #0]
 8011f78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011f7c:	d215      	bcs.n	8011faa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011f7e:	4938      	ldr	r1, [pc, #224]	; (8012060 <etharp_tmr+0x14c>)
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	4613      	mov	r3, r2
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	4413      	add	r3, r2
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	440b      	add	r3, r1
 8011f8c:	3314      	adds	r3, #20
 8011f8e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d10e      	bne.n	8011fb2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011f94:	4932      	ldr	r1, [pc, #200]	; (8012060 <etharp_tmr+0x14c>)
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	4613      	mov	r3, r2
 8011f9a:	005b      	lsls	r3, r3, #1
 8011f9c:	4413      	add	r3, r2
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	440b      	add	r3, r1
 8011fa2:	3312      	adds	r3, #18
 8011fa4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011fa6:	2b04      	cmp	r3, #4
 8011fa8:	d903      	bls.n	8011fb2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f7ff ff80 	bl	8011eb0 <etharp_free_entry>
 8011fb0:	e04a      	b.n	8012048 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011fb2:	492b      	ldr	r1, [pc, #172]	; (8012060 <etharp_tmr+0x14c>)
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4413      	add	r3, r2
 8011fbc:	00db      	lsls	r3, r3, #3
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3314      	adds	r3, #20
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	2b03      	cmp	r3, #3
 8011fc6:	d10a      	bne.n	8011fde <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011fc8:	4925      	ldr	r1, [pc, #148]	; (8012060 <etharp_tmr+0x14c>)
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	4613      	mov	r3, r2
 8011fce:	005b      	lsls	r3, r3, #1
 8011fd0:	4413      	add	r3, r2
 8011fd2:	00db      	lsls	r3, r3, #3
 8011fd4:	440b      	add	r3, r1
 8011fd6:	3314      	adds	r3, #20
 8011fd8:	2204      	movs	r2, #4
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	e034      	b.n	8012048 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011fde:	4920      	ldr	r1, [pc, #128]	; (8012060 <etharp_tmr+0x14c>)
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	4413      	add	r3, r2
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	440b      	add	r3, r1
 8011fec:	3314      	adds	r3, #20
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	2b04      	cmp	r3, #4
 8011ff2:	d10a      	bne.n	801200a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011ff4:	491a      	ldr	r1, [pc, #104]	; (8012060 <etharp_tmr+0x14c>)
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	440b      	add	r3, r1
 8012002:	3314      	adds	r3, #20
 8012004:	2202      	movs	r2, #2
 8012006:	701a      	strb	r2, [r3, #0]
 8012008:	e01e      	b.n	8012048 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801200a:	4915      	ldr	r1, [pc, #84]	; (8012060 <etharp_tmr+0x14c>)
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	4613      	mov	r3, r2
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	4413      	add	r3, r2
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	440b      	add	r3, r1
 8012018:	3314      	adds	r3, #20
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d113      	bne.n	8012048 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012020:	490f      	ldr	r1, [pc, #60]	; (8012060 <etharp_tmr+0x14c>)
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	4613      	mov	r3, r2
 8012026:	005b      	lsls	r3, r3, #1
 8012028:	4413      	add	r3, r2
 801202a:	00db      	lsls	r3, r3, #3
 801202c:	440b      	add	r3, r1
 801202e:	3308      	adds	r3, #8
 8012030:	6818      	ldr	r0, [r3, #0]
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	4613      	mov	r3, r2
 8012036:	005b      	lsls	r3, r3, #1
 8012038:	4413      	add	r3, r2
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	4a08      	ldr	r2, [pc, #32]	; (8012060 <etharp_tmr+0x14c>)
 801203e:	4413      	add	r3, r2
 8012040:	3304      	adds	r3, #4
 8012042:	4619      	mov	r1, r3
 8012044:	f000 fe6e 	bl	8012d24 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	3301      	adds	r3, #1
 801204c:	607b      	str	r3, [r7, #4]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b09      	cmp	r3, #9
 8012052:	f77f af65 	ble.w	8011f20 <etharp_tmr+0xc>
      }
    }
  }
}
 8012056:	bf00      	nop
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}
 8012060:	20008da8 	.word	0x20008da8

08012064 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b08a      	sub	sp, #40	; 0x28
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	460b      	mov	r3, r1
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012072:	230a      	movs	r3, #10
 8012074:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012076:	230a      	movs	r3, #10
 8012078:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801207a:	230a      	movs	r3, #10
 801207c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012082:	230a      	movs	r3, #10
 8012084:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012086:	2300      	movs	r3, #0
 8012088:	83bb      	strh	r3, [r7, #28]
 801208a:	2300      	movs	r3, #0
 801208c:	837b      	strh	r3, [r7, #26]
 801208e:	2300      	movs	r3, #0
 8012090:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012092:	2300      	movs	r3, #0
 8012094:	843b      	strh	r3, [r7, #32]
 8012096:	e0ae      	b.n	80121f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801209c:	49a6      	ldr	r1, [pc, #664]	; (8012338 <etharp_find_entry+0x2d4>)
 801209e:	4613      	mov	r3, r2
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	4413      	add	r3, r2
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	440b      	add	r3, r1
 80120a8:	3314      	adds	r3, #20
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80120ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80120b2:	2b0a      	cmp	r3, #10
 80120b4:	d105      	bne.n	80120c2 <etharp_find_entry+0x5e>
 80120b6:	7dfb      	ldrb	r3, [r7, #23]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d102      	bne.n	80120c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80120bc:	8c3b      	ldrh	r3, [r7, #32]
 80120be:	847b      	strh	r3, [r7, #34]	; 0x22
 80120c0:	e095      	b.n	80121ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80120c2:	7dfb      	ldrb	r3, [r7, #23]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f000 8092 	beq.w	80121ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80120ca:	7dfb      	ldrb	r3, [r7, #23]
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d009      	beq.n	80120e4 <etharp_find_entry+0x80>
 80120d0:	7dfb      	ldrb	r3, [r7, #23]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d806      	bhi.n	80120e4 <etharp_find_entry+0x80>
 80120d6:	4b99      	ldr	r3, [pc, #612]	; (801233c <etharp_find_entry+0x2d8>)
 80120d8:	f240 1223 	movw	r2, #291	; 0x123
 80120dc:	4998      	ldr	r1, [pc, #608]	; (8012340 <etharp_find_entry+0x2dc>)
 80120de:	4899      	ldr	r0, [pc, #612]	; (8012344 <etharp_find_entry+0x2e0>)
 80120e0:	f002 faec 	bl	80146bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d020      	beq.n	801212c <etharp_find_entry+0xc8>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	6819      	ldr	r1, [r3, #0]
 80120ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120f2:	4891      	ldr	r0, [pc, #580]	; (8012338 <etharp_find_entry+0x2d4>)
 80120f4:	4613      	mov	r3, r2
 80120f6:	005b      	lsls	r3, r3, #1
 80120f8:	4413      	add	r3, r2
 80120fa:	00db      	lsls	r3, r3, #3
 80120fc:	4403      	add	r3, r0
 80120fe:	3304      	adds	r3, #4
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4299      	cmp	r1, r3
 8012104:	d112      	bne.n	801212c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00c      	beq.n	8012126 <etharp_find_entry+0xc2>
 801210c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012110:	4989      	ldr	r1, [pc, #548]	; (8012338 <etharp_find_entry+0x2d4>)
 8012112:	4613      	mov	r3, r2
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	4413      	add	r3, r2
 8012118:	00db      	lsls	r3, r3, #3
 801211a:	440b      	add	r3, r1
 801211c:	3308      	adds	r3, #8
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	429a      	cmp	r2, r3
 8012124:	d102      	bne.n	801212c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012126:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801212a:	e100      	b.n	801232e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801212c:	7dfb      	ldrb	r3, [r7, #23]
 801212e:	2b01      	cmp	r3, #1
 8012130:	d140      	bne.n	80121b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012132:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012136:	4980      	ldr	r1, [pc, #512]	; (8012338 <etharp_find_entry+0x2d4>)
 8012138:	4613      	mov	r3, r2
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	4413      	add	r3, r2
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	440b      	add	r3, r1
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d01a      	beq.n	801217e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012148:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801214c:	497a      	ldr	r1, [pc, #488]	; (8012338 <etharp_find_entry+0x2d4>)
 801214e:	4613      	mov	r3, r2
 8012150:	005b      	lsls	r3, r3, #1
 8012152:	4413      	add	r3, r2
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	440b      	add	r3, r1
 8012158:	3312      	adds	r3, #18
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	8bba      	ldrh	r2, [r7, #28]
 801215e:	429a      	cmp	r2, r3
 8012160:	d845      	bhi.n	80121ee <etharp_find_entry+0x18a>
            old_queue = i;
 8012162:	8c3b      	ldrh	r3, [r7, #32]
 8012164:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801216a:	4973      	ldr	r1, [pc, #460]	; (8012338 <etharp_find_entry+0x2d4>)
 801216c:	4613      	mov	r3, r2
 801216e:	005b      	lsls	r3, r3, #1
 8012170:	4413      	add	r3, r2
 8012172:	00db      	lsls	r3, r3, #3
 8012174:	440b      	add	r3, r1
 8012176:	3312      	adds	r3, #18
 8012178:	881b      	ldrh	r3, [r3, #0]
 801217a:	83bb      	strh	r3, [r7, #28]
 801217c:	e037      	b.n	80121ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801217e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012182:	496d      	ldr	r1, [pc, #436]	; (8012338 <etharp_find_entry+0x2d4>)
 8012184:	4613      	mov	r3, r2
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	4413      	add	r3, r2
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	440b      	add	r3, r1
 801218e:	3312      	adds	r3, #18
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	8b7a      	ldrh	r2, [r7, #26]
 8012194:	429a      	cmp	r2, r3
 8012196:	d82a      	bhi.n	80121ee <etharp_find_entry+0x18a>
            old_pending = i;
 8012198:	8c3b      	ldrh	r3, [r7, #32]
 801219a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801219c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121a0:	4965      	ldr	r1, [pc, #404]	; (8012338 <etharp_find_entry+0x2d4>)
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	440b      	add	r3, r1
 80121ac:	3312      	adds	r3, #18
 80121ae:	881b      	ldrh	r3, [r3, #0]
 80121b0:	837b      	strh	r3, [r7, #26]
 80121b2:	e01c      	b.n	80121ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80121b4:	7dfb      	ldrb	r3, [r7, #23]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d919      	bls.n	80121ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80121ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121be:	495e      	ldr	r1, [pc, #376]	; (8012338 <etharp_find_entry+0x2d4>)
 80121c0:	4613      	mov	r3, r2
 80121c2:	005b      	lsls	r3, r3, #1
 80121c4:	4413      	add	r3, r2
 80121c6:	00db      	lsls	r3, r3, #3
 80121c8:	440b      	add	r3, r1
 80121ca:	3312      	adds	r3, #18
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	8b3a      	ldrh	r2, [r7, #24]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d80c      	bhi.n	80121ee <etharp_find_entry+0x18a>
            old_stable = i;
 80121d4:	8c3b      	ldrh	r3, [r7, #32]
 80121d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80121d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121dc:	4956      	ldr	r1, [pc, #344]	; (8012338 <etharp_find_entry+0x2d4>)
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	440b      	add	r3, r1
 80121e8:	3312      	adds	r3, #18
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121ee:	8c3b      	ldrh	r3, [r7, #32]
 80121f0:	3301      	adds	r3, #1
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	843b      	strh	r3, [r7, #32]
 80121f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121fa:	2b09      	cmp	r3, #9
 80121fc:	f77f af4c 	ble.w	8012098 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012200:	7afb      	ldrb	r3, [r7, #11]
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	2b00      	cmp	r3, #0
 8012208:	d108      	bne.n	801221c <etharp_find_entry+0x1b8>
 801220a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801220e:	2b0a      	cmp	r3, #10
 8012210:	d107      	bne.n	8012222 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012212:	7afb      	ldrb	r3, [r7, #11]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	d102      	bne.n	8012222 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801221c:	f04f 33ff 	mov.w	r3, #4294967295
 8012220:	e085      	b.n	801232e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012222:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012226:	2b09      	cmp	r3, #9
 8012228:	dc02      	bgt.n	8012230 <etharp_find_entry+0x1cc>
    i = empty;
 801222a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801222c:	843b      	strh	r3, [r7, #32]
 801222e:	e039      	b.n	80122a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012230:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012234:	2b09      	cmp	r3, #9
 8012236:	dc14      	bgt.n	8012262 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801223a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801223c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012240:	493d      	ldr	r1, [pc, #244]	; (8012338 <etharp_find_entry+0x2d4>)
 8012242:	4613      	mov	r3, r2
 8012244:	005b      	lsls	r3, r3, #1
 8012246:	4413      	add	r3, r2
 8012248:	00db      	lsls	r3, r3, #3
 801224a:	440b      	add	r3, r1
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d018      	beq.n	8012284 <etharp_find_entry+0x220>
 8012252:	4b3a      	ldr	r3, [pc, #232]	; (801233c <etharp_find_entry+0x2d8>)
 8012254:	f240 126d 	movw	r2, #365	; 0x16d
 8012258:	493b      	ldr	r1, [pc, #236]	; (8012348 <etharp_find_entry+0x2e4>)
 801225a:	483a      	ldr	r0, [pc, #232]	; (8012344 <etharp_find_entry+0x2e0>)
 801225c:	f002 fa2e 	bl	80146bc <iprintf>
 8012260:	e010      	b.n	8012284 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012262:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012266:	2b09      	cmp	r3, #9
 8012268:	dc02      	bgt.n	8012270 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801226a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801226c:	843b      	strh	r3, [r7, #32]
 801226e:	e009      	b.n	8012284 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012270:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012274:	2b09      	cmp	r3, #9
 8012276:	dc02      	bgt.n	801227e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012278:	8bfb      	ldrh	r3, [r7, #30]
 801227a:	843b      	strh	r3, [r7, #32]
 801227c:	e002      	b.n	8012284 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801227e:	f04f 33ff 	mov.w	r3, #4294967295
 8012282:	e054      	b.n	801232e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012284:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012288:	2b09      	cmp	r3, #9
 801228a:	dd06      	ble.n	801229a <etharp_find_entry+0x236>
 801228c:	4b2b      	ldr	r3, [pc, #172]	; (801233c <etharp_find_entry+0x2d8>)
 801228e:	f240 127f 	movw	r2, #383	; 0x17f
 8012292:	492e      	ldr	r1, [pc, #184]	; (801234c <etharp_find_entry+0x2e8>)
 8012294:	482b      	ldr	r0, [pc, #172]	; (8012344 <etharp_find_entry+0x2e0>)
 8012296:	f002 fa11 	bl	80146bc <iprintf>
    etharp_free_entry(i);
 801229a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff fe06 	bl	8011eb0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122a8:	2b09      	cmp	r3, #9
 80122aa:	dd06      	ble.n	80122ba <etharp_find_entry+0x256>
 80122ac:	4b23      	ldr	r3, [pc, #140]	; (801233c <etharp_find_entry+0x2d8>)
 80122ae:	f240 1283 	movw	r2, #387	; 0x183
 80122b2:	4926      	ldr	r1, [pc, #152]	; (801234c <etharp_find_entry+0x2e8>)
 80122b4:	4823      	ldr	r0, [pc, #140]	; (8012344 <etharp_find_entry+0x2e0>)
 80122b6:	f002 fa01 	bl	80146bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80122ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122be:	491e      	ldr	r1, [pc, #120]	; (8012338 <etharp_find_entry+0x2d4>)
 80122c0:	4613      	mov	r3, r2
 80122c2:	005b      	lsls	r3, r3, #1
 80122c4:	4413      	add	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	440b      	add	r3, r1
 80122ca:	3314      	adds	r3, #20
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <etharp_find_entry+0x27c>
 80122d2:	4b1a      	ldr	r3, [pc, #104]	; (801233c <etharp_find_entry+0x2d8>)
 80122d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80122d8:	491d      	ldr	r1, [pc, #116]	; (8012350 <etharp_find_entry+0x2ec>)
 80122da:	481a      	ldr	r0, [pc, #104]	; (8012344 <etharp_find_entry+0x2e0>)
 80122dc:	f002 f9ee 	bl	80146bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00b      	beq.n	80122fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80122e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6819      	ldr	r1, [r3, #0]
 80122ee:	4812      	ldr	r0, [pc, #72]	; (8012338 <etharp_find_entry+0x2d4>)
 80122f0:	4613      	mov	r3, r2
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	4413      	add	r3, r2
 80122f6:	00db      	lsls	r3, r3, #3
 80122f8:	4403      	add	r3, r0
 80122fa:	3304      	adds	r3, #4
 80122fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80122fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012302:	490d      	ldr	r1, [pc, #52]	; (8012338 <etharp_find_entry+0x2d4>)
 8012304:	4613      	mov	r3, r2
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	4413      	add	r3, r2
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	440b      	add	r3, r1
 801230e:	3312      	adds	r3, #18
 8012310:	2200      	movs	r2, #0
 8012312:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012314:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012318:	4907      	ldr	r1, [pc, #28]	; (8012338 <etharp_find_entry+0x2d4>)
 801231a:	4613      	mov	r3, r2
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	4413      	add	r3, r2
 8012320:	00db      	lsls	r3, r3, #3
 8012322:	440b      	add	r3, r1
 8012324:	3308      	adds	r3, #8
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801232a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3728      	adds	r7, #40	; 0x28
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20008da8 	.word	0x20008da8
 801233c:	08017b7c 	.word	0x08017b7c
 8012340:	08017bb4 	.word	0x08017bb4
 8012344:	08017bf4 	.word	0x08017bf4
 8012348:	08017c1c 	.word	0x08017c1c
 801234c:	08017c34 	.word	0x08017c34
 8012350:	08017c48 	.word	0x08017c48

08012354 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b088      	sub	sp, #32
 8012358:	af02      	add	r7, sp, #8
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012368:	2b06      	cmp	r3, #6
 801236a:	d006      	beq.n	801237a <etharp_update_arp_entry+0x26>
 801236c:	4b48      	ldr	r3, [pc, #288]	; (8012490 <etharp_update_arp_entry+0x13c>)
 801236e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012372:	4948      	ldr	r1, [pc, #288]	; (8012494 <etharp_update_arp_entry+0x140>)
 8012374:	4848      	ldr	r0, [pc, #288]	; (8012498 <etharp_update_arp_entry+0x144>)
 8012376:	f002 f9a1 	bl	80146bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d012      	beq.n	80123a6 <etharp_update_arp_entry+0x52>
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d00e      	beq.n	80123a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	68f9      	ldr	r1, [r7, #12]
 801238e:	4618      	mov	r0, r3
 8012390:	f001 f8fe 	bl	8013590 <ip4_addr_isbroadcast_u32>
 8012394:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012396:	2b00      	cmp	r3, #0
 8012398:	d105      	bne.n	80123a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123a2:	2be0      	cmp	r3, #224	; 0xe0
 80123a4:	d102      	bne.n	80123ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80123a6:	f06f 030f 	mvn.w	r3, #15
 80123aa:	e06c      	b.n	8012486 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80123ac:	78fb      	ldrb	r3, [r7, #3]
 80123ae:	68fa      	ldr	r2, [r7, #12]
 80123b0:	4619      	mov	r1, r3
 80123b2:	68b8      	ldr	r0, [r7, #8]
 80123b4:	f7ff fe56 	bl	8012064 <etharp_find_entry>
 80123b8:	4603      	mov	r3, r0
 80123ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80123bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	da02      	bge.n	80123ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80123c4:	8afb      	ldrh	r3, [r7, #22]
 80123c6:	b25b      	sxtb	r3, r3
 80123c8:	e05d      	b.n	8012486 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80123ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123ce:	4933      	ldr	r1, [pc, #204]	; (801249c <etharp_update_arp_entry+0x148>)
 80123d0:	4613      	mov	r3, r2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	4413      	add	r3, r2
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	440b      	add	r3, r1
 80123da:	3314      	adds	r3, #20
 80123dc:	2202      	movs	r2, #2
 80123de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80123e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123e4:	492d      	ldr	r1, [pc, #180]	; (801249c <etharp_update_arp_entry+0x148>)
 80123e6:	4613      	mov	r3, r2
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	00db      	lsls	r3, r3, #3
 80123ee:	440b      	add	r3, r1
 80123f0:	3308      	adds	r3, #8
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80123f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123fa:	4613      	mov	r3, r2
 80123fc:	005b      	lsls	r3, r3, #1
 80123fe:	4413      	add	r3, r2
 8012400:	00db      	lsls	r3, r3, #3
 8012402:	3308      	adds	r3, #8
 8012404:	4a25      	ldr	r2, [pc, #148]	; (801249c <etharp_update_arp_entry+0x148>)
 8012406:	4413      	add	r3, r2
 8012408:	3304      	adds	r3, #4
 801240a:	2206      	movs	r2, #6
 801240c:	6879      	ldr	r1, [r7, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	f002 f93e 	bl	8014690 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012418:	4920      	ldr	r1, [pc, #128]	; (801249c <etharp_update_arp_entry+0x148>)
 801241a:	4613      	mov	r3, r2
 801241c:	005b      	lsls	r3, r3, #1
 801241e:	4413      	add	r3, r2
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	440b      	add	r3, r1
 8012424:	3312      	adds	r3, #18
 8012426:	2200      	movs	r2, #0
 8012428:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801242a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801242e:	491b      	ldr	r1, [pc, #108]	; (801249c <etharp_update_arp_entry+0x148>)
 8012430:	4613      	mov	r3, r2
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	440b      	add	r3, r1
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d021      	beq.n	8012484 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012440:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012444:	4915      	ldr	r1, [pc, #84]	; (801249c <etharp_update_arp_entry+0x148>)
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	440b      	add	r3, r1
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012458:	4910      	ldr	r1, [pc, #64]	; (801249c <etharp_update_arp_entry+0x148>)
 801245a:	4613      	mov	r3, r2
 801245c:	005b      	lsls	r3, r3, #1
 801245e:	4413      	add	r3, r2
 8012460:	00db      	lsls	r3, r3, #3
 8012462:	440b      	add	r3, r1
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801246e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6939      	ldr	r1, [r7, #16]
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f001 ff97 	bl	80143ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801247e:	6938      	ldr	r0, [r7, #16]
 8012480:	f7f9 fe6a 	bl	800c158 <pbuf_free>
  }
  return ERR_OK;
 8012484:	2300      	movs	r3, #0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3718      	adds	r7, #24
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	08017b7c 	.word	0x08017b7c
 8012494:	08017c74 	.word	0x08017c74
 8012498:	08017bf4 	.word	0x08017bf4
 801249c:	20008da8 	.word	0x20008da8

080124a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124a8:	2300      	movs	r3, #0
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	e01e      	b.n	80124ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80124ae:	4913      	ldr	r1, [pc, #76]	; (80124fc <etharp_cleanup_netif+0x5c>)
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	4613      	mov	r3, r2
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	4413      	add	r3, r2
 80124b8:	00db      	lsls	r3, r3, #3
 80124ba:	440b      	add	r3, r1
 80124bc:	3314      	adds	r3, #20
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80124c2:	7afb      	ldrb	r3, [r7, #11]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00e      	beq.n	80124e6 <etharp_cleanup_netif+0x46>
 80124c8:	490c      	ldr	r1, [pc, #48]	; (80124fc <etharp_cleanup_netif+0x5c>)
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	4613      	mov	r3, r2
 80124ce:	005b      	lsls	r3, r3, #1
 80124d0:	4413      	add	r3, r2
 80124d2:	00db      	lsls	r3, r3, #3
 80124d4:	440b      	add	r3, r1
 80124d6:	3308      	adds	r3, #8
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d102      	bne.n	80124e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f7ff fce5 	bl	8011eb0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	3301      	adds	r3, #1
 80124ea:	60fb      	str	r3, [r7, #12]
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b09      	cmp	r3, #9
 80124f0:	dddd      	ble.n	80124ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80124f2:	bf00      	nop
 80124f4:	bf00      	nop
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	20008da8 	.word	0x20008da8

08012500 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012500:	b5b0      	push	{r4, r5, r7, lr}
 8012502:	b08a      	sub	sp, #40	; 0x28
 8012504:	af04      	add	r7, sp, #16
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d107      	bne.n	8012520 <etharp_input+0x20>
 8012510:	4b3d      	ldr	r3, [pc, #244]	; (8012608 <etharp_input+0x108>)
 8012512:	f240 228a 	movw	r2, #650	; 0x28a
 8012516:	493d      	ldr	r1, [pc, #244]	; (801260c <etharp_input+0x10c>)
 8012518:	483d      	ldr	r0, [pc, #244]	; (8012610 <etharp_input+0x110>)
 801251a:	f002 f8cf 	bl	80146bc <iprintf>
 801251e:	e06f      	b.n	8012600 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	b29b      	uxth	r3, r3
 801252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012530:	d10c      	bne.n	801254c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012536:	2b06      	cmp	r3, #6
 8012538:	d108      	bne.n	801254c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801253e:	2b04      	cmp	r3, #4
 8012540:	d104      	bne.n	801254c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	885b      	ldrh	r3, [r3, #2]
 8012546:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012548:	2b08      	cmp	r3, #8
 801254a:	d003      	beq.n	8012554 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7f9 fe03 	bl	800c158 <pbuf_free>
    return;
 8012552:	e055      	b.n	8012600 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	330e      	adds	r3, #14
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	3318      	adds	r3, #24
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	3304      	adds	r3, #4
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d102      	bne.n	8012574 <etharp_input+0x74>
    for_us = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	75fb      	strb	r3, [r7, #23]
 8012572:	e009      	b.n	8012588 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	3304      	adds	r3, #4
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	429a      	cmp	r2, r3
 801257e:	bf0c      	ite	eq
 8012580:	2301      	moveq	r3, #1
 8012582:	2300      	movne	r3, #0
 8012584:	b2db      	uxtb	r3, r3
 8012586:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	f103 0208 	add.w	r2, r3, #8
 801258e:	7dfb      	ldrb	r3, [r7, #23]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d001      	beq.n	8012598 <etharp_input+0x98>
 8012594:	2301      	movs	r3, #1
 8012596:	e000      	b.n	801259a <etharp_input+0x9a>
 8012598:	2302      	movs	r3, #2
 801259a:	f107 010c 	add.w	r1, r7, #12
 801259e:	6838      	ldr	r0, [r7, #0]
 80125a0:	f7ff fed8 	bl	8012354 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	88db      	ldrh	r3, [r3, #6]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125ae:	d003      	beq.n	80125b8 <etharp_input+0xb8>
 80125b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125b4:	d01e      	beq.n	80125f4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80125b6:	e020      	b.n	80125fa <etharp_input+0xfa>
      if (for_us) {
 80125b8:	7dfb      	ldrb	r3, [r7, #23]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d01c      	beq.n	80125f8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80125d4:	693a      	ldr	r2, [r7, #16]
 80125d6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80125d8:	2102      	movs	r1, #2
 80125da:	9103      	str	r1, [sp, #12]
 80125dc:	f107 010c 	add.w	r1, r7, #12
 80125e0:	9102      	str	r1, [sp, #8]
 80125e2:	9201      	str	r2, [sp, #4]
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	462b      	mov	r3, r5
 80125e8:	4622      	mov	r2, r4
 80125ea:	4601      	mov	r1, r0
 80125ec:	6838      	ldr	r0, [r7, #0]
 80125ee:	f000 faeb 	bl	8012bc8 <etharp_raw>
      break;
 80125f2:	e001      	b.n	80125f8 <etharp_input+0xf8>
      break;
 80125f4:	bf00      	nop
 80125f6:	e000      	b.n	80125fa <etharp_input+0xfa>
      break;
 80125f8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7f9 fdac 	bl	800c158 <pbuf_free>
}
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bdb0      	pop	{r4, r5, r7, pc}
 8012606:	bf00      	nop
 8012608:	08017b7c 	.word	0x08017b7c
 801260c:	08017ccc 	.word	0x08017ccc
 8012610:	08017bf4 	.word	0x08017bf4

08012614 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	af02      	add	r7, sp, #8
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	4613      	mov	r3, r2
 8012620:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012622:	79fa      	ldrb	r2, [r7, #7]
 8012624:	4944      	ldr	r1, [pc, #272]	; (8012738 <etharp_output_to_arp_index+0x124>)
 8012626:	4613      	mov	r3, r2
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	4413      	add	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	440b      	add	r3, r1
 8012630:	3314      	adds	r3, #20
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d806      	bhi.n	8012646 <etharp_output_to_arp_index+0x32>
 8012638:	4b40      	ldr	r3, [pc, #256]	; (801273c <etharp_output_to_arp_index+0x128>)
 801263a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801263e:	4940      	ldr	r1, [pc, #256]	; (8012740 <etharp_output_to_arp_index+0x12c>)
 8012640:	4840      	ldr	r0, [pc, #256]	; (8012744 <etharp_output_to_arp_index+0x130>)
 8012642:	f002 f83b 	bl	80146bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012646:	79fa      	ldrb	r2, [r7, #7]
 8012648:	493b      	ldr	r1, [pc, #236]	; (8012738 <etharp_output_to_arp_index+0x124>)
 801264a:	4613      	mov	r3, r2
 801264c:	005b      	lsls	r3, r3, #1
 801264e:	4413      	add	r3, r2
 8012650:	00db      	lsls	r3, r3, #3
 8012652:	440b      	add	r3, r1
 8012654:	3314      	adds	r3, #20
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	2b02      	cmp	r3, #2
 801265a:	d153      	bne.n	8012704 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801265c:	79fa      	ldrb	r2, [r7, #7]
 801265e:	4936      	ldr	r1, [pc, #216]	; (8012738 <etharp_output_to_arp_index+0x124>)
 8012660:	4613      	mov	r3, r2
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	4413      	add	r3, r2
 8012666:	00db      	lsls	r3, r3, #3
 8012668:	440b      	add	r3, r1
 801266a:	3312      	adds	r3, #18
 801266c:	881b      	ldrh	r3, [r3, #0]
 801266e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012672:	d919      	bls.n	80126a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012674:	79fa      	ldrb	r2, [r7, #7]
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	4a2e      	ldr	r2, [pc, #184]	; (8012738 <etharp_output_to_arp_index+0x124>)
 8012680:	4413      	add	r3, r2
 8012682:	3304      	adds	r3, #4
 8012684:	4619      	mov	r1, r3
 8012686:	68f8      	ldr	r0, [r7, #12]
 8012688:	f000 fb4c 	bl	8012d24 <etharp_request>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d138      	bne.n	8012704 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012692:	79fa      	ldrb	r2, [r7, #7]
 8012694:	4928      	ldr	r1, [pc, #160]	; (8012738 <etharp_output_to_arp_index+0x124>)
 8012696:	4613      	mov	r3, r2
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	4413      	add	r3, r2
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	440b      	add	r3, r1
 80126a0:	3314      	adds	r3, #20
 80126a2:	2203      	movs	r2, #3
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	e02d      	b.n	8012704 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80126a8:	79fa      	ldrb	r2, [r7, #7]
 80126aa:	4923      	ldr	r1, [pc, #140]	; (8012738 <etharp_output_to_arp_index+0x124>)
 80126ac:	4613      	mov	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	440b      	add	r3, r1
 80126b6:	3312      	adds	r3, #18
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80126be:	d321      	bcc.n	8012704 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80126c0:	79fa      	ldrb	r2, [r7, #7]
 80126c2:	4613      	mov	r3, r2
 80126c4:	005b      	lsls	r3, r3, #1
 80126c6:	4413      	add	r3, r2
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	4a1b      	ldr	r2, [pc, #108]	; (8012738 <etharp_output_to_arp_index+0x124>)
 80126cc:	4413      	add	r3, r2
 80126ce:	1d19      	adds	r1, r3, #4
 80126d0:	79fa      	ldrb	r2, [r7, #7]
 80126d2:	4613      	mov	r3, r2
 80126d4:	005b      	lsls	r3, r3, #1
 80126d6:	4413      	add	r3, r2
 80126d8:	00db      	lsls	r3, r3, #3
 80126da:	3308      	adds	r3, #8
 80126dc:	4a16      	ldr	r2, [pc, #88]	; (8012738 <etharp_output_to_arp_index+0x124>)
 80126de:	4413      	add	r3, r2
 80126e0:	3304      	adds	r3, #4
 80126e2:	461a      	mov	r2, r3
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 fafb 	bl	8012ce0 <etharp_request_dst>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d109      	bne.n	8012704 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126f0:	79fa      	ldrb	r2, [r7, #7]
 80126f2:	4911      	ldr	r1, [pc, #68]	; (8012738 <etharp_output_to_arp_index+0x124>)
 80126f4:	4613      	mov	r3, r2
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	4413      	add	r3, r2
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	440b      	add	r3, r1
 80126fe:	3314      	adds	r3, #20
 8012700:	2203      	movs	r2, #3
 8012702:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801270a:	79fa      	ldrb	r2, [r7, #7]
 801270c:	4613      	mov	r3, r2
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	4413      	add	r3, r2
 8012712:	00db      	lsls	r3, r3, #3
 8012714:	3308      	adds	r3, #8
 8012716:	4a08      	ldr	r2, [pc, #32]	; (8012738 <etharp_output_to_arp_index+0x124>)
 8012718:	4413      	add	r3, r2
 801271a:	3304      	adds	r3, #4
 801271c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012720:	9200      	str	r2, [sp, #0]
 8012722:	460a      	mov	r2, r1
 8012724:	68b9      	ldr	r1, [r7, #8]
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f001 fe40 	bl	80143ac <ethernet_output>
 801272c:	4603      	mov	r3, r0
}
 801272e:	4618      	mov	r0, r3
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20008da8 	.word	0x20008da8
 801273c:	08017b7c 	.word	0x08017b7c
 8012740:	08017cec 	.word	0x08017cec
 8012744:	08017bf4 	.word	0x08017bf4

08012748 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b08a      	sub	sp, #40	; 0x28
 801274c:	af02      	add	r7, sp, #8
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d106      	bne.n	801276c <etharp_output+0x24>
 801275e:	4b73      	ldr	r3, [pc, #460]	; (801292c <etharp_output+0x1e4>)
 8012760:	f240 321e 	movw	r2, #798	; 0x31e
 8012764:	4972      	ldr	r1, [pc, #456]	; (8012930 <etharp_output+0x1e8>)
 8012766:	4873      	ldr	r0, [pc, #460]	; (8012934 <etharp_output+0x1ec>)
 8012768:	f001 ffa8 	bl	80146bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d106      	bne.n	8012780 <etharp_output+0x38>
 8012772:	4b6e      	ldr	r3, [pc, #440]	; (801292c <etharp_output+0x1e4>)
 8012774:	f240 321f 	movw	r2, #799	; 0x31f
 8012778:	496f      	ldr	r1, [pc, #444]	; (8012938 <etharp_output+0x1f0>)
 801277a:	486e      	ldr	r0, [pc, #440]	; (8012934 <etharp_output+0x1ec>)
 801277c:	f001 ff9e 	bl	80146bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <etharp_output+0x4c>
 8012786:	4b69      	ldr	r3, [pc, #420]	; (801292c <etharp_output+0x1e4>)
 8012788:	f44f 7248 	mov.w	r2, #800	; 0x320
 801278c:	496b      	ldr	r1, [pc, #428]	; (801293c <etharp_output+0x1f4>)
 801278e:	4869      	ldr	r0, [pc, #420]	; (8012934 <etharp_output+0x1ec>)
 8012790:	f001 ff94 	bl	80146bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	68f9      	ldr	r1, [r7, #12]
 801279a:	4618      	mov	r0, r3
 801279c:	f000 fef8 	bl	8013590 <ip4_addr_isbroadcast_u32>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80127a6:	4b66      	ldr	r3, [pc, #408]	; (8012940 <etharp_output+0x1f8>)
 80127a8:	61fb      	str	r3, [r7, #28]
 80127aa:	e0af      	b.n	801290c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127b4:	2be0      	cmp	r3, #224	; 0xe0
 80127b6:	d118      	bne.n	80127ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80127b8:	2301      	movs	r3, #1
 80127ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80127bc:	2300      	movs	r3, #0
 80127be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80127c0:	235e      	movs	r3, #94	; 0x5e
 80127c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3301      	adds	r3, #1
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	3302      	adds	r3, #2
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3303      	adds	r3, #3
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80127e2:	f107 0310 	add.w	r3, r7, #16
 80127e6:	61fb      	str	r3, [r7, #28]
 80127e8:	e090      	b.n	801290c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	3304      	adds	r3, #4
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	405a      	eors	r2, r3
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	3308      	adds	r3, #8
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4013      	ands	r3, r2
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d012      	beq.n	8012828 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012808:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801280c:	4293      	cmp	r3, r2
 801280e:	d00b      	beq.n	8012828 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	330c      	adds	r3, #12
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d003      	beq.n	8012822 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	330c      	adds	r3, #12
 801281e:	61bb      	str	r3, [r7, #24]
 8012820:	e002      	b.n	8012828 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012822:	f06f 0303 	mvn.w	r3, #3
 8012826:	e07d      	b.n	8012924 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012828:	4b46      	ldr	r3, [pc, #280]	; (8012944 <etharp_output+0x1fc>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	4619      	mov	r1, r3
 801282e:	4a46      	ldr	r2, [pc, #280]	; (8012948 <etharp_output+0x200>)
 8012830:	460b      	mov	r3, r1
 8012832:	005b      	lsls	r3, r3, #1
 8012834:	440b      	add	r3, r1
 8012836:	00db      	lsls	r3, r3, #3
 8012838:	4413      	add	r3, r2
 801283a:	3314      	adds	r3, #20
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d925      	bls.n	801288e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012842:	4b40      	ldr	r3, [pc, #256]	; (8012944 <etharp_output+0x1fc>)
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	4619      	mov	r1, r3
 8012848:	4a3f      	ldr	r2, [pc, #252]	; (8012948 <etharp_output+0x200>)
 801284a:	460b      	mov	r3, r1
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	440b      	add	r3, r1
 8012850:	00db      	lsls	r3, r3, #3
 8012852:	4413      	add	r3, r2
 8012854:	3308      	adds	r3, #8
 8012856:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	429a      	cmp	r2, r3
 801285c:	d117      	bne.n	801288e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	4b38      	ldr	r3, [pc, #224]	; (8012944 <etharp_output+0x1fc>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	4618      	mov	r0, r3
 8012868:	4937      	ldr	r1, [pc, #220]	; (8012948 <etharp_output+0x200>)
 801286a:	4603      	mov	r3, r0
 801286c:	005b      	lsls	r3, r3, #1
 801286e:	4403      	add	r3, r0
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	440b      	add	r3, r1
 8012874:	3304      	adds	r3, #4
 8012876:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012878:	429a      	cmp	r2, r3
 801287a:	d108      	bne.n	801288e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801287c:	4b31      	ldr	r3, [pc, #196]	; (8012944 <etharp_output+0x1fc>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	461a      	mov	r2, r3
 8012882:	68b9      	ldr	r1, [r7, #8]
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f7ff fec5 	bl	8012614 <etharp_output_to_arp_index>
 801288a:	4603      	mov	r3, r0
 801288c:	e04a      	b.n	8012924 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801288e:	2300      	movs	r3, #0
 8012890:	75fb      	strb	r3, [r7, #23]
 8012892:	e031      	b.n	80128f8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012894:	7dfa      	ldrb	r2, [r7, #23]
 8012896:	492c      	ldr	r1, [pc, #176]	; (8012948 <etharp_output+0x200>)
 8012898:	4613      	mov	r3, r2
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	4413      	add	r3, r2
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	440b      	add	r3, r1
 80128a2:	3314      	adds	r3, #20
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d923      	bls.n	80128f2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80128aa:	7dfa      	ldrb	r2, [r7, #23]
 80128ac:	4926      	ldr	r1, [pc, #152]	; (8012948 <etharp_output+0x200>)
 80128ae:	4613      	mov	r3, r2
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	4413      	add	r3, r2
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	440b      	add	r3, r1
 80128b8:	3308      	adds	r3, #8
 80128ba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d117      	bne.n	80128f2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	6819      	ldr	r1, [r3, #0]
 80128c6:	7dfa      	ldrb	r2, [r7, #23]
 80128c8:	481f      	ldr	r0, [pc, #124]	; (8012948 <etharp_output+0x200>)
 80128ca:	4613      	mov	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	4403      	add	r3, r0
 80128d4:	3304      	adds	r3, #4
 80128d6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80128d8:	4299      	cmp	r1, r3
 80128da:	d10a      	bne.n	80128f2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80128dc:	4a19      	ldr	r2, [pc, #100]	; (8012944 <etharp_output+0x1fc>)
 80128de:	7dfb      	ldrb	r3, [r7, #23]
 80128e0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
 80128e4:	461a      	mov	r2, r3
 80128e6:	68b9      	ldr	r1, [r7, #8]
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f7ff fe93 	bl	8012614 <etharp_output_to_arp_index>
 80128ee:	4603      	mov	r3, r0
 80128f0:	e018      	b.n	8012924 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80128f2:	7dfb      	ldrb	r3, [r7, #23]
 80128f4:	3301      	adds	r3, #1
 80128f6:	75fb      	strb	r3, [r7, #23]
 80128f8:	7dfb      	ldrb	r3, [r7, #23]
 80128fa:	2b09      	cmp	r3, #9
 80128fc:	d9ca      	bls.n	8012894 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	69b9      	ldr	r1, [r7, #24]
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f000 f822 	bl	801294c <etharp_query>
 8012908:	4603      	mov	r3, r0
 801290a:	e00b      	b.n	8012924 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012916:	9300      	str	r3, [sp, #0]
 8012918:	69fb      	ldr	r3, [r7, #28]
 801291a:	68b9      	ldr	r1, [r7, #8]
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f001 fd45 	bl	80143ac <ethernet_output>
 8012922:	4603      	mov	r3, r0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3720      	adds	r7, #32
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}
 801292c:	08017b7c 	.word	0x08017b7c
 8012930:	08017ccc 	.word	0x08017ccc
 8012934:	08017bf4 	.word	0x08017bf4
 8012938:	08017d1c 	.word	0x08017d1c
 801293c:	08017cbc 	.word	0x08017cbc
 8012940:	08018398 	.word	0x08018398
 8012944:	20008e98 	.word	0x20008e98
 8012948:	20008da8 	.word	0x20008da8

0801294c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b08c      	sub	sp, #48	; 0x30
 8012950:	af02      	add	r7, sp, #8
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	3326      	adds	r3, #38	; 0x26
 801295c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801295e:	23ff      	movs	r3, #255	; 0xff
 8012960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012964:	2300      	movs	r3, #0
 8012966:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	68f9      	ldr	r1, [r7, #12]
 801296e:	4618      	mov	r0, r3
 8012970:	f000 fe0e 	bl	8013590 <ip4_addr_isbroadcast_u32>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10c      	bne.n	8012994 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012982:	2be0      	cmp	r3, #224	; 0xe0
 8012984:	d006      	beq.n	8012994 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d003      	beq.n	8012994 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012994:	f06f 030f 	mvn.w	r3, #15
 8012998:	e101      	b.n	8012b9e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	2101      	movs	r1, #1
 801299e:	68b8      	ldr	r0, [r7, #8]
 80129a0:	f7ff fb60 	bl	8012064 <etharp_find_entry>
 80129a4:	4603      	mov	r3, r0
 80129a6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80129a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	da02      	bge.n	80129b6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80129b0:	8a7b      	ldrh	r3, [r7, #18]
 80129b2:	b25b      	sxtb	r3, r3
 80129b4:	e0f3      	b.n	8012b9e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80129b6:	8a7b      	ldrh	r3, [r7, #18]
 80129b8:	2b7e      	cmp	r3, #126	; 0x7e
 80129ba:	d906      	bls.n	80129ca <etharp_query+0x7e>
 80129bc:	4b7a      	ldr	r3, [pc, #488]	; (8012ba8 <etharp_query+0x25c>)
 80129be:	f240 32c1 	movw	r2, #961	; 0x3c1
 80129c2:	497a      	ldr	r1, [pc, #488]	; (8012bac <etharp_query+0x260>)
 80129c4:	487a      	ldr	r0, [pc, #488]	; (8012bb0 <etharp_query+0x264>)
 80129c6:	f001 fe79 	bl	80146bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80129ca:	8a7b      	ldrh	r3, [r7, #18]
 80129cc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80129ce:	7c7a      	ldrb	r2, [r7, #17]
 80129d0:	4978      	ldr	r1, [pc, #480]	; (8012bb4 <etharp_query+0x268>)
 80129d2:	4613      	mov	r3, r2
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	4413      	add	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	440b      	add	r3, r1
 80129dc:	3314      	adds	r3, #20
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d115      	bne.n	8012a10 <etharp_query+0xc4>
    is_new_entry = 1;
 80129e4:	2301      	movs	r3, #1
 80129e6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80129e8:	7c7a      	ldrb	r2, [r7, #17]
 80129ea:	4972      	ldr	r1, [pc, #456]	; (8012bb4 <etharp_query+0x268>)
 80129ec:	4613      	mov	r3, r2
 80129ee:	005b      	lsls	r3, r3, #1
 80129f0:	4413      	add	r3, r2
 80129f2:	00db      	lsls	r3, r3, #3
 80129f4:	440b      	add	r3, r1
 80129f6:	3314      	adds	r3, #20
 80129f8:	2201      	movs	r2, #1
 80129fa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80129fc:	7c7a      	ldrb	r2, [r7, #17]
 80129fe:	496d      	ldr	r1, [pc, #436]	; (8012bb4 <etharp_query+0x268>)
 8012a00:	4613      	mov	r3, r2
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	4413      	add	r3, r2
 8012a06:	00db      	lsls	r3, r3, #3
 8012a08:	440b      	add	r3, r1
 8012a0a:	3308      	adds	r3, #8
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012a10:	7c7a      	ldrb	r2, [r7, #17]
 8012a12:	4968      	ldr	r1, [pc, #416]	; (8012bb4 <etharp_query+0x268>)
 8012a14:	4613      	mov	r3, r2
 8012a16:	005b      	lsls	r3, r3, #1
 8012a18:	4413      	add	r3, r2
 8012a1a:	00db      	lsls	r3, r3, #3
 8012a1c:	440b      	add	r3, r1
 8012a1e:	3314      	adds	r3, #20
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d011      	beq.n	8012a4a <etharp_query+0xfe>
 8012a26:	7c7a      	ldrb	r2, [r7, #17]
 8012a28:	4962      	ldr	r1, [pc, #392]	; (8012bb4 <etharp_query+0x268>)
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	005b      	lsls	r3, r3, #1
 8012a2e:	4413      	add	r3, r2
 8012a30:	00db      	lsls	r3, r3, #3
 8012a32:	440b      	add	r3, r1
 8012a34:	3314      	adds	r3, #20
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d806      	bhi.n	8012a4a <etharp_query+0xfe>
 8012a3c:	4b5a      	ldr	r3, [pc, #360]	; (8012ba8 <etharp_query+0x25c>)
 8012a3e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012a42:	495d      	ldr	r1, [pc, #372]	; (8012bb8 <etharp_query+0x26c>)
 8012a44:	485a      	ldr	r0, [pc, #360]	; (8012bb0 <etharp_query+0x264>)
 8012a46:	f001 fe39 	bl	80146bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d102      	bne.n	8012a56 <etharp_query+0x10a>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d10c      	bne.n	8012a70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012a56:	68b9      	ldr	r1, [r7, #8]
 8012a58:	68f8      	ldr	r0, [r7, #12]
 8012a5a:	f000 f963 	bl	8012d24 <etharp_request>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d102      	bne.n	8012a70 <etharp_query+0x124>
      return result;
 8012a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a6e:	e096      	b.n	8012b9e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d106      	bne.n	8012a84 <etharp_query+0x138>
 8012a76:	4b4c      	ldr	r3, [pc, #304]	; (8012ba8 <etharp_query+0x25c>)
 8012a78:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012a7c:	494f      	ldr	r1, [pc, #316]	; (8012bbc <etharp_query+0x270>)
 8012a7e:	484c      	ldr	r0, [pc, #304]	; (8012bb0 <etharp_query+0x264>)
 8012a80:	f001 fe1c 	bl	80146bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012a84:	7c7a      	ldrb	r2, [r7, #17]
 8012a86:	494b      	ldr	r1, [pc, #300]	; (8012bb4 <etharp_query+0x268>)
 8012a88:	4613      	mov	r3, r2
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	440b      	add	r3, r1
 8012a92:	3314      	adds	r3, #20
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d917      	bls.n	8012aca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012a9a:	4a49      	ldr	r2, [pc, #292]	; (8012bc0 <etharp_query+0x274>)
 8012a9c:	7c7b      	ldrb	r3, [r7, #17]
 8012a9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012aa0:	7c7a      	ldrb	r2, [r7, #17]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	005b      	lsls	r3, r3, #1
 8012aa6:	4413      	add	r3, r2
 8012aa8:	00db      	lsls	r3, r3, #3
 8012aaa:	3308      	adds	r3, #8
 8012aac:	4a41      	ldr	r2, [pc, #260]	; (8012bb4 <etharp_query+0x268>)
 8012aae:	4413      	add	r3, r2
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ab6:	9200      	str	r2, [sp, #0]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	6879      	ldr	r1, [r7, #4]
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f001 fc75 	bl	80143ac <ethernet_output>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ac8:	e067      	b.n	8012b9a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012aca:	7c7a      	ldrb	r2, [r7, #17]
 8012acc:	4939      	ldr	r1, [pc, #228]	; (8012bb4 <etharp_query+0x268>)
 8012ace:	4613      	mov	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	440b      	add	r3, r1
 8012ad8:	3314      	adds	r3, #20
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d15c      	bne.n	8012b9a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012ae8:	e01c      	b.n	8012b24 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	895a      	ldrh	r2, [r3, #10]
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	891b      	ldrh	r3, [r3, #8]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d10a      	bne.n	8012b0c <etharp_query+0x1c0>
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d006      	beq.n	8012b0c <etharp_query+0x1c0>
 8012afe:	4b2a      	ldr	r3, [pc, #168]	; (8012ba8 <etharp_query+0x25c>)
 8012b00:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012b04:	492f      	ldr	r1, [pc, #188]	; (8012bc4 <etharp_query+0x278>)
 8012b06:	482a      	ldr	r0, [pc, #168]	; (8012bb0 <etharp_query+0x264>)
 8012b08:	f001 fdd8 	bl	80146bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	7b1b      	ldrb	r3, [r3, #12]
 8012b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <etharp_query+0x1d2>
        copy_needed = 1;
 8012b18:	2301      	movs	r3, #1
 8012b1a:	61bb      	str	r3, [r7, #24]
        break;
 8012b1c:	e005      	b.n	8012b2a <etharp_query+0x1de>
      }
      p = p->next;
 8012b1e:	69fb      	ldr	r3, [r7, #28]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1df      	bne.n	8012aea <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d007      	beq.n	8012b40 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012b36:	200e      	movs	r0, #14
 8012b38:	f7f9 fd6a 	bl	800c610 <pbuf_clone>
 8012b3c:	61f8      	str	r0, [r7, #28]
 8012b3e:	e004      	b.n	8012b4a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012b44:	69f8      	ldr	r0, [r7, #28]
 8012b46:	f7f9 fba7 	bl	800c298 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d021      	beq.n	8012b94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012b50:	7c7a      	ldrb	r2, [r7, #17]
 8012b52:	4918      	ldr	r1, [pc, #96]	; (8012bb4 <etharp_query+0x268>)
 8012b54:	4613      	mov	r3, r2
 8012b56:	005b      	lsls	r3, r3, #1
 8012b58:	4413      	add	r3, r2
 8012b5a:	00db      	lsls	r3, r3, #3
 8012b5c:	440b      	add	r3, r1
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d00a      	beq.n	8012b7a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012b64:	7c7a      	ldrb	r2, [r7, #17]
 8012b66:	4913      	ldr	r1, [pc, #76]	; (8012bb4 <etharp_query+0x268>)
 8012b68:	4613      	mov	r3, r2
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	4413      	add	r3, r2
 8012b6e:	00db      	lsls	r3, r3, #3
 8012b70:	440b      	add	r3, r1
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7f9 faef 	bl	800c158 <pbuf_free>
      }
      arp_table[i].q = p;
 8012b7a:	7c7a      	ldrb	r2, [r7, #17]
 8012b7c:	490d      	ldr	r1, [pc, #52]	; (8012bb4 <etharp_query+0x268>)
 8012b7e:	4613      	mov	r3, r2
 8012b80:	005b      	lsls	r3, r3, #1
 8012b82:	4413      	add	r3, r2
 8012b84:	00db      	lsls	r3, r3, #3
 8012b86:	440b      	add	r3, r1
 8012b88:	69fa      	ldr	r2, [r7, #28]
 8012b8a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b92:	e002      	b.n	8012b9a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012b94:	23ff      	movs	r3, #255	; 0xff
 8012b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3728      	adds	r7, #40	; 0x28
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	08017b7c 	.word	0x08017b7c
 8012bac:	08017d28 	.word	0x08017d28
 8012bb0:	08017bf4 	.word	0x08017bf4
 8012bb4:	20008da8 	.word	0x20008da8
 8012bb8:	08017d38 	.word	0x08017d38
 8012bbc:	08017d1c 	.word	0x08017d1c
 8012bc0:	20008e98 	.word	0x20008e98
 8012bc4:	08017d60 	.word	0x08017d60

08012bc8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b08a      	sub	sp, #40	; 0x28
 8012bcc:	af02      	add	r7, sp, #8
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	607a      	str	r2, [r7, #4]
 8012bd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d106      	bne.n	8012bee <etharp_raw+0x26>
 8012be0:	4b3a      	ldr	r3, [pc, #232]	; (8012ccc <etharp_raw+0x104>)
 8012be2:	f240 4257 	movw	r2, #1111	; 0x457
 8012be6:	493a      	ldr	r1, [pc, #232]	; (8012cd0 <etharp_raw+0x108>)
 8012be8:	483a      	ldr	r0, [pc, #232]	; (8012cd4 <etharp_raw+0x10c>)
 8012bea:	f001 fd67 	bl	80146bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012bee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bf2:	211c      	movs	r1, #28
 8012bf4:	200e      	movs	r0, #14
 8012bf6:	f7f8 ffcb 	bl	800bb90 <pbuf_alloc>
 8012bfa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012c02:	f04f 33ff 	mov.w	r3, #4294967295
 8012c06:	e05d      	b.n	8012cc4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	895b      	ldrh	r3, [r3, #10]
 8012c0c:	2b1b      	cmp	r3, #27
 8012c0e:	d806      	bhi.n	8012c1e <etharp_raw+0x56>
 8012c10:	4b2e      	ldr	r3, [pc, #184]	; (8012ccc <etharp_raw+0x104>)
 8012c12:	f240 4262 	movw	r2, #1122	; 0x462
 8012c16:	4930      	ldr	r1, [pc, #192]	; (8012cd8 <etharp_raw+0x110>)
 8012c18:	482e      	ldr	r0, [pc, #184]	; (8012cd4 <etharp_raw+0x10c>)
 8012c1a:	f001 fd4f 	bl	80146bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7f7 ff58 	bl	800aadc <lwip_htons>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	461a      	mov	r2, r3
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c3a:	2b06      	cmp	r3, #6
 8012c3c:	d006      	beq.n	8012c4c <etharp_raw+0x84>
 8012c3e:	4b23      	ldr	r3, [pc, #140]	; (8012ccc <etharp_raw+0x104>)
 8012c40:	f240 4269 	movw	r2, #1129	; 0x469
 8012c44:	4925      	ldr	r1, [pc, #148]	; (8012cdc <etharp_raw+0x114>)
 8012c46:	4823      	ldr	r0, [pc, #140]	; (8012cd4 <etharp_raw+0x10c>)
 8012c48:	f001 fd38 	bl	80146bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	3308      	adds	r3, #8
 8012c50:	2206      	movs	r2, #6
 8012c52:	6839      	ldr	r1, [r7, #0]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f001 fd1b 	bl	8014690 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	3312      	adds	r3, #18
 8012c5e:	2206      	movs	r2, #6
 8012c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c62:	4618      	mov	r0, r3
 8012c64:	f001 fd14 	bl	8014690 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	330e      	adds	r3, #14
 8012c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c6e:	6812      	ldr	r2, [r2, #0]
 8012c70:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	3318      	adds	r3, #24
 8012c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c78:	6812      	ldr	r2, [r2, #0]
 8012c7a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	701a      	strb	r2, [r3, #0]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f042 0201 	orr.w	r2, r2, #1
 8012c88:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	f042 0208 	orr.w	r2, r2, #8
 8012c92:	709a      	strb	r2, [r3, #2]
 8012c94:	2200      	movs	r2, #0
 8012c96:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	2206      	movs	r2, #6
 8012c9c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	2204      	movs	r2, #4
 8012ca2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ca4:	f640 0306 	movw	r3, #2054	; 0x806
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	68ba      	ldr	r2, [r7, #8]
 8012cae:	69b9      	ldr	r1, [r7, #24]
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f001 fb7b 	bl	80143ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012cb6:	69b8      	ldr	r0, [r7, #24]
 8012cb8:	f7f9 fa4e 	bl	800c158 <pbuf_free>
  p = NULL;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3720      	adds	r7, #32
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	08017b7c 	.word	0x08017b7c
 8012cd0:	08017ccc 	.word	0x08017ccc
 8012cd4:	08017bf4 	.word	0x08017bf4
 8012cd8:	08017d7c 	.word	0x08017d7c
 8012cdc:	08017db0 	.word	0x08017db0

08012ce0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b088      	sub	sp, #32
 8012ce4:	af04      	add	r7, sp, #16
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	9203      	str	r2, [sp, #12]
 8012d00:	68ba      	ldr	r2, [r7, #8]
 8012d02:	9202      	str	r2, [sp, #8]
 8012d04:	4a06      	ldr	r2, [pc, #24]	; (8012d20 <etharp_request_dst+0x40>)
 8012d06:	9201      	str	r2, [sp, #4]
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	68f8      	ldr	r0, [r7, #12]
 8012d10:	f7ff ff5a 	bl	8012bc8 <etharp_raw>
 8012d14:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	080183a0 	.word	0x080183a0

08012d24 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012d2e:	4a05      	ldr	r2, [pc, #20]	; (8012d44 <etharp_request+0x20>)
 8012d30:	6839      	ldr	r1, [r7, #0]
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff ffd4 	bl	8012ce0 <etharp_request_dst>
 8012d38:	4603      	mov	r3, r0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3708      	adds	r7, #8
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	08018398 	.word	0x08018398

08012d48 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b08e      	sub	sp, #56	; 0x38
 8012d4c:	af04      	add	r7, sp, #16
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012d52:	4b79      	ldr	r3, [pc, #484]	; (8012f38 <icmp_input+0x1f0>)
 8012d54:	689b      	ldr	r3, [r3, #8]
 8012d56:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	f003 030f 	and.w	r3, r3, #15
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d6a:	2b13      	cmp	r3, #19
 8012d6c:	f240 80cd 	bls.w	8012f0a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	895b      	ldrh	r3, [r3, #10]
 8012d74:	2b03      	cmp	r3, #3
 8012d76:	f240 80ca 	bls.w	8012f0e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012d84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	f000 80b7 	beq.w	8012efc <icmp_input+0x1b4>
 8012d8e:	2b08      	cmp	r3, #8
 8012d90:	f040 80b7 	bne.w	8012f02 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012d94:	4b69      	ldr	r3, [pc, #420]	; (8012f3c <icmp_input+0x1f4>)
 8012d96:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d98:	4b67      	ldr	r3, [pc, #412]	; (8012f38 <icmp_input+0x1f0>)
 8012d9a:	695b      	ldr	r3, [r3, #20]
 8012d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012da0:	2be0      	cmp	r3, #224	; 0xe0
 8012da2:	f000 80bb 	beq.w	8012f1c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012da6:	4b64      	ldr	r3, [pc, #400]	; (8012f38 <icmp_input+0x1f0>)
 8012da8:	695b      	ldr	r3, [r3, #20]
 8012daa:	4a63      	ldr	r2, [pc, #396]	; (8012f38 <icmp_input+0x1f0>)
 8012dac:	6812      	ldr	r2, [r2, #0]
 8012dae:	4611      	mov	r1, r2
 8012db0:	4618      	mov	r0, r3
 8012db2:	f000 fbed 	bl	8013590 <ip4_addr_isbroadcast_u32>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f040 80b1 	bne.w	8012f20 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	891b      	ldrh	r3, [r3, #8]
 8012dc2:	2b07      	cmp	r3, #7
 8012dc4:	f240 80a5 	bls.w	8012f12 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dca:	330e      	adds	r3, #14
 8012dcc:	4619      	mov	r1, r3
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7f9 f92c 	bl	800c02c <pbuf_add_header>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d04b      	beq.n	8012e72 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	891a      	ldrh	r2, [r3, #8]
 8012dde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012de0:	4413      	add	r3, r2
 8012de2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	891b      	ldrh	r3, [r3, #8]
 8012de8:	8b7a      	ldrh	r2, [r7, #26]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	f0c0 809a 	bcc.w	8012f24 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012df0:	8b7b      	ldrh	r3, [r7, #26]
 8012df2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012df6:	4619      	mov	r1, r3
 8012df8:	200e      	movs	r0, #14
 8012dfa:	f7f8 fec9 	bl	800bb90 <pbuf_alloc>
 8012dfe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 8090 	beq.w	8012f28 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e10:	3308      	adds	r3, #8
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d203      	bcs.n	8012e1e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012e16:	6978      	ldr	r0, [r7, #20]
 8012e18:	f7f9 f99e 	bl	800c158 <pbuf_free>
          goto icmperr;
 8012e1c:	e085      	b.n	8012f2a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e26:	4618      	mov	r0, r3
 8012e28:	f001 fc32 	bl	8014690 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e2e:	4619      	mov	r1, r3
 8012e30:	6978      	ldr	r0, [r7, #20]
 8012e32:	f7f9 f90b 	bl	800c04c <pbuf_remove_header>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d009      	beq.n	8012e50 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012e3c:	4b40      	ldr	r3, [pc, #256]	; (8012f40 <icmp_input+0x1f8>)
 8012e3e:	22b6      	movs	r2, #182	; 0xb6
 8012e40:	4940      	ldr	r1, [pc, #256]	; (8012f44 <icmp_input+0x1fc>)
 8012e42:	4841      	ldr	r0, [pc, #260]	; (8012f48 <icmp_input+0x200>)
 8012e44:	f001 fc3a 	bl	80146bc <iprintf>
          pbuf_free(r);
 8012e48:	6978      	ldr	r0, [r7, #20]
 8012e4a:	f7f9 f985 	bl	800c158 <pbuf_free>
          goto icmperr;
 8012e4e:	e06c      	b.n	8012f2a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012e50:	6879      	ldr	r1, [r7, #4]
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	f7f9 fa98 	bl	800c388 <pbuf_copy>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d003      	beq.n	8012e66 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012e5e:	6978      	ldr	r0, [r7, #20]
 8012e60:	f7f9 f97a 	bl	800c158 <pbuf_free>
          goto icmperr;
 8012e64:	e061      	b.n	8012f2a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7f9 f976 	bl	800c158 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	607b      	str	r3, [r7, #4]
 8012e70:	e00f      	b.n	8012e92 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e74:	330e      	adds	r3, #14
 8012e76:	4619      	mov	r1, r3
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7f9 f8e7 	bl	800c04c <pbuf_remove_header>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d006      	beq.n	8012e92 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012e84:	4b2e      	ldr	r3, [pc, #184]	; (8012f40 <icmp_input+0x1f8>)
 8012e86:	22c7      	movs	r2, #199	; 0xc7
 8012e88:	4930      	ldr	r1, [pc, #192]	; (8012f4c <icmp_input+0x204>)
 8012e8a:	482f      	ldr	r0, [pc, #188]	; (8012f48 <icmp_input+0x200>)
 8012e8c:	f001 fc16 	bl	80146bc <iprintf>
          goto icmperr;
 8012e90:	e04b      	b.n	8012f2a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7f9 f8c5 	bl	800c02c <pbuf_add_header>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d12b      	bne.n	8012f00 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012eb6:	4b20      	ldr	r3, [pc, #128]	; (8012f38 <icmp_input+0x1f0>)
 8012eb8:	691a      	ldr	r2, [r3, #16]
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	709a      	strb	r2, [r3, #2]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	22ff      	movs	r2, #255	; 0xff
 8012ed2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	729a      	strb	r2, [r3, #10]
 8012eda:	2200      	movs	r2, #0
 8012edc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	9302      	str	r3, [sp, #8]
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	9301      	str	r3, [sp, #4]
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	23ff      	movs	r3, #255	; 0xff
 8012eec:	2200      	movs	r2, #0
 8012eee:	69f9      	ldr	r1, [r7, #28]
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f000 fa75 	bl	80133e0 <ip4_output_if>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012efa:	e001      	b.n	8012f00 <icmp_input+0x1b8>
      break;
 8012efc:	bf00      	nop
 8012efe:	e000      	b.n	8012f02 <icmp_input+0x1ba>
      break;
 8012f00:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7f9 f928 	bl	800c158 <pbuf_free>
  return;
 8012f08:	e013      	b.n	8012f32 <icmp_input+0x1ea>
    goto lenerr;
 8012f0a:	bf00      	nop
 8012f0c:	e002      	b.n	8012f14 <icmp_input+0x1cc>
    goto lenerr;
 8012f0e:	bf00      	nop
 8012f10:	e000      	b.n	8012f14 <icmp_input+0x1cc>
        goto lenerr;
 8012f12:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7f9 f91f 	bl	800c158 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f1a:	e00a      	b.n	8012f32 <icmp_input+0x1ea>
        goto icmperr;
 8012f1c:	bf00      	nop
 8012f1e:	e004      	b.n	8012f2a <icmp_input+0x1e2>
        goto icmperr;
 8012f20:	bf00      	nop
 8012f22:	e002      	b.n	8012f2a <icmp_input+0x1e2>
          goto icmperr;
 8012f24:	bf00      	nop
 8012f26:	e000      	b.n	8012f2a <icmp_input+0x1e2>
          goto icmperr;
 8012f28:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7f9 f914 	bl	800c158 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f30:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012f32:	3728      	adds	r7, #40	; 0x28
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	200057d8 	.word	0x200057d8
 8012f3c:	200057ec 	.word	0x200057ec
 8012f40:	08017df4 	.word	0x08017df4
 8012f44:	08017e2c 	.word	0x08017e2c
 8012f48:	08017e64 	.word	0x08017e64
 8012f4c:	08017e8c 	.word	0x08017e8c

08012f50 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012f5c:	78fb      	ldrb	r3, [r7, #3]
 8012f5e:	461a      	mov	r2, r3
 8012f60:	2103      	movs	r1, #3
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 f814 	bl	8012f90 <icmp_send_response>
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	460b      	mov	r3, r1
 8012f7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012f7c:	78fb      	ldrb	r3, [r7, #3]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	210b      	movs	r1, #11
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 f804 	bl	8012f90 <icmp_send_response>
}
 8012f88:	bf00      	nop
 8012f8a:	3708      	adds	r7, #8
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b08c      	sub	sp, #48	; 0x30
 8012f94:	af04      	add	r7, sp, #16
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	70fb      	strb	r3, [r7, #3]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012fa0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fa4:	2124      	movs	r1, #36	; 0x24
 8012fa6:	2022      	movs	r0, #34	; 0x22
 8012fa8:	f7f8 fdf2 	bl	800bb90 <pbuf_alloc>
 8012fac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d04c      	beq.n	801304e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	895b      	ldrh	r3, [r3, #10]
 8012fb8:	2b23      	cmp	r3, #35	; 0x23
 8012fba:	d806      	bhi.n	8012fca <icmp_send_response+0x3a>
 8012fbc:	4b26      	ldr	r3, [pc, #152]	; (8013058 <icmp_send_response+0xc8>)
 8012fbe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012fc2:	4926      	ldr	r1, [pc, #152]	; (801305c <icmp_send_response+0xcc>)
 8012fc4:	4826      	ldr	r0, [pc, #152]	; (8013060 <icmp_send_response+0xd0>)
 8012fc6:	f001 fb79 	bl	80146bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	78fa      	ldrb	r2, [r7, #3]
 8012fda:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	78ba      	ldrb	r2, [r7, #2]
 8012fe0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	711a      	strb	r2, [r3, #4]
 8012fe8:	2200      	movs	r2, #0
 8012fea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	719a      	strb	r2, [r3, #6]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	f103 0008 	add.w	r0, r3, #8
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	221c      	movs	r2, #28
 8013004:	4619      	mov	r1, r3
 8013006:	f001 fb43 	bl	8014690 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013010:	f107 030c 	add.w	r3, r7, #12
 8013014:	4618      	mov	r0, r3
 8013016:	f000 f825 	bl	8013064 <ip4_route>
 801301a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d011      	beq.n	8013046 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	2200      	movs	r2, #0
 8013026:	709a      	strb	r2, [r3, #2]
 8013028:	2200      	movs	r2, #0
 801302a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801302c:	f107 020c 	add.w	r2, r7, #12
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	9302      	str	r3, [sp, #8]
 8013034:	2301      	movs	r3, #1
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	2300      	movs	r3, #0
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	23ff      	movs	r3, #255	; 0xff
 801303e:	2100      	movs	r1, #0
 8013040:	69f8      	ldr	r0, [r7, #28]
 8013042:	f000 f9cd 	bl	80133e0 <ip4_output_if>
  }
  pbuf_free(q);
 8013046:	69f8      	ldr	r0, [r7, #28]
 8013048:	f7f9 f886 	bl	800c158 <pbuf_free>
 801304c:	e000      	b.n	8013050 <icmp_send_response+0xc0>
    return;
 801304e:	bf00      	nop
}
 8013050:	3720      	adds	r7, #32
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	08017df4 	.word	0x08017df4
 801305c:	08017ec0 	.word	0x08017ec0
 8013060:	08017e64 	.word	0x08017e64

08013064 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013064:	b480      	push	{r7}
 8013066:	b085      	sub	sp, #20
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801306c:	4b33      	ldr	r3, [pc, #204]	; (801313c <ip4_route+0xd8>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	60fb      	str	r3, [r7, #12]
 8013072:	e036      	b.n	80130e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801307a:	f003 0301 	and.w	r3, r3, #1
 801307e:	b2db      	uxtb	r3, r3
 8013080:	2b00      	cmp	r3, #0
 8013082:	d02b      	beq.n	80130dc <ip4_route+0x78>
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801308a:	089b      	lsrs	r3, r3, #2
 801308c:	f003 0301 	and.w	r3, r3, #1
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d022      	beq.n	80130dc <ip4_route+0x78>
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	3304      	adds	r3, #4
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01d      	beq.n	80130dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3304      	adds	r3, #4
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	405a      	eors	r2, r3
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	3308      	adds	r3, #8
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4013      	ands	r3, r2
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d101      	bne.n	80130bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	e038      	b.n	801312e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130c2:	f003 0302 	and.w	r3, r3, #2
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d108      	bne.n	80130dc <ip4_route+0x78>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	330c      	adds	r3, #12
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d101      	bne.n	80130dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	e028      	b.n	801312e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	60fb      	str	r3, [r7, #12]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d1c5      	bne.n	8013074 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80130e8:	4b15      	ldr	r3, [pc, #84]	; (8013140 <ip4_route+0xdc>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d01a      	beq.n	8013126 <ip4_route+0xc2>
 80130f0:	4b13      	ldr	r3, [pc, #76]	; (8013140 <ip4_route+0xdc>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d012      	beq.n	8013126 <ip4_route+0xc2>
 8013100:	4b0f      	ldr	r3, [pc, #60]	; (8013140 <ip4_route+0xdc>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013108:	f003 0304 	and.w	r3, r3, #4
 801310c:	2b00      	cmp	r3, #0
 801310e:	d00a      	beq.n	8013126 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013110:	4b0b      	ldr	r3, [pc, #44]	; (8013140 <ip4_route+0xdc>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	3304      	adds	r3, #4
 8013116:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013118:	2b00      	cmp	r3, #0
 801311a:	d004      	beq.n	8013126 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	b2db      	uxtb	r3, r3
 8013122:	2b7f      	cmp	r3, #127	; 0x7f
 8013124:	d101      	bne.n	801312a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013126:	2300      	movs	r3, #0
 8013128:	e001      	b.n	801312e <ip4_route+0xca>
  }

  return netif_default;
 801312a:	4b05      	ldr	r3, [pc, #20]	; (8013140 <ip4_route+0xdc>)
 801312c:	681b      	ldr	r3, [r3, #0]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3714      	adds	r7, #20
 8013132:	46bd      	mov	sp, r7
 8013134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013138:	4770      	bx	lr
 801313a:	bf00      	nop
 801313c:	20008d3c 	.word	0x20008d3c
 8013140:	20008d40 	.word	0x20008d40

08013144 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013152:	f003 0301 	and.w	r3, r3, #1
 8013156:	b2db      	uxtb	r3, r3
 8013158:	2b00      	cmp	r3, #0
 801315a:	d016      	beq.n	801318a <ip4_input_accept+0x46>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3304      	adds	r3, #4
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d011      	beq.n	801318a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013166:	4b0b      	ldr	r3, [pc, #44]	; (8013194 <ip4_input_accept+0x50>)
 8013168:	695a      	ldr	r2, [r3, #20]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	3304      	adds	r3, #4
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	429a      	cmp	r2, r3
 8013172:	d008      	beq.n	8013186 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013174:	4b07      	ldr	r3, [pc, #28]	; (8013194 <ip4_input_accept+0x50>)
 8013176:	695b      	ldr	r3, [r3, #20]
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 fa08 	bl	8013590 <ip4_addr_isbroadcast_u32>
 8013180:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013182:	2b00      	cmp	r3, #0
 8013184:	d001      	beq.n	801318a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013186:	2301      	movs	r3, #1
 8013188:	e000      	b.n	801318c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801318a:	2300      	movs	r3, #0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	200057d8 	.word	0x200057d8

08013198 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b086      	sub	sp, #24
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	091b      	lsrs	r3, r3, #4
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	2b04      	cmp	r3, #4
 80131b2:	d004      	beq.n	80131be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7f8 ffcf 	bl	800c158 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80131ba:	2300      	movs	r3, #0
 80131bc:	e107      	b.n	80133ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	f003 030f 	and.w	r3, r3, #15
 80131c6:	b2db      	uxtb	r3, r3
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	885b      	ldrh	r3, [r3, #2]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f7 fc81 	bl	800aadc <lwip_htons>
 80131da:	4603      	mov	r3, r0
 80131dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	891b      	ldrh	r3, [r3, #8]
 80131e2:	89ba      	ldrh	r2, [r7, #12]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d204      	bcs.n	80131f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80131e8:	89bb      	ldrh	r3, [r7, #12]
 80131ea:	4619      	mov	r1, r3
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7f8 fe2d 	bl	800be4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	895b      	ldrh	r3, [r3, #10]
 80131f6:	89fa      	ldrh	r2, [r7, #14]
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d807      	bhi.n	801320c <ip4_input+0x74>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	891b      	ldrh	r3, [r3, #8]
 8013200:	89ba      	ldrh	r2, [r7, #12]
 8013202:	429a      	cmp	r2, r3
 8013204:	d802      	bhi.n	801320c <ip4_input+0x74>
 8013206:	89fb      	ldrh	r3, [r7, #14]
 8013208:	2b13      	cmp	r3, #19
 801320a:	d804      	bhi.n	8013216 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7f8 ffa3 	bl	800c158 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013212:	2300      	movs	r3, #0
 8013214:	e0db      	b.n	80133ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	691b      	ldr	r3, [r3, #16]
 801321a:	4a6f      	ldr	r2, [pc, #444]	; (80133d8 <ip4_input+0x240>)
 801321c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	4a6d      	ldr	r2, [pc, #436]	; (80133d8 <ip4_input+0x240>)
 8013224:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013226:	4b6c      	ldr	r3, [pc, #432]	; (80133d8 <ip4_input+0x240>)
 8013228:	695b      	ldr	r3, [r3, #20]
 801322a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801322e:	2be0      	cmp	r3, #224	; 0xe0
 8013230:	d112      	bne.n	8013258 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013238:	f003 0301 	and.w	r3, r3, #1
 801323c:	b2db      	uxtb	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d007      	beq.n	8013252 <ip4_input+0xba>
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	3304      	adds	r3, #4
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <ip4_input+0xba>
      netif = inp;
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	613b      	str	r3, [r7, #16]
 8013250:	e02a      	b.n	80132a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	613b      	str	r3, [r7, #16]
 8013256:	e027      	b.n	80132a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013258:	6838      	ldr	r0, [r7, #0]
 801325a:	f7ff ff73 	bl	8013144 <ip4_input_accept>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <ip4_input+0xd2>
      netif = inp;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	613b      	str	r3, [r7, #16]
 8013268:	e01e      	b.n	80132a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801326a:	2300      	movs	r3, #0
 801326c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801326e:	4b5a      	ldr	r3, [pc, #360]	; (80133d8 <ip4_input+0x240>)
 8013270:	695b      	ldr	r3, [r3, #20]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b7f      	cmp	r3, #127	; 0x7f
 8013276:	d017      	beq.n	80132a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013278:	4b58      	ldr	r3, [pc, #352]	; (80133dc <ip4_input+0x244>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	613b      	str	r3, [r7, #16]
 801327e:	e00e      	b.n	801329e <ip4_input+0x106>
          if (netif == inp) {
 8013280:	693a      	ldr	r2, [r7, #16]
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	429a      	cmp	r2, r3
 8013286:	d006      	beq.n	8013296 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013288:	6938      	ldr	r0, [r7, #16]
 801328a:	f7ff ff5b 	bl	8013144 <ip4_input_accept>
 801328e:	4603      	mov	r3, r0
 8013290:	2b00      	cmp	r3, #0
 8013292:	d108      	bne.n	80132a6 <ip4_input+0x10e>
 8013294:	e000      	b.n	8013298 <ip4_input+0x100>
            continue;
 8013296:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	613b      	str	r3, [r7, #16]
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d1ed      	bne.n	8013280 <ip4_input+0xe8>
 80132a4:	e000      	b.n	80132a8 <ip4_input+0x110>
            break;
 80132a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80132a8:	4b4b      	ldr	r3, [pc, #300]	; (80133d8 <ip4_input+0x240>)
 80132aa:	691b      	ldr	r3, [r3, #16]
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	4618      	mov	r0, r3
 80132b0:	f000 f96e 	bl	8013590 <ip4_addr_isbroadcast_u32>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d105      	bne.n	80132c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80132ba:	4b47      	ldr	r3, [pc, #284]	; (80133d8 <ip4_input+0x240>)
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80132c2:	2be0      	cmp	r3, #224	; 0xe0
 80132c4:	d104      	bne.n	80132d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f7f8 ff46 	bl	800c158 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	e07e      	b.n	80133ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d104      	bne.n	80132e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7f8 ff3e 	bl	800c158 <pbuf_free>
    return ERR_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	e076      	b.n	80133ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	88db      	ldrh	r3, [r3, #6]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	461a      	mov	r2, r3
 80132e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80132ec:	4013      	ands	r3, r2
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d00b      	beq.n	801330a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fc92 	bl	8013c1c <ip4_reass>
 80132f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d101      	bne.n	8013304 <ip4_input+0x16c>
      return ERR_OK;
 8013300:	2300      	movs	r3, #0
 8013302:	e064      	b.n	80133ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801330a:	4a33      	ldr	r2, [pc, #204]	; (80133d8 <ip4_input+0x240>)
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013310:	4a31      	ldr	r2, [pc, #196]	; (80133d8 <ip4_input+0x240>)
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013316:	4a30      	ldr	r2, [pc, #192]	; (80133d8 <ip4_input+0x240>)
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 030f 	and.w	r3, r3, #15
 8013324:	b2db      	uxtb	r3, r3
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	b2db      	uxtb	r3, r3
 801332a:	b29a      	uxth	r2, r3
 801332c:	4b2a      	ldr	r3, [pc, #168]	; (80133d8 <ip4_input+0x240>)
 801332e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013330:	89fb      	ldrh	r3, [r7, #14]
 8013332:	4619      	mov	r1, r3
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f7f8 fe89 	bl	800c04c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	7a5b      	ldrb	r3, [r3, #9]
 801333e:	2b11      	cmp	r3, #17
 8013340:	d006      	beq.n	8013350 <ip4_input+0x1b8>
 8013342:	2b11      	cmp	r3, #17
 8013344:	dc13      	bgt.n	801336e <ip4_input+0x1d6>
 8013346:	2b01      	cmp	r3, #1
 8013348:	d00c      	beq.n	8013364 <ip4_input+0x1cc>
 801334a:	2b06      	cmp	r3, #6
 801334c:	d005      	beq.n	801335a <ip4_input+0x1c2>
 801334e:	e00e      	b.n	801336e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013350:	6839      	ldr	r1, [r7, #0]
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f7fe fc68 	bl	8011c28 <udp_input>
        break;
 8013358:	e026      	b.n	80133a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801335a:	6839      	ldr	r1, [r7, #0]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7fa fd23 	bl	800dda8 <tcp_input>
        break;
 8013362:	e021      	b.n	80133a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013364:	6839      	ldr	r1, [r7, #0]
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7ff fcee 	bl	8012d48 <icmp_input>
        break;
 801336c:	e01c      	b.n	80133a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801336e:	4b1a      	ldr	r3, [pc, #104]	; (80133d8 <ip4_input+0x240>)
 8013370:	695b      	ldr	r3, [r3, #20]
 8013372:	6939      	ldr	r1, [r7, #16]
 8013374:	4618      	mov	r0, r3
 8013376:	f000 f90b 	bl	8013590 <ip4_addr_isbroadcast_u32>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10f      	bne.n	80133a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013380:	4b15      	ldr	r3, [pc, #84]	; (80133d8 <ip4_input+0x240>)
 8013382:	695b      	ldr	r3, [r3, #20]
 8013384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013388:	2be0      	cmp	r3, #224	; 0xe0
 801338a:	d009      	beq.n	80133a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801338c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013390:	4619      	mov	r1, r3
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7f8 fecd 	bl	800c132 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013398:	2102      	movs	r1, #2
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7ff fdd8 	bl	8012f50 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7f8 fed9 	bl	800c158 <pbuf_free>
        break;
 80133a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80133a8:	4b0b      	ldr	r3, [pc, #44]	; (80133d8 <ip4_input+0x240>)
 80133aa:	2200      	movs	r2, #0
 80133ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80133ae:	4b0a      	ldr	r3, [pc, #40]	; (80133d8 <ip4_input+0x240>)
 80133b0:	2200      	movs	r2, #0
 80133b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80133b4:	4b08      	ldr	r3, [pc, #32]	; (80133d8 <ip4_input+0x240>)
 80133b6:	2200      	movs	r2, #0
 80133b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80133ba:	4b07      	ldr	r3, [pc, #28]	; (80133d8 <ip4_input+0x240>)
 80133bc:	2200      	movs	r2, #0
 80133be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80133c0:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <ip4_input+0x240>)
 80133c2:	2200      	movs	r2, #0
 80133c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80133c6:	4b04      	ldr	r3, [pc, #16]	; (80133d8 <ip4_input+0x240>)
 80133c8:	2200      	movs	r2, #0
 80133ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80133cc:	2300      	movs	r3, #0
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3718      	adds	r7, #24
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	200057d8 	.word	0x200057d8
 80133dc:	20008d3c 	.word	0x20008d3c

080133e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b08a      	sub	sp, #40	; 0x28
 80133e4:	af04      	add	r7, sp, #16
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d009      	beq.n	801340c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d003      	beq.n	8013406 <ip4_output_if+0x26>
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d102      	bne.n	801340c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	3304      	adds	r3, #4
 801340a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801340c:	78fa      	ldrb	r2, [r7, #3]
 801340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013410:	9302      	str	r3, [sp, #8]
 8013412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013416:	9301      	str	r3, [sp, #4]
 8013418:	f897 3020 	ldrb.w	r3, [r7, #32]
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	4613      	mov	r3, r2
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	6979      	ldr	r1, [r7, #20]
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	f000 f805 	bl	8013434 <ip4_output_if_src>
 801342a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801342c:	4618      	mov	r0, r3
 801342e:	3718      	adds	r7, #24
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b088      	sub	sp, #32
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
 8013440:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	7b9b      	ldrb	r3, [r3, #14]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d006      	beq.n	8013458 <ip4_output_if_src+0x24>
 801344a:	4b4b      	ldr	r3, [pc, #300]	; (8013578 <ip4_output_if_src+0x144>)
 801344c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013450:	494a      	ldr	r1, [pc, #296]	; (801357c <ip4_output_if_src+0x148>)
 8013452:	484b      	ldr	r0, [pc, #300]	; (8013580 <ip4_output_if_src+0x14c>)
 8013454:	f001 f932 	bl	80146bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d060      	beq.n	8013520 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801345e:	2314      	movs	r3, #20
 8013460:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013462:	2114      	movs	r1, #20
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f7f8 fde1 	bl	800c02c <pbuf_add_header>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d002      	beq.n	8013476 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013470:	f06f 0301 	mvn.w	r3, #1
 8013474:	e07c      	b.n	8013570 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	895b      	ldrh	r3, [r3, #10]
 8013480:	2b13      	cmp	r3, #19
 8013482:	d806      	bhi.n	8013492 <ip4_output_if_src+0x5e>
 8013484:	4b3c      	ldr	r3, [pc, #240]	; (8013578 <ip4_output_if_src+0x144>)
 8013486:	f44f 7262 	mov.w	r2, #904	; 0x388
 801348a:	493e      	ldr	r1, [pc, #248]	; (8013584 <ip4_output_if_src+0x150>)
 801348c:	483c      	ldr	r0, [pc, #240]	; (8013580 <ip4_output_if_src+0x14c>)
 801348e:	f001 f915 	bl	80146bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013492:	69fb      	ldr	r3, [r7, #28]
 8013494:	78fa      	ldrb	r2, [r7, #3]
 8013496:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801349e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80134a8:	8b7b      	ldrh	r3, [r7, #26]
 80134aa:	089b      	lsrs	r3, r3, #2
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80134c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	891b      	ldrh	r3, [r3, #8]
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f7 fb08 	bl	800aadc <lwip_htons>
 80134cc:	4603      	mov	r3, r0
 80134ce:	461a      	mov	r2, r3
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	2200      	movs	r2, #0
 80134d8:	719a      	strb	r2, [r3, #6]
 80134da:	2200      	movs	r2, #0
 80134dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80134de:	4b2a      	ldr	r3, [pc, #168]	; (8013588 <ip4_output_if_src+0x154>)
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f7 fafa 	bl	800aadc <lwip_htons>
 80134e8:	4603      	mov	r3, r0
 80134ea:	461a      	mov	r2, r3
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80134f0:	4b25      	ldr	r3, [pc, #148]	; (8013588 <ip4_output_if_src+0x154>)
 80134f2:	881b      	ldrh	r3, [r3, #0]
 80134f4:	3301      	adds	r3, #1
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	4b23      	ldr	r3, [pc, #140]	; (8013588 <ip4_output_if_src+0x154>)
 80134fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d104      	bne.n	801350c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013502:	4b22      	ldr	r3, [pc, #136]	; (801358c <ip4_output_if_src+0x158>)
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	60da      	str	r2, [r3, #12]
 801350a:	e003      	b.n	8013514 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	2200      	movs	r2, #0
 8013518:	729a      	strb	r2, [r3, #10]
 801351a:	2200      	movs	r2, #0
 801351c:	72da      	strb	r2, [r3, #11]
 801351e:	e00f      	b.n	8013540 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	895b      	ldrh	r3, [r3, #10]
 8013524:	2b13      	cmp	r3, #19
 8013526:	d802      	bhi.n	801352e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013528:	f06f 0301 	mvn.w	r3, #1
 801352c:	e020      	b.n	8013570 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	691b      	ldr	r3, [r3, #16]
 8013538:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801353a:	f107 0314 	add.w	r3, r7, #20
 801353e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013542:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00c      	beq.n	8013562 <ip4_output_if_src+0x12e>
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	891a      	ldrh	r2, [r3, #8]
 801354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013550:	429a      	cmp	r2, r3
 8013552:	d906      	bls.n	8013562 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	f000 fd53 	bl	8014004 <ip4_frag>
 801355e:	4603      	mov	r3, r0
 8013560:	e006      	b.n	8013570 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013564:	695b      	ldr	r3, [r3, #20]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	68f9      	ldr	r1, [r7, #12]
 801356a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801356c:	4798      	blx	r3
 801356e:	4603      	mov	r3, r0
}
 8013570:	4618      	mov	r0, r3
 8013572:	3720      	adds	r7, #32
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	08017eec 	.word	0x08017eec
 801357c:	08017f20 	.word	0x08017f20
 8013580:	08017f2c 	.word	0x08017f2c
 8013584:	08017f54 	.word	0x08017f54
 8013588:	20008e9a 	.word	0x20008e9a
 801358c:	08018394 	.word	0x08018394

08013590 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a4:	d002      	beq.n	80135ac <ip4_addr_isbroadcast_u32+0x1c>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d101      	bne.n	80135b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80135ac:	2301      	movs	r3, #1
 80135ae:	e02a      	b.n	8013606 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135b6:	f003 0302 	and.w	r3, r3, #2
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d101      	bne.n	80135c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	e021      	b.n	8013606 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	3304      	adds	r3, #4
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d101      	bne.n	80135d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80135ce:	2300      	movs	r3, #0
 80135d0:	e019      	b.n	8013606 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	3304      	adds	r3, #4
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	405a      	eors	r2, r3
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	3308      	adds	r3, #8
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	4013      	ands	r3, r2
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10d      	bne.n	8013604 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	3308      	adds	r3, #8
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	43da      	mvns	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	3308      	adds	r3, #8
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d101      	bne.n	8013604 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013600:	2301      	movs	r3, #1
 8013602:	e000      	b.n	8013606 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013604:	2300      	movs	r3, #0
  }
}
 8013606:	4618      	mov	r0, r3
 8013608:	3714      	adds	r7, #20
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
	...

08013614 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801361a:	2300      	movs	r3, #0
 801361c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801361e:	4b12      	ldr	r3, [pc, #72]	; (8013668 <ip_reass_tmr+0x54>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013624:	e018      	b.n	8013658 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	7fdb      	ldrb	r3, [r3, #31]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00b      	beq.n	8013646 <ip_reass_tmr+0x32>
      r->timer--;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	7fdb      	ldrb	r3, [r3, #31]
 8013632:	3b01      	subs	r3, #1
 8013634:	b2da      	uxtb	r2, r3
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	e008      	b.n	8013658 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013650:	68b9      	ldr	r1, [r7, #8]
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 f80a 	bl	801366c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1e3      	bne.n	8013626 <ip_reass_tmr+0x12>
    }
  }
}
 801365e:	bf00      	nop
 8013660:	bf00      	nop
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20008e9c 	.word	0x20008e9c

0801366c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b088      	sub	sp, #32
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801367a:	683a      	ldr	r2, [r7, #0]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	429a      	cmp	r2, r3
 8013680:	d105      	bne.n	801368e <ip_reass_free_complete_datagram+0x22>
 8013682:	4b45      	ldr	r3, [pc, #276]	; (8013798 <ip_reass_free_complete_datagram+0x12c>)
 8013684:	22ab      	movs	r2, #171	; 0xab
 8013686:	4945      	ldr	r1, [pc, #276]	; (801379c <ip_reass_free_complete_datagram+0x130>)
 8013688:	4845      	ldr	r0, [pc, #276]	; (80137a0 <ip_reass_free_complete_datagram+0x134>)
 801368a:	f001 f817 	bl	80146bc <iprintf>
  if (prev != NULL) {
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00a      	beq.n	80136aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	429a      	cmp	r2, r3
 801369c:	d005      	beq.n	80136aa <ip_reass_free_complete_datagram+0x3e>
 801369e:	4b3e      	ldr	r3, [pc, #248]	; (8013798 <ip_reass_free_complete_datagram+0x12c>)
 80136a0:	22ad      	movs	r2, #173	; 0xad
 80136a2:	4940      	ldr	r1, [pc, #256]	; (80137a4 <ip_reass_free_complete_datagram+0x138>)
 80136a4:	483e      	ldr	r0, [pc, #248]	; (80137a0 <ip_reass_free_complete_datagram+0x134>)
 80136a6:	f001 f809 	bl	80146bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	889b      	ldrh	r3, [r3, #4]
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d12a      	bne.n	8013712 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	6858      	ldr	r0, [r3, #4]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3308      	adds	r3, #8
 80136d2:	2214      	movs	r2, #20
 80136d4:	4619      	mov	r1, r3
 80136d6:	f000 ffdb 	bl	8014690 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80136da:	2101      	movs	r1, #1
 80136dc:	69b8      	ldr	r0, [r7, #24]
 80136de:	f7ff fc47 	bl	8012f70 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80136e2:	69b8      	ldr	r0, [r7, #24]
 80136e4:	f7f8 fdc0 	bl	800c268 <pbuf_clen>
 80136e8:	4603      	mov	r3, r0
 80136ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80136ec:	8bfa      	ldrh	r2, [r7, #30]
 80136ee:	8a7b      	ldrh	r3, [r7, #18]
 80136f0:	4413      	add	r3, r2
 80136f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136f6:	db05      	blt.n	8013704 <ip_reass_free_complete_datagram+0x98>
 80136f8:	4b27      	ldr	r3, [pc, #156]	; (8013798 <ip_reass_free_complete_datagram+0x12c>)
 80136fa:	22bc      	movs	r2, #188	; 0xbc
 80136fc:	492a      	ldr	r1, [pc, #168]	; (80137a8 <ip_reass_free_complete_datagram+0x13c>)
 80136fe:	4828      	ldr	r0, [pc, #160]	; (80137a0 <ip_reass_free_complete_datagram+0x134>)
 8013700:	f000 ffdc 	bl	80146bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013704:	8bfa      	ldrh	r2, [r7, #30]
 8013706:	8a7b      	ldrh	r3, [r7, #18]
 8013708:	4413      	add	r3, r2
 801370a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801370c:	69b8      	ldr	r0, [r7, #24]
 801370e:	f7f8 fd23 	bl	800c158 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013718:	e01f      	b.n	801375a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f7f8 fd9c 	bl	800c268 <pbuf_clen>
 8013730:	4603      	mov	r3, r0
 8013732:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013734:	8bfa      	ldrh	r2, [r7, #30]
 8013736:	8a7b      	ldrh	r3, [r7, #18]
 8013738:	4413      	add	r3, r2
 801373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801373e:	db05      	blt.n	801374c <ip_reass_free_complete_datagram+0xe0>
 8013740:	4b15      	ldr	r3, [pc, #84]	; (8013798 <ip_reass_free_complete_datagram+0x12c>)
 8013742:	22cc      	movs	r2, #204	; 0xcc
 8013744:	4918      	ldr	r1, [pc, #96]	; (80137a8 <ip_reass_free_complete_datagram+0x13c>)
 8013746:	4816      	ldr	r0, [pc, #88]	; (80137a0 <ip_reass_free_complete_datagram+0x134>)
 8013748:	f000 ffb8 	bl	80146bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801374c:	8bfa      	ldrh	r2, [r7, #30]
 801374e:	8a7b      	ldrh	r3, [r7, #18]
 8013750:	4413      	add	r3, r2
 8013752:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013754:	68f8      	ldr	r0, [r7, #12]
 8013756:	f7f8 fcff 	bl	800c158 <pbuf_free>
  while (p != NULL) {
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d1dc      	bne.n	801371a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013760:	6839      	ldr	r1, [r7, #0]
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 f8c2 	bl	80138ec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013768:	4b10      	ldr	r3, [pc, #64]	; (80137ac <ip_reass_free_complete_datagram+0x140>)
 801376a:	881b      	ldrh	r3, [r3, #0]
 801376c:	8bfa      	ldrh	r2, [r7, #30]
 801376e:	429a      	cmp	r2, r3
 8013770:	d905      	bls.n	801377e <ip_reass_free_complete_datagram+0x112>
 8013772:	4b09      	ldr	r3, [pc, #36]	; (8013798 <ip_reass_free_complete_datagram+0x12c>)
 8013774:	22d2      	movs	r2, #210	; 0xd2
 8013776:	490e      	ldr	r1, [pc, #56]	; (80137b0 <ip_reass_free_complete_datagram+0x144>)
 8013778:	4809      	ldr	r0, [pc, #36]	; (80137a0 <ip_reass_free_complete_datagram+0x134>)
 801377a:	f000 ff9f 	bl	80146bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801377e:	4b0b      	ldr	r3, [pc, #44]	; (80137ac <ip_reass_free_complete_datagram+0x140>)
 8013780:	881a      	ldrh	r2, [r3, #0]
 8013782:	8bfb      	ldrh	r3, [r7, #30]
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	b29a      	uxth	r2, r3
 8013788:	4b08      	ldr	r3, [pc, #32]	; (80137ac <ip_reass_free_complete_datagram+0x140>)
 801378a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801378c:	8bfb      	ldrh	r3, [r7, #30]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3720      	adds	r7, #32
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	08017f84 	.word	0x08017f84
 801379c:	08017fc0 	.word	0x08017fc0
 80137a0:	08017fcc 	.word	0x08017fcc
 80137a4:	08017ff4 	.word	0x08017ff4
 80137a8:	08018008 	.word	0x08018008
 80137ac:	20008ea0 	.word	0x20008ea0
 80137b0:	08018028 	.word	0x08018028

080137b4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b08a      	sub	sp, #40	; 0x28
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80137be:	2300      	movs	r3, #0
 80137c0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80137c2:	2300      	movs	r3, #0
 80137c4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80137c6:	2300      	movs	r3, #0
 80137c8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80137ca:	2300      	movs	r3, #0
 80137cc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80137d2:	4b28      	ldr	r3, [pc, #160]	; (8013874 <ip_reass_remove_oldest_datagram+0xc0>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80137d8:	e030      	b.n	801383c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80137da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137dc:	695a      	ldr	r2, [r3, #20]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d10c      	bne.n	8013800 <ip_reass_remove_oldest_datagram+0x4c>
 80137e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e8:	699a      	ldr	r2, [r3, #24]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	691b      	ldr	r3, [r3, #16]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d106      	bne.n	8013800 <ip_reass_remove_oldest_datagram+0x4c>
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	899a      	ldrh	r2, [r3, #12]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	889b      	ldrh	r3, [r3, #4]
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d014      	beq.n	801382a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	3301      	adds	r3, #1
 8013804:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d104      	bne.n	8013816 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	61bb      	str	r3, [r7, #24]
 8013814:	e009      	b.n	801382a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013818:	7fda      	ldrb	r2, [r3, #31]
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	7fdb      	ldrb	r3, [r3, #31]
 801381e:	429a      	cmp	r2, r3
 8013820:	d803      	bhi.n	801382a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013824:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013826:	69fb      	ldr	r3, [r7, #28]
 8013828:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013834:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383e:	2b00      	cmp	r3, #0
 8013840:	d1cb      	bne.n	80137da <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013842:	6a3b      	ldr	r3, [r7, #32]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d008      	beq.n	801385a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013848:	69b9      	ldr	r1, [r7, #24]
 801384a:	6a38      	ldr	r0, [r7, #32]
 801384c:	f7ff ff0e 	bl	801366c <ip_reass_free_complete_datagram>
 8013850:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013852:	697a      	ldr	r2, [r7, #20]
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	4413      	add	r3, r2
 8013858:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801385a:	697a      	ldr	r2, [r7, #20]
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	429a      	cmp	r2, r3
 8013860:	da02      	bge.n	8013868 <ip_reass_remove_oldest_datagram+0xb4>
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	2b01      	cmp	r3, #1
 8013866:	dcac      	bgt.n	80137c2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013868:	697b      	ldr	r3, [r7, #20]
}
 801386a:	4618      	mov	r0, r3
 801386c:	3728      	adds	r7, #40	; 0x28
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}
 8013872:	bf00      	nop
 8013874:	20008e9c 	.word	0x20008e9c

08013878 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013882:	2004      	movs	r0, #4
 8013884:	f7f7 fda2 	bl	800b3cc <memp_malloc>
 8013888:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d110      	bne.n	80138b2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff ff8e 	bl	80137b4 <ip_reass_remove_oldest_datagram>
 8013898:	4602      	mov	r2, r0
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	4293      	cmp	r3, r2
 801389e:	dc03      	bgt.n	80138a8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80138a0:	2004      	movs	r0, #4
 80138a2:	f7f7 fd93 	bl	800b3cc <memp_malloc>
 80138a6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80138ae:	2300      	movs	r3, #0
 80138b0:	e016      	b.n	80138e0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80138b2:	2220      	movs	r2, #32
 80138b4:	2100      	movs	r1, #0
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f000 fef8 	bl	80146ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	220f      	movs	r2, #15
 80138c0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80138c2:	4b09      	ldr	r3, [pc, #36]	; (80138e8 <ip_reass_enqueue_new_datagram+0x70>)
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80138ca:	4a07      	ldr	r2, [pc, #28]	; (80138e8 <ip_reass_enqueue_new_datagram+0x70>)
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	3308      	adds	r3, #8
 80138d4:	2214      	movs	r2, #20
 80138d6:	6879      	ldr	r1, [r7, #4]
 80138d8:	4618      	mov	r0, r3
 80138da:	f000 fed9 	bl	8014690 <memcpy>
  return ipr;
 80138de:	68fb      	ldr	r3, [r7, #12]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3710      	adds	r7, #16
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	20008e9c 	.word	0x20008e9c

080138ec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80138f6:	4b10      	ldr	r3, [pc, #64]	; (8013938 <ip_reass_dequeue_datagram+0x4c>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d104      	bne.n	801390a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	4a0c      	ldr	r2, [pc, #48]	; (8013938 <ip_reass_dequeue_datagram+0x4c>)
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	e00d      	b.n	8013926 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d106      	bne.n	801391e <ip_reass_dequeue_datagram+0x32>
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <ip_reass_dequeue_datagram+0x50>)
 8013912:	f240 1245 	movw	r2, #325	; 0x145
 8013916:	490a      	ldr	r1, [pc, #40]	; (8013940 <ip_reass_dequeue_datagram+0x54>)
 8013918:	480a      	ldr	r0, [pc, #40]	; (8013944 <ip_reass_dequeue_datagram+0x58>)
 801391a:	f000 fecf 	bl	80146bc <iprintf>
    prev->next = ipr->next;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	2004      	movs	r0, #4
 801392a:	f7f7 fdbf 	bl	800b4ac <memp_free>
}
 801392e:	bf00      	nop
 8013930:	3708      	adds	r7, #8
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	20008e9c 	.word	0x20008e9c
 801393c:	08017f84 	.word	0x08017f84
 8013940:	0801804c 	.word	0x0801804c
 8013944:	08017fcc 	.word	0x08017fcc

08013948 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b08c      	sub	sp, #48	; 0x30
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013954:	2300      	movs	r3, #0
 8013956:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013958:	2301      	movs	r3, #1
 801395a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	885b      	ldrh	r3, [r3, #2]
 8013966:	b29b      	uxth	r3, r3
 8013968:	4618      	mov	r0, r3
 801396a:	f7f7 f8b7 	bl	800aadc <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	f003 030f 	and.w	r3, r3, #15
 801397a:	b2db      	uxtb	r3, r3
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013980:	7e7b      	ldrb	r3, [r7, #25]
 8013982:	b29b      	uxth	r3, r3
 8013984:	8b7a      	ldrh	r2, [r7, #26]
 8013986:	429a      	cmp	r2, r3
 8013988:	d202      	bcs.n	8013990 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801398a:	f04f 33ff 	mov.w	r3, #4294967295
 801398e:	e135      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013990:	7e7b      	ldrb	r3, [r7, #25]
 8013992:	b29b      	uxth	r3, r3
 8013994:	8b7a      	ldrh	r2, [r7, #26]
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	88db      	ldrh	r3, [r3, #6]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7f7 f89b 	bl	800aadc <lwip_htons>
 80139a6:	4603      	mov	r3, r0
 80139a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	00db      	lsls	r3, r3, #3
 80139b0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80139b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ba:	2200      	movs	r2, #0
 80139bc:	701a      	strb	r2, [r3, #0]
 80139be:	2200      	movs	r2, #0
 80139c0:	705a      	strb	r2, [r3, #1]
 80139c2:	2200      	movs	r2, #0
 80139c4:	709a      	strb	r2, [r3, #2]
 80139c6:	2200      	movs	r2, #0
 80139c8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80139ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139cc:	8afa      	ldrh	r2, [r7, #22]
 80139ce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80139d0:	8afa      	ldrh	r2, [r7, #22]
 80139d2:	8b7b      	ldrh	r3, [r7, #26]
 80139d4:	4413      	add	r3, r2
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139da:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80139dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139de:	88db      	ldrh	r3, [r3, #6]
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	8afa      	ldrh	r2, [r7, #22]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d902      	bls.n	80139ee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139e8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ec:	e106      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	627b      	str	r3, [r7, #36]	; 0x24
 80139f4:	e068      	b.n	8013ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80139fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fe:	889b      	ldrh	r3, [r3, #4]
 8013a00:	b29a      	uxth	r2, r3
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	889b      	ldrh	r3, [r3, #4]
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d235      	bcs.n	8013a78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d020      	beq.n	8013a5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1a:	889b      	ldrh	r3, [r3, #4]
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	88db      	ldrh	r3, [r3, #6]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d307      	bcc.n	8013a38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2a:	88db      	ldrh	r3, [r3, #6]
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	889b      	ldrh	r3, [r3, #4]
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d902      	bls.n	8013a3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a38:	f04f 33ff 	mov.w	r3, #4294967295
 8013a3c:	e0de      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a40:	68ba      	ldr	r2, [r7, #8]
 8013a42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a46:	88db      	ldrh	r3, [r3, #6]
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4c:	889b      	ldrh	r3, [r3, #4]
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d03d      	beq.n	8013ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013a54:	2300      	movs	r3, #0
 8013a56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013a58:	e03a      	b.n	8013ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5c:	88db      	ldrh	r3, [r3, #6]
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	889b      	ldrh	r3, [r3, #4]
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d902      	bls.n	8013a70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6e:	e0c5      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	605a      	str	r2, [r3, #4]
      break;
 8013a76:	e02b      	b.n	8013ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7a:	889b      	ldrh	r3, [r3, #4]
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	889b      	ldrh	r3, [r3, #4]
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d102      	bne.n	8013a8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a88:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8c:	e0b6      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a90:	889b      	ldrh	r3, [r3, #4]
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	88db      	ldrh	r3, [r3, #6]
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d202      	bcs.n	8013aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa2:	e0ab      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d009      	beq.n	8013abe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aac:	88db      	ldrh	r3, [r3, #6]
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	889b      	ldrh	r3, [r3, #4]
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d001      	beq.n	8013abe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013aba:	2300      	movs	r3, #0
 8013abc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d193      	bne.n	80139f6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013ace:	e000      	b.n	8013ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013ad0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d12d      	bne.n	8013b34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d01c      	beq.n	8013b18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae0:	88db      	ldrh	r3, [r3, #6]
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae6:	889b      	ldrh	r3, [r3, #4]
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d906      	bls.n	8013afc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013aee:	4b45      	ldr	r3, [pc, #276]	; (8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013af0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013af4:	4944      	ldr	r1, [pc, #272]	; (8013c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013af6:	4845      	ldr	r0, [pc, #276]	; (8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013af8:	f000 fde0 	bl	80146bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b04:	88db      	ldrh	r3, [r3, #6]
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0a:	889b      	ldrh	r3, [r3, #4]
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d010      	beq.n	8013b34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013b12:	2300      	movs	r3, #0
 8013b14:	623b      	str	r3, [r7, #32]
 8013b16:	e00d      	b.n	8013b34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d006      	beq.n	8013b2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013b20:	4b38      	ldr	r3, [pc, #224]	; (8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013b26:	493a      	ldr	r1, [pc, #232]	; (8013c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013b28:	4838      	ldr	r0, [pc, #224]	; (8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b2a:	f000 fdc7 	bl	80146bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d105      	bne.n	8013b46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	7f9b      	ldrb	r3, [r3, #30]
 8013b3e:	f003 0301 	and.w	r3, r3, #1
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d059      	beq.n	8013bfa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d04f      	beq.n	8013bec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d006      	beq.n	8013b62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	889b      	ldrh	r3, [r3, #4]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d002      	beq.n	8013b68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	623b      	str	r3, [r7, #32]
 8013b66:	e041      	b.n	8013bec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013b72:	e012      	b.n	8013b9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7c:	88db      	ldrh	r3, [r3, #6]
 8013b7e:	b29a      	uxth	r2, r3
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	889b      	ldrh	r3, [r3, #4]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d002      	beq.n	8013b90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	623b      	str	r3, [r7, #32]
            break;
 8013b8e:	e007      	b.n	8013ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d1e9      	bne.n	8013b74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013ba0:	6a3b      	ldr	r3, [r7, #32]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d022      	beq.n	8013bec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d106      	bne.n	8013bbc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013bae:	4b15      	ldr	r3, [pc, #84]	; (8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bb0:	f240 12df 	movw	r2, #479	; 0x1df
 8013bb4:	4917      	ldr	r1, [pc, #92]	; (8013c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013bb6:	4815      	ldr	r0, [pc, #84]	; (8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bb8:	f000 fd80 	bl	80146bc <iprintf>
          LWIP_ASSERT("sanity check",
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d106      	bne.n	8013bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013bc8:	4b0e      	ldr	r3, [pc, #56]	; (8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013bce:	4911      	ldr	r1, [pc, #68]	; (8013c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013bd0:	480e      	ldr	r0, [pc, #56]	; (8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bd2:	f000 fd73 	bl	80146bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d006      	beq.n	8013bec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013bde:	4b09      	ldr	r3, [pc, #36]	; (8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013be0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013be4:	490c      	ldr	r1, [pc, #48]	; (8013c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013be6:	4809      	ldr	r0, [pc, #36]	; (8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013be8:	f000 fd68 	bl	80146bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013bec:	6a3b      	ldr	r3, [r7, #32]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	bf14      	ite	ne
 8013bf2:	2301      	movne	r3, #1
 8013bf4:	2300      	moveq	r3, #0
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	e000      	b.n	8013bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3730      	adds	r7, #48	; 0x30
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}
 8013c04:	08017f84 	.word	0x08017f84
 8013c08:	08018068 	.word	0x08018068
 8013c0c:	08017fcc 	.word	0x08017fcc
 8013c10:	08018088 	.word	0x08018088
 8013c14:	080180c0 	.word	0x080180c0
 8013c18:	080180d0 	.word	0x080180d0

08013c1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08e      	sub	sp, #56	; 0x38
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	f003 030f 	and.w	r3, r3, #15
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	2b14      	cmp	r3, #20
 8013c3a:	f040 8171 	bne.w	8013f20 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c40:	88db      	ldrh	r3, [r3, #6]
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f6 ff49 	bl	800aadc <lwip_htons>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	00db      	lsls	r3, r3, #3
 8013c54:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c58:	885b      	ldrh	r3, [r3, #2]
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7f6 ff3d 	bl	800aadc <lwip_htons>
 8013c62:	4603      	mov	r3, r0
 8013c64:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	f003 030f 	and.w	r3, r3, #15
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	f0c0 8150 	bcc.w	8013f24 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013c8c:	1ad3      	subs	r3, r2, r3
 8013c8e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7f8 fae9 	bl	800c268 <pbuf_clen>
 8013c96:	4603      	mov	r3, r0
 8013c98:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013c9a:	4b8c      	ldr	r3, [pc, #560]	; (8013ecc <ip4_reass+0x2b0>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	8c3b      	ldrh	r3, [r7, #32]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	2b0a      	cmp	r3, #10
 8013ca6:	dd10      	ble.n	8013cca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013ca8:	8c3b      	ldrh	r3, [r7, #32]
 8013caa:	4619      	mov	r1, r3
 8013cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cae:	f7ff fd81 	bl	80137b4 <ip_reass_remove_oldest_datagram>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f000 8137 	beq.w	8013f28 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013cba:	4b84      	ldr	r3, [pc, #528]	; (8013ecc <ip4_reass+0x2b0>)
 8013cbc:	881b      	ldrh	r3, [r3, #0]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	8c3b      	ldrh	r3, [r7, #32]
 8013cc2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013cc4:	2b0a      	cmp	r3, #10
 8013cc6:	f300 812f 	bgt.w	8013f28 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013cca:	4b81      	ldr	r3, [pc, #516]	; (8013ed0 <ip4_reass+0x2b4>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	633b      	str	r3, [r7, #48]	; 0x30
 8013cd0:	e015      	b.n	8013cfe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd4:	695a      	ldr	r2, [r3, #20]
 8013cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd8:	68db      	ldr	r3, [r3, #12]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d10c      	bne.n	8013cf8 <ip4_reass+0xdc>
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	699a      	ldr	r2, [r3, #24]
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d106      	bne.n	8013cf8 <ip4_reass+0xdc>
 8013cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cec:	899a      	ldrh	r2, [r3, #12]
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	889b      	ldrh	r3, [r3, #4]
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d006      	beq.n	8013d06 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8013cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d1e6      	bne.n	8013cd2 <ip4_reass+0xb6>
 8013d04:	e000      	b.n	8013d08 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013d06:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d109      	bne.n	8013d22 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013d0e:	8c3b      	ldrh	r3, [r7, #32]
 8013d10:	4619      	mov	r1, r3
 8013d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d14:	f7ff fdb0 	bl	8013878 <ip_reass_enqueue_new_datagram>
 8013d18:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d11c      	bne.n	8013d5a <ip4_reass+0x13e>
      goto nullreturn;
 8013d20:	e105      	b.n	8013f2e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d24:	88db      	ldrh	r3, [r3, #6]
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7f6 fed7 	bl	800aadc <lwip_htons>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d110      	bne.n	8013d5a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3a:	89db      	ldrh	r3, [r3, #14]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f6 fecd 	bl	800aadc <lwip_htons>
 8013d42:	4603      	mov	r3, r0
 8013d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d006      	beq.n	8013d5a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4e:	3308      	adds	r3, #8
 8013d50:	2214      	movs	r2, #20
 8013d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d54:	4618      	mov	r0, r3
 8013d56:	f000 fc9b 	bl	8014690 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5c:	88db      	ldrh	r3, [r3, #6]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	f003 0320 	and.w	r3, r3, #32
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf0c      	ite	eq
 8013d68:	2301      	moveq	r3, #1
 8013d6a:	2300      	movne	r3, #0
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00e      	beq.n	8013d94 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013d76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d7a:	4413      	add	r3, r2
 8013d7c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013d7e:	8b7a      	ldrh	r2, [r7, #26]
 8013d80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013d82:	429a      	cmp	r2, r3
 8013d84:	f0c0 80a0 	bcc.w	8013ec8 <ip4_reass+0x2ac>
 8013d88:	8b7b      	ldrh	r3, [r7, #26]
 8013d8a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	f200 809a 	bhi.w	8013ec8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013d94:	69fa      	ldr	r2, [r7, #28]
 8013d96:	6879      	ldr	r1, [r7, #4]
 8013d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d9a:	f7ff fdd5 	bl	8013948 <ip_reass_chain_frag_into_datagram_and_validate>
 8013d9e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013da6:	f000 809b 	beq.w	8013ee0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013daa:	4b48      	ldr	r3, [pc, #288]	; (8013ecc <ip4_reass+0x2b0>)
 8013dac:	881a      	ldrh	r2, [r3, #0]
 8013dae:	8c3b      	ldrh	r3, [r7, #32]
 8013db0:	4413      	add	r3, r2
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	4b45      	ldr	r3, [pc, #276]	; (8013ecc <ip4_reass+0x2b0>)
 8013db6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00d      	beq.n	8013dda <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013dbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013dc2:	4413      	add	r3, r2
 8013dc4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc8:	8a7a      	ldrh	r2, [r7, #18]
 8013dca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dce:	7f9b      	ldrb	r3, [r3, #30]
 8013dd0:	f043 0301 	orr.w	r3, r3, #1
 8013dd4:	b2da      	uxtb	r2, r3
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d171      	bne.n	8013ec4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de2:	8b9b      	ldrh	r3, [r3, #28]
 8013de4:	3314      	adds	r3, #20
 8013de6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfc:	3308      	adds	r3, #8
 8013dfe:	2214      	movs	r2, #20
 8013e00:	4619      	mov	r1, r3
 8013e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e04:	f000 fc44 	bl	8014690 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e08:	8a3b      	ldrh	r3, [r7, #16]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7f6 fe66 	bl	800aadc <lwip_htons>
 8013e10:	4603      	mov	r3, r0
 8013e12:	461a      	mov	r2, r3
 8013e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e16:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	719a      	strb	r2, [r3, #6]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	2200      	movs	r2, #0
 8013e26:	729a      	strb	r2, [r3, #10]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013e32:	e00d      	b.n	8013e50 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013e3a:	2114      	movs	r1, #20
 8013e3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013e3e:	f7f8 f905 	bl	800c04c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f7f8 fa49 	bl	800c2dc <pbuf_cat>
      r = iprh->next_pbuf;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d1ee      	bne.n	8013e34 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013e56:	4b1e      	ldr	r3, [pc, #120]	; (8013ed0 <ip4_reass+0x2b4>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d102      	bne.n	8013e66 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e64:	e010      	b.n	8013e88 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013e66:	4b1a      	ldr	r3, [pc, #104]	; (8013ed0 <ip4_reass+0x2b4>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e6c:	e007      	b.n	8013e7e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d006      	beq.n	8013e86 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1f4      	bne.n	8013e6e <ip4_reass+0x252>
 8013e84:	e000      	b.n	8013e88 <ip4_reass+0x26c>
          break;
 8013e86:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e8c:	f7ff fd2e 	bl	80138ec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7f8 f9e9 	bl	800c268 <pbuf_clen>
 8013e96:	4603      	mov	r3, r0
 8013e98:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013e9a:	4b0c      	ldr	r3, [pc, #48]	; (8013ecc <ip4_reass+0x2b0>)
 8013e9c:	881b      	ldrh	r3, [r3, #0]
 8013e9e:	8c3a      	ldrh	r2, [r7, #32]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d906      	bls.n	8013eb2 <ip4_reass+0x296>
 8013ea4:	4b0b      	ldr	r3, [pc, #44]	; (8013ed4 <ip4_reass+0x2b8>)
 8013ea6:	f240 229b 	movw	r2, #667	; 0x29b
 8013eaa:	490b      	ldr	r1, [pc, #44]	; (8013ed8 <ip4_reass+0x2bc>)
 8013eac:	480b      	ldr	r0, [pc, #44]	; (8013edc <ip4_reass+0x2c0>)
 8013eae:	f000 fc05 	bl	80146bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013eb2:	4b06      	ldr	r3, [pc, #24]	; (8013ecc <ip4_reass+0x2b0>)
 8013eb4:	881a      	ldrh	r2, [r3, #0]
 8013eb6:	8c3b      	ldrh	r3, [r7, #32]
 8013eb8:	1ad3      	subs	r3, r2, r3
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	4b03      	ldr	r3, [pc, #12]	; (8013ecc <ip4_reass+0x2b0>)
 8013ebe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	e038      	b.n	8013f36 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e036      	b.n	8013f36 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013ec8:	bf00      	nop
 8013eca:	e00a      	b.n	8013ee2 <ip4_reass+0x2c6>
 8013ecc:	20008ea0 	.word	0x20008ea0
 8013ed0:	20008e9c 	.word	0x20008e9c
 8013ed4:	08017f84 	.word	0x08017f84
 8013ed8:	080180f4 	.word	0x080180f4
 8013edc:	08017fcc 	.word	0x08017fcc
    goto nullreturn_ipr;
 8013ee0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d106      	bne.n	8013ef6 <ip4_reass+0x2da>
 8013ee8:	4b15      	ldr	r3, [pc, #84]	; (8013f40 <ip4_reass+0x324>)
 8013eea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013eee:	4915      	ldr	r1, [pc, #84]	; (8013f44 <ip4_reass+0x328>)
 8013ef0:	4815      	ldr	r0, [pc, #84]	; (8013f48 <ip4_reass+0x32c>)
 8013ef2:	f000 fbe3 	bl	80146bc <iprintf>
  if (ipr->p == NULL) {
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d116      	bne.n	8013f2c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013efe:	4b13      	ldr	r3, [pc, #76]	; (8013f4c <ip4_reass+0x330>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d006      	beq.n	8013f16 <ip4_reass+0x2fa>
 8013f08:	4b0d      	ldr	r3, [pc, #52]	; (8013f40 <ip4_reass+0x324>)
 8013f0a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013f0e:	4910      	ldr	r1, [pc, #64]	; (8013f50 <ip4_reass+0x334>)
 8013f10:	480d      	ldr	r0, [pc, #52]	; (8013f48 <ip4_reass+0x32c>)
 8013f12:	f000 fbd3 	bl	80146bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013f16:	2100      	movs	r1, #0
 8013f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1a:	f7ff fce7 	bl	80138ec <ip_reass_dequeue_datagram>
 8013f1e:	e006      	b.n	8013f2e <ip4_reass+0x312>
    goto nullreturn;
 8013f20:	bf00      	nop
 8013f22:	e004      	b.n	8013f2e <ip4_reass+0x312>
    goto nullreturn;
 8013f24:	bf00      	nop
 8013f26:	e002      	b.n	8013f2e <ip4_reass+0x312>
      goto nullreturn;
 8013f28:	bf00      	nop
 8013f2a:	e000      	b.n	8013f2e <ip4_reass+0x312>
  }

nullreturn:
 8013f2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7f8 f912 	bl	800c158 <pbuf_free>
  return NULL;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3738      	adds	r7, #56	; 0x38
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	08017f84 	.word	0x08017f84
 8013f44:	08018110 	.word	0x08018110
 8013f48:	08017fcc 	.word	0x08017fcc
 8013f4c:	20008e9c 	.word	0x20008e9c
 8013f50:	0801811c 	.word	0x0801811c

08013f54 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013f58:	2005      	movs	r0, #5
 8013f5a:	f7f7 fa37 	bl	800b3cc <memp_malloc>
 8013f5e:	4603      	mov	r3, r0
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d106      	bne.n	8013f80 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013f72:	4b07      	ldr	r3, [pc, #28]	; (8013f90 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013f74:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013f78:	4906      	ldr	r1, [pc, #24]	; (8013f94 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013f7a:	4807      	ldr	r0, [pc, #28]	; (8013f98 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013f7c:	f000 fb9e 	bl	80146bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013f80:	6879      	ldr	r1, [r7, #4]
 8013f82:	2005      	movs	r0, #5
 8013f84:	f7f7 fa92 	bl	800b4ac <memp_free>
}
 8013f88:	bf00      	nop
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	08017f84 	.word	0x08017f84
 8013f94:	0801813c 	.word	0x0801813c
 8013f98:	08017fcc 	.word	0x08017fcc

08013f9c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <ipfrag_free_pbuf_custom+0x20>
 8013fae:	4b11      	ldr	r3, [pc, #68]	; (8013ff4 <ipfrag_free_pbuf_custom+0x58>)
 8013fb0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013fb4:	4910      	ldr	r1, [pc, #64]	; (8013ff8 <ipfrag_free_pbuf_custom+0x5c>)
 8013fb6:	4811      	ldr	r0, [pc, #68]	; (8013ffc <ipfrag_free_pbuf_custom+0x60>)
 8013fb8:	f000 fb80 	bl	80146bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d006      	beq.n	8013fd2 <ipfrag_free_pbuf_custom+0x36>
 8013fc4:	4b0b      	ldr	r3, [pc, #44]	; (8013ff4 <ipfrag_free_pbuf_custom+0x58>)
 8013fc6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013fca:	490d      	ldr	r1, [pc, #52]	; (8014000 <ipfrag_free_pbuf_custom+0x64>)
 8013fcc:	480b      	ldr	r0, [pc, #44]	; (8013ffc <ipfrag_free_pbuf_custom+0x60>)
 8013fce:	f000 fb75 	bl	80146bc <iprintf>
  if (pcr->original != NULL) {
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	695b      	ldr	r3, [r3, #20]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d004      	beq.n	8013fe4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	695b      	ldr	r3, [r3, #20]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7f8 f8ba 	bl	800c158 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f7ff ffbd 	bl	8013f64 <ip_frag_free_pbuf_custom_ref>
}
 8013fea:	bf00      	nop
 8013fec:	3710      	adds	r7, #16
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	08017f84 	.word	0x08017f84
 8013ff8:	08018148 	.word	0x08018148
 8013ffc:	08017fcc 	.word	0x08017fcc
 8014000:	08018154 	.word	0x08018154

08014004 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b094      	sub	sp, #80	; 0x50
 8014008:	af02      	add	r7, sp, #8
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014010:	2300      	movs	r3, #0
 8014012:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801401a:	3b14      	subs	r3, #20
 801401c:	2b00      	cmp	r3, #0
 801401e:	da00      	bge.n	8014022 <ip4_frag+0x1e>
 8014020:	3307      	adds	r3, #7
 8014022:	10db      	asrs	r3, r3, #3
 8014024:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014026:	2314      	movs	r3, #20
 8014028:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014032:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	f003 030f 	and.w	r3, r3, #15
 801403c:	b2db      	uxtb	r3, r3
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	b2db      	uxtb	r3, r3
 8014042:	2b14      	cmp	r3, #20
 8014044:	d002      	beq.n	801404c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014046:	f06f 0305 	mvn.w	r3, #5
 801404a:	e110      	b.n	801426e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	895b      	ldrh	r3, [r3, #10]
 8014050:	2b13      	cmp	r3, #19
 8014052:	d809      	bhi.n	8014068 <ip4_frag+0x64>
 8014054:	4b88      	ldr	r3, [pc, #544]	; (8014278 <ip4_frag+0x274>)
 8014056:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801405a:	4988      	ldr	r1, [pc, #544]	; (801427c <ip4_frag+0x278>)
 801405c:	4888      	ldr	r0, [pc, #544]	; (8014280 <ip4_frag+0x27c>)
 801405e:	f000 fb2d 	bl	80146bc <iprintf>
 8014062:	f06f 0305 	mvn.w	r3, #5
 8014066:	e102      	b.n	801426e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406a:	88db      	ldrh	r3, [r3, #6]
 801406c:	b29b      	uxth	r3, r3
 801406e:	4618      	mov	r0, r3
 8014070:	f7f6 fd34 	bl	800aadc <lwip_htons>
 8014074:	4603      	mov	r3, r0
 8014076:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014078:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801407a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801407e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014088:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	891b      	ldrh	r3, [r3, #8]
 801408e:	3b14      	subs	r3, #20
 8014090:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014094:	e0e1      	b.n	801425a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014096:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014098:	00db      	lsls	r3, r3, #3
 801409a:	b29b      	uxth	r3, r3
 801409c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80140a0:	4293      	cmp	r3, r2
 80140a2:	bf28      	it	cs
 80140a4:	4613      	movcs	r3, r2
 80140a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80140a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80140ac:	2114      	movs	r1, #20
 80140ae:	200e      	movs	r0, #14
 80140b0:	f7f7 fd6e 	bl	800bb90 <pbuf_alloc>
 80140b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80140b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f000 80d5 	beq.w	8014268 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80140be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c0:	895b      	ldrh	r3, [r3, #10]
 80140c2:	2b13      	cmp	r3, #19
 80140c4:	d806      	bhi.n	80140d4 <ip4_frag+0xd0>
 80140c6:	4b6c      	ldr	r3, [pc, #432]	; (8014278 <ip4_frag+0x274>)
 80140c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80140cc:	496d      	ldr	r1, [pc, #436]	; (8014284 <ip4_frag+0x280>)
 80140ce:	486c      	ldr	r0, [pc, #432]	; (8014280 <ip4_frag+0x27c>)
 80140d0:	f000 faf4 	bl	80146bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80140d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	2214      	movs	r2, #20
 80140da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80140dc:	4618      	mov	r0, r3
 80140de:	f000 fad7 	bl	8014690 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80140e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80140e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80140ee:	e064      	b.n	80141ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	895a      	ldrh	r2, [r3, #10]
 80140f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	895b      	ldrh	r3, [r3, #10]
 80140fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014100:	429a      	cmp	r2, r3
 8014102:	d906      	bls.n	8014112 <ip4_frag+0x10e>
 8014104:	4b5c      	ldr	r3, [pc, #368]	; (8014278 <ip4_frag+0x274>)
 8014106:	f240 322d 	movw	r2, #813	; 0x32d
 801410a:	495f      	ldr	r1, [pc, #380]	; (8014288 <ip4_frag+0x284>)
 801410c:	485c      	ldr	r0, [pc, #368]	; (8014280 <ip4_frag+0x27c>)
 801410e:	f000 fad5 	bl	80146bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014112:	8bfa      	ldrh	r2, [r7, #30]
 8014114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014118:	4293      	cmp	r3, r2
 801411a:	bf28      	it	cs
 801411c:	4613      	movcs	r3, r2
 801411e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014126:	2b00      	cmp	r3, #0
 8014128:	d105      	bne.n	8014136 <ip4_frag+0x132>
        poff = 0;
 801412a:	2300      	movs	r3, #0
 801412c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	60fb      	str	r3, [r7, #12]
        continue;
 8014134:	e041      	b.n	80141ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014136:	f7ff ff0d 	bl	8013f54 <ip_frag_alloc_pbuf_custom_ref>
 801413a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014144:	f7f8 f808 	bl	800c158 <pbuf_free>
        goto memerr;
 8014148:	e08f      	b.n	801426a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801414a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014152:	4413      	add	r3, r2
 8014154:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014158:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801415c:	9201      	str	r2, [sp, #4]
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	4603      	mov	r3, r0
 8014162:	2241      	movs	r2, #65	; 0x41
 8014164:	2000      	movs	r0, #0
 8014166:	f7f7 fe3d 	bl	800bde4 <pbuf_alloced_custom>
 801416a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d106      	bne.n	8014180 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014172:	69b8      	ldr	r0, [r7, #24]
 8014174:	f7ff fef6 	bl	8013f64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801417a:	f7f7 ffed 	bl	800c158 <pbuf_free>
        goto memerr;
 801417e:	e074      	b.n	801426a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014180:	68f8      	ldr	r0, [r7, #12]
 8014182:	f7f8 f889 	bl	800c298 <pbuf_ref>
      pcr->original = p;
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	68fa      	ldr	r2, [r7, #12]
 801418a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	4a3f      	ldr	r2, [pc, #252]	; (801428c <ip4_frag+0x288>)
 8014190:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014192:	6979      	ldr	r1, [r7, #20]
 8014194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014196:	f7f8 f8a1 	bl	800c2dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801419a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801419e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141a2:	1ad3      	subs	r3, r2, r3
 80141a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80141a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d004      	beq.n	80141ba <ip4_frag+0x1b6>
        poff = 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80141ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d196      	bne.n	80140f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80141c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80141c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141c8:	4413      	add	r3, r2
 80141ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80141d0:	f1a3 0213 	sub.w	r2, r3, #19
 80141d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141d8:	429a      	cmp	r2, r3
 80141da:	bfcc      	ite	gt
 80141dc:	2301      	movgt	r3, #1
 80141de:	2300      	movle	r3, #0
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80141e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80141e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80141ee:	6a3b      	ldr	r3, [r7, #32]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d002      	beq.n	80141fa <ip4_frag+0x1f6>
 80141f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d003      	beq.n	8014202 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80141fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014200:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014204:	4618      	mov	r0, r3
 8014206:	f7f6 fc69 	bl	800aadc <lwip_htons>
 801420a:	4603      	mov	r3, r0
 801420c:	461a      	mov	r2, r3
 801420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014210:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014212:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014214:	3314      	adds	r3, #20
 8014216:	b29b      	uxth	r3, r3
 8014218:	4618      	mov	r0, r3
 801421a:	f7f6 fc5f 	bl	800aadc <lwip_htons>
 801421e:	4603      	mov	r3, r0
 8014220:	461a      	mov	r2, r3
 8014222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014224:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	2200      	movs	r2, #0
 801422a:	729a      	strb	r2, [r3, #10]
 801422c:	2200      	movs	r2, #0
 801422e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	695b      	ldr	r3, [r3, #20]
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014238:	68b8      	ldr	r0, [r7, #8]
 801423a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801423c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801423e:	f7f7 ff8b 	bl	800c158 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014242:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801424e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014252:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014254:	4413      	add	r3, r2
 8014256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801425a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801425e:	2b00      	cmp	r3, #0
 8014260:	f47f af19 	bne.w	8014096 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014264:	2300      	movs	r3, #0
 8014266:	e002      	b.n	801426e <ip4_frag+0x26a>
      goto memerr;
 8014268:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801426a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801426e:	4618      	mov	r0, r3
 8014270:	3748      	adds	r7, #72	; 0x48
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	08017f84 	.word	0x08017f84
 801427c:	08018160 	.word	0x08018160
 8014280:	08017fcc 	.word	0x08017fcc
 8014284:	0801817c 	.word	0x0801817c
 8014288:	0801819c 	.word	0x0801819c
 801428c:	08013f9d 	.word	0x08013f9d

08014290 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801429a:	230e      	movs	r3, #14
 801429c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	895b      	ldrh	r3, [r3, #10]
 80142a2:	2b0e      	cmp	r3, #14
 80142a4:	d96e      	bls.n	8014384 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	7bdb      	ldrb	r3, [r3, #15]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d106      	bne.n	80142bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142b4:	3301      	adds	r3, #1
 80142b6:	b2da      	uxtb	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	7b1a      	ldrb	r2, [r3, #12]
 80142c6:	7b5b      	ldrb	r3, [r3, #13]
 80142c8:	021b      	lsls	r3, r3, #8
 80142ca:	4313      	orrs	r3, r2
 80142cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	f003 0301 	and.w	r3, r3, #1
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d023      	beq.n	8014322 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d10f      	bne.n	8014302 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	785b      	ldrb	r3, [r3, #1]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d11b      	bne.n	8014322 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80142ee:	2b5e      	cmp	r3, #94	; 0x5e
 80142f0:	d117      	bne.n	8014322 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	7b5b      	ldrb	r3, [r3, #13]
 80142f6:	f043 0310 	orr.w	r3, r3, #16
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	735a      	strb	r2, [r3, #13]
 8014300:	e00f      	b.n	8014322 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	2206      	movs	r2, #6
 8014306:	4928      	ldr	r1, [pc, #160]	; (80143a8 <ethernet_input+0x118>)
 8014308:	4618      	mov	r0, r3
 801430a:	f000 f9b1 	bl	8014670 <memcmp>
 801430e:	4603      	mov	r3, r0
 8014310:	2b00      	cmp	r3, #0
 8014312:	d106      	bne.n	8014322 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	7b5b      	ldrb	r3, [r3, #13]
 8014318:	f043 0308 	orr.w	r3, r3, #8
 801431c:	b2da      	uxtb	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014322:	89fb      	ldrh	r3, [r7, #14]
 8014324:	2b08      	cmp	r3, #8
 8014326:	d003      	beq.n	8014330 <ethernet_input+0xa0>
 8014328:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801432c:	d014      	beq.n	8014358 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801432e:	e032      	b.n	8014396 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014336:	f003 0308 	and.w	r3, r3, #8
 801433a:	2b00      	cmp	r3, #0
 801433c:	d024      	beq.n	8014388 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801433e:	8afb      	ldrh	r3, [r7, #22]
 8014340:	4619      	mov	r1, r3
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f7f7 fe82 	bl	800c04c <pbuf_remove_header>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d11e      	bne.n	801438c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801434e:	6839      	ldr	r1, [r7, #0]
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f7fe ff21 	bl	8013198 <ip4_input>
      break;
 8014356:	e013      	b.n	8014380 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801435e:	f003 0308 	and.w	r3, r3, #8
 8014362:	2b00      	cmp	r3, #0
 8014364:	d014      	beq.n	8014390 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014366:	8afb      	ldrh	r3, [r7, #22]
 8014368:	4619      	mov	r1, r3
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7f7 fe6e 	bl	800c04c <pbuf_remove_header>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d10e      	bne.n	8014394 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014376:	6839      	ldr	r1, [r7, #0]
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7fe f8c1 	bl	8012500 <etharp_input>
      break;
 801437e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014380:	2300      	movs	r3, #0
 8014382:	e00c      	b.n	801439e <ethernet_input+0x10e>
    goto free_and_return;
 8014384:	bf00      	nop
 8014386:	e006      	b.n	8014396 <ethernet_input+0x106>
        goto free_and_return;
 8014388:	bf00      	nop
 801438a:	e004      	b.n	8014396 <ethernet_input+0x106>
        goto free_and_return;
 801438c:	bf00      	nop
 801438e:	e002      	b.n	8014396 <ethernet_input+0x106>
        goto free_and_return;
 8014390:	bf00      	nop
 8014392:	e000      	b.n	8014396 <ethernet_input+0x106>
        goto free_and_return;
 8014394:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7f7 fede 	bl	800c158 <pbuf_free>
  return ERR_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3718      	adds	r7, #24
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	08018398 	.word	0x08018398

080143ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80143ba:	8c3b      	ldrh	r3, [r7, #32]
 80143bc:	4618      	mov	r0, r3
 80143be:	f7f6 fb8d 	bl	800aadc <lwip_htons>
 80143c2:	4603      	mov	r3, r0
 80143c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80143c6:	210e      	movs	r1, #14
 80143c8:	68b8      	ldr	r0, [r7, #8]
 80143ca:	f7f7 fe2f 	bl	800c02c <pbuf_add_header>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d125      	bne.n	8014420 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	8afa      	ldrh	r2, [r7, #22]
 80143de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	2206      	movs	r2, #6
 80143e4:	6839      	ldr	r1, [r7, #0]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f000 f952 	bl	8014690 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	3306      	adds	r3, #6
 80143f0:	2206      	movs	r2, #6
 80143f2:	6879      	ldr	r1, [r7, #4]
 80143f4:	4618      	mov	r0, r3
 80143f6:	f000 f94b 	bl	8014690 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014400:	2b06      	cmp	r3, #6
 8014402:	d006      	beq.n	8014412 <ethernet_output+0x66>
 8014404:	4b0a      	ldr	r3, [pc, #40]	; (8014430 <ethernet_output+0x84>)
 8014406:	f44f 7299 	mov.w	r2, #306	; 0x132
 801440a:	490a      	ldr	r1, [pc, #40]	; (8014434 <ethernet_output+0x88>)
 801440c:	480a      	ldr	r0, [pc, #40]	; (8014438 <ethernet_output+0x8c>)
 801440e:	f000 f955 	bl	80146bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	699b      	ldr	r3, [r3, #24]
 8014416:	68b9      	ldr	r1, [r7, #8]
 8014418:	68f8      	ldr	r0, [r7, #12]
 801441a:	4798      	blx	r3
 801441c:	4603      	mov	r3, r0
 801441e:	e002      	b.n	8014426 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014420:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014422:	f06f 0301 	mvn.w	r3, #1
}
 8014426:	4618      	mov	r0, r3
 8014428:	3718      	adds	r7, #24
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	080181ac 	.word	0x080181ac
 8014434:	080181e4 	.word	0x080181e4
 8014438:	08018218 	.word	0x08018218

0801443c <HAL_I2C_SlaveRxCpltCallback>:
	if(huart==UART_4)
		receivere_UART4_flag_RxCpltCallback = TRUE;
}


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 801443c:	b480      	push	{r7}
 801443e:	b083      	sub	sp, #12
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
	flag_R_slave=TRUE;
 8014444:	4b04      	ldr	r3, [pc, #16]	; (8014458 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8014446:	2201      	movs	r2, #1
 8014448:	701a      	strb	r2, [r3, #0]
}
 801444a:	bf00      	nop
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	20008ea2 	.word	0x20008ea2

0801445c <HAL_ADC_ConvCpltCallback>:
	flag_R_Master=TRUE;

 }

// ADC interrupt Callback (convert data finish)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 801445c:	b480      	push	{r7}
 801445e:	b083      	sub	sp, #12
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
	flag_ADC_ConvCpltCallback = TRUE;
 8014464:	4b04      	ldr	r3, [pc, #16]	; (8014478 <HAL_ADC_ConvCpltCallback+0x1c>)
 8014466:	2201      	movs	r2, #1
 8014468:	701a      	strb	r2, [r3, #0]
}
 801446a:	bf00      	nop
 801446c:	370c      	adds	r7, #12
 801446e:	46bd      	mov	sp, r7
 8014470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop
 8014478:	20008ea3 	.word	0x20008ea3

0801447c <HAL_TIM_PeriodElapsedCallback>:


// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
	time_flag_PeriodElapsedCallback=TRUE;
 8014484:	4b04      	ldr	r3, [pc, #16]	; (8014498 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8014486:	2201      	movs	r2, #1
 8014488:	701a      	strb	r2, [r3, #0]

}
 801448a:	bf00      	nop
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	20008ea4 	.word	0x20008ea4

0801449c <rtg_main>:
uint8_t send_data[10]="ameer 665";
uint8_t flag_R_master_SPI=FALSE;
uint8_t flag_R_slave_SPI=FALSE;

void rtg_main()
{
 801449c:	b580      	push	{r7, lr}
 801449e:	af00      	add	r7, sp, #0
	printf("\r\n * start * \r\n");
 80144a0:	4818      	ldr	r0, [pc, #96]	; (8014504 <rtg_main+0x68>)
 80144a2:	f000 f991 	bl	80147c8 <puts>

	HAL_SPI_Transmit(SPI_MASTER,send_data, 10,100 );
 80144a6:	2364      	movs	r3, #100	; 0x64
 80144a8:	220a      	movs	r2, #10
 80144aa:	4917      	ldr	r1, [pc, #92]	; (8014508 <rtg_main+0x6c>)
 80144ac:	4817      	ldr	r0, [pc, #92]	; (801450c <rtg_main+0x70>)
 80144ae:	f7f2 fb22 	bl	8006af6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_SLAVE,  data_R_slave, 10,100);
 80144b2:	2364      	movs	r3, #100	; 0x64
 80144b4:	220a      	movs	r2, #10
 80144b6:	4916      	ldr	r1, [pc, #88]	; (8014510 <rtg_main+0x74>)
 80144b8:	4816      	ldr	r0, [pc, #88]	; (8014514 <rtg_main+0x78>)
 80144ba:	f7f2 fc8a 	bl	8006dd2 <HAL_SPI_Receive>



	while (1)
	{
		if(flag_R_slave_SPI==TRUE)
 80144be:	4b16      	ldr	r3, [pc, #88]	; (8014518 <rtg_main+0x7c>)
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d111      	bne.n	80144ea <rtg_main+0x4e>
		{
			printf("\r\n flag_R_slave_SPI->%s \r\n",data_R_slave);
 80144c6:	4912      	ldr	r1, [pc, #72]	; (8014510 <rtg_main+0x74>)
 80144c8:	4814      	ldr	r0, [pc, #80]	; (801451c <rtg_main+0x80>)
 80144ca:	f000 f8f7 	bl	80146bc <iprintf>
			 HAL_SPI_Receive_IT(SPI_MASTER, data_R_master, 10);
 80144ce:	220a      	movs	r2, #10
 80144d0:	4913      	ldr	r1, [pc, #76]	; (8014520 <rtg_main+0x84>)
 80144d2:	480e      	ldr	r0, [pc, #56]	; (801450c <rtg_main+0x70>)
 80144d4:	f7f2 ffc0 	bl	8007458 <HAL_SPI_Receive_IT>
			 HAL_SPI_Transmit(SPI_SLAVE,(uint8_t*)"ameer 717", 10,100);
 80144d8:	2364      	movs	r3, #100	; 0x64
 80144da:	220a      	movs	r2, #10
 80144dc:	4911      	ldr	r1, [pc, #68]	; (8014524 <rtg_main+0x88>)
 80144de:	480d      	ldr	r0, [pc, #52]	; (8014514 <rtg_main+0x78>)
 80144e0:	f7f2 fb09 	bl	8006af6 <HAL_SPI_Transmit>

		   	 flag_R_slave_SPI=FALSE;
 80144e4:	4b0c      	ldr	r3, [pc, #48]	; (8014518 <rtg_main+0x7c>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	701a      	strb	r2, [r3, #0]
		}

		if(flag_R_master_SPI==TRUE)
 80144ea:	4b0f      	ldr	r3, [pc, #60]	; (8014528 <rtg_main+0x8c>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d1e5      	bne.n	80144be <rtg_main+0x22>
		{
			printf("\r\n flag_R_master_SPI->%s \r\n ",data_R_master);
 80144f2:	490b      	ldr	r1, [pc, #44]	; (8014520 <rtg_main+0x84>)
 80144f4:	480d      	ldr	r0, [pc, #52]	; (801452c <rtg_main+0x90>)
 80144f6:	f000 f8e1 	bl	80146bc <iprintf>
			flag_R_master_SPI=FALSE;
 80144fa:	4b0b      	ldr	r3, [pc, #44]	; (8014528 <rtg_main+0x8c>)
 80144fc:	2200      	movs	r2, #0
 80144fe:	701a      	strb	r2, [r3, #0]
		if(flag_R_slave_SPI==TRUE)
 8014500:	e7dd      	b.n	80144be <rtg_main+0x22>
 8014502:	bf00      	nop
 8014504:	08018240 	.word	0x08018240
 8014508:	2000002c 	.word	0x2000002c
 801450c:	2000047c 	.word	0x2000047c
 8014510:	20008eb4 	.word	0x20008eb4
 8014514:	200004e0 	.word	0x200004e0
 8014518:	20008ebf 	.word	0x20008ebf
 801451c:	08018250 	.word	0x08018250
 8014520:	20008ea8 	.word	0x20008ea8
 8014524:	0801826c 	.word	0x0801826c
 8014528:	20008ebe 	.word	0x20008ebe
 801452c:	08018278 	.word	0x08018278

08014530 <HAL_SPI_RxCpltCallback>:
		}
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_SLAVE) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	4a09      	ldr	r2, [pc, #36]	; (8014560 <HAL_SPI_RxCpltCallback+0x30>)
 801453c:	4293      	cmp	r3, r2
 801453e:	d102      	bne.n	8014546 <HAL_SPI_RxCpltCallback+0x16>
		flag_R_slave_SPI=TRUE;
 8014540:	4b08      	ldr	r3, [pc, #32]	; (8014564 <HAL_SPI_RxCpltCallback+0x34>)
 8014542:	2201      	movs	r2, #1
 8014544:	701a      	strb	r2, [r3, #0]

	}
	if (hspi == SPI_MASTER) {
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	4a07      	ldr	r2, [pc, #28]	; (8014568 <HAL_SPI_RxCpltCallback+0x38>)
 801454a:	4293      	cmp	r3, r2
 801454c:	d102      	bne.n	8014554 <HAL_SPI_RxCpltCallback+0x24>
		flag_R_master_SPI=TRUE;
 801454e:	4b07      	ldr	r3, [pc, #28]	; (801456c <HAL_SPI_RxCpltCallback+0x3c>)
 8014550:	2201      	movs	r2, #1
 8014552:	701a      	strb	r2, [r3, #0]
		}
}
 8014554:	bf00      	nop
 8014556:	370c      	adds	r7, #12
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr
 8014560:	200004e0 	.word	0x200004e0
 8014564:	20008ebf 	.word	0x20008ebf
 8014568:	2000047c 	.word	0x2000047c
 801456c:	20008ebe 	.word	0x20008ebe

08014570 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	b29a      	uxth	r2, r3
 8014580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	4804      	ldr	r0, [pc, #16]	; (8014598 <_write+0x28>)
 8014588:	f7f4 fa5a 	bl	8008a40 <HAL_UART_Transmit>
	return len;
 801458c:	687b      	ldr	r3, [r7, #4]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	20000760 	.word	0x20000760

0801459c <__io_getchar>:

// scanf
int __io_getchar(void) {
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 80145a6:	1df9      	adds	r1, r7, #7
 80145a8:	f04f 33ff 	mov.w	r3, #4294967295
 80145ac:	2201      	movs	r2, #1
 80145ae:	4807      	ldr	r0, [pc, #28]	; (80145cc <__io_getchar+0x30>)
 80145b0:	f7f4 fac9 	bl	8008b46 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 80145b4:	1df9      	adds	r1, r7, #7
 80145b6:	f04f 33ff 	mov.w	r3, #4294967295
 80145ba:	2201      	movs	r2, #1
 80145bc:	4803      	ldr	r0, [pc, #12]	; (80145cc <__io_getchar+0x30>)
 80145be:	f7f4 fa3f 	bl	8008a40 <HAL_UART_Transmit>
	return ch;
 80145c2:	79fb      	ldrb	r3, [r7, #7]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	20000760 	.word	0x20000760

080145d0 <_read>:

int _read(int file, char *ptr, int len) {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 80145dc:	2300      	movs	r3, #0
 80145de:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 80145e0:	2300      	movs	r3, #0
 80145e2:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 80145e4:	e016      	b.n	8014614 <_read+0x44>
		ch = __io_getchar();
 80145e6:	f7ff ffd9 	bl	801459c <__io_getchar>
 80145ea:	4603      	mov	r3, r0
 80145ec:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	7dfa      	ldrb	r2, [r7, #23]
 80145f2:	701a      	strb	r2, [r3, #0]
		ptr++;
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	3301      	adds	r3, #1
 80145f8:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 80145fa:	7dfb      	ldrb	r3, [r7, #23]
 80145fc:	2b0d      	cmp	r3, #13
 80145fe:	d002      	beq.n	8014606 <_read+0x36>
 8014600:	7dfb      	ldrb	r3, [r7, #23]
 8014602:	2b0a      	cmp	r3, #10
 8014604:	d103      	bne.n	801460e <_read+0x3e>
			*(ptr) = 0;
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	2200      	movs	r2, #0
 801460a:	701a      	strb	r2, [r3, #0]
			break;
 801460c:	e006      	b.n	801461c <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	3301      	adds	r3, #1
 8014612:	61fb      	str	r3, [r7, #28]
 8014614:	69fa      	ldr	r2, [r7, #28]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	429a      	cmp	r2, r3
 801461a:	dbe4      	blt.n	80145e6 <_read+0x16>
		}
	}
	return DataIdx + 1;
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	3301      	adds	r3, #1
}
 8014620:	4618      	mov	r0, r3
 8014622:	3720      	adds	r7, #32
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <__libc_init_array>:
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	4d0d      	ldr	r5, [pc, #52]	; (8014660 <__libc_init_array+0x38>)
 801462c:	4c0d      	ldr	r4, [pc, #52]	; (8014664 <__libc_init_array+0x3c>)
 801462e:	1b64      	subs	r4, r4, r5
 8014630:	10a4      	asrs	r4, r4, #2
 8014632:	2600      	movs	r6, #0
 8014634:	42a6      	cmp	r6, r4
 8014636:	d109      	bne.n	801464c <__libc_init_array+0x24>
 8014638:	4d0b      	ldr	r5, [pc, #44]	; (8014668 <__libc_init_array+0x40>)
 801463a:	4c0c      	ldr	r4, [pc, #48]	; (801466c <__libc_init_array+0x44>)
 801463c:	f001 f904 	bl	8015848 <_init>
 8014640:	1b64      	subs	r4, r4, r5
 8014642:	10a4      	asrs	r4, r4, #2
 8014644:	2600      	movs	r6, #0
 8014646:	42a6      	cmp	r6, r4
 8014648:	d105      	bne.n	8014656 <__libc_init_array+0x2e>
 801464a:	bd70      	pop	{r4, r5, r6, pc}
 801464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014650:	4798      	blx	r3
 8014652:	3601      	adds	r6, #1
 8014654:	e7ee      	b.n	8014634 <__libc_init_array+0xc>
 8014656:	f855 3b04 	ldr.w	r3, [r5], #4
 801465a:	4798      	blx	r3
 801465c:	3601      	adds	r6, #1
 801465e:	e7f2      	b.n	8014646 <__libc_init_array+0x1e>
 8014660:	080184f8 	.word	0x080184f8
 8014664:	080184f8 	.word	0x080184f8
 8014668:	080184f8 	.word	0x080184f8
 801466c:	080184fc 	.word	0x080184fc

08014670 <memcmp>:
 8014670:	b510      	push	{r4, lr}
 8014672:	3901      	subs	r1, #1
 8014674:	4402      	add	r2, r0
 8014676:	4290      	cmp	r0, r2
 8014678:	d101      	bne.n	801467e <memcmp+0xe>
 801467a:	2000      	movs	r0, #0
 801467c:	e005      	b.n	801468a <memcmp+0x1a>
 801467e:	7803      	ldrb	r3, [r0, #0]
 8014680:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014684:	42a3      	cmp	r3, r4
 8014686:	d001      	beq.n	801468c <memcmp+0x1c>
 8014688:	1b18      	subs	r0, r3, r4
 801468a:	bd10      	pop	{r4, pc}
 801468c:	3001      	adds	r0, #1
 801468e:	e7f2      	b.n	8014676 <memcmp+0x6>

08014690 <memcpy>:
 8014690:	440a      	add	r2, r1
 8014692:	4291      	cmp	r1, r2
 8014694:	f100 33ff 	add.w	r3, r0, #4294967295
 8014698:	d100      	bne.n	801469c <memcpy+0xc>
 801469a:	4770      	bx	lr
 801469c:	b510      	push	{r4, lr}
 801469e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146a6:	4291      	cmp	r1, r2
 80146a8:	d1f9      	bne.n	801469e <memcpy+0xe>
 80146aa:	bd10      	pop	{r4, pc}

080146ac <memset>:
 80146ac:	4402      	add	r2, r0
 80146ae:	4603      	mov	r3, r0
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d100      	bne.n	80146b6 <memset+0xa>
 80146b4:	4770      	bx	lr
 80146b6:	f803 1b01 	strb.w	r1, [r3], #1
 80146ba:	e7f9      	b.n	80146b0 <memset+0x4>

080146bc <iprintf>:
 80146bc:	b40f      	push	{r0, r1, r2, r3}
 80146be:	4b0a      	ldr	r3, [pc, #40]	; (80146e8 <iprintf+0x2c>)
 80146c0:	b513      	push	{r0, r1, r4, lr}
 80146c2:	681c      	ldr	r4, [r3, #0]
 80146c4:	b124      	cbz	r4, 80146d0 <iprintf+0x14>
 80146c6:	69a3      	ldr	r3, [r4, #24]
 80146c8:	b913      	cbnz	r3, 80146d0 <iprintf+0x14>
 80146ca:	4620      	mov	r0, r4
 80146cc:	f000 faba 	bl	8014c44 <__sinit>
 80146d0:	ab05      	add	r3, sp, #20
 80146d2:	9a04      	ldr	r2, [sp, #16]
 80146d4:	68a1      	ldr	r1, [r4, #8]
 80146d6:	9301      	str	r3, [sp, #4]
 80146d8:	4620      	mov	r0, r4
 80146da:	f000 fcdd 	bl	8015098 <_vfiprintf_r>
 80146de:	b002      	add	sp, #8
 80146e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146e4:	b004      	add	sp, #16
 80146e6:	4770      	bx	lr
 80146e8:	20000038 	.word	0x20000038

080146ec <_puts_r>:
 80146ec:	b570      	push	{r4, r5, r6, lr}
 80146ee:	460e      	mov	r6, r1
 80146f0:	4605      	mov	r5, r0
 80146f2:	b118      	cbz	r0, 80146fc <_puts_r+0x10>
 80146f4:	6983      	ldr	r3, [r0, #24]
 80146f6:	b90b      	cbnz	r3, 80146fc <_puts_r+0x10>
 80146f8:	f000 faa4 	bl	8014c44 <__sinit>
 80146fc:	69ab      	ldr	r3, [r5, #24]
 80146fe:	68ac      	ldr	r4, [r5, #8]
 8014700:	b913      	cbnz	r3, 8014708 <_puts_r+0x1c>
 8014702:	4628      	mov	r0, r5
 8014704:	f000 fa9e 	bl	8014c44 <__sinit>
 8014708:	4b2c      	ldr	r3, [pc, #176]	; (80147bc <_puts_r+0xd0>)
 801470a:	429c      	cmp	r4, r3
 801470c:	d120      	bne.n	8014750 <_puts_r+0x64>
 801470e:	686c      	ldr	r4, [r5, #4]
 8014710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014712:	07db      	lsls	r3, r3, #31
 8014714:	d405      	bmi.n	8014722 <_puts_r+0x36>
 8014716:	89a3      	ldrh	r3, [r4, #12]
 8014718:	0598      	lsls	r0, r3, #22
 801471a:	d402      	bmi.n	8014722 <_puts_r+0x36>
 801471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801471e:	f000 fb41 	bl	8014da4 <__retarget_lock_acquire_recursive>
 8014722:	89a3      	ldrh	r3, [r4, #12]
 8014724:	0719      	lsls	r1, r3, #28
 8014726:	d51d      	bpl.n	8014764 <_puts_r+0x78>
 8014728:	6923      	ldr	r3, [r4, #16]
 801472a:	b1db      	cbz	r3, 8014764 <_puts_r+0x78>
 801472c:	3e01      	subs	r6, #1
 801472e:	68a3      	ldr	r3, [r4, #8]
 8014730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014734:	3b01      	subs	r3, #1
 8014736:	60a3      	str	r3, [r4, #8]
 8014738:	bb39      	cbnz	r1, 801478a <_puts_r+0x9e>
 801473a:	2b00      	cmp	r3, #0
 801473c:	da38      	bge.n	80147b0 <_puts_r+0xc4>
 801473e:	4622      	mov	r2, r4
 8014740:	210a      	movs	r1, #10
 8014742:	4628      	mov	r0, r5
 8014744:	f000 f886 	bl	8014854 <__swbuf_r>
 8014748:	3001      	adds	r0, #1
 801474a:	d011      	beq.n	8014770 <_puts_r+0x84>
 801474c:	250a      	movs	r5, #10
 801474e:	e011      	b.n	8014774 <_puts_r+0x88>
 8014750:	4b1b      	ldr	r3, [pc, #108]	; (80147c0 <_puts_r+0xd4>)
 8014752:	429c      	cmp	r4, r3
 8014754:	d101      	bne.n	801475a <_puts_r+0x6e>
 8014756:	68ac      	ldr	r4, [r5, #8]
 8014758:	e7da      	b.n	8014710 <_puts_r+0x24>
 801475a:	4b1a      	ldr	r3, [pc, #104]	; (80147c4 <_puts_r+0xd8>)
 801475c:	429c      	cmp	r4, r3
 801475e:	bf08      	it	eq
 8014760:	68ec      	ldreq	r4, [r5, #12]
 8014762:	e7d5      	b.n	8014710 <_puts_r+0x24>
 8014764:	4621      	mov	r1, r4
 8014766:	4628      	mov	r0, r5
 8014768:	f000 f8c6 	bl	80148f8 <__swsetup_r>
 801476c:	2800      	cmp	r0, #0
 801476e:	d0dd      	beq.n	801472c <_puts_r+0x40>
 8014770:	f04f 35ff 	mov.w	r5, #4294967295
 8014774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014776:	07da      	lsls	r2, r3, #31
 8014778:	d405      	bmi.n	8014786 <_puts_r+0x9a>
 801477a:	89a3      	ldrh	r3, [r4, #12]
 801477c:	059b      	lsls	r3, r3, #22
 801477e:	d402      	bmi.n	8014786 <_puts_r+0x9a>
 8014780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014782:	f000 fb10 	bl	8014da6 <__retarget_lock_release_recursive>
 8014786:	4628      	mov	r0, r5
 8014788:	bd70      	pop	{r4, r5, r6, pc}
 801478a:	2b00      	cmp	r3, #0
 801478c:	da04      	bge.n	8014798 <_puts_r+0xac>
 801478e:	69a2      	ldr	r2, [r4, #24]
 8014790:	429a      	cmp	r2, r3
 8014792:	dc06      	bgt.n	80147a2 <_puts_r+0xb6>
 8014794:	290a      	cmp	r1, #10
 8014796:	d004      	beq.n	80147a2 <_puts_r+0xb6>
 8014798:	6823      	ldr	r3, [r4, #0]
 801479a:	1c5a      	adds	r2, r3, #1
 801479c:	6022      	str	r2, [r4, #0]
 801479e:	7019      	strb	r1, [r3, #0]
 80147a0:	e7c5      	b.n	801472e <_puts_r+0x42>
 80147a2:	4622      	mov	r2, r4
 80147a4:	4628      	mov	r0, r5
 80147a6:	f000 f855 	bl	8014854 <__swbuf_r>
 80147aa:	3001      	adds	r0, #1
 80147ac:	d1bf      	bne.n	801472e <_puts_r+0x42>
 80147ae:	e7df      	b.n	8014770 <_puts_r+0x84>
 80147b0:	6823      	ldr	r3, [r4, #0]
 80147b2:	250a      	movs	r5, #10
 80147b4:	1c5a      	adds	r2, r3, #1
 80147b6:	6022      	str	r2, [r4, #0]
 80147b8:	701d      	strb	r5, [r3, #0]
 80147ba:	e7db      	b.n	8014774 <_puts_r+0x88>
 80147bc:	0801847c 	.word	0x0801847c
 80147c0:	0801849c 	.word	0x0801849c
 80147c4:	0801845c 	.word	0x0801845c

080147c8 <puts>:
 80147c8:	4b02      	ldr	r3, [pc, #8]	; (80147d4 <puts+0xc>)
 80147ca:	4601      	mov	r1, r0
 80147cc:	6818      	ldr	r0, [r3, #0]
 80147ce:	f7ff bf8d 	b.w	80146ec <_puts_r>
 80147d2:	bf00      	nop
 80147d4:	20000038 	.word	0x20000038

080147d8 <rand>:
 80147d8:	4b16      	ldr	r3, [pc, #88]	; (8014834 <rand+0x5c>)
 80147da:	b510      	push	{r4, lr}
 80147dc:	681c      	ldr	r4, [r3, #0]
 80147de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147e0:	b9b3      	cbnz	r3, 8014810 <rand+0x38>
 80147e2:	2018      	movs	r0, #24
 80147e4:	f000 fb46 	bl	8014e74 <malloc>
 80147e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80147ea:	b928      	cbnz	r0, 80147f8 <rand+0x20>
 80147ec:	4602      	mov	r2, r0
 80147ee:	4b12      	ldr	r3, [pc, #72]	; (8014838 <rand+0x60>)
 80147f0:	4812      	ldr	r0, [pc, #72]	; (801483c <rand+0x64>)
 80147f2:	214e      	movs	r1, #78	; 0x4e
 80147f4:	f000 f8ee 	bl	80149d4 <__assert_func>
 80147f8:	4a11      	ldr	r2, [pc, #68]	; (8014840 <rand+0x68>)
 80147fa:	4b12      	ldr	r3, [pc, #72]	; (8014844 <rand+0x6c>)
 80147fc:	e9c0 2300 	strd	r2, r3, [r0]
 8014800:	4b11      	ldr	r3, [pc, #68]	; (8014848 <rand+0x70>)
 8014802:	6083      	str	r3, [r0, #8]
 8014804:	230b      	movs	r3, #11
 8014806:	8183      	strh	r3, [r0, #12]
 8014808:	2201      	movs	r2, #1
 801480a:	2300      	movs	r3, #0
 801480c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014810:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014812:	4a0e      	ldr	r2, [pc, #56]	; (801484c <rand+0x74>)
 8014814:	6920      	ldr	r0, [r4, #16]
 8014816:	6963      	ldr	r3, [r4, #20]
 8014818:	490d      	ldr	r1, [pc, #52]	; (8014850 <rand+0x78>)
 801481a:	4342      	muls	r2, r0
 801481c:	fb01 2203 	mla	r2, r1, r3, r2
 8014820:	fba0 0101 	umull	r0, r1, r0, r1
 8014824:	1c43      	adds	r3, r0, #1
 8014826:	eb42 0001 	adc.w	r0, r2, r1
 801482a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801482e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014832:	bd10      	pop	{r4, pc}
 8014834:	20000038 	.word	0x20000038
 8014838:	080183ac 	.word	0x080183ac
 801483c:	080183c3 	.word	0x080183c3
 8014840:	abcd330e 	.word	0xabcd330e
 8014844:	e66d1234 	.word	0xe66d1234
 8014848:	0005deec 	.word	0x0005deec
 801484c:	5851f42d 	.word	0x5851f42d
 8014850:	4c957f2d 	.word	0x4c957f2d

08014854 <__swbuf_r>:
 8014854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014856:	460e      	mov	r6, r1
 8014858:	4614      	mov	r4, r2
 801485a:	4605      	mov	r5, r0
 801485c:	b118      	cbz	r0, 8014866 <__swbuf_r+0x12>
 801485e:	6983      	ldr	r3, [r0, #24]
 8014860:	b90b      	cbnz	r3, 8014866 <__swbuf_r+0x12>
 8014862:	f000 f9ef 	bl	8014c44 <__sinit>
 8014866:	4b21      	ldr	r3, [pc, #132]	; (80148ec <__swbuf_r+0x98>)
 8014868:	429c      	cmp	r4, r3
 801486a:	d12b      	bne.n	80148c4 <__swbuf_r+0x70>
 801486c:	686c      	ldr	r4, [r5, #4]
 801486e:	69a3      	ldr	r3, [r4, #24]
 8014870:	60a3      	str	r3, [r4, #8]
 8014872:	89a3      	ldrh	r3, [r4, #12]
 8014874:	071a      	lsls	r2, r3, #28
 8014876:	d52f      	bpl.n	80148d8 <__swbuf_r+0x84>
 8014878:	6923      	ldr	r3, [r4, #16]
 801487a:	b36b      	cbz	r3, 80148d8 <__swbuf_r+0x84>
 801487c:	6923      	ldr	r3, [r4, #16]
 801487e:	6820      	ldr	r0, [r4, #0]
 8014880:	1ac0      	subs	r0, r0, r3
 8014882:	6963      	ldr	r3, [r4, #20]
 8014884:	b2f6      	uxtb	r6, r6
 8014886:	4283      	cmp	r3, r0
 8014888:	4637      	mov	r7, r6
 801488a:	dc04      	bgt.n	8014896 <__swbuf_r+0x42>
 801488c:	4621      	mov	r1, r4
 801488e:	4628      	mov	r0, r5
 8014890:	f000 f944 	bl	8014b1c <_fflush_r>
 8014894:	bb30      	cbnz	r0, 80148e4 <__swbuf_r+0x90>
 8014896:	68a3      	ldr	r3, [r4, #8]
 8014898:	3b01      	subs	r3, #1
 801489a:	60a3      	str	r3, [r4, #8]
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	1c5a      	adds	r2, r3, #1
 80148a0:	6022      	str	r2, [r4, #0]
 80148a2:	701e      	strb	r6, [r3, #0]
 80148a4:	6963      	ldr	r3, [r4, #20]
 80148a6:	3001      	adds	r0, #1
 80148a8:	4283      	cmp	r3, r0
 80148aa:	d004      	beq.n	80148b6 <__swbuf_r+0x62>
 80148ac:	89a3      	ldrh	r3, [r4, #12]
 80148ae:	07db      	lsls	r3, r3, #31
 80148b0:	d506      	bpl.n	80148c0 <__swbuf_r+0x6c>
 80148b2:	2e0a      	cmp	r6, #10
 80148b4:	d104      	bne.n	80148c0 <__swbuf_r+0x6c>
 80148b6:	4621      	mov	r1, r4
 80148b8:	4628      	mov	r0, r5
 80148ba:	f000 f92f 	bl	8014b1c <_fflush_r>
 80148be:	b988      	cbnz	r0, 80148e4 <__swbuf_r+0x90>
 80148c0:	4638      	mov	r0, r7
 80148c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148c4:	4b0a      	ldr	r3, [pc, #40]	; (80148f0 <__swbuf_r+0x9c>)
 80148c6:	429c      	cmp	r4, r3
 80148c8:	d101      	bne.n	80148ce <__swbuf_r+0x7a>
 80148ca:	68ac      	ldr	r4, [r5, #8]
 80148cc:	e7cf      	b.n	801486e <__swbuf_r+0x1a>
 80148ce:	4b09      	ldr	r3, [pc, #36]	; (80148f4 <__swbuf_r+0xa0>)
 80148d0:	429c      	cmp	r4, r3
 80148d2:	bf08      	it	eq
 80148d4:	68ec      	ldreq	r4, [r5, #12]
 80148d6:	e7ca      	b.n	801486e <__swbuf_r+0x1a>
 80148d8:	4621      	mov	r1, r4
 80148da:	4628      	mov	r0, r5
 80148dc:	f000 f80c 	bl	80148f8 <__swsetup_r>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d0cb      	beq.n	801487c <__swbuf_r+0x28>
 80148e4:	f04f 37ff 	mov.w	r7, #4294967295
 80148e8:	e7ea      	b.n	80148c0 <__swbuf_r+0x6c>
 80148ea:	bf00      	nop
 80148ec:	0801847c 	.word	0x0801847c
 80148f0:	0801849c 	.word	0x0801849c
 80148f4:	0801845c 	.word	0x0801845c

080148f8 <__swsetup_r>:
 80148f8:	4b32      	ldr	r3, [pc, #200]	; (80149c4 <__swsetup_r+0xcc>)
 80148fa:	b570      	push	{r4, r5, r6, lr}
 80148fc:	681d      	ldr	r5, [r3, #0]
 80148fe:	4606      	mov	r6, r0
 8014900:	460c      	mov	r4, r1
 8014902:	b125      	cbz	r5, 801490e <__swsetup_r+0x16>
 8014904:	69ab      	ldr	r3, [r5, #24]
 8014906:	b913      	cbnz	r3, 801490e <__swsetup_r+0x16>
 8014908:	4628      	mov	r0, r5
 801490a:	f000 f99b 	bl	8014c44 <__sinit>
 801490e:	4b2e      	ldr	r3, [pc, #184]	; (80149c8 <__swsetup_r+0xd0>)
 8014910:	429c      	cmp	r4, r3
 8014912:	d10f      	bne.n	8014934 <__swsetup_r+0x3c>
 8014914:	686c      	ldr	r4, [r5, #4]
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801491c:	0719      	lsls	r1, r3, #28
 801491e:	d42c      	bmi.n	801497a <__swsetup_r+0x82>
 8014920:	06dd      	lsls	r5, r3, #27
 8014922:	d411      	bmi.n	8014948 <__swsetup_r+0x50>
 8014924:	2309      	movs	r3, #9
 8014926:	6033      	str	r3, [r6, #0]
 8014928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801492c:	81a3      	strh	r3, [r4, #12]
 801492e:	f04f 30ff 	mov.w	r0, #4294967295
 8014932:	e03e      	b.n	80149b2 <__swsetup_r+0xba>
 8014934:	4b25      	ldr	r3, [pc, #148]	; (80149cc <__swsetup_r+0xd4>)
 8014936:	429c      	cmp	r4, r3
 8014938:	d101      	bne.n	801493e <__swsetup_r+0x46>
 801493a:	68ac      	ldr	r4, [r5, #8]
 801493c:	e7eb      	b.n	8014916 <__swsetup_r+0x1e>
 801493e:	4b24      	ldr	r3, [pc, #144]	; (80149d0 <__swsetup_r+0xd8>)
 8014940:	429c      	cmp	r4, r3
 8014942:	bf08      	it	eq
 8014944:	68ec      	ldreq	r4, [r5, #12]
 8014946:	e7e6      	b.n	8014916 <__swsetup_r+0x1e>
 8014948:	0758      	lsls	r0, r3, #29
 801494a:	d512      	bpl.n	8014972 <__swsetup_r+0x7a>
 801494c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801494e:	b141      	cbz	r1, 8014962 <__swsetup_r+0x6a>
 8014950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014954:	4299      	cmp	r1, r3
 8014956:	d002      	beq.n	801495e <__swsetup_r+0x66>
 8014958:	4630      	mov	r0, r6
 801495a:	f000 fa93 	bl	8014e84 <_free_r>
 801495e:	2300      	movs	r3, #0
 8014960:	6363      	str	r3, [r4, #52]	; 0x34
 8014962:	89a3      	ldrh	r3, [r4, #12]
 8014964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014968:	81a3      	strh	r3, [r4, #12]
 801496a:	2300      	movs	r3, #0
 801496c:	6063      	str	r3, [r4, #4]
 801496e:	6923      	ldr	r3, [r4, #16]
 8014970:	6023      	str	r3, [r4, #0]
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	f043 0308 	orr.w	r3, r3, #8
 8014978:	81a3      	strh	r3, [r4, #12]
 801497a:	6923      	ldr	r3, [r4, #16]
 801497c:	b94b      	cbnz	r3, 8014992 <__swsetup_r+0x9a>
 801497e:	89a3      	ldrh	r3, [r4, #12]
 8014980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014988:	d003      	beq.n	8014992 <__swsetup_r+0x9a>
 801498a:	4621      	mov	r1, r4
 801498c:	4630      	mov	r0, r6
 801498e:	f000 fa31 	bl	8014df4 <__smakebuf_r>
 8014992:	89a0      	ldrh	r0, [r4, #12]
 8014994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014998:	f010 0301 	ands.w	r3, r0, #1
 801499c:	d00a      	beq.n	80149b4 <__swsetup_r+0xbc>
 801499e:	2300      	movs	r3, #0
 80149a0:	60a3      	str	r3, [r4, #8]
 80149a2:	6963      	ldr	r3, [r4, #20]
 80149a4:	425b      	negs	r3, r3
 80149a6:	61a3      	str	r3, [r4, #24]
 80149a8:	6923      	ldr	r3, [r4, #16]
 80149aa:	b943      	cbnz	r3, 80149be <__swsetup_r+0xc6>
 80149ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80149b0:	d1ba      	bne.n	8014928 <__swsetup_r+0x30>
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	0781      	lsls	r1, r0, #30
 80149b6:	bf58      	it	pl
 80149b8:	6963      	ldrpl	r3, [r4, #20]
 80149ba:	60a3      	str	r3, [r4, #8]
 80149bc:	e7f4      	b.n	80149a8 <__swsetup_r+0xb0>
 80149be:	2000      	movs	r0, #0
 80149c0:	e7f7      	b.n	80149b2 <__swsetup_r+0xba>
 80149c2:	bf00      	nop
 80149c4:	20000038 	.word	0x20000038
 80149c8:	0801847c 	.word	0x0801847c
 80149cc:	0801849c 	.word	0x0801849c
 80149d0:	0801845c 	.word	0x0801845c

080149d4 <__assert_func>:
 80149d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149d6:	4614      	mov	r4, r2
 80149d8:	461a      	mov	r2, r3
 80149da:	4b09      	ldr	r3, [pc, #36]	; (8014a00 <__assert_func+0x2c>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4605      	mov	r5, r0
 80149e0:	68d8      	ldr	r0, [r3, #12]
 80149e2:	b14c      	cbz	r4, 80149f8 <__assert_func+0x24>
 80149e4:	4b07      	ldr	r3, [pc, #28]	; (8014a04 <__assert_func+0x30>)
 80149e6:	9100      	str	r1, [sp, #0]
 80149e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149ec:	4906      	ldr	r1, [pc, #24]	; (8014a08 <__assert_func+0x34>)
 80149ee:	462b      	mov	r3, r5
 80149f0:	f000 f9a6 	bl	8014d40 <fiprintf>
 80149f4:	f000 fe7a 	bl	80156ec <abort>
 80149f8:	4b04      	ldr	r3, [pc, #16]	; (8014a0c <__assert_func+0x38>)
 80149fa:	461c      	mov	r4, r3
 80149fc:	e7f3      	b.n	80149e6 <__assert_func+0x12>
 80149fe:	bf00      	nop
 8014a00:	20000038 	.word	0x20000038
 8014a04:	0801841e 	.word	0x0801841e
 8014a08:	0801842b 	.word	0x0801842b
 8014a0c:	08018459 	.word	0x08018459

08014a10 <__sflush_r>:
 8014a10:	898a      	ldrh	r2, [r1, #12]
 8014a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a16:	4605      	mov	r5, r0
 8014a18:	0710      	lsls	r0, r2, #28
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	d458      	bmi.n	8014ad0 <__sflush_r+0xc0>
 8014a1e:	684b      	ldr	r3, [r1, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	dc05      	bgt.n	8014a30 <__sflush_r+0x20>
 8014a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	dc02      	bgt.n	8014a30 <__sflush_r+0x20>
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a32:	2e00      	cmp	r6, #0
 8014a34:	d0f9      	beq.n	8014a2a <__sflush_r+0x1a>
 8014a36:	2300      	movs	r3, #0
 8014a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a3c:	682f      	ldr	r7, [r5, #0]
 8014a3e:	602b      	str	r3, [r5, #0]
 8014a40:	d032      	beq.n	8014aa8 <__sflush_r+0x98>
 8014a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a44:	89a3      	ldrh	r3, [r4, #12]
 8014a46:	075a      	lsls	r2, r3, #29
 8014a48:	d505      	bpl.n	8014a56 <__sflush_r+0x46>
 8014a4a:	6863      	ldr	r3, [r4, #4]
 8014a4c:	1ac0      	subs	r0, r0, r3
 8014a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a50:	b10b      	cbz	r3, 8014a56 <__sflush_r+0x46>
 8014a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a54:	1ac0      	subs	r0, r0, r3
 8014a56:	2300      	movs	r3, #0
 8014a58:	4602      	mov	r2, r0
 8014a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a5c:	6a21      	ldr	r1, [r4, #32]
 8014a5e:	4628      	mov	r0, r5
 8014a60:	47b0      	blx	r6
 8014a62:	1c43      	adds	r3, r0, #1
 8014a64:	89a3      	ldrh	r3, [r4, #12]
 8014a66:	d106      	bne.n	8014a76 <__sflush_r+0x66>
 8014a68:	6829      	ldr	r1, [r5, #0]
 8014a6a:	291d      	cmp	r1, #29
 8014a6c:	d82c      	bhi.n	8014ac8 <__sflush_r+0xb8>
 8014a6e:	4a2a      	ldr	r2, [pc, #168]	; (8014b18 <__sflush_r+0x108>)
 8014a70:	40ca      	lsrs	r2, r1
 8014a72:	07d6      	lsls	r6, r2, #31
 8014a74:	d528      	bpl.n	8014ac8 <__sflush_r+0xb8>
 8014a76:	2200      	movs	r2, #0
 8014a78:	6062      	str	r2, [r4, #4]
 8014a7a:	04d9      	lsls	r1, r3, #19
 8014a7c:	6922      	ldr	r2, [r4, #16]
 8014a7e:	6022      	str	r2, [r4, #0]
 8014a80:	d504      	bpl.n	8014a8c <__sflush_r+0x7c>
 8014a82:	1c42      	adds	r2, r0, #1
 8014a84:	d101      	bne.n	8014a8a <__sflush_r+0x7a>
 8014a86:	682b      	ldr	r3, [r5, #0]
 8014a88:	b903      	cbnz	r3, 8014a8c <__sflush_r+0x7c>
 8014a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8014a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a8e:	602f      	str	r7, [r5, #0]
 8014a90:	2900      	cmp	r1, #0
 8014a92:	d0ca      	beq.n	8014a2a <__sflush_r+0x1a>
 8014a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a98:	4299      	cmp	r1, r3
 8014a9a:	d002      	beq.n	8014aa2 <__sflush_r+0x92>
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f000 f9f1 	bl	8014e84 <_free_r>
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8014aa6:	e7c1      	b.n	8014a2c <__sflush_r+0x1c>
 8014aa8:	6a21      	ldr	r1, [r4, #32]
 8014aaa:	2301      	movs	r3, #1
 8014aac:	4628      	mov	r0, r5
 8014aae:	47b0      	blx	r6
 8014ab0:	1c41      	adds	r1, r0, #1
 8014ab2:	d1c7      	bne.n	8014a44 <__sflush_r+0x34>
 8014ab4:	682b      	ldr	r3, [r5, #0]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d0c4      	beq.n	8014a44 <__sflush_r+0x34>
 8014aba:	2b1d      	cmp	r3, #29
 8014abc:	d001      	beq.n	8014ac2 <__sflush_r+0xb2>
 8014abe:	2b16      	cmp	r3, #22
 8014ac0:	d101      	bne.n	8014ac6 <__sflush_r+0xb6>
 8014ac2:	602f      	str	r7, [r5, #0]
 8014ac4:	e7b1      	b.n	8014a2a <__sflush_r+0x1a>
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014acc:	81a3      	strh	r3, [r4, #12]
 8014ace:	e7ad      	b.n	8014a2c <__sflush_r+0x1c>
 8014ad0:	690f      	ldr	r7, [r1, #16]
 8014ad2:	2f00      	cmp	r7, #0
 8014ad4:	d0a9      	beq.n	8014a2a <__sflush_r+0x1a>
 8014ad6:	0793      	lsls	r3, r2, #30
 8014ad8:	680e      	ldr	r6, [r1, #0]
 8014ada:	bf08      	it	eq
 8014adc:	694b      	ldreq	r3, [r1, #20]
 8014ade:	600f      	str	r7, [r1, #0]
 8014ae0:	bf18      	it	ne
 8014ae2:	2300      	movne	r3, #0
 8014ae4:	eba6 0807 	sub.w	r8, r6, r7
 8014ae8:	608b      	str	r3, [r1, #8]
 8014aea:	f1b8 0f00 	cmp.w	r8, #0
 8014aee:	dd9c      	ble.n	8014a2a <__sflush_r+0x1a>
 8014af0:	6a21      	ldr	r1, [r4, #32]
 8014af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014af4:	4643      	mov	r3, r8
 8014af6:	463a      	mov	r2, r7
 8014af8:	4628      	mov	r0, r5
 8014afa:	47b0      	blx	r6
 8014afc:	2800      	cmp	r0, #0
 8014afe:	dc06      	bgt.n	8014b0e <__sflush_r+0xfe>
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b06:	81a3      	strh	r3, [r4, #12]
 8014b08:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0c:	e78e      	b.n	8014a2c <__sflush_r+0x1c>
 8014b0e:	4407      	add	r7, r0
 8014b10:	eba8 0800 	sub.w	r8, r8, r0
 8014b14:	e7e9      	b.n	8014aea <__sflush_r+0xda>
 8014b16:	bf00      	nop
 8014b18:	20400001 	.word	0x20400001

08014b1c <_fflush_r>:
 8014b1c:	b538      	push	{r3, r4, r5, lr}
 8014b1e:	690b      	ldr	r3, [r1, #16]
 8014b20:	4605      	mov	r5, r0
 8014b22:	460c      	mov	r4, r1
 8014b24:	b913      	cbnz	r3, 8014b2c <_fflush_r+0x10>
 8014b26:	2500      	movs	r5, #0
 8014b28:	4628      	mov	r0, r5
 8014b2a:	bd38      	pop	{r3, r4, r5, pc}
 8014b2c:	b118      	cbz	r0, 8014b36 <_fflush_r+0x1a>
 8014b2e:	6983      	ldr	r3, [r0, #24]
 8014b30:	b90b      	cbnz	r3, 8014b36 <_fflush_r+0x1a>
 8014b32:	f000 f887 	bl	8014c44 <__sinit>
 8014b36:	4b14      	ldr	r3, [pc, #80]	; (8014b88 <_fflush_r+0x6c>)
 8014b38:	429c      	cmp	r4, r3
 8014b3a:	d11b      	bne.n	8014b74 <_fflush_r+0x58>
 8014b3c:	686c      	ldr	r4, [r5, #4]
 8014b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d0ef      	beq.n	8014b26 <_fflush_r+0xa>
 8014b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b48:	07d0      	lsls	r0, r2, #31
 8014b4a:	d404      	bmi.n	8014b56 <_fflush_r+0x3a>
 8014b4c:	0599      	lsls	r1, r3, #22
 8014b4e:	d402      	bmi.n	8014b56 <_fflush_r+0x3a>
 8014b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b52:	f000 f927 	bl	8014da4 <__retarget_lock_acquire_recursive>
 8014b56:	4628      	mov	r0, r5
 8014b58:	4621      	mov	r1, r4
 8014b5a:	f7ff ff59 	bl	8014a10 <__sflush_r>
 8014b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b60:	07da      	lsls	r2, r3, #31
 8014b62:	4605      	mov	r5, r0
 8014b64:	d4e0      	bmi.n	8014b28 <_fflush_r+0xc>
 8014b66:	89a3      	ldrh	r3, [r4, #12]
 8014b68:	059b      	lsls	r3, r3, #22
 8014b6a:	d4dd      	bmi.n	8014b28 <_fflush_r+0xc>
 8014b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b6e:	f000 f91a 	bl	8014da6 <__retarget_lock_release_recursive>
 8014b72:	e7d9      	b.n	8014b28 <_fflush_r+0xc>
 8014b74:	4b05      	ldr	r3, [pc, #20]	; (8014b8c <_fflush_r+0x70>)
 8014b76:	429c      	cmp	r4, r3
 8014b78:	d101      	bne.n	8014b7e <_fflush_r+0x62>
 8014b7a:	68ac      	ldr	r4, [r5, #8]
 8014b7c:	e7df      	b.n	8014b3e <_fflush_r+0x22>
 8014b7e:	4b04      	ldr	r3, [pc, #16]	; (8014b90 <_fflush_r+0x74>)
 8014b80:	429c      	cmp	r4, r3
 8014b82:	bf08      	it	eq
 8014b84:	68ec      	ldreq	r4, [r5, #12]
 8014b86:	e7da      	b.n	8014b3e <_fflush_r+0x22>
 8014b88:	0801847c 	.word	0x0801847c
 8014b8c:	0801849c 	.word	0x0801849c
 8014b90:	0801845c 	.word	0x0801845c

08014b94 <std>:
 8014b94:	2300      	movs	r3, #0
 8014b96:	b510      	push	{r4, lr}
 8014b98:	4604      	mov	r4, r0
 8014b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8014b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ba2:	6083      	str	r3, [r0, #8]
 8014ba4:	8181      	strh	r1, [r0, #12]
 8014ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8014ba8:	81c2      	strh	r2, [r0, #14]
 8014baa:	6183      	str	r3, [r0, #24]
 8014bac:	4619      	mov	r1, r3
 8014bae:	2208      	movs	r2, #8
 8014bb0:	305c      	adds	r0, #92	; 0x5c
 8014bb2:	f7ff fd7b 	bl	80146ac <memset>
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <std+0x38>)
 8014bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8014bba:	4b05      	ldr	r3, [pc, #20]	; (8014bd0 <std+0x3c>)
 8014bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8014bbe:	4b05      	ldr	r3, [pc, #20]	; (8014bd4 <std+0x40>)
 8014bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014bc2:	4b05      	ldr	r3, [pc, #20]	; (8014bd8 <std+0x44>)
 8014bc4:	6224      	str	r4, [r4, #32]
 8014bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8014bc8:	bd10      	pop	{r4, pc}
 8014bca:	bf00      	nop
 8014bcc:	08015641 	.word	0x08015641
 8014bd0:	08015663 	.word	0x08015663
 8014bd4:	0801569b 	.word	0x0801569b
 8014bd8:	080156bf 	.word	0x080156bf

08014bdc <_cleanup_r>:
 8014bdc:	4901      	ldr	r1, [pc, #4]	; (8014be4 <_cleanup_r+0x8>)
 8014bde:	f000 b8c1 	b.w	8014d64 <_fwalk_reent>
 8014be2:	bf00      	nop
 8014be4:	08014b1d 	.word	0x08014b1d

08014be8 <__sfmoreglue>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	2268      	movs	r2, #104	; 0x68
 8014bec:	1e4d      	subs	r5, r1, #1
 8014bee:	4355      	muls	r5, r2
 8014bf0:	460e      	mov	r6, r1
 8014bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014bf6:	f000 f9b1 	bl	8014f5c <_malloc_r>
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	b140      	cbz	r0, 8014c10 <__sfmoreglue+0x28>
 8014bfe:	2100      	movs	r1, #0
 8014c00:	e9c0 1600 	strd	r1, r6, [r0]
 8014c04:	300c      	adds	r0, #12
 8014c06:	60a0      	str	r0, [r4, #8]
 8014c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c0c:	f7ff fd4e 	bl	80146ac <memset>
 8014c10:	4620      	mov	r0, r4
 8014c12:	bd70      	pop	{r4, r5, r6, pc}

08014c14 <__sfp_lock_acquire>:
 8014c14:	4801      	ldr	r0, [pc, #4]	; (8014c1c <__sfp_lock_acquire+0x8>)
 8014c16:	f000 b8c5 	b.w	8014da4 <__retarget_lock_acquire_recursive>
 8014c1a:	bf00      	nop
 8014c1c:	20008ec5 	.word	0x20008ec5

08014c20 <__sfp_lock_release>:
 8014c20:	4801      	ldr	r0, [pc, #4]	; (8014c28 <__sfp_lock_release+0x8>)
 8014c22:	f000 b8c0 	b.w	8014da6 <__retarget_lock_release_recursive>
 8014c26:	bf00      	nop
 8014c28:	20008ec5 	.word	0x20008ec5

08014c2c <__sinit_lock_acquire>:
 8014c2c:	4801      	ldr	r0, [pc, #4]	; (8014c34 <__sinit_lock_acquire+0x8>)
 8014c2e:	f000 b8b9 	b.w	8014da4 <__retarget_lock_acquire_recursive>
 8014c32:	bf00      	nop
 8014c34:	20008ec6 	.word	0x20008ec6

08014c38 <__sinit_lock_release>:
 8014c38:	4801      	ldr	r0, [pc, #4]	; (8014c40 <__sinit_lock_release+0x8>)
 8014c3a:	f000 b8b4 	b.w	8014da6 <__retarget_lock_release_recursive>
 8014c3e:	bf00      	nop
 8014c40:	20008ec6 	.word	0x20008ec6

08014c44 <__sinit>:
 8014c44:	b510      	push	{r4, lr}
 8014c46:	4604      	mov	r4, r0
 8014c48:	f7ff fff0 	bl	8014c2c <__sinit_lock_acquire>
 8014c4c:	69a3      	ldr	r3, [r4, #24]
 8014c4e:	b11b      	cbz	r3, 8014c58 <__sinit+0x14>
 8014c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c54:	f7ff bff0 	b.w	8014c38 <__sinit_lock_release>
 8014c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8014c5e:	4b13      	ldr	r3, [pc, #76]	; (8014cac <__sinit+0x68>)
 8014c60:	4a13      	ldr	r2, [pc, #76]	; (8014cb0 <__sinit+0x6c>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8014c66:	42a3      	cmp	r3, r4
 8014c68:	bf04      	itt	eq
 8014c6a:	2301      	moveq	r3, #1
 8014c6c:	61a3      	streq	r3, [r4, #24]
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f000 f820 	bl	8014cb4 <__sfp>
 8014c74:	6060      	str	r0, [r4, #4]
 8014c76:	4620      	mov	r0, r4
 8014c78:	f000 f81c 	bl	8014cb4 <__sfp>
 8014c7c:	60a0      	str	r0, [r4, #8]
 8014c7e:	4620      	mov	r0, r4
 8014c80:	f000 f818 	bl	8014cb4 <__sfp>
 8014c84:	2200      	movs	r2, #0
 8014c86:	60e0      	str	r0, [r4, #12]
 8014c88:	2104      	movs	r1, #4
 8014c8a:	6860      	ldr	r0, [r4, #4]
 8014c8c:	f7ff ff82 	bl	8014b94 <std>
 8014c90:	68a0      	ldr	r0, [r4, #8]
 8014c92:	2201      	movs	r2, #1
 8014c94:	2109      	movs	r1, #9
 8014c96:	f7ff ff7d 	bl	8014b94 <std>
 8014c9a:	68e0      	ldr	r0, [r4, #12]
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	2112      	movs	r1, #18
 8014ca0:	f7ff ff78 	bl	8014b94 <std>
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	61a3      	str	r3, [r4, #24]
 8014ca8:	e7d2      	b.n	8014c50 <__sinit+0xc>
 8014caa:	bf00      	nop
 8014cac:	080183a8 	.word	0x080183a8
 8014cb0:	08014bdd 	.word	0x08014bdd

08014cb4 <__sfp>:
 8014cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb6:	4607      	mov	r7, r0
 8014cb8:	f7ff ffac 	bl	8014c14 <__sfp_lock_acquire>
 8014cbc:	4b1e      	ldr	r3, [pc, #120]	; (8014d38 <__sfp+0x84>)
 8014cbe:	681e      	ldr	r6, [r3, #0]
 8014cc0:	69b3      	ldr	r3, [r6, #24]
 8014cc2:	b913      	cbnz	r3, 8014cca <__sfp+0x16>
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f7ff ffbd 	bl	8014c44 <__sinit>
 8014cca:	3648      	adds	r6, #72	; 0x48
 8014ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	d503      	bpl.n	8014cdc <__sfp+0x28>
 8014cd4:	6833      	ldr	r3, [r6, #0]
 8014cd6:	b30b      	cbz	r3, 8014d1c <__sfp+0x68>
 8014cd8:	6836      	ldr	r6, [r6, #0]
 8014cda:	e7f7      	b.n	8014ccc <__sfp+0x18>
 8014cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ce0:	b9d5      	cbnz	r5, 8014d18 <__sfp+0x64>
 8014ce2:	4b16      	ldr	r3, [pc, #88]	; (8014d3c <__sfp+0x88>)
 8014ce4:	60e3      	str	r3, [r4, #12]
 8014ce6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014cea:	6665      	str	r5, [r4, #100]	; 0x64
 8014cec:	f000 f859 	bl	8014da2 <__retarget_lock_init_recursive>
 8014cf0:	f7ff ff96 	bl	8014c20 <__sfp_lock_release>
 8014cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014cfc:	6025      	str	r5, [r4, #0]
 8014cfe:	61a5      	str	r5, [r4, #24]
 8014d00:	2208      	movs	r2, #8
 8014d02:	4629      	mov	r1, r5
 8014d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d08:	f7ff fcd0 	bl	80146ac <memset>
 8014d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d14:	4620      	mov	r0, r4
 8014d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d18:	3468      	adds	r4, #104	; 0x68
 8014d1a:	e7d9      	b.n	8014cd0 <__sfp+0x1c>
 8014d1c:	2104      	movs	r1, #4
 8014d1e:	4638      	mov	r0, r7
 8014d20:	f7ff ff62 	bl	8014be8 <__sfmoreglue>
 8014d24:	4604      	mov	r4, r0
 8014d26:	6030      	str	r0, [r6, #0]
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	d1d5      	bne.n	8014cd8 <__sfp+0x24>
 8014d2c:	f7ff ff78 	bl	8014c20 <__sfp_lock_release>
 8014d30:	230c      	movs	r3, #12
 8014d32:	603b      	str	r3, [r7, #0]
 8014d34:	e7ee      	b.n	8014d14 <__sfp+0x60>
 8014d36:	bf00      	nop
 8014d38:	080183a8 	.word	0x080183a8
 8014d3c:	ffff0001 	.word	0xffff0001

08014d40 <fiprintf>:
 8014d40:	b40e      	push	{r1, r2, r3}
 8014d42:	b503      	push	{r0, r1, lr}
 8014d44:	4601      	mov	r1, r0
 8014d46:	ab03      	add	r3, sp, #12
 8014d48:	4805      	ldr	r0, [pc, #20]	; (8014d60 <fiprintf+0x20>)
 8014d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d4e:	6800      	ldr	r0, [r0, #0]
 8014d50:	9301      	str	r3, [sp, #4]
 8014d52:	f000 f9a1 	bl	8015098 <_vfiprintf_r>
 8014d56:	b002      	add	sp, #8
 8014d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d5c:	b003      	add	sp, #12
 8014d5e:	4770      	bx	lr
 8014d60:	20000038 	.word	0x20000038

08014d64 <_fwalk_reent>:
 8014d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d68:	4606      	mov	r6, r0
 8014d6a:	4688      	mov	r8, r1
 8014d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014d70:	2700      	movs	r7, #0
 8014d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d76:	f1b9 0901 	subs.w	r9, r9, #1
 8014d7a:	d505      	bpl.n	8014d88 <_fwalk_reent+0x24>
 8014d7c:	6824      	ldr	r4, [r4, #0]
 8014d7e:	2c00      	cmp	r4, #0
 8014d80:	d1f7      	bne.n	8014d72 <_fwalk_reent+0xe>
 8014d82:	4638      	mov	r0, r7
 8014d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d88:	89ab      	ldrh	r3, [r5, #12]
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d907      	bls.n	8014d9e <_fwalk_reent+0x3a>
 8014d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d92:	3301      	adds	r3, #1
 8014d94:	d003      	beq.n	8014d9e <_fwalk_reent+0x3a>
 8014d96:	4629      	mov	r1, r5
 8014d98:	4630      	mov	r0, r6
 8014d9a:	47c0      	blx	r8
 8014d9c:	4307      	orrs	r7, r0
 8014d9e:	3568      	adds	r5, #104	; 0x68
 8014da0:	e7e9      	b.n	8014d76 <_fwalk_reent+0x12>

08014da2 <__retarget_lock_init_recursive>:
 8014da2:	4770      	bx	lr

08014da4 <__retarget_lock_acquire_recursive>:
 8014da4:	4770      	bx	lr

08014da6 <__retarget_lock_release_recursive>:
 8014da6:	4770      	bx	lr

08014da8 <__swhatbuf_r>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	460e      	mov	r6, r1
 8014dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014db0:	2900      	cmp	r1, #0
 8014db2:	b096      	sub	sp, #88	; 0x58
 8014db4:	4614      	mov	r4, r2
 8014db6:	461d      	mov	r5, r3
 8014db8:	da08      	bge.n	8014dcc <__swhatbuf_r+0x24>
 8014dba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	602a      	str	r2, [r5, #0]
 8014dc2:	061a      	lsls	r2, r3, #24
 8014dc4:	d410      	bmi.n	8014de8 <__swhatbuf_r+0x40>
 8014dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dca:	e00e      	b.n	8014dea <__swhatbuf_r+0x42>
 8014dcc:	466a      	mov	r2, sp
 8014dce:	f000 fca5 	bl	801571c <_fstat_r>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	dbf1      	blt.n	8014dba <__swhatbuf_r+0x12>
 8014dd6:	9a01      	ldr	r2, [sp, #4]
 8014dd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ddc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014de0:	425a      	negs	r2, r3
 8014de2:	415a      	adcs	r2, r3
 8014de4:	602a      	str	r2, [r5, #0]
 8014de6:	e7ee      	b.n	8014dc6 <__swhatbuf_r+0x1e>
 8014de8:	2340      	movs	r3, #64	; 0x40
 8014dea:	2000      	movs	r0, #0
 8014dec:	6023      	str	r3, [r4, #0]
 8014dee:	b016      	add	sp, #88	; 0x58
 8014df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08014df4 <__smakebuf_r>:
 8014df4:	898b      	ldrh	r3, [r1, #12]
 8014df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014df8:	079d      	lsls	r5, r3, #30
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	460c      	mov	r4, r1
 8014dfe:	d507      	bpl.n	8014e10 <__smakebuf_r+0x1c>
 8014e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e04:	6023      	str	r3, [r4, #0]
 8014e06:	6123      	str	r3, [r4, #16]
 8014e08:	2301      	movs	r3, #1
 8014e0a:	6163      	str	r3, [r4, #20]
 8014e0c:	b002      	add	sp, #8
 8014e0e:	bd70      	pop	{r4, r5, r6, pc}
 8014e10:	ab01      	add	r3, sp, #4
 8014e12:	466a      	mov	r2, sp
 8014e14:	f7ff ffc8 	bl	8014da8 <__swhatbuf_r>
 8014e18:	9900      	ldr	r1, [sp, #0]
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	f000 f89d 	bl	8014f5c <_malloc_r>
 8014e22:	b948      	cbnz	r0, 8014e38 <__smakebuf_r+0x44>
 8014e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e28:	059a      	lsls	r2, r3, #22
 8014e2a:	d4ef      	bmi.n	8014e0c <__smakebuf_r+0x18>
 8014e2c:	f023 0303 	bic.w	r3, r3, #3
 8014e30:	f043 0302 	orr.w	r3, r3, #2
 8014e34:	81a3      	strh	r3, [r4, #12]
 8014e36:	e7e3      	b.n	8014e00 <__smakebuf_r+0xc>
 8014e38:	4b0d      	ldr	r3, [pc, #52]	; (8014e70 <__smakebuf_r+0x7c>)
 8014e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014e3c:	89a3      	ldrh	r3, [r4, #12]
 8014e3e:	6020      	str	r0, [r4, #0]
 8014e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e44:	81a3      	strh	r3, [r4, #12]
 8014e46:	9b00      	ldr	r3, [sp, #0]
 8014e48:	6163      	str	r3, [r4, #20]
 8014e4a:	9b01      	ldr	r3, [sp, #4]
 8014e4c:	6120      	str	r0, [r4, #16]
 8014e4e:	b15b      	cbz	r3, 8014e68 <__smakebuf_r+0x74>
 8014e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e54:	4630      	mov	r0, r6
 8014e56:	f000 fc73 	bl	8015740 <_isatty_r>
 8014e5a:	b128      	cbz	r0, 8014e68 <__smakebuf_r+0x74>
 8014e5c:	89a3      	ldrh	r3, [r4, #12]
 8014e5e:	f023 0303 	bic.w	r3, r3, #3
 8014e62:	f043 0301 	orr.w	r3, r3, #1
 8014e66:	81a3      	strh	r3, [r4, #12]
 8014e68:	89a0      	ldrh	r0, [r4, #12]
 8014e6a:	4305      	orrs	r5, r0
 8014e6c:	81a5      	strh	r5, [r4, #12]
 8014e6e:	e7cd      	b.n	8014e0c <__smakebuf_r+0x18>
 8014e70:	08014bdd 	.word	0x08014bdd

08014e74 <malloc>:
 8014e74:	4b02      	ldr	r3, [pc, #8]	; (8014e80 <malloc+0xc>)
 8014e76:	4601      	mov	r1, r0
 8014e78:	6818      	ldr	r0, [r3, #0]
 8014e7a:	f000 b86f 	b.w	8014f5c <_malloc_r>
 8014e7e:	bf00      	nop
 8014e80:	20000038 	.word	0x20000038

08014e84 <_free_r>:
 8014e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e86:	2900      	cmp	r1, #0
 8014e88:	d044      	beq.n	8014f14 <_free_r+0x90>
 8014e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e8e:	9001      	str	r0, [sp, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f1a1 0404 	sub.w	r4, r1, #4
 8014e96:	bfb8      	it	lt
 8014e98:	18e4      	addlt	r4, r4, r3
 8014e9a:	f000 fc73 	bl	8015784 <__malloc_lock>
 8014e9e:	4a1e      	ldr	r2, [pc, #120]	; (8014f18 <_free_r+0x94>)
 8014ea0:	9801      	ldr	r0, [sp, #4]
 8014ea2:	6813      	ldr	r3, [r2, #0]
 8014ea4:	b933      	cbnz	r3, 8014eb4 <_free_r+0x30>
 8014ea6:	6063      	str	r3, [r4, #4]
 8014ea8:	6014      	str	r4, [r2, #0]
 8014eaa:	b003      	add	sp, #12
 8014eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014eb0:	f000 bc6e 	b.w	8015790 <__malloc_unlock>
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	d908      	bls.n	8014eca <_free_r+0x46>
 8014eb8:	6825      	ldr	r5, [r4, #0]
 8014eba:	1961      	adds	r1, r4, r5
 8014ebc:	428b      	cmp	r3, r1
 8014ebe:	bf01      	itttt	eq
 8014ec0:	6819      	ldreq	r1, [r3, #0]
 8014ec2:	685b      	ldreq	r3, [r3, #4]
 8014ec4:	1949      	addeq	r1, r1, r5
 8014ec6:	6021      	streq	r1, [r4, #0]
 8014ec8:	e7ed      	b.n	8014ea6 <_free_r+0x22>
 8014eca:	461a      	mov	r2, r3
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	b10b      	cbz	r3, 8014ed4 <_free_r+0x50>
 8014ed0:	42a3      	cmp	r3, r4
 8014ed2:	d9fa      	bls.n	8014eca <_free_r+0x46>
 8014ed4:	6811      	ldr	r1, [r2, #0]
 8014ed6:	1855      	adds	r5, r2, r1
 8014ed8:	42a5      	cmp	r5, r4
 8014eda:	d10b      	bne.n	8014ef4 <_free_r+0x70>
 8014edc:	6824      	ldr	r4, [r4, #0]
 8014ede:	4421      	add	r1, r4
 8014ee0:	1854      	adds	r4, r2, r1
 8014ee2:	42a3      	cmp	r3, r4
 8014ee4:	6011      	str	r1, [r2, #0]
 8014ee6:	d1e0      	bne.n	8014eaa <_free_r+0x26>
 8014ee8:	681c      	ldr	r4, [r3, #0]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	6053      	str	r3, [r2, #4]
 8014eee:	4421      	add	r1, r4
 8014ef0:	6011      	str	r1, [r2, #0]
 8014ef2:	e7da      	b.n	8014eaa <_free_r+0x26>
 8014ef4:	d902      	bls.n	8014efc <_free_r+0x78>
 8014ef6:	230c      	movs	r3, #12
 8014ef8:	6003      	str	r3, [r0, #0]
 8014efa:	e7d6      	b.n	8014eaa <_free_r+0x26>
 8014efc:	6825      	ldr	r5, [r4, #0]
 8014efe:	1961      	adds	r1, r4, r5
 8014f00:	428b      	cmp	r3, r1
 8014f02:	bf04      	itt	eq
 8014f04:	6819      	ldreq	r1, [r3, #0]
 8014f06:	685b      	ldreq	r3, [r3, #4]
 8014f08:	6063      	str	r3, [r4, #4]
 8014f0a:	bf04      	itt	eq
 8014f0c:	1949      	addeq	r1, r1, r5
 8014f0e:	6021      	streq	r1, [r4, #0]
 8014f10:	6054      	str	r4, [r2, #4]
 8014f12:	e7ca      	b.n	8014eaa <_free_r+0x26>
 8014f14:	b003      	add	sp, #12
 8014f16:	bd30      	pop	{r4, r5, pc}
 8014f18:	20008ec8 	.word	0x20008ec8

08014f1c <sbrk_aligned>:
 8014f1c:	b570      	push	{r4, r5, r6, lr}
 8014f1e:	4e0e      	ldr	r6, [pc, #56]	; (8014f58 <sbrk_aligned+0x3c>)
 8014f20:	460c      	mov	r4, r1
 8014f22:	6831      	ldr	r1, [r6, #0]
 8014f24:	4605      	mov	r5, r0
 8014f26:	b911      	cbnz	r1, 8014f2e <sbrk_aligned+0x12>
 8014f28:	f000 fb7a 	bl	8015620 <_sbrk_r>
 8014f2c:	6030      	str	r0, [r6, #0]
 8014f2e:	4621      	mov	r1, r4
 8014f30:	4628      	mov	r0, r5
 8014f32:	f000 fb75 	bl	8015620 <_sbrk_r>
 8014f36:	1c43      	adds	r3, r0, #1
 8014f38:	d00a      	beq.n	8014f50 <sbrk_aligned+0x34>
 8014f3a:	1cc4      	adds	r4, r0, #3
 8014f3c:	f024 0403 	bic.w	r4, r4, #3
 8014f40:	42a0      	cmp	r0, r4
 8014f42:	d007      	beq.n	8014f54 <sbrk_aligned+0x38>
 8014f44:	1a21      	subs	r1, r4, r0
 8014f46:	4628      	mov	r0, r5
 8014f48:	f000 fb6a 	bl	8015620 <_sbrk_r>
 8014f4c:	3001      	adds	r0, #1
 8014f4e:	d101      	bne.n	8014f54 <sbrk_aligned+0x38>
 8014f50:	f04f 34ff 	mov.w	r4, #4294967295
 8014f54:	4620      	mov	r0, r4
 8014f56:	bd70      	pop	{r4, r5, r6, pc}
 8014f58:	20008ecc 	.word	0x20008ecc

08014f5c <_malloc_r>:
 8014f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f60:	1ccd      	adds	r5, r1, #3
 8014f62:	f025 0503 	bic.w	r5, r5, #3
 8014f66:	3508      	adds	r5, #8
 8014f68:	2d0c      	cmp	r5, #12
 8014f6a:	bf38      	it	cc
 8014f6c:	250c      	movcc	r5, #12
 8014f6e:	2d00      	cmp	r5, #0
 8014f70:	4607      	mov	r7, r0
 8014f72:	db01      	blt.n	8014f78 <_malloc_r+0x1c>
 8014f74:	42a9      	cmp	r1, r5
 8014f76:	d905      	bls.n	8014f84 <_malloc_r+0x28>
 8014f78:	230c      	movs	r3, #12
 8014f7a:	603b      	str	r3, [r7, #0]
 8014f7c:	2600      	movs	r6, #0
 8014f7e:	4630      	mov	r0, r6
 8014f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f84:	4e2e      	ldr	r6, [pc, #184]	; (8015040 <_malloc_r+0xe4>)
 8014f86:	f000 fbfd 	bl	8015784 <__malloc_lock>
 8014f8a:	6833      	ldr	r3, [r6, #0]
 8014f8c:	461c      	mov	r4, r3
 8014f8e:	bb34      	cbnz	r4, 8014fde <_malloc_r+0x82>
 8014f90:	4629      	mov	r1, r5
 8014f92:	4638      	mov	r0, r7
 8014f94:	f7ff ffc2 	bl	8014f1c <sbrk_aligned>
 8014f98:	1c43      	adds	r3, r0, #1
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	d14d      	bne.n	801503a <_malloc_r+0xde>
 8014f9e:	6834      	ldr	r4, [r6, #0]
 8014fa0:	4626      	mov	r6, r4
 8014fa2:	2e00      	cmp	r6, #0
 8014fa4:	d140      	bne.n	8015028 <_malloc_r+0xcc>
 8014fa6:	6823      	ldr	r3, [r4, #0]
 8014fa8:	4631      	mov	r1, r6
 8014faa:	4638      	mov	r0, r7
 8014fac:	eb04 0803 	add.w	r8, r4, r3
 8014fb0:	f000 fb36 	bl	8015620 <_sbrk_r>
 8014fb4:	4580      	cmp	r8, r0
 8014fb6:	d13a      	bne.n	801502e <_malloc_r+0xd2>
 8014fb8:	6821      	ldr	r1, [r4, #0]
 8014fba:	3503      	adds	r5, #3
 8014fbc:	1a6d      	subs	r5, r5, r1
 8014fbe:	f025 0503 	bic.w	r5, r5, #3
 8014fc2:	3508      	adds	r5, #8
 8014fc4:	2d0c      	cmp	r5, #12
 8014fc6:	bf38      	it	cc
 8014fc8:	250c      	movcc	r5, #12
 8014fca:	4629      	mov	r1, r5
 8014fcc:	4638      	mov	r0, r7
 8014fce:	f7ff ffa5 	bl	8014f1c <sbrk_aligned>
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	d02b      	beq.n	801502e <_malloc_r+0xd2>
 8014fd6:	6823      	ldr	r3, [r4, #0]
 8014fd8:	442b      	add	r3, r5
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	e00e      	b.n	8014ffc <_malloc_r+0xa0>
 8014fde:	6822      	ldr	r2, [r4, #0]
 8014fe0:	1b52      	subs	r2, r2, r5
 8014fe2:	d41e      	bmi.n	8015022 <_malloc_r+0xc6>
 8014fe4:	2a0b      	cmp	r2, #11
 8014fe6:	d916      	bls.n	8015016 <_malloc_r+0xba>
 8014fe8:	1961      	adds	r1, r4, r5
 8014fea:	42a3      	cmp	r3, r4
 8014fec:	6025      	str	r5, [r4, #0]
 8014fee:	bf18      	it	ne
 8014ff0:	6059      	strne	r1, [r3, #4]
 8014ff2:	6863      	ldr	r3, [r4, #4]
 8014ff4:	bf08      	it	eq
 8014ff6:	6031      	streq	r1, [r6, #0]
 8014ff8:	5162      	str	r2, [r4, r5]
 8014ffa:	604b      	str	r3, [r1, #4]
 8014ffc:	4638      	mov	r0, r7
 8014ffe:	f104 060b 	add.w	r6, r4, #11
 8015002:	f000 fbc5 	bl	8015790 <__malloc_unlock>
 8015006:	f026 0607 	bic.w	r6, r6, #7
 801500a:	1d23      	adds	r3, r4, #4
 801500c:	1af2      	subs	r2, r6, r3
 801500e:	d0b6      	beq.n	8014f7e <_malloc_r+0x22>
 8015010:	1b9b      	subs	r3, r3, r6
 8015012:	50a3      	str	r3, [r4, r2]
 8015014:	e7b3      	b.n	8014f7e <_malloc_r+0x22>
 8015016:	6862      	ldr	r2, [r4, #4]
 8015018:	42a3      	cmp	r3, r4
 801501a:	bf0c      	ite	eq
 801501c:	6032      	streq	r2, [r6, #0]
 801501e:	605a      	strne	r2, [r3, #4]
 8015020:	e7ec      	b.n	8014ffc <_malloc_r+0xa0>
 8015022:	4623      	mov	r3, r4
 8015024:	6864      	ldr	r4, [r4, #4]
 8015026:	e7b2      	b.n	8014f8e <_malloc_r+0x32>
 8015028:	4634      	mov	r4, r6
 801502a:	6876      	ldr	r6, [r6, #4]
 801502c:	e7b9      	b.n	8014fa2 <_malloc_r+0x46>
 801502e:	230c      	movs	r3, #12
 8015030:	603b      	str	r3, [r7, #0]
 8015032:	4638      	mov	r0, r7
 8015034:	f000 fbac 	bl	8015790 <__malloc_unlock>
 8015038:	e7a1      	b.n	8014f7e <_malloc_r+0x22>
 801503a:	6025      	str	r5, [r4, #0]
 801503c:	e7de      	b.n	8014ffc <_malloc_r+0xa0>
 801503e:	bf00      	nop
 8015040:	20008ec8 	.word	0x20008ec8

08015044 <__sfputc_r>:
 8015044:	6893      	ldr	r3, [r2, #8]
 8015046:	3b01      	subs	r3, #1
 8015048:	2b00      	cmp	r3, #0
 801504a:	b410      	push	{r4}
 801504c:	6093      	str	r3, [r2, #8]
 801504e:	da08      	bge.n	8015062 <__sfputc_r+0x1e>
 8015050:	6994      	ldr	r4, [r2, #24]
 8015052:	42a3      	cmp	r3, r4
 8015054:	db01      	blt.n	801505a <__sfputc_r+0x16>
 8015056:	290a      	cmp	r1, #10
 8015058:	d103      	bne.n	8015062 <__sfputc_r+0x1e>
 801505a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801505e:	f7ff bbf9 	b.w	8014854 <__swbuf_r>
 8015062:	6813      	ldr	r3, [r2, #0]
 8015064:	1c58      	adds	r0, r3, #1
 8015066:	6010      	str	r0, [r2, #0]
 8015068:	7019      	strb	r1, [r3, #0]
 801506a:	4608      	mov	r0, r1
 801506c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015070:	4770      	bx	lr

08015072 <__sfputs_r>:
 8015072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015074:	4606      	mov	r6, r0
 8015076:	460f      	mov	r7, r1
 8015078:	4614      	mov	r4, r2
 801507a:	18d5      	adds	r5, r2, r3
 801507c:	42ac      	cmp	r4, r5
 801507e:	d101      	bne.n	8015084 <__sfputs_r+0x12>
 8015080:	2000      	movs	r0, #0
 8015082:	e007      	b.n	8015094 <__sfputs_r+0x22>
 8015084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015088:	463a      	mov	r2, r7
 801508a:	4630      	mov	r0, r6
 801508c:	f7ff ffda 	bl	8015044 <__sfputc_r>
 8015090:	1c43      	adds	r3, r0, #1
 8015092:	d1f3      	bne.n	801507c <__sfputs_r+0xa>
 8015094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015098 <_vfiprintf_r>:
 8015098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509c:	460d      	mov	r5, r1
 801509e:	b09d      	sub	sp, #116	; 0x74
 80150a0:	4614      	mov	r4, r2
 80150a2:	4698      	mov	r8, r3
 80150a4:	4606      	mov	r6, r0
 80150a6:	b118      	cbz	r0, 80150b0 <_vfiprintf_r+0x18>
 80150a8:	6983      	ldr	r3, [r0, #24]
 80150aa:	b90b      	cbnz	r3, 80150b0 <_vfiprintf_r+0x18>
 80150ac:	f7ff fdca 	bl	8014c44 <__sinit>
 80150b0:	4b89      	ldr	r3, [pc, #548]	; (80152d8 <_vfiprintf_r+0x240>)
 80150b2:	429d      	cmp	r5, r3
 80150b4:	d11b      	bne.n	80150ee <_vfiprintf_r+0x56>
 80150b6:	6875      	ldr	r5, [r6, #4]
 80150b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150ba:	07d9      	lsls	r1, r3, #31
 80150bc:	d405      	bmi.n	80150ca <_vfiprintf_r+0x32>
 80150be:	89ab      	ldrh	r3, [r5, #12]
 80150c0:	059a      	lsls	r2, r3, #22
 80150c2:	d402      	bmi.n	80150ca <_vfiprintf_r+0x32>
 80150c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150c6:	f7ff fe6d 	bl	8014da4 <__retarget_lock_acquire_recursive>
 80150ca:	89ab      	ldrh	r3, [r5, #12]
 80150cc:	071b      	lsls	r3, r3, #28
 80150ce:	d501      	bpl.n	80150d4 <_vfiprintf_r+0x3c>
 80150d0:	692b      	ldr	r3, [r5, #16]
 80150d2:	b9eb      	cbnz	r3, 8015110 <_vfiprintf_r+0x78>
 80150d4:	4629      	mov	r1, r5
 80150d6:	4630      	mov	r0, r6
 80150d8:	f7ff fc0e 	bl	80148f8 <__swsetup_r>
 80150dc:	b1c0      	cbz	r0, 8015110 <_vfiprintf_r+0x78>
 80150de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150e0:	07dc      	lsls	r4, r3, #31
 80150e2:	d50e      	bpl.n	8015102 <_vfiprintf_r+0x6a>
 80150e4:	f04f 30ff 	mov.w	r0, #4294967295
 80150e8:	b01d      	add	sp, #116	; 0x74
 80150ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ee:	4b7b      	ldr	r3, [pc, #492]	; (80152dc <_vfiprintf_r+0x244>)
 80150f0:	429d      	cmp	r5, r3
 80150f2:	d101      	bne.n	80150f8 <_vfiprintf_r+0x60>
 80150f4:	68b5      	ldr	r5, [r6, #8]
 80150f6:	e7df      	b.n	80150b8 <_vfiprintf_r+0x20>
 80150f8:	4b79      	ldr	r3, [pc, #484]	; (80152e0 <_vfiprintf_r+0x248>)
 80150fa:	429d      	cmp	r5, r3
 80150fc:	bf08      	it	eq
 80150fe:	68f5      	ldreq	r5, [r6, #12]
 8015100:	e7da      	b.n	80150b8 <_vfiprintf_r+0x20>
 8015102:	89ab      	ldrh	r3, [r5, #12]
 8015104:	0598      	lsls	r0, r3, #22
 8015106:	d4ed      	bmi.n	80150e4 <_vfiprintf_r+0x4c>
 8015108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801510a:	f7ff fe4c 	bl	8014da6 <__retarget_lock_release_recursive>
 801510e:	e7e9      	b.n	80150e4 <_vfiprintf_r+0x4c>
 8015110:	2300      	movs	r3, #0
 8015112:	9309      	str	r3, [sp, #36]	; 0x24
 8015114:	2320      	movs	r3, #32
 8015116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801511a:	f8cd 800c 	str.w	r8, [sp, #12]
 801511e:	2330      	movs	r3, #48	; 0x30
 8015120:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80152e4 <_vfiprintf_r+0x24c>
 8015124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015128:	f04f 0901 	mov.w	r9, #1
 801512c:	4623      	mov	r3, r4
 801512e:	469a      	mov	sl, r3
 8015130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015134:	b10a      	cbz	r2, 801513a <_vfiprintf_r+0xa2>
 8015136:	2a25      	cmp	r2, #37	; 0x25
 8015138:	d1f9      	bne.n	801512e <_vfiprintf_r+0x96>
 801513a:	ebba 0b04 	subs.w	fp, sl, r4
 801513e:	d00b      	beq.n	8015158 <_vfiprintf_r+0xc0>
 8015140:	465b      	mov	r3, fp
 8015142:	4622      	mov	r2, r4
 8015144:	4629      	mov	r1, r5
 8015146:	4630      	mov	r0, r6
 8015148:	f7ff ff93 	bl	8015072 <__sfputs_r>
 801514c:	3001      	adds	r0, #1
 801514e:	f000 80aa 	beq.w	80152a6 <_vfiprintf_r+0x20e>
 8015152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015154:	445a      	add	r2, fp
 8015156:	9209      	str	r2, [sp, #36]	; 0x24
 8015158:	f89a 3000 	ldrb.w	r3, [sl]
 801515c:	2b00      	cmp	r3, #0
 801515e:	f000 80a2 	beq.w	80152a6 <_vfiprintf_r+0x20e>
 8015162:	2300      	movs	r3, #0
 8015164:	f04f 32ff 	mov.w	r2, #4294967295
 8015168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801516c:	f10a 0a01 	add.w	sl, sl, #1
 8015170:	9304      	str	r3, [sp, #16]
 8015172:	9307      	str	r3, [sp, #28]
 8015174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015178:	931a      	str	r3, [sp, #104]	; 0x68
 801517a:	4654      	mov	r4, sl
 801517c:	2205      	movs	r2, #5
 801517e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015182:	4858      	ldr	r0, [pc, #352]	; (80152e4 <_vfiprintf_r+0x24c>)
 8015184:	f7eb f844 	bl	8000210 <memchr>
 8015188:	9a04      	ldr	r2, [sp, #16]
 801518a:	b9d8      	cbnz	r0, 80151c4 <_vfiprintf_r+0x12c>
 801518c:	06d1      	lsls	r1, r2, #27
 801518e:	bf44      	itt	mi
 8015190:	2320      	movmi	r3, #32
 8015192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015196:	0713      	lsls	r3, r2, #28
 8015198:	bf44      	itt	mi
 801519a:	232b      	movmi	r3, #43	; 0x2b
 801519c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151a0:	f89a 3000 	ldrb.w	r3, [sl]
 80151a4:	2b2a      	cmp	r3, #42	; 0x2a
 80151a6:	d015      	beq.n	80151d4 <_vfiprintf_r+0x13c>
 80151a8:	9a07      	ldr	r2, [sp, #28]
 80151aa:	4654      	mov	r4, sl
 80151ac:	2000      	movs	r0, #0
 80151ae:	f04f 0c0a 	mov.w	ip, #10
 80151b2:	4621      	mov	r1, r4
 80151b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151b8:	3b30      	subs	r3, #48	; 0x30
 80151ba:	2b09      	cmp	r3, #9
 80151bc:	d94e      	bls.n	801525c <_vfiprintf_r+0x1c4>
 80151be:	b1b0      	cbz	r0, 80151ee <_vfiprintf_r+0x156>
 80151c0:	9207      	str	r2, [sp, #28]
 80151c2:	e014      	b.n	80151ee <_vfiprintf_r+0x156>
 80151c4:	eba0 0308 	sub.w	r3, r0, r8
 80151c8:	fa09 f303 	lsl.w	r3, r9, r3
 80151cc:	4313      	orrs	r3, r2
 80151ce:	9304      	str	r3, [sp, #16]
 80151d0:	46a2      	mov	sl, r4
 80151d2:	e7d2      	b.n	801517a <_vfiprintf_r+0xe2>
 80151d4:	9b03      	ldr	r3, [sp, #12]
 80151d6:	1d19      	adds	r1, r3, #4
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	9103      	str	r1, [sp, #12]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	bfbb      	ittet	lt
 80151e0:	425b      	neglt	r3, r3
 80151e2:	f042 0202 	orrlt.w	r2, r2, #2
 80151e6:	9307      	strge	r3, [sp, #28]
 80151e8:	9307      	strlt	r3, [sp, #28]
 80151ea:	bfb8      	it	lt
 80151ec:	9204      	strlt	r2, [sp, #16]
 80151ee:	7823      	ldrb	r3, [r4, #0]
 80151f0:	2b2e      	cmp	r3, #46	; 0x2e
 80151f2:	d10c      	bne.n	801520e <_vfiprintf_r+0x176>
 80151f4:	7863      	ldrb	r3, [r4, #1]
 80151f6:	2b2a      	cmp	r3, #42	; 0x2a
 80151f8:	d135      	bne.n	8015266 <_vfiprintf_r+0x1ce>
 80151fa:	9b03      	ldr	r3, [sp, #12]
 80151fc:	1d1a      	adds	r2, r3, #4
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	9203      	str	r2, [sp, #12]
 8015202:	2b00      	cmp	r3, #0
 8015204:	bfb8      	it	lt
 8015206:	f04f 33ff 	movlt.w	r3, #4294967295
 801520a:	3402      	adds	r4, #2
 801520c:	9305      	str	r3, [sp, #20]
 801520e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80152f4 <_vfiprintf_r+0x25c>
 8015212:	7821      	ldrb	r1, [r4, #0]
 8015214:	2203      	movs	r2, #3
 8015216:	4650      	mov	r0, sl
 8015218:	f7ea fffa 	bl	8000210 <memchr>
 801521c:	b140      	cbz	r0, 8015230 <_vfiprintf_r+0x198>
 801521e:	2340      	movs	r3, #64	; 0x40
 8015220:	eba0 000a 	sub.w	r0, r0, sl
 8015224:	fa03 f000 	lsl.w	r0, r3, r0
 8015228:	9b04      	ldr	r3, [sp, #16]
 801522a:	4303      	orrs	r3, r0
 801522c:	3401      	adds	r4, #1
 801522e:	9304      	str	r3, [sp, #16]
 8015230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015234:	482c      	ldr	r0, [pc, #176]	; (80152e8 <_vfiprintf_r+0x250>)
 8015236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801523a:	2206      	movs	r2, #6
 801523c:	f7ea ffe8 	bl	8000210 <memchr>
 8015240:	2800      	cmp	r0, #0
 8015242:	d03f      	beq.n	80152c4 <_vfiprintf_r+0x22c>
 8015244:	4b29      	ldr	r3, [pc, #164]	; (80152ec <_vfiprintf_r+0x254>)
 8015246:	bb1b      	cbnz	r3, 8015290 <_vfiprintf_r+0x1f8>
 8015248:	9b03      	ldr	r3, [sp, #12]
 801524a:	3307      	adds	r3, #7
 801524c:	f023 0307 	bic.w	r3, r3, #7
 8015250:	3308      	adds	r3, #8
 8015252:	9303      	str	r3, [sp, #12]
 8015254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015256:	443b      	add	r3, r7
 8015258:	9309      	str	r3, [sp, #36]	; 0x24
 801525a:	e767      	b.n	801512c <_vfiprintf_r+0x94>
 801525c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015260:	460c      	mov	r4, r1
 8015262:	2001      	movs	r0, #1
 8015264:	e7a5      	b.n	80151b2 <_vfiprintf_r+0x11a>
 8015266:	2300      	movs	r3, #0
 8015268:	3401      	adds	r4, #1
 801526a:	9305      	str	r3, [sp, #20]
 801526c:	4619      	mov	r1, r3
 801526e:	f04f 0c0a 	mov.w	ip, #10
 8015272:	4620      	mov	r0, r4
 8015274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015278:	3a30      	subs	r2, #48	; 0x30
 801527a:	2a09      	cmp	r2, #9
 801527c:	d903      	bls.n	8015286 <_vfiprintf_r+0x1ee>
 801527e:	2b00      	cmp	r3, #0
 8015280:	d0c5      	beq.n	801520e <_vfiprintf_r+0x176>
 8015282:	9105      	str	r1, [sp, #20]
 8015284:	e7c3      	b.n	801520e <_vfiprintf_r+0x176>
 8015286:	fb0c 2101 	mla	r1, ip, r1, r2
 801528a:	4604      	mov	r4, r0
 801528c:	2301      	movs	r3, #1
 801528e:	e7f0      	b.n	8015272 <_vfiprintf_r+0x1da>
 8015290:	ab03      	add	r3, sp, #12
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	462a      	mov	r2, r5
 8015296:	4b16      	ldr	r3, [pc, #88]	; (80152f0 <_vfiprintf_r+0x258>)
 8015298:	a904      	add	r1, sp, #16
 801529a:	4630      	mov	r0, r6
 801529c:	f3af 8000 	nop.w
 80152a0:	4607      	mov	r7, r0
 80152a2:	1c78      	adds	r0, r7, #1
 80152a4:	d1d6      	bne.n	8015254 <_vfiprintf_r+0x1bc>
 80152a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152a8:	07d9      	lsls	r1, r3, #31
 80152aa:	d405      	bmi.n	80152b8 <_vfiprintf_r+0x220>
 80152ac:	89ab      	ldrh	r3, [r5, #12]
 80152ae:	059a      	lsls	r2, r3, #22
 80152b0:	d402      	bmi.n	80152b8 <_vfiprintf_r+0x220>
 80152b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152b4:	f7ff fd77 	bl	8014da6 <__retarget_lock_release_recursive>
 80152b8:	89ab      	ldrh	r3, [r5, #12]
 80152ba:	065b      	lsls	r3, r3, #25
 80152bc:	f53f af12 	bmi.w	80150e4 <_vfiprintf_r+0x4c>
 80152c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152c2:	e711      	b.n	80150e8 <_vfiprintf_r+0x50>
 80152c4:	ab03      	add	r3, sp, #12
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	462a      	mov	r2, r5
 80152ca:	4b09      	ldr	r3, [pc, #36]	; (80152f0 <_vfiprintf_r+0x258>)
 80152cc:	a904      	add	r1, sp, #16
 80152ce:	4630      	mov	r0, r6
 80152d0:	f000 f880 	bl	80153d4 <_printf_i>
 80152d4:	e7e4      	b.n	80152a0 <_vfiprintf_r+0x208>
 80152d6:	bf00      	nop
 80152d8:	0801847c 	.word	0x0801847c
 80152dc:	0801849c 	.word	0x0801849c
 80152e0:	0801845c 	.word	0x0801845c
 80152e4:	080184bc 	.word	0x080184bc
 80152e8:	080184c6 	.word	0x080184c6
 80152ec:	00000000 	.word	0x00000000
 80152f0:	08015073 	.word	0x08015073
 80152f4:	080184c2 	.word	0x080184c2

080152f8 <_printf_common>:
 80152f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152fc:	4616      	mov	r6, r2
 80152fe:	4699      	mov	r9, r3
 8015300:	688a      	ldr	r2, [r1, #8]
 8015302:	690b      	ldr	r3, [r1, #16]
 8015304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015308:	4293      	cmp	r3, r2
 801530a:	bfb8      	it	lt
 801530c:	4613      	movlt	r3, r2
 801530e:	6033      	str	r3, [r6, #0]
 8015310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015314:	4607      	mov	r7, r0
 8015316:	460c      	mov	r4, r1
 8015318:	b10a      	cbz	r2, 801531e <_printf_common+0x26>
 801531a:	3301      	adds	r3, #1
 801531c:	6033      	str	r3, [r6, #0]
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	0699      	lsls	r1, r3, #26
 8015322:	bf42      	ittt	mi
 8015324:	6833      	ldrmi	r3, [r6, #0]
 8015326:	3302      	addmi	r3, #2
 8015328:	6033      	strmi	r3, [r6, #0]
 801532a:	6825      	ldr	r5, [r4, #0]
 801532c:	f015 0506 	ands.w	r5, r5, #6
 8015330:	d106      	bne.n	8015340 <_printf_common+0x48>
 8015332:	f104 0a19 	add.w	sl, r4, #25
 8015336:	68e3      	ldr	r3, [r4, #12]
 8015338:	6832      	ldr	r2, [r6, #0]
 801533a:	1a9b      	subs	r3, r3, r2
 801533c:	42ab      	cmp	r3, r5
 801533e:	dc26      	bgt.n	801538e <_printf_common+0x96>
 8015340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015344:	1e13      	subs	r3, r2, #0
 8015346:	6822      	ldr	r2, [r4, #0]
 8015348:	bf18      	it	ne
 801534a:	2301      	movne	r3, #1
 801534c:	0692      	lsls	r2, r2, #26
 801534e:	d42b      	bmi.n	80153a8 <_printf_common+0xb0>
 8015350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015354:	4649      	mov	r1, r9
 8015356:	4638      	mov	r0, r7
 8015358:	47c0      	blx	r8
 801535a:	3001      	adds	r0, #1
 801535c:	d01e      	beq.n	801539c <_printf_common+0xa4>
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	68e5      	ldr	r5, [r4, #12]
 8015362:	6832      	ldr	r2, [r6, #0]
 8015364:	f003 0306 	and.w	r3, r3, #6
 8015368:	2b04      	cmp	r3, #4
 801536a:	bf08      	it	eq
 801536c:	1aad      	subeq	r5, r5, r2
 801536e:	68a3      	ldr	r3, [r4, #8]
 8015370:	6922      	ldr	r2, [r4, #16]
 8015372:	bf0c      	ite	eq
 8015374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015378:	2500      	movne	r5, #0
 801537a:	4293      	cmp	r3, r2
 801537c:	bfc4      	itt	gt
 801537e:	1a9b      	subgt	r3, r3, r2
 8015380:	18ed      	addgt	r5, r5, r3
 8015382:	2600      	movs	r6, #0
 8015384:	341a      	adds	r4, #26
 8015386:	42b5      	cmp	r5, r6
 8015388:	d11a      	bne.n	80153c0 <_printf_common+0xc8>
 801538a:	2000      	movs	r0, #0
 801538c:	e008      	b.n	80153a0 <_printf_common+0xa8>
 801538e:	2301      	movs	r3, #1
 8015390:	4652      	mov	r2, sl
 8015392:	4649      	mov	r1, r9
 8015394:	4638      	mov	r0, r7
 8015396:	47c0      	blx	r8
 8015398:	3001      	adds	r0, #1
 801539a:	d103      	bne.n	80153a4 <_printf_common+0xac>
 801539c:	f04f 30ff 	mov.w	r0, #4294967295
 80153a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a4:	3501      	adds	r5, #1
 80153a6:	e7c6      	b.n	8015336 <_printf_common+0x3e>
 80153a8:	18e1      	adds	r1, r4, r3
 80153aa:	1c5a      	adds	r2, r3, #1
 80153ac:	2030      	movs	r0, #48	; 0x30
 80153ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153b2:	4422      	add	r2, r4
 80153b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153bc:	3302      	adds	r3, #2
 80153be:	e7c7      	b.n	8015350 <_printf_common+0x58>
 80153c0:	2301      	movs	r3, #1
 80153c2:	4622      	mov	r2, r4
 80153c4:	4649      	mov	r1, r9
 80153c6:	4638      	mov	r0, r7
 80153c8:	47c0      	blx	r8
 80153ca:	3001      	adds	r0, #1
 80153cc:	d0e6      	beq.n	801539c <_printf_common+0xa4>
 80153ce:	3601      	adds	r6, #1
 80153d0:	e7d9      	b.n	8015386 <_printf_common+0x8e>
	...

080153d4 <_printf_i>:
 80153d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153d8:	7e0f      	ldrb	r7, [r1, #24]
 80153da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153dc:	2f78      	cmp	r7, #120	; 0x78
 80153de:	4691      	mov	r9, r2
 80153e0:	4680      	mov	r8, r0
 80153e2:	460c      	mov	r4, r1
 80153e4:	469a      	mov	sl, r3
 80153e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80153ea:	d807      	bhi.n	80153fc <_printf_i+0x28>
 80153ec:	2f62      	cmp	r7, #98	; 0x62
 80153ee:	d80a      	bhi.n	8015406 <_printf_i+0x32>
 80153f0:	2f00      	cmp	r7, #0
 80153f2:	f000 80d8 	beq.w	80155a6 <_printf_i+0x1d2>
 80153f6:	2f58      	cmp	r7, #88	; 0x58
 80153f8:	f000 80a3 	beq.w	8015542 <_printf_i+0x16e>
 80153fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015404:	e03a      	b.n	801547c <_printf_i+0xa8>
 8015406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801540a:	2b15      	cmp	r3, #21
 801540c:	d8f6      	bhi.n	80153fc <_printf_i+0x28>
 801540e:	a101      	add	r1, pc, #4	; (adr r1, 8015414 <_printf_i+0x40>)
 8015410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015414:	0801546d 	.word	0x0801546d
 8015418:	08015481 	.word	0x08015481
 801541c:	080153fd 	.word	0x080153fd
 8015420:	080153fd 	.word	0x080153fd
 8015424:	080153fd 	.word	0x080153fd
 8015428:	080153fd 	.word	0x080153fd
 801542c:	08015481 	.word	0x08015481
 8015430:	080153fd 	.word	0x080153fd
 8015434:	080153fd 	.word	0x080153fd
 8015438:	080153fd 	.word	0x080153fd
 801543c:	080153fd 	.word	0x080153fd
 8015440:	0801558d 	.word	0x0801558d
 8015444:	080154b1 	.word	0x080154b1
 8015448:	0801556f 	.word	0x0801556f
 801544c:	080153fd 	.word	0x080153fd
 8015450:	080153fd 	.word	0x080153fd
 8015454:	080155af 	.word	0x080155af
 8015458:	080153fd 	.word	0x080153fd
 801545c:	080154b1 	.word	0x080154b1
 8015460:	080153fd 	.word	0x080153fd
 8015464:	080153fd 	.word	0x080153fd
 8015468:	08015577 	.word	0x08015577
 801546c:	682b      	ldr	r3, [r5, #0]
 801546e:	1d1a      	adds	r2, r3, #4
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	602a      	str	r2, [r5, #0]
 8015474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801547c:	2301      	movs	r3, #1
 801547e:	e0a3      	b.n	80155c8 <_printf_i+0x1f4>
 8015480:	6820      	ldr	r0, [r4, #0]
 8015482:	6829      	ldr	r1, [r5, #0]
 8015484:	0606      	lsls	r6, r0, #24
 8015486:	f101 0304 	add.w	r3, r1, #4
 801548a:	d50a      	bpl.n	80154a2 <_printf_i+0xce>
 801548c:	680e      	ldr	r6, [r1, #0]
 801548e:	602b      	str	r3, [r5, #0]
 8015490:	2e00      	cmp	r6, #0
 8015492:	da03      	bge.n	801549c <_printf_i+0xc8>
 8015494:	232d      	movs	r3, #45	; 0x2d
 8015496:	4276      	negs	r6, r6
 8015498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801549c:	485e      	ldr	r0, [pc, #376]	; (8015618 <_printf_i+0x244>)
 801549e:	230a      	movs	r3, #10
 80154a0:	e019      	b.n	80154d6 <_printf_i+0x102>
 80154a2:	680e      	ldr	r6, [r1, #0]
 80154a4:	602b      	str	r3, [r5, #0]
 80154a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80154aa:	bf18      	it	ne
 80154ac:	b236      	sxthne	r6, r6
 80154ae:	e7ef      	b.n	8015490 <_printf_i+0xbc>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	6820      	ldr	r0, [r4, #0]
 80154b4:	1d19      	adds	r1, r3, #4
 80154b6:	6029      	str	r1, [r5, #0]
 80154b8:	0601      	lsls	r1, r0, #24
 80154ba:	d501      	bpl.n	80154c0 <_printf_i+0xec>
 80154bc:	681e      	ldr	r6, [r3, #0]
 80154be:	e002      	b.n	80154c6 <_printf_i+0xf2>
 80154c0:	0646      	lsls	r6, r0, #25
 80154c2:	d5fb      	bpl.n	80154bc <_printf_i+0xe8>
 80154c4:	881e      	ldrh	r6, [r3, #0]
 80154c6:	4854      	ldr	r0, [pc, #336]	; (8015618 <_printf_i+0x244>)
 80154c8:	2f6f      	cmp	r7, #111	; 0x6f
 80154ca:	bf0c      	ite	eq
 80154cc:	2308      	moveq	r3, #8
 80154ce:	230a      	movne	r3, #10
 80154d0:	2100      	movs	r1, #0
 80154d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154d6:	6865      	ldr	r5, [r4, #4]
 80154d8:	60a5      	str	r5, [r4, #8]
 80154da:	2d00      	cmp	r5, #0
 80154dc:	bfa2      	ittt	ge
 80154de:	6821      	ldrge	r1, [r4, #0]
 80154e0:	f021 0104 	bicge.w	r1, r1, #4
 80154e4:	6021      	strge	r1, [r4, #0]
 80154e6:	b90e      	cbnz	r6, 80154ec <_printf_i+0x118>
 80154e8:	2d00      	cmp	r5, #0
 80154ea:	d04d      	beq.n	8015588 <_printf_i+0x1b4>
 80154ec:	4615      	mov	r5, r2
 80154ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80154f2:	fb03 6711 	mls	r7, r3, r1, r6
 80154f6:	5dc7      	ldrb	r7, [r0, r7]
 80154f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80154fc:	4637      	mov	r7, r6
 80154fe:	42bb      	cmp	r3, r7
 8015500:	460e      	mov	r6, r1
 8015502:	d9f4      	bls.n	80154ee <_printf_i+0x11a>
 8015504:	2b08      	cmp	r3, #8
 8015506:	d10b      	bne.n	8015520 <_printf_i+0x14c>
 8015508:	6823      	ldr	r3, [r4, #0]
 801550a:	07de      	lsls	r6, r3, #31
 801550c:	d508      	bpl.n	8015520 <_printf_i+0x14c>
 801550e:	6923      	ldr	r3, [r4, #16]
 8015510:	6861      	ldr	r1, [r4, #4]
 8015512:	4299      	cmp	r1, r3
 8015514:	bfde      	ittt	le
 8015516:	2330      	movle	r3, #48	; 0x30
 8015518:	f805 3c01 	strble.w	r3, [r5, #-1]
 801551c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015520:	1b52      	subs	r2, r2, r5
 8015522:	6122      	str	r2, [r4, #16]
 8015524:	f8cd a000 	str.w	sl, [sp]
 8015528:	464b      	mov	r3, r9
 801552a:	aa03      	add	r2, sp, #12
 801552c:	4621      	mov	r1, r4
 801552e:	4640      	mov	r0, r8
 8015530:	f7ff fee2 	bl	80152f8 <_printf_common>
 8015534:	3001      	adds	r0, #1
 8015536:	d14c      	bne.n	80155d2 <_printf_i+0x1fe>
 8015538:	f04f 30ff 	mov.w	r0, #4294967295
 801553c:	b004      	add	sp, #16
 801553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015542:	4835      	ldr	r0, [pc, #212]	; (8015618 <_printf_i+0x244>)
 8015544:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015548:	6829      	ldr	r1, [r5, #0]
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015550:	6029      	str	r1, [r5, #0]
 8015552:	061d      	lsls	r5, r3, #24
 8015554:	d514      	bpl.n	8015580 <_printf_i+0x1ac>
 8015556:	07df      	lsls	r7, r3, #31
 8015558:	bf44      	itt	mi
 801555a:	f043 0320 	orrmi.w	r3, r3, #32
 801555e:	6023      	strmi	r3, [r4, #0]
 8015560:	b91e      	cbnz	r6, 801556a <_printf_i+0x196>
 8015562:	6823      	ldr	r3, [r4, #0]
 8015564:	f023 0320 	bic.w	r3, r3, #32
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	2310      	movs	r3, #16
 801556c:	e7b0      	b.n	80154d0 <_printf_i+0xfc>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	f043 0320 	orr.w	r3, r3, #32
 8015574:	6023      	str	r3, [r4, #0]
 8015576:	2378      	movs	r3, #120	; 0x78
 8015578:	4828      	ldr	r0, [pc, #160]	; (801561c <_printf_i+0x248>)
 801557a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801557e:	e7e3      	b.n	8015548 <_printf_i+0x174>
 8015580:	0659      	lsls	r1, r3, #25
 8015582:	bf48      	it	mi
 8015584:	b2b6      	uxthmi	r6, r6
 8015586:	e7e6      	b.n	8015556 <_printf_i+0x182>
 8015588:	4615      	mov	r5, r2
 801558a:	e7bb      	b.n	8015504 <_printf_i+0x130>
 801558c:	682b      	ldr	r3, [r5, #0]
 801558e:	6826      	ldr	r6, [r4, #0]
 8015590:	6961      	ldr	r1, [r4, #20]
 8015592:	1d18      	adds	r0, r3, #4
 8015594:	6028      	str	r0, [r5, #0]
 8015596:	0635      	lsls	r5, r6, #24
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	d501      	bpl.n	80155a0 <_printf_i+0x1cc>
 801559c:	6019      	str	r1, [r3, #0]
 801559e:	e002      	b.n	80155a6 <_printf_i+0x1d2>
 80155a0:	0670      	lsls	r0, r6, #25
 80155a2:	d5fb      	bpl.n	801559c <_printf_i+0x1c8>
 80155a4:	8019      	strh	r1, [r3, #0]
 80155a6:	2300      	movs	r3, #0
 80155a8:	6123      	str	r3, [r4, #16]
 80155aa:	4615      	mov	r5, r2
 80155ac:	e7ba      	b.n	8015524 <_printf_i+0x150>
 80155ae:	682b      	ldr	r3, [r5, #0]
 80155b0:	1d1a      	adds	r2, r3, #4
 80155b2:	602a      	str	r2, [r5, #0]
 80155b4:	681d      	ldr	r5, [r3, #0]
 80155b6:	6862      	ldr	r2, [r4, #4]
 80155b8:	2100      	movs	r1, #0
 80155ba:	4628      	mov	r0, r5
 80155bc:	f7ea fe28 	bl	8000210 <memchr>
 80155c0:	b108      	cbz	r0, 80155c6 <_printf_i+0x1f2>
 80155c2:	1b40      	subs	r0, r0, r5
 80155c4:	6060      	str	r0, [r4, #4]
 80155c6:	6863      	ldr	r3, [r4, #4]
 80155c8:	6123      	str	r3, [r4, #16]
 80155ca:	2300      	movs	r3, #0
 80155cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155d0:	e7a8      	b.n	8015524 <_printf_i+0x150>
 80155d2:	6923      	ldr	r3, [r4, #16]
 80155d4:	462a      	mov	r2, r5
 80155d6:	4649      	mov	r1, r9
 80155d8:	4640      	mov	r0, r8
 80155da:	47d0      	blx	sl
 80155dc:	3001      	adds	r0, #1
 80155de:	d0ab      	beq.n	8015538 <_printf_i+0x164>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	079b      	lsls	r3, r3, #30
 80155e4:	d413      	bmi.n	801560e <_printf_i+0x23a>
 80155e6:	68e0      	ldr	r0, [r4, #12]
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	4298      	cmp	r0, r3
 80155ec:	bfb8      	it	lt
 80155ee:	4618      	movlt	r0, r3
 80155f0:	e7a4      	b.n	801553c <_printf_i+0x168>
 80155f2:	2301      	movs	r3, #1
 80155f4:	4632      	mov	r2, r6
 80155f6:	4649      	mov	r1, r9
 80155f8:	4640      	mov	r0, r8
 80155fa:	47d0      	blx	sl
 80155fc:	3001      	adds	r0, #1
 80155fe:	d09b      	beq.n	8015538 <_printf_i+0x164>
 8015600:	3501      	adds	r5, #1
 8015602:	68e3      	ldr	r3, [r4, #12]
 8015604:	9903      	ldr	r1, [sp, #12]
 8015606:	1a5b      	subs	r3, r3, r1
 8015608:	42ab      	cmp	r3, r5
 801560a:	dcf2      	bgt.n	80155f2 <_printf_i+0x21e>
 801560c:	e7eb      	b.n	80155e6 <_printf_i+0x212>
 801560e:	2500      	movs	r5, #0
 8015610:	f104 0619 	add.w	r6, r4, #25
 8015614:	e7f5      	b.n	8015602 <_printf_i+0x22e>
 8015616:	bf00      	nop
 8015618:	080184cd 	.word	0x080184cd
 801561c:	080184de 	.word	0x080184de

08015620 <_sbrk_r>:
 8015620:	b538      	push	{r3, r4, r5, lr}
 8015622:	4d06      	ldr	r5, [pc, #24]	; (801563c <_sbrk_r+0x1c>)
 8015624:	2300      	movs	r3, #0
 8015626:	4604      	mov	r4, r0
 8015628:	4608      	mov	r0, r1
 801562a:	602b      	str	r3, [r5, #0]
 801562c:	f7ec fa54 	bl	8001ad8 <_sbrk>
 8015630:	1c43      	adds	r3, r0, #1
 8015632:	d102      	bne.n	801563a <_sbrk_r+0x1a>
 8015634:	682b      	ldr	r3, [r5, #0]
 8015636:	b103      	cbz	r3, 801563a <_sbrk_r+0x1a>
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	bd38      	pop	{r3, r4, r5, pc}
 801563c:	20008ec0 	.word	0x20008ec0

08015640 <__sread>:
 8015640:	b510      	push	{r4, lr}
 8015642:	460c      	mov	r4, r1
 8015644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015648:	f000 f8a8 	bl	801579c <_read_r>
 801564c:	2800      	cmp	r0, #0
 801564e:	bfab      	itete	ge
 8015650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015652:	89a3      	ldrhlt	r3, [r4, #12]
 8015654:	181b      	addge	r3, r3, r0
 8015656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801565a:	bfac      	ite	ge
 801565c:	6563      	strge	r3, [r4, #84]	; 0x54
 801565e:	81a3      	strhlt	r3, [r4, #12]
 8015660:	bd10      	pop	{r4, pc}

08015662 <__swrite>:
 8015662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015666:	461f      	mov	r7, r3
 8015668:	898b      	ldrh	r3, [r1, #12]
 801566a:	05db      	lsls	r3, r3, #23
 801566c:	4605      	mov	r5, r0
 801566e:	460c      	mov	r4, r1
 8015670:	4616      	mov	r6, r2
 8015672:	d505      	bpl.n	8015680 <__swrite+0x1e>
 8015674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015678:	2302      	movs	r3, #2
 801567a:	2200      	movs	r2, #0
 801567c:	f000 f870 	bl	8015760 <_lseek_r>
 8015680:	89a3      	ldrh	r3, [r4, #12]
 8015682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801568a:	81a3      	strh	r3, [r4, #12]
 801568c:	4632      	mov	r2, r6
 801568e:	463b      	mov	r3, r7
 8015690:	4628      	mov	r0, r5
 8015692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015696:	f000 b817 	b.w	80156c8 <_write_r>

0801569a <__sseek>:
 801569a:	b510      	push	{r4, lr}
 801569c:	460c      	mov	r4, r1
 801569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156a2:	f000 f85d 	bl	8015760 <_lseek_r>
 80156a6:	1c43      	adds	r3, r0, #1
 80156a8:	89a3      	ldrh	r3, [r4, #12]
 80156aa:	bf15      	itete	ne
 80156ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80156ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80156b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80156b6:	81a3      	strheq	r3, [r4, #12]
 80156b8:	bf18      	it	ne
 80156ba:	81a3      	strhne	r3, [r4, #12]
 80156bc:	bd10      	pop	{r4, pc}

080156be <__sclose>:
 80156be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156c2:	f000 b81b 	b.w	80156fc <_close_r>
	...

080156c8 <_write_r>:
 80156c8:	b538      	push	{r3, r4, r5, lr}
 80156ca:	4d07      	ldr	r5, [pc, #28]	; (80156e8 <_write_r+0x20>)
 80156cc:	4604      	mov	r4, r0
 80156ce:	4608      	mov	r0, r1
 80156d0:	4611      	mov	r1, r2
 80156d2:	2200      	movs	r2, #0
 80156d4:	602a      	str	r2, [r5, #0]
 80156d6:	461a      	mov	r2, r3
 80156d8:	f7fe ff4a 	bl	8014570 <_write>
 80156dc:	1c43      	adds	r3, r0, #1
 80156de:	d102      	bne.n	80156e6 <_write_r+0x1e>
 80156e0:	682b      	ldr	r3, [r5, #0]
 80156e2:	b103      	cbz	r3, 80156e6 <_write_r+0x1e>
 80156e4:	6023      	str	r3, [r4, #0]
 80156e6:	bd38      	pop	{r3, r4, r5, pc}
 80156e8:	20008ec0 	.word	0x20008ec0

080156ec <abort>:
 80156ec:	b508      	push	{r3, lr}
 80156ee:	2006      	movs	r0, #6
 80156f0:	f000 f88e 	bl	8015810 <raise>
 80156f4:	2001      	movs	r0, #1
 80156f6:	f7ec f9b1 	bl	8001a5c <_exit>
	...

080156fc <_close_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4d06      	ldr	r5, [pc, #24]	; (8015718 <_close_r+0x1c>)
 8015700:	2300      	movs	r3, #0
 8015702:	4604      	mov	r4, r0
 8015704:	4608      	mov	r0, r1
 8015706:	602b      	str	r3, [r5, #0]
 8015708:	f7ec f9b2 	bl	8001a70 <_close>
 801570c:	1c43      	adds	r3, r0, #1
 801570e:	d102      	bne.n	8015716 <_close_r+0x1a>
 8015710:	682b      	ldr	r3, [r5, #0]
 8015712:	b103      	cbz	r3, 8015716 <_close_r+0x1a>
 8015714:	6023      	str	r3, [r4, #0]
 8015716:	bd38      	pop	{r3, r4, r5, pc}
 8015718:	20008ec0 	.word	0x20008ec0

0801571c <_fstat_r>:
 801571c:	b538      	push	{r3, r4, r5, lr}
 801571e:	4d07      	ldr	r5, [pc, #28]	; (801573c <_fstat_r+0x20>)
 8015720:	2300      	movs	r3, #0
 8015722:	4604      	mov	r4, r0
 8015724:	4608      	mov	r0, r1
 8015726:	4611      	mov	r1, r2
 8015728:	602b      	str	r3, [r5, #0]
 801572a:	f7ec f9ad 	bl	8001a88 <_fstat>
 801572e:	1c43      	adds	r3, r0, #1
 8015730:	d102      	bne.n	8015738 <_fstat_r+0x1c>
 8015732:	682b      	ldr	r3, [r5, #0]
 8015734:	b103      	cbz	r3, 8015738 <_fstat_r+0x1c>
 8015736:	6023      	str	r3, [r4, #0]
 8015738:	bd38      	pop	{r3, r4, r5, pc}
 801573a:	bf00      	nop
 801573c:	20008ec0 	.word	0x20008ec0

08015740 <_isatty_r>:
 8015740:	b538      	push	{r3, r4, r5, lr}
 8015742:	4d06      	ldr	r5, [pc, #24]	; (801575c <_isatty_r+0x1c>)
 8015744:	2300      	movs	r3, #0
 8015746:	4604      	mov	r4, r0
 8015748:	4608      	mov	r0, r1
 801574a:	602b      	str	r3, [r5, #0]
 801574c:	f7ec f9ac 	bl	8001aa8 <_isatty>
 8015750:	1c43      	adds	r3, r0, #1
 8015752:	d102      	bne.n	801575a <_isatty_r+0x1a>
 8015754:	682b      	ldr	r3, [r5, #0]
 8015756:	b103      	cbz	r3, 801575a <_isatty_r+0x1a>
 8015758:	6023      	str	r3, [r4, #0]
 801575a:	bd38      	pop	{r3, r4, r5, pc}
 801575c:	20008ec0 	.word	0x20008ec0

08015760 <_lseek_r>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4d07      	ldr	r5, [pc, #28]	; (8015780 <_lseek_r+0x20>)
 8015764:	4604      	mov	r4, r0
 8015766:	4608      	mov	r0, r1
 8015768:	4611      	mov	r1, r2
 801576a:	2200      	movs	r2, #0
 801576c:	602a      	str	r2, [r5, #0]
 801576e:	461a      	mov	r2, r3
 8015770:	f7ec f9a5 	bl	8001abe <_lseek>
 8015774:	1c43      	adds	r3, r0, #1
 8015776:	d102      	bne.n	801577e <_lseek_r+0x1e>
 8015778:	682b      	ldr	r3, [r5, #0]
 801577a:	b103      	cbz	r3, 801577e <_lseek_r+0x1e>
 801577c:	6023      	str	r3, [r4, #0]
 801577e:	bd38      	pop	{r3, r4, r5, pc}
 8015780:	20008ec0 	.word	0x20008ec0

08015784 <__malloc_lock>:
 8015784:	4801      	ldr	r0, [pc, #4]	; (801578c <__malloc_lock+0x8>)
 8015786:	f7ff bb0d 	b.w	8014da4 <__retarget_lock_acquire_recursive>
 801578a:	bf00      	nop
 801578c:	20008ec4 	.word	0x20008ec4

08015790 <__malloc_unlock>:
 8015790:	4801      	ldr	r0, [pc, #4]	; (8015798 <__malloc_unlock+0x8>)
 8015792:	f7ff bb08 	b.w	8014da6 <__retarget_lock_release_recursive>
 8015796:	bf00      	nop
 8015798:	20008ec4 	.word	0x20008ec4

0801579c <_read_r>:
 801579c:	b538      	push	{r3, r4, r5, lr}
 801579e:	4d07      	ldr	r5, [pc, #28]	; (80157bc <_read_r+0x20>)
 80157a0:	4604      	mov	r4, r0
 80157a2:	4608      	mov	r0, r1
 80157a4:	4611      	mov	r1, r2
 80157a6:	2200      	movs	r2, #0
 80157a8:	602a      	str	r2, [r5, #0]
 80157aa:	461a      	mov	r2, r3
 80157ac:	f7fe ff10 	bl	80145d0 <_read>
 80157b0:	1c43      	adds	r3, r0, #1
 80157b2:	d102      	bne.n	80157ba <_read_r+0x1e>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	b103      	cbz	r3, 80157ba <_read_r+0x1e>
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	bd38      	pop	{r3, r4, r5, pc}
 80157bc:	20008ec0 	.word	0x20008ec0

080157c0 <_raise_r>:
 80157c0:	291f      	cmp	r1, #31
 80157c2:	b538      	push	{r3, r4, r5, lr}
 80157c4:	4604      	mov	r4, r0
 80157c6:	460d      	mov	r5, r1
 80157c8:	d904      	bls.n	80157d4 <_raise_r+0x14>
 80157ca:	2316      	movs	r3, #22
 80157cc:	6003      	str	r3, [r0, #0]
 80157ce:	f04f 30ff 	mov.w	r0, #4294967295
 80157d2:	bd38      	pop	{r3, r4, r5, pc}
 80157d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80157d6:	b112      	cbz	r2, 80157de <_raise_r+0x1e>
 80157d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80157dc:	b94b      	cbnz	r3, 80157f2 <_raise_r+0x32>
 80157de:	4620      	mov	r0, r4
 80157e0:	f000 f830 	bl	8015844 <_getpid_r>
 80157e4:	462a      	mov	r2, r5
 80157e6:	4601      	mov	r1, r0
 80157e8:	4620      	mov	r0, r4
 80157ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157ee:	f000 b817 	b.w	8015820 <_kill_r>
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d00a      	beq.n	801580c <_raise_r+0x4c>
 80157f6:	1c59      	adds	r1, r3, #1
 80157f8:	d103      	bne.n	8015802 <_raise_r+0x42>
 80157fa:	2316      	movs	r3, #22
 80157fc:	6003      	str	r3, [r0, #0]
 80157fe:	2001      	movs	r0, #1
 8015800:	e7e7      	b.n	80157d2 <_raise_r+0x12>
 8015802:	2400      	movs	r4, #0
 8015804:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015808:	4628      	mov	r0, r5
 801580a:	4798      	blx	r3
 801580c:	2000      	movs	r0, #0
 801580e:	e7e0      	b.n	80157d2 <_raise_r+0x12>

08015810 <raise>:
 8015810:	4b02      	ldr	r3, [pc, #8]	; (801581c <raise+0xc>)
 8015812:	4601      	mov	r1, r0
 8015814:	6818      	ldr	r0, [r3, #0]
 8015816:	f7ff bfd3 	b.w	80157c0 <_raise_r>
 801581a:	bf00      	nop
 801581c:	20000038 	.word	0x20000038

08015820 <_kill_r>:
 8015820:	b538      	push	{r3, r4, r5, lr}
 8015822:	4d07      	ldr	r5, [pc, #28]	; (8015840 <_kill_r+0x20>)
 8015824:	2300      	movs	r3, #0
 8015826:	4604      	mov	r4, r0
 8015828:	4608      	mov	r0, r1
 801582a:	4611      	mov	r1, r2
 801582c:	602b      	str	r3, [r5, #0]
 801582e:	f7ec f903 	bl	8001a38 <_kill>
 8015832:	1c43      	adds	r3, r0, #1
 8015834:	d102      	bne.n	801583c <_kill_r+0x1c>
 8015836:	682b      	ldr	r3, [r5, #0]
 8015838:	b103      	cbz	r3, 801583c <_kill_r+0x1c>
 801583a:	6023      	str	r3, [r4, #0]
 801583c:	bd38      	pop	{r3, r4, r5, pc}
 801583e:	bf00      	nop
 8015840:	20008ec0 	.word	0x20008ec0

08015844 <_getpid_r>:
 8015844:	f7ec b8f0 	b.w	8001a28 <_getpid>

08015848 <_init>:
 8015848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584a:	bf00      	nop
 801584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801584e:	bc08      	pop	{r3}
 8015850:	469e      	mov	lr, r3
 8015852:	4770      	bx	lr

08015854 <_fini>:
 8015854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015856:	bf00      	nop
 8015858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585a:	bc08      	pop	{r3}
 801585c:	469e      	mov	lr, r3
 801585e:	4770      	bx	lr
