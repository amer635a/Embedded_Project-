
F7_ADC_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c58  0801510c  0801510c  0002510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d64  08017d64  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08017d64  08017d64  00027d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d6c  08017d6c  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d6c  08017d6c  00027d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d70  08017d70  00027d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08017d74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08017e04  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08017ea4  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008c1c  200001d0  08017f44  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008dec  08017f44  00038dec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034b6c  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000737b  00000000  00000000  00064d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002710  00000000  00000000  0006c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002580  00000000  00000000  0006e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037527  00000000  00000000  00070d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d246  00000000  00000000  000a829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116330  00000000  00000000  000e54e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fb815  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ad50  00000000  00000000  001fb868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080150f4 	.word	0x080150f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080150f4 	.word	0x080150f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fbd0 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f822 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005c0:	f000 fb08 	bl	8000bd4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb3c 	bl	8000c40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 faa6 	bl	8000b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fad4 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005d0:	f000 f880 	bl	80006d4 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d4:	f000 f8d0 	bl	8000778 <MX_DAC_Init>
  MX_TIM2_Init();
 80005d8:	f000 f9f0 	bl	80009bc <MX_TIM2_Init>
  MX_UART4_Init();
 80005dc:	f000 fa3c 	bl	8000a58 <MX_UART4_Init>
  MX_UART5_Init();
 80005e0:	f000 fa6a 	bl	8000ab8 <MX_UART5_Init>
  MX_I2C1_Init();
 80005e4:	f000 f8f2 	bl	80007cc <MX_I2C1_Init>
  MX_DMA_Init();
 80005e8:	f000 faf4 	bl	8000bd4 <MX_DMA_Init>
  MX_I2C2_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005f0:	f000 f96c 	bl	80008cc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9a8 	bl	8000948 <MX_SPI2_Init>
  MX_LWIP_Init();
 80005f8:	f009 fa3e 	bl	8009a78 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005fc:	f013 fb94 	bl	8013d28 <rtg_main>
 8000600:	e7fc      	b.n	80005fc <main+0x48>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f013 fca0 	bl	8013f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f005 f878 	bl	800571c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xc8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xcc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000678:	2348      	movs	r3, #72	; 0x48
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f005 f857 	bl	800573c <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fb7e 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fae5 	bl	8005c84 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c0:	f000 fb68 	bl	8000d94 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0x98>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_ADC1_Init+0x9c>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC1_Init+0x98>)
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_ADC1_Init+0xa0>)
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_ADC1_Init+0x98>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_ADC1_Init+0x98>)
 8000734:	f001 fb94 	bl	8001e60 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fb29 	bl	8000d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0x98>)
 8000754:	f001 fcec 	bl	8002130 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 fb19 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001ec 	.word	0x200001ec
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DAC_Init+0x4c>)
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_DAC_Init+0x50>)
 800078a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_DAC_Init+0x4c>)
 800078e:	f002 f83a 	bl	8002806 <HAL_DAC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000798:	f000 fafc 	bl	8000d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_DAC_Init+0x4c>)
 80007ac:	f002 f8b1 	bl	8002912 <HAL_DAC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 faed 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000234 	.word	0x20000234
 80007c8:	40007400 	.word	0x40007400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f003 ff8c 	bl	8004724 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fabf 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f004 fda0 	bl	800535e <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fab6 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f004 fde2 	bl	80053f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 faad 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000248 	.word	0x20000248
 8000844:	40005400 	.word	0x40005400
 8000848:	00808cd2 	.word	0x00808cd2

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 44;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	222c      	movs	r2, #44	; 0x2c
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f003 ff4c 	bl	8004724 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fa7f 	bl	8000d94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f004 fd60 	bl	800535e <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fa76 	bl	8000d94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f004 fda2 	bl	80053f4 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fa6d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000029c 	.word	0x2000029c
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00808cd2 	.word	0x00808cd2

080008cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI1_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x74>)
 800092c:	f005 ffc0 	bl	80068b0 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fa2d 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000470 	.word	0x20000470
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_SPI2_Init+0x70>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000960:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI2_Init+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x6c>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI2_Init+0x6c>)
 80009a0:	f005 ff86 	bl	80068b0 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009aa:	f000 f9f3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004d4 	.word	0x200004d4
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM2_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a06:	f006 ffc5 	bl	8007994 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f9c0 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a22:	f007 f92d 	bl	8007c80 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 f9b2 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM2_Init+0x98>)
 8000a3e:	f007 fb4b 	bl	80080d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a48:	f000 f9a4 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000538 	.word	0x20000538

08000a58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_UART4_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_UART4_Init+0x58>)
 8000a9c:	f007 fbc8 	bl	8008230 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f975 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000584 	.word	0x20000584
 8000ab4:	40004c00 	.word	0x40004c00

08000ab8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_UART5_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_UART5_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x58>)
 8000afc:	f007 fb98 	bl	8008230 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f945 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000060c 	.word	0x2000060c
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f007 fb68 	bl	8008230 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f915 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000694 	.word	0x20000694
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f004 fc66 	bl	800548c <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8e5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000071c 	.word	0x2000071c

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_DMA_Init+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_DMA_Init+0x68>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f001 fdcf 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f001 fde8 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200d      	movs	r0, #13
 8000c08:	f001 fdc7 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f001 fde0 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2011      	movs	r0, #17
 8000c18:	f001 fdbf 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f001 fdd8 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	202f      	movs	r0, #47	; 0x2f
 8000c28:	f001 fdb7 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c2c:	202f      	movs	r0, #47	; 0x2f
 8000c2e:	f001 fdd0 	bl	80027d2 <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b3f      	ldr	r3, [pc, #252]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0x144>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000cee:	f003 fcc1 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4825      	ldr	r0, [pc, #148]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf8:	f003 fcbc 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	; (8000d90 <MX_GPIO_Init+0x150>)
 8000d14:	f003 fb02 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x148>)
 8000d32:	f003 faf3 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d4e:	f003 fae5 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_GPIO_Init+0x14c>)
 8000d66:	f003 fad9 	bl	800431c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f001 fd13 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d74:	2028      	movs	r0, #40	; 0x28
 8000d76:	f001 fd2c 	bl	80027d2 <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_ADC_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12b      	bne.n	8000e62 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_ADC_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HAL_ADC_MspInit+0x8c>)
 8000e4e:	f003 fa65 	bl	800431c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2012      	movs	r0, #18
 8000e58:	f001 fc9f 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e5c:	2012      	movs	r0, #18
 8000e5e:	f001 fcb8 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_DAC_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_DAC_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_DAC_MspInit+0x8c>)
 8000ede:	f003 fa1d 	bl	800431c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2036      	movs	r0, #54	; 0x36
 8000ee8:	f001 fc57 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eec:	2036      	movs	r0, #54	; 0x36
 8000eee:	f001 fc70 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40007400 	.word	0x40007400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	; 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	2284      	movs	r2, #132	; 0x84
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f013 f815 	bl	8013f58 <memset>
  if(hi2c->Instance==I2C1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_I2C_MspInit+0x188>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f040 80b9 	bne.w	80010ac <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f005 f8c1 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f54:	f7ff ff1e 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b4e      	ldr	r3, [pc, #312]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f70:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4840      	ldr	r0, [pc, #256]	; (8001098 <HAL_I2C_MspInit+0x190>)
 8000f98:	f003 f9c0 	bl	800431c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_I2C_MspInit+0x18c>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_I2C_MspInit+0x198>)
 8000fb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <HAL_I2C_MspInit+0x194>)
 8000ff6:	f001 fce5 	bl	80029c4 <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001000:	f7ff fec8 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <HAL_I2C_MspInit+0x194>)
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c
 800100a:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_I2C_MspInit+0x194>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <HAL_I2C_MspInit+0x1a0>)
 8001014:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800101c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001052:	f001 fcb7 	bl	80029c4 <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800105c:	f7ff fe9a 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_I2C_MspInit+0x19c>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	201f      	movs	r0, #31
 8001072:	f001 fb92 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001076:	201f      	movs	r0, #31
 8001078:	f001 fbab 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2020      	movs	r0, #32
 8001082:	f001 fb8a 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001086:	2020      	movs	r0, #32
 8001088:	f001 fba3 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800108c:	e0be      	b.n	800120c <HAL_I2C_MspInit+0x304>
 800108e:	bf00      	nop
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400
 800109c:	200002f0 	.word	0x200002f0
 80010a0:	40026010 	.word	0x40026010
 80010a4:	20000350 	.word	0x20000350
 80010a8:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_I2C_MspInit+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 80aa 	bne.w	800120c <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 f801 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 80010d4:	f7ff fe5e 	bl	8000d94 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <HAL_I2C_MspInit+0x310>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800110a:	2304      	movs	r3, #4
 800110c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001114:	4619      	mov	r1, r3
 8001116:	4841      	ldr	r0, [pc, #260]	; (800121c <HAL_I2C_MspInit+0x314>)
 8001118:	f003 f900 	bl	800431c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_I2C_MspInit+0x310>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a3d      	ldr	r2, [pc, #244]	; (8001218 <HAL_I2C_MspInit+0x310>)
 8001122:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_I2C_MspInit+0x310>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_I2C_MspInit+0x31c>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800113c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001140:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001154:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001176:	f001 fc25 	bl	80029c4 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001180:	f7ff fe08 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_I2C_MspInit+0x318>)
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_I2C_MspInit+0x318>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_I2C_MspInit+0x320>)
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_I2C_MspInit+0x324>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_I2C_MspInit+0x320>)
 8001198:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800119c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011d2:	f001 fbf7 	bl	80029c4 <HAL_DMA_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80011dc:	f7ff fdda 	bl	8000d94 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_I2C_MspInit+0x320>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2021      	movs	r0, #33	; 0x21
 80011f2:	f001 fad2 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011f6:	2021      	movs	r0, #33	; 0x21
 80011f8:	f001 faeb 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2022      	movs	r0, #34	; 0x22
 8001202:	f001 faca 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001206:	2022      	movs	r0, #34	; 0x22
 8001208:	f001 fae3 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 800120c:	bf00      	nop
 800120e:	37b0      	adds	r7, #176	; 0xb0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005800 	.word	0x40005800
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400
 8001220:	200003b0 	.word	0x200003b0
 8001224:	40026040 	.word	0x40026040
 8001228:	20000410 	.word	0x20000410
 800122c:	400260b8 	.word	0x400260b8

08001230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_SPI_MspInit+0x168>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d14c      	bne.n	80012ec <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a45      	ldr	r2, [pc, #276]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012aa:	2305      	movs	r3, #5
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	483a      	ldr	r0, [pc, #232]	; (80013a0 <HAL_SPI_MspInit+0x170>)
 80012b6:	f003 f831 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ba:	2320      	movs	r3, #32
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <HAL_SPI_MspInit+0x174>)
 80012d6:	f003 f821 	bl	800431c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2023      	movs	r0, #35	; 0x23
 80012e0:	f001 fa5b 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012e4:	2023      	movs	r0, #35	; 0x23
 80012e6:	f001 fa74 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ea:	e050      	b.n	800138e <HAL_SPI_MspInit+0x15e>
  else if(hspi->Instance==SPI2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_SPI_MspInit+0x178>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d14b      	bne.n	800138e <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_SPI_MspInit+0x16c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_SPI_MspInit+0x16c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_SPI_MspInit+0x16c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_SPI_MspInit+0x16c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800133e:	230c      	movs	r3, #12
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134e:	2305      	movs	r3, #5
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <HAL_SPI_MspInit+0x17c>)
 800135a:	f002 ffdf 	bl	800431c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800135e:	2308      	movs	r3, #8
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800136e:	2305      	movs	r3, #5
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <HAL_SPI_MspInit+0x180>)
 800137a:	f002 ffcf 	bl	800431c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2024      	movs	r0, #36	; 0x24
 8001384:	f001 fa09 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001388:	2024      	movs	r0, #36	; 0x24
 800138a:	f001 fa22 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013000 	.word	0x40013000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40003800 	.word	0x40003800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d113      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f001 f9d9 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f001 f9f2 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0b0      	sub	sp, #192	; 0xc0
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001418:	2284      	movs	r2, #132	; 0x84
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f012 fd9b 	bl	8013f58 <memset>
  if(huart->Instance==UART4)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a81      	ldr	r2, [pc, #516]	; (800162c <HAL_UART_MspInit+0x230>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d145      	bne.n	80014b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fe48 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001446:	f7ff fca5 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_UART_MspInit+0x234>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a78      	ldr	r2, [pc, #480]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a72      	ldr	r2, [pc, #456]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001494:	2308      	movs	r3, #8
 8001496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800149e:	4619      	mov	r1, r3
 80014a0:	4864      	ldr	r0, [pc, #400]	; (8001634 <HAL_UART_MspInit+0x238>)
 80014a2:	f002 ff3b 	bl	800431c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2034      	movs	r0, #52	; 0x34
 80014ac:	f001 f975 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014b0:	2034      	movs	r0, #52	; 0x34
 80014b2:	f001 f98e 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b6:	e0b5      	b.n	8001624 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==UART5)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_UART_MspInit+0x23c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d166      	bne.n	8001590 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fdfd 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80014dc:	f7ff fc5a 	bl	8000d94 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_UART_MspInit+0x234>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_UART_MspInit+0x234>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_UART_MspInit+0x234>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001536:	2301      	movs	r3, #1
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001542:	2308      	movs	r3, #8
 8001544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800154c:	4619      	mov	r1, r3
 800154e:	4839      	ldr	r0, [pc, #228]	; (8001634 <HAL_UART_MspInit+0x238>)
 8001550:	f002 fee4 	bl	800431c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001554:	2304      	movs	r3, #4
 8001556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800156c:	2308      	movs	r3, #8
 800156e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001576:	4619      	mov	r1, r3
 8001578:	4830      	ldr	r0, [pc, #192]	; (800163c <HAL_UART_MspInit+0x240>)
 800157a:	f002 fecf 	bl	800431c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2035      	movs	r0, #53	; 0x35
 8001584:	f001 f909 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001588:	2035      	movs	r0, #53	; 0x35
 800158a:	f001 f922 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 800158e:	e049      	b.n	8001624 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_UART_MspInit+0x244>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d144      	bne.n	8001624 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fd91 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80015b4:	f7ff fbee 	bl	8000d94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_UART_MspInit+0x234>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001602:	2307      	movs	r3, #7
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_UART_MspInit+0x240>)
 8001610:	f002 fe84 	bl	800431c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2027      	movs	r0, #39	; 0x27
 800161a:	f001 f8be 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800161e:	2027      	movs	r0, #39	; 0x27
 8001620:	f001 f8d7 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	37c0      	adds	r7, #192	; 0xc0
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40004c00 	.word	0x40004c00
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40005000 	.word	0x40005000
 800163c:	40020c00 	.word	0x40020c00
 8001640:	40004800 	.word	0x40004800

08001644 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0ac      	sub	sp, #176	; 0xb0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2284      	movs	r2, #132	; 0x84
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f012 fc77 	bl	8013f58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001672:	d159      	bne.n	8001728 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001674:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001678:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fd23 	bl	80060d0 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001690:	f7ff fb80 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_PCD_MspInit+0xec>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c6:	230a      	movs	r3, #10
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d0:	4619      	mov	r1, r3
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <HAL_PCD_MspInit+0xf0>)
 80016d4:	f002 fe22 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f0:	4619      	mov	r1, r3
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <HAL_PCD_MspInit+0xf0>)
 80016f4:	f002 fe12 	bl	800431c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_PCD_MspInit+0xec>)
 80016fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001702:	6353      	str	r3, [r2, #52]	; 0x34
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_PCD_MspInit+0xec>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6453      	str	r3, [r2, #68]	; 0x44
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_PCD_MspInit+0xec>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	37b0      	adds	r7, #176	; 0xb0
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fb28 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Stream0_IRQHandler+0x10>)
 8001792:	f001 fa57 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002f0 	.word	0x200002f0

080017a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream2_IRQHandler+0x10>)
 80017a6:	f001 fa4d 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003b0 	.word	0x200003b0

080017b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream6_IRQHandler+0x10>)
 80017ba:	f001 fa43 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000350 	.word	0x20000350

080017c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <ADC_IRQHandler+0x10>)
 80017ce:	f000 fb8b 	bl	8001ee8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001ec 	.word	0x200001ec

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM2_IRQHandler+0x10>)
 80017e2:	f006 f92e 	bl	8007a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000538 	.word	0x20000538

080017f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <I2C1_EV_IRQHandler+0x10>)
 80017f6:	f003 f825 	bl	8004844 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000248 	.word	0x20000248

08001804 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <I2C1_ER_IRQHandler+0x10>)
 800180a:	f003 f835 	bl	8004878 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000248 	.word	0x20000248

08001818 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <I2C2_EV_IRQHandler+0x10>)
 800181e:	f003 f811 	bl	8004844 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000029c 	.word	0x2000029c

0800182c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <I2C2_ER_IRQHandler+0x10>)
 8001832:	f003 f821 	bl	8004878 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000029c 	.word	0x2000029c

08001840 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <SPI1_IRQHandler+0x10>)
 8001846:	f005 fbad 	bl	8006fa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000470 	.word	0x20000470

08001854 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <SPI2_IRQHandler+0x10>)
 800185a:	f005 fba3 	bl	8006fa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200004d4 	.word	0x200004d4

08001868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART3_IRQHandler+0x10>)
 800186e:	f006 fe75 	bl	800855c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000694 	.word	0x20000694

0800187c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001884:	f002 ff2a 	bl	80046dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Stream7_IRQHandler+0x10>)
 8001892:	f001 f9d7 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000410 	.word	0x20000410

080018a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <UART4_IRQHandler+0x10>)
 80018a6:	f006 fe59 	bl	800855c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000584 	.word	0x20000584

080018b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART5_IRQHandler+0x10>)
 80018ba:	f006 fe4f 	bl	800855c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000060c 	.word	0x2000060c

080018c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM6_DAC_IRQHandler+0x10>)
 80018ce:	f000 ffbc 	bl	800284a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000234 	.word	0x20000234

080018dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <ETH_IRQHandler+0x10>)
 80018e2:	f001 fe35 	bl	8003550 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20005604 	.word	0x20005604

080018f0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <ETH_WKUP_IRQHandler+0x10>)
 80018f6:	f001 fe2b 	bl	8003550 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20005604 	.word	0x20005604

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <_kill+0x20>)
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
	return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20008ddc 	.word	0x20008ddc

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe5 	bl	8001914 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_close>:
	}
	return len;
}

int _close(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001974:	605a      	str	r2, [r3, #4]
	return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_isatty>:

int _isatty(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
	return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d205      	bcs.n	80019f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <_sbrk+0x6c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	20050000 	.word	0x20050000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000c24 	.word	0x20000c24
 8001a1c:	20008df0 	.word	0x20008df0
 8001a20:	20008ddc 	.word	0x20008ddc

08001a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a64:	4c0b      	ldr	r4, [pc, #44]	; (8001a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a72:	f7ff ffd7 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f012 fa2d 	bl	8013ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7fe fd9b 	bl	80005b4 <main>
  bx  lr    
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a8c:	08017d74 	.word	0x08017d74
  ldr r2, =_sbss
 8001a90:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001a94:	20008dec 	.word	0x20008dec

08001a98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <CAN1_RX0_IRQHandler>

08001a9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <LAN8742_RegisterBusIO+0x28>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e014      	b.n	8001af2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d17c      	bne.n	8001c18 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e01c      	b.n	8001b72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f107 0208 	add.w	r2, r7, #8
 8001b40:	2112      	movs	r1, #18
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	4798      	blx	r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da03      	bge.n	8001b54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001b4c:	f06f 0304 	mvn.w	r3, #4
 8001b50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001b52:	e00b      	b.n	8001b6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d105      	bne.n	8001b6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
         break;
 8001b6a:	e005      	b.n	8001b78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b1f      	cmp	r3, #31
 8001b76:	d9df      	bls.n	8001b38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b1f      	cmp	r3, #31
 8001b7e:	d902      	bls.n	8001b86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b80:	f06f 0302 	mvn.w	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d145      	bne.n	8001c18 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6810      	ldr	r0, [r2, #0]
 8001b94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4798      	blx	r3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db37      	blt.n	8001c12 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6810      	ldr	r0, [r2, #0]
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4798      	blx	r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db28      	blt.n	8001c0a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bc2:	e01c      	b.n	8001bfe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4798      	blx	r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bd6:	d80e      	bhi.n	8001bf6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	2100      	movs	r1, #0
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da07      	bge.n	8001bfe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001bee:	f06f 0304 	mvn.w	r3, #4
 8001bf2:	613b      	str	r3, [r7, #16]
                 break;
 8001bf4:	e010      	b.n	8001c18 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001bf6:	f06f 0301 	mvn.w	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
               break;
 8001bfc:	e00c      	b.n	8001c18 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1dd      	bne.n	8001bc4 <LAN8742_Init+0xc6>
 8001c08:	e006      	b.n	8001c18 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001c0a:	f06f 0304 	mvn.w	r3, #4
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e002      	b.n	8001c18 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001c12:	f06f 0303 	mvn.w	r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d112      	bne.n	8001c44 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	4798      	blx	r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001c28:	bf00      	nop
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4798      	blx	r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c3c:	d9f5      	bls.n	8001c2a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001c44:	693b      	ldr	r3, [r7, #16]
 }
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6810      	ldr	r0, [r2, #0]
 8001c62:	f107 020c 	add.w	r2, r7, #12
 8001c66:	2101      	movs	r1, #1
 8001c68:	4798      	blx	r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da02      	bge.n	8001c76 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c70:	f06f 0304 	mvn.w	r3, #4
 8001c74:	e06e      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2101      	movs	r1, #1
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da02      	bge.n	8001c92 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c8c:	f06f 0304 	mvn.w	r3, #4
 8001c90:	e060      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e059      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6810      	ldr	r0, [r2, #0]
 8001ca8:	f107 020c 	add.w	r2, r7, #12
 8001cac:	2100      	movs	r1, #0
 8001cae:	4798      	blx	r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da02      	bge.n	8001cbc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cb6:	f06f 0304 	mvn.w	r3, #4
 8001cba:	e04b      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11b      	bne.n	8001cfe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <LAN8742_GetLinkState+0x90>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e03a      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e033      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e02c      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	e02a      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6810      	ldr	r0, [r2, #0]
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	211f      	movs	r1, #31
 8001d0c:	4798      	blx	r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da02      	bge.n	8001d1a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d14:	f06f 0304 	mvn.w	r3, #4
 8001d18:	e01c      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d24:	2306      	movs	r3, #6
 8001d26:	e015      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 031c 	and.w	r3, r3, #28
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	d101      	bne.n	8001d36 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 031c 	and.w	r3, r3, #28
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d101      	bne.n	8001d44 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e007      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 031c 	and.w	r3, r3, #28
 8001d4a:	2b14      	cmp	r3, #20
 8001d4c:	d101      	bne.n	8001d52 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e000      	b.n	8001d54 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d52:	2305      	movs	r3, #5
    }				
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fd0f 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f806 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff f818 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x54>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x58>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd29 	bl	80027ee <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00e      	b.n	8001dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d80a      	bhi.n	8001dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f000 fcf1 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_InitTick+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000c28 	.word	0x20000c28

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000c28 	.word	0x20000c28

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008

08001e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e031      	b.n	8001eda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe ffb2 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_ADC_Init+0x84>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa94 	bl	80023dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	ffffeefd 	.word	0xffffeefd

08001ee8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d049      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0xca>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d046      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d12b      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d127      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0220 	bic.w	r2, r2, #32
 8001f7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f011 fea0 	bl	8013ce8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0212 	mvn.w	r2, #18
 8001fb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d057      	beq.n	8002078 <HAL_ADC_IRQHandler+0x190>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d054      	beq.n	8002078 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d139      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12b      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d124      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11d      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	d119      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002042:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fab1 	bl	80025d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 020c 	mvn.w	r2, #12
 8002076:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d017      	beq.n	80020be <HAL_ADC_IRQHandler+0x1d6>
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d014      	beq.n	80020be <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10d      	bne.n	80020be <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f82a 	bl	8002108 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0201 	mvn.w	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020cc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d015      	beq.n	8002100 <HAL_ADC_IRQHandler+0x218>
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0220 	mvn.w	r2, #32
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f813 	bl	800211c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0220 	mvn.w	r2, #32
 80020fe:	601a      	str	r2, [r3, #0]
  }
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c>
 8002148:	2302      	movs	r3, #2
 800214a:	e136      	b.n	80023ba <HAL_ADC_ConfigChannel+0x28a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d93a      	bls.n	80021d2 <HAL_ADC_ConfigChannel+0xa2>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002164:	d035      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	3b1e      	subs	r3, #30
 800217c:	2207      	movs	r2, #7
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8d      	ldr	r2, [pc, #564]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68d9      	ldr	r1, [r3, #12]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	061a      	lsls	r2, r3, #24
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021aa:	e035      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	3b1e      	subs	r3, #30
 80021c6:	409a      	lsls	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d0:	e022      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	409a      	lsls	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d824      	bhi.n	800226a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b05      	subs	r3, #5
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43da      	mvns	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	400a      	ands	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b05      	subs	r3, #5
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
 8002268:	e04c      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d824      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b23      	subs	r3, #35	; 0x23
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b23      	subs	r3, #35	; 0x23
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ba:	e023      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b41      	subs	r3, #65	; 0x41
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b41      	subs	r3, #65	; 0x41
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a30      	ldr	r2, [pc, #192]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800231e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002322:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10f      	bne.n	800234e <HAL_ADC_ConfigChannel+0x21e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b12      	cmp	r3, #18
 8002334:	d10b      	bne.n	800234e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800233c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002340:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800234c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_ADC_ConfigChannel+0x29c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d12b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <HAL_ADC_ConfigChannel+0x23a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b11      	cmp	r3, #17
 8002368:	d122      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002370:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002374:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800237c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002380:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_ADC_ConfigChannel+0x298>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d111      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9a      	lsrs	r2, r3, #18
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023a2:	e002      	b.n	80023aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	10000012 	.word	0x10000012
 80023cc:	40012000 	.word	0x40012000
 80023d0:	40012300 	.word	0x40012300
 80023d4:	20000000 	.word	0x20000000
 80023d8:	431bde83 	.word	0x431bde83

080023dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <ADC_Init+0x1ec>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <ADC_Init+0x1ec>)
 80023ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <ADC_Init+0x1ec>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4973      	ldr	r1, [pc, #460]	; (80025c8 <ADC_Init+0x1ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	; (80025cc <ADC_Init+0x1f0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	05fa0000 	.word	0x05fa0000

0800262c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	; (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff29 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff3e 	bl	800262c <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff8e 	bl	80026d8 <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5d 	bl	8002684 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff31 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa2 	bl	8002740 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e014      	b.n	8002842 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7fe fb25 	bl	8000e78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002860:	d120      	bne.n	80028a4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d118      	bne.n	80028a4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f82d 	bl	80028fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b2:	d120      	bne.n	80028f6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c2:	d118      	bne.n	80028f6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80028ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f85d 	bl	80029b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	795b      	ldrb	r3, [r3, #5]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_DAC_ConfigChannel+0x18>
 8002926:	2302      	movs	r3, #2
 8002928:	e03c      	b.n	80029a4 <HAL_DAC_ConfigChannel+0x92>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2202      	movs	r2, #2
 8002934:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	22c0      	movs	r2, #192	; 0xc0
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43da      	mvns	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff fa16 	bl	8001e00 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff f9fd 	bl	8001e00 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa89 	bl	8002fe0 <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa40 	bl	8002f74 <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f010803f 	.word	0xf010803f

08002b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7ff f967 	bl	8001e00 <HAL_GetTick>
 8002b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e052      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0216 	bic.w	r2, r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_DMA_Abort+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	e013      	b.n	8002bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba4:	f7ff f92c 	bl	8001e00 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d90c      	bls.n	8002bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e015      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e4      	bne.n	8002ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00c      	b.n	8002c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c50:	4b8e      	ldr	r3, [pc, #568]	; (8002e8c <HAL_DMA_IRQHandler+0x248>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a8e      	ldr	r2, [pc, #568]	; (8002e90 <HAL_DMA_IRQHandler+0x24c>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a9b      	lsrs	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01a      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2204      	movs	r2, #4
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2204      	movs	r2, #4
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2210      	movs	r2, #16
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d043      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03c      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2210      	movs	r2, #16
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e01f      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e016      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2220      	movs	r2, #32
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 808f 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8087 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	2220      	movs	r2, #32
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d136      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0216 	bic.w	r2, r2, #22
 8002dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x1da>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	223f      	movs	r2, #63	; 0x3f
 8002e34:	409a      	lsls	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d07e      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
        }
        return;
 8002e5a:	e079      	b.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e02c      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e01e      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0210 	bic.w	r2, r2, #16
 8002ec2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d032      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2205      	movs	r2, #5
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d307      	bcc.n	8002f2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f2      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x2cc>
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e000      	b.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f50:	bf00      	nop
    }
  }
}
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f66:	b2db      	uxtb	r3, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3b10      	subs	r3, #16
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d908      	bls.n	8002fb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <DMA_CalcBaseAndBitshift+0x68>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	1d1a      	adds	r2, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002fb2:	e006      	b.n	8002fc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <DMA_CalcBaseAndBitshift+0x68>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	aaaaaaab 	.word	0xaaaaaaab
 8002fd8:	08017b24 	.word	0x08017b24
 8002fdc:	fffffc00 	.word	0xfffffc00

08002fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11f      	bne.n	800303a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d856      	bhi.n	80030ae <DMA_CheckFifoParam+0xce>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <DMA_CheckFifoParam+0x28>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003019 	.word	0x08003019
 800300c:	0800302b 	.word	0x0800302b
 8003010:	08003019 	.word	0x08003019
 8003014:	080030af 	.word	0x080030af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d046      	beq.n	80030b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003028:	e043      	b.n	80030b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003032:	d140      	bne.n	80030b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e03d      	b.n	80030b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003042:	d121      	bne.n	8003088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d837      	bhi.n	80030ba <DMA_CheckFifoParam+0xda>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <DMA_CheckFifoParam+0x70>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003061 	.word	0x08003061
 8003054:	08003067 	.word	0x08003067
 8003058:	08003061 	.word	0x08003061
 800305c:	08003079 	.word	0x08003079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e030      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d025      	beq.n	80030be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e022      	b.n	80030be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003086:	e01c      	b.n	80030c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d903      	bls.n	8003096 <DMA_CheckFifoParam+0xb6>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d003      	beq.n	800309c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003094:	e018      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      break;
 800309a:	e015      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e00b      	b.n	80030c6 <DMA_CheckFifoParam+0xe6>
      break;
 80030ae:	bf00      	nop
 80030b0:	e00a      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e008      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e006      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
 80030bc:	e004      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
    }
  } 
  
  return status; 
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop

080030d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06a      	b.n	80031c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2223      	movs	r2, #35	; 0x23
 80030f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f006 ff61 	bl	8009fc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_ETH_Init+0xf0>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <HAL_ETH_Init+0xf0>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <HAL_ETH_Init+0xf0>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_ETH_Init+0xf4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_ETH_Init+0xf4>)
 8003120:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003124:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_ETH_Init+0xf4>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4927      	ldr	r1, [pc, #156]	; (80031cc <HAL_ETH_Init+0xf4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_ETH_Init+0xf4>)
 8003136:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800314e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003150:	f7fe fe56 	bl	8001e00 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003156:	e011      	b.n	800317c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003158:	f7fe fe52 	bl	8001e00 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003166:	d909      	bls.n	800317c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	22e0      	movs	r2, #224	; 0xe0
 8003174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e021      	b.n	80031c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e4      	bne.n	8003158 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fe20 	bl	8003dd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fec7 	bl	8003f28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ff1d 	bl	8003fda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fe85 	bl	8003eb8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2210      	movs	r2, #16
 80031ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40013800 	.word	0x40013800

080031d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d150      	bne.n	8003284 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2223      	movs	r2, #35	; 0x23
 80031e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f939 	bl	8003468 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0208 	orr.w	r2, r2, #8
 8003204:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800320e:	2001      	movs	r0, #1
 8003210:	f7fe fe02 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0204 	orr.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fdef 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fc66 	bl	8003b14 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800325a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800325e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003276:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2223      	movs	r2, #35	; 0x23
 800327c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	2b23      	cmp	r3, #35	; 0x23
 800329e:	d14a      	bne.n	8003336 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2223      	movs	r2, #35	; 0x23
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032be:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	f023 0302 	bic.w	r3, r3, #2
 80032d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032d6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7fe fd91 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fc08 	bl	8003b14 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0208 	bic.w	r2, r2, #8
 8003312:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800331c:	2001      	movs	r0, #1
 800331e:	f7fe fd7b 	bl	8001e18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2210      	movs	r2, #16
 800332e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07c      	b.n	8003460 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	2b23      	cmp	r3, #35	; 0x23
 800336e:	d176      	bne.n	800345e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003370:	2200      	movs	r2, #0
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fe9d 	bl	80040b4 <ETH_Prepare_Tx_Descriptors>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e065      	b.n	8003460 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003394:	f3bf 8f4f 	dsb	sy
}
 8003398:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3206      	adds	r2, #6
 80033a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d904      	bls.n	80033c4 <HAL_ETH_Transmit+0x84>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	1f1a      	subs	r2, r3, #4
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3106      	adds	r1, #6
 80033d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033d8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80033da:	f7fe fd11 	bl	8001e00 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033e0:	e037      	b.n	8003452 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e023      	b.n	8003460 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d018      	beq.n	8003452 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe fcee 	bl	8001e00 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <HAL_ETH_Transmit+0xf6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800344c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e006      	b.n	8003460 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	dbc3      	blt.n	80033e2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003474:	2301      	movs	r3, #1
 8003476:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	3212      	adds	r2, #18
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003490:	e040      	b.n	8003514 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d112      	bne.n	80034c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4618      	mov	r0, r3
 80034a0:	f006 ff32 	bl	800a308 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	74fb      	strb	r3, [r7, #19]
 80034ae:	e007      	b.n	80034c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d026      	beq.n	8003514 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <ETH_UpdateDescriptor+0xe4>)
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	e003      	b.n	80034de <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80034dc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034de:	f3bf 8f5f 	dmb	sy
}
 80034e2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d902      	bls.n	8003502 <ETH_UpdateDescriptor+0x9a>
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3b04      	subs	r3, #4
 8003500:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	3212      	adds	r2, #18
 8003508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350c:	617b      	str	r3, [r7, #20]
      desccount--;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3b01      	subs	r3, #1
 8003512:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <ETH_UpdateDescriptor+0xb8>
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1b8      	bne.n	8003492 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d00c      	beq.n	8003544 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003532:	461a      	mov	r2, r3
 8003534:	2300      	movs	r3, #0
 8003536:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003544:	bf00      	nop
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	800045f8 	.word	0x800045f8

08003550 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d112      	bne.n	8003590 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d109      	bne.n	8003590 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	461a      	mov	r2, r3
 8003586:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_ETH_IRQHandler+0x178>)
 8003588:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8ac 	bl	80036e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d113      	bne.n	80035ca <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10a      	bne.n	80035ca <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035bc:	461a      	mov	r2, r3
 80035be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80035c2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f885 	bl	80036d4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	d14c      	bne.n	8003678 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d142      	bne.n	8003678 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f043 0208 	orr.w	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d11a      	bne.n	800364c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_ETH_IRQHandler+0x17c>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800363c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003640:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	22e0      	movs	r2, #224	; 0xe0
 8003646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800364a:	e012      	b.n	8003672 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	f248 6380 	movw	r3, #34432	; 0x8680
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366a:	461a      	mov	r2, r3
 800366c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003670:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f842 	bl	80036fc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d10e      	bne.n	80036a4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f83a 	bl	8003710 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_ETH_IRQHandler+0x180>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_ETH_IRQHandler+0x180>)
 80036b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036b6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f833 	bl	8003724 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00010040 	.word	0x00010040
 80036cc:	007e2000 	.word	0x007e2000
 80036d0:	40013c00 	.word	0x40013c00

080036d4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 031c 	and.w	r3, r3, #28
 8003754:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	02db      	lsls	r3, r3, #11
 800375a:	b29b      	uxth	r3, r3
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0302 	bic.w	r3, r3, #2
 8003776:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003788:	f7fe fb3a 	bl	8001e00 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800378e:	e00d      	b.n	80037ac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003790:	f7fe fb36 	bl	8001e00 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d301      	bcc.n	80037a4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e010      	b.n	80037c6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ec      	bne.n	8003790 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 031c 	and.w	r3, r3, #28
 80037ea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	02db      	lsls	r3, r3, #11
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	019b      	lsls	r3, r3, #6
 80037fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003828:	f7fe faea 	bl	8001e00 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800382e:	e00d      	b.n	800384c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003830:	f7fe fae6 	bl	8001e00 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383e:	d301      	bcc.n	8003844 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e009      	b.n	8003858 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ec      	bne.n	8003830 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d9      	b.n	8003a28 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e00b      	b.n	8003a60 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d105      	bne.n	8003a5e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f883 	bl	8003b60 <ETH_SetMACConfig>

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 031c 	bic.w	r3, r3, #28
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a80:	f002 faf2 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 8003a84:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d908      	bls.n	8003aa0 <HAL_ETH_SetMDIOClockRange+0x38>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d804      	bhi.n	8003aa0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f043 0308 	orr.w	r3, r3, #8
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e027      	b.n	8003af0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d908      	bls.n	8003aba <HAL_ETH_SetMDIOClockRange+0x52>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d204      	bcs.n	8003aba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f043 030c 	orr.w	r3, r3, #12
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e01a      	b.n	8003af0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d303      	bcc.n	8003aca <HAL_ETH_SetMDIOClockRange+0x62>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d911      	bls.n	8003aee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d908      	bls.n	8003ae4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d804      	bhi.n	8003ae4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e005      	b.n	8003af0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e000      	b.n	8003af0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003aee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	611a      	str	r2, [r3, #16]
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	01312cff 	.word	0x01312cff
 8003b04:	02160ebf 	.word	0x02160ebf
 8003b08:	03938700 	.word	0x03938700
 8003b0c:	05f5e0ff 	.word	0x05f5e0ff
 8003b10:	08f0d17f 	.word	0x08f0d17f

08003b14 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b36:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fe f967 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b54:	6193      	str	r3, [r2, #24]
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4b51      	ldr	r3, [pc, #324]	; (8003cbc <ETH_SetMACConfig+0x15c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7c1b      	ldrb	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <ETH_SetMACConfig+0x28>
 8003b82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b86:	e000      	b.n	8003b8a <ETH_SetMACConfig+0x2a>
 8003b88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	7c5b      	ldrb	r3, [r3, #17]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <ETH_SetMACConfig+0x38>
 8003b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b96:	e000      	b.n	8003b9a <ETH_SetMACConfig+0x3a>
 8003b98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ba0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	7fdb      	ldrb	r3, [r3, #31]
 8003ba6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ba8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003bae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	7f92      	ldrb	r2, [r2, #30]
 8003bb4:	2a00      	cmp	r2, #0
 8003bb6:	d102      	bne.n	8003bbe <ETH_SetMACConfig+0x5e>
 8003bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbc:	e000      	b.n	8003bc0 <ETH_SetMACConfig+0x60>
 8003bbe:	2200      	movs	r2, #0
                        macconf->Speed |
 8003bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	7f1b      	ldrb	r3, [r3, #28]
 8003bc6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003bc8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003bce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	791b      	ldrb	r3, [r3, #4]
 8003bd4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d102      	bne.n	8003be8 <ETH_SetMACConfig+0x88>
 8003be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be6:	e000      	b.n	8003bea <ETH_SetMACConfig+0x8a>
 8003be8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	7bdb      	ldrb	r3, [r3, #15]
 8003bf0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bf2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c02:	4313      	orrs	r3, r2
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7fe f8fc 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c36:	4013      	ands	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d101      	bne.n	8003c4e <ETH_SetMACConfig+0xee>
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	e000      	b.n	8003c50 <ETH_SetMACConfig+0xf0>
 8003c4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c5e:	2a01      	cmp	r2, #1
 8003c60:	d101      	bne.n	8003c66 <ETH_SetMACConfig+0x106>
 8003c62:	2208      	movs	r2, #8
 8003c64:	e000      	b.n	8003c68 <ETH_SetMACConfig+0x108>
 8003c66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c70:	2a01      	cmp	r2, #1
 8003c72:	d101      	bne.n	8003c78 <ETH_SetMACConfig+0x118>
 8003c74:	2204      	movs	r2, #4
 8003c76:	e000      	b.n	8003c7a <ETH_SetMACConfig+0x11a>
 8003c78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c82:	2a01      	cmp	r2, #1
 8003c84:	d101      	bne.n	8003c8a <ETH_SetMACConfig+0x12a>
 8003c86:	2202      	movs	r2, #2
 8003c88:	e000      	b.n	8003c8c <ETH_SetMACConfig+0x12c>
 8003c8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7fe f8b7 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	ff20810f 	.word	0xff20810f

08003cc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <ETH_SetDMAConfig+0x110>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7b1b      	ldrb	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <ETH_SetDMAConfig+0x2c>
 8003ce6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cea:	e000      	b.n	8003cee <ETH_SetDMAConfig+0x2e>
 8003cec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7b5b      	ldrb	r3, [r3, #13]
 8003cf2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cf4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	7f52      	ldrb	r2, [r2, #29]
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	d102      	bne.n	8003d04 <ETH_SetDMAConfig+0x44>
 8003cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d02:	e000      	b.n	8003d06 <ETH_SetDMAConfig+0x46>
 8003d04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003d06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	7b9b      	ldrb	r3, [r3, #14]
 8003d0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003d0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003d14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	7f1b      	ldrb	r3, [r3, #28]
 8003d1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003d1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	7f9b      	ldrb	r3, [r3, #30]
 8003d22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d34:	4313      	orrs	r3, r2
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	461a      	mov	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d56:	2001      	movs	r0, #1
 8003d58:	f7fe f85e 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d64:	461a      	mov	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	791b      	ldrb	r3, [r3, #4]
 8003d6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003da6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fe f82f 	bl	8001e18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	f8de3f23 	.word	0xf8de3f23

08003dd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0a6      	sub	sp, #152	; 0x98
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e10:	2300      	movs	r3, #0
 8003e12:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fe86 	bl	8003b60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e88:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ea4:	f107 0308 	add.w	r3, r7, #8
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff08 	bl	8003cc0 <ETH_SetDMAConfig>
}
 8003eb0:	bf00      	nop
 8003eb2:	3798      	adds	r7, #152	; 0x98
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3305      	adds	r3, #5
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	3204      	adds	r2, #4
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <ETH_MACAddressConfig+0x68>)
 8003eda:	4413      	add	r3, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	061a      	lsls	r2, r3, #24
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3302      	adds	r3, #2
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	4313      	orrs	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <ETH_MACAddressConfig+0x6c>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	6013      	str	r3, [r2, #0]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40028040 	.word	0x40028040
 8003f24:	40028044 	.word	0x40028044

08003f28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e03e      	b.n	8003fb4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68d9      	ldr	r1, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	3206      	adds	r2, #6
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d80c      	bhi.n	8003f98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68d9      	ldr	r1, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e004      	b.n	8003fa2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d9bd      	bls.n	8003f36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	611a      	str	r2, [r3, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e046      	b.n	8004076 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6919      	ldr	r1, [r3, #16]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004024:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800402c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	3212      	adds	r2, #18
 8004042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d80c      	bhi.n	8004066 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6919      	ldr	r1, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e004      	b.n	8004070 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d9b5      	bls.n	8003fe8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a6:	60da      	str	r2, [r3, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08d      	sub	sp, #52	; 0x34
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3318      	adds	r3, #24
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040de:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f6:	d007      	beq.n	8004108 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	3304      	adds	r3, #4
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004108:	2302      	movs	r3, #2
 800410a:	e0ff      	b.n	800430c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	3301      	adds	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	4b7d      	ldr	r3, [pc, #500]	; (8004318 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004122:	4013      	ands	r3, r2
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	6852      	ldr	r2, [r2, #4]
 8004128:	431a      	orrs	r2, r3
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	431a      	orrs	r2, r3
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800418e:	f3bf 8f5f 	dmb	sy
}
 8004192:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80041a0:	e082      	b.n	80042a8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e005      	b.n	80041ce <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	3301      	adds	r3, #1
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d902      	bls.n	80041e0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	3b04      	subs	r3, #4
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d007      	beq.n	8004214 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	3304      	adds	r3, #4
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d029      	beq.n	8004268 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004220:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004222:	2300      	movs	r3, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	e019      	b.n	800425c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004228:	f3bf 8f5f 	dmb	sy
}
 800422c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	3301      	adds	r3, #1
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	2b03      	cmp	r3, #3
 8004244:	d902      	bls.n	800424c <ETH_Prepare_Tx_Descriptors+0x198>
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	3b04      	subs	r3, #4
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	3301      	adds	r3, #1
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
 800425c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	429a      	cmp	r2, r3
 8004262:	d3e1      	bcc.n	8004228 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	e051      	b.n	800430c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	3301      	adds	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004284:	4013      	ands	r3, r2
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	6852      	ldr	r2, [r2, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	3301      	adds	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004296:	f3bf 8f5f 	dmb	sy
}
 800429a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f af78 	bne.w	80041a2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e005      	b.n	80042d2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	3304      	adds	r3, #4
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f4:	b672      	cpsid	i
}
 80042f6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4413      	add	r3, r2
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004306:	b662      	cpsie	i
}
 8004308:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3734      	adds	r7, #52	; 0x34
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	ffffe000 	.word	0xffffe000

0800431c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e175      	b.n	8004628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 8164 	bne.w	8004622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d005      	beq.n	8004372 <HAL_GPIO_Init+0x56>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80be 	beq.w	8004622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	4b66      	ldr	r3, [pc, #408]	; (8004640 <HAL_GPIO_Init+0x324>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	4a65      	ldr	r2, [pc, #404]	; (8004640 <HAL_GPIO_Init+0x324>)
 80044ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b0:	6453      	str	r3, [r2, #68]	; 0x44
 80044b2:	4b63      	ldr	r3, [pc, #396]	; (8004640 <HAL_GPIO_Init+0x324>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044be:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_GPIO_Init+0x328>)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_GPIO_Init+0x32c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d037      	beq.n	800455a <HAL_GPIO_Init+0x23e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_GPIO_Init+0x330>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d031      	beq.n	8004556 <HAL_GPIO_Init+0x23a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a56      	ldr	r2, [pc, #344]	; (8004650 <HAL_GPIO_Init+0x334>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <HAL_GPIO_Init+0x236>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a55      	ldr	r2, [pc, #340]	; (8004654 <HAL_GPIO_Init+0x338>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d025      	beq.n	800454e <HAL_GPIO_Init+0x232>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a54      	ldr	r2, [pc, #336]	; (8004658 <HAL_GPIO_Init+0x33c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <HAL_GPIO_Init+0x22e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a53      	ldr	r2, [pc, #332]	; (800465c <HAL_GPIO_Init+0x340>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d019      	beq.n	8004546 <HAL_GPIO_Init+0x22a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a52      	ldr	r2, [pc, #328]	; (8004660 <HAL_GPIO_Init+0x344>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_GPIO_Init+0x226>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_GPIO_Init+0x348>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00d      	beq.n	800453e <HAL_GPIO_Init+0x222>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a50      	ldr	r2, [pc, #320]	; (8004668 <HAL_GPIO_Init+0x34c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <HAL_GPIO_Init+0x21e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4f      	ldr	r2, [pc, #316]	; (800466c <HAL_GPIO_Init+0x350>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_GPIO_Init+0x21a>
 8004532:	2309      	movs	r3, #9
 8004534:	e012      	b.n	800455c <HAL_GPIO_Init+0x240>
 8004536:	230a      	movs	r3, #10
 8004538:	e010      	b.n	800455c <HAL_GPIO_Init+0x240>
 800453a:	2308      	movs	r3, #8
 800453c:	e00e      	b.n	800455c <HAL_GPIO_Init+0x240>
 800453e:	2307      	movs	r3, #7
 8004540:	e00c      	b.n	800455c <HAL_GPIO_Init+0x240>
 8004542:	2306      	movs	r3, #6
 8004544:	e00a      	b.n	800455c <HAL_GPIO_Init+0x240>
 8004546:	2305      	movs	r3, #5
 8004548:	e008      	b.n	800455c <HAL_GPIO_Init+0x240>
 800454a:	2304      	movs	r3, #4
 800454c:	e006      	b.n	800455c <HAL_GPIO_Init+0x240>
 800454e:	2303      	movs	r3, #3
 8004550:	e004      	b.n	800455c <HAL_GPIO_Init+0x240>
 8004552:	2302      	movs	r3, #2
 8004554:	e002      	b.n	800455c <HAL_GPIO_Init+0x240>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_GPIO_Init+0x240>
 800455a:	2300      	movs	r3, #0
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	f002 0203 	and.w	r2, r2, #3
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	4093      	lsls	r3, r2
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800456c:	4935      	ldr	r1, [pc, #212]	; (8004644 <HAL_GPIO_Init+0x328>)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	3302      	adds	r3, #2
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457a:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_GPIO_Init+0x354>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459e:	4a34      	ldr	r2, [pc, #208]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a4:	4b32      	ldr	r3, [pc, #200]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c8:	4a29      	ldr	r2, [pc, #164]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ce:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_GPIO_Init+0x354>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <HAL_GPIO_Init+0x354>)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3301      	adds	r3, #1
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b0f      	cmp	r3, #15
 800462c:	f67f ae86 	bls.w	800433c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3724      	adds	r7, #36	; 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	40013800 	.word	0x40013800
 8004648:	40020000 	.word	0x40020000
 800464c:	40020400 	.word	0x40020400
 8004650:	40020800 	.word	0x40020800
 8004654:	40020c00 	.word	0x40020c00
 8004658:	40021000 	.word	0x40021000
 800465c:	40021400 	.word	0x40021400
 8004660:	40021800 	.word	0x40021800
 8004664:	40021c00 	.word	0x40021c00
 8004668:	40022000 	.word	0x40022000
 800466c:	40022400 	.word	0x40022400
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	041a      	lsls	r2, r3, #16
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43d9      	mvns	r1, r3
 80046c4:	887b      	ldrh	r3, [r7, #2]
 80046c6:	400b      	ands	r3, r1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	619a      	str	r2, [r3, #24]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f806 	bl	800470c <HAL_GPIO_EXTI_Callback>
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40013c00 	.word	0x40013c00

0800470c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fbdc 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	e006      	b.n	80047ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d104      	bne.n	80047be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_I2C_Init+0x11c>)
 80047ca:	430b      	orrs	r3, r1
 80047cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	02008000 	.word	0x02008000

08004844 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d010      	beq.n	80048be <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	09db      	lsrs	r3, r3, #7
 80048a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	0a9b      	lsrs	r3, r3, #10
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d010      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	09db      	lsrs	r3, r3, #7
 80048fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	f043 0202 	orr.w	r2, r3, #2
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 030b 	and.w	r3, r3, #11
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fb7f 	bl	8005030 <I2C_ITError>
  }
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
 800495a:	4613      	mov	r3, r2
 800495c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <I2C_Slave_ISR_IT+0x24>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0ec      	b.n	8004ba4 <I2C_Slave_ISR_IT+0x1fe>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80049ea:	6939      	ldr	r1, [r7, #16]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f9bf 	bl	8004d70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d04d      	beq.n	8004a9a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d047      	beq.n	8004a9a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d128      	bne.n	8004a66 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b28      	cmp	r3, #40	; 0x28
 8004a1e:	d108      	bne.n	8004a32 <I2C_Slave_ISR_IT+0x8c>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a26:	d104      	bne.n	8004a32 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a28:	6939      	ldr	r1, [r7, #16]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 faaa 	bl	8004f84 <I2C_ITListenCplt>
 8004a30:	e032      	b.n	8004a98 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b29      	cmp	r3, #41	; 0x29
 8004a3c:	d10e      	bne.n	8004a5c <I2C_Slave_ISR_IT+0xb6>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a44:	d00a      	beq.n	8004a5c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fbe5 	bl	800521e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f92d 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
 8004a5a:	e01d      	b.n	8004a98 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2210      	movs	r2, #16
 8004a62:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004a64:	e096      	b.n	8004b94 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0204 	orr.w	r2, r3, #4
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <I2C_Slave_ISR_IT+0xe4>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a86:	f040 8085 	bne.w	8004b94 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 facd 	bl	8005030 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004a96:	e07d      	b.n	8004b94 <I2C_Slave_ISR_IT+0x1ee>
 8004a98:	e07c      	b.n	8004b94 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d030      	beq.n	8004b08 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02a      	beq.n	8004b08 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d018      	beq.n	8004aee <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d14f      	bne.n	8004b98 <I2C_Slave_ISR_IT+0x1f2>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004afe:	d04b      	beq.n	8004b98 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f8d7 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b06:	e047      	b.n	8004b98 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004b20:	6939      	ldr	r1, [r7, #16]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f842 	bl	8004bac <I2C_ITAddrCplt>
 8004b28:	e037      	b.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d031      	beq.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02b      	beq.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d018      	beq.n	8004b7e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b7c:	e00d      	b.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b84:	d002      	beq.n	8004b8c <I2C_Slave_ISR_IT+0x1e6>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f891 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
 8004b92:	e002      	b.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004b94:	bf00      	nop
 8004b96:	e000      	b.n	8004b9a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004b98:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bc2:	2b28      	cmp	r3, #40	; 0x28
 8004bc4:	d16a      	bne.n	8004c9c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004be4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c00:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d138      	bne.n	8004c7c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	09db      	lsrs	r3, r3, #7
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	89bb      	ldrh	r3, [r7, #12]
 8004c12:	4053      	eors	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f003 0306 	and.w	r3, r3, #6
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11c      	bne.n	8004c58 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d13b      	bne.n	8004cac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2208      	movs	r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c4a:	89ba      	ldrh	r2, [r7, #12]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fe7c 	bl	800494e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c56:	e029      	b.n	8004cac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004c58:	893b      	ldrh	r3, [r7, #8]
 8004c5a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fb1e 	bl	80052a2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c6e:	89ba      	ldrh	r2, [r7, #12]
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fe6a 	bl	800494e <HAL_I2C_AddrCallback>
}
 8004c7a:	e017      	b.n	8004cac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb0e 	bl	80052a2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fe5a 	bl	800494e <HAL_I2C_AddrCallback>
}
 8004c9a:	e007      	b.n	8004cac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	0b9b      	lsrs	r3, r3, #14
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e00d      	b.n	8004d06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0bdb      	lsrs	r3, r3, #15
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b29      	cmp	r3, #41	; 0x29
 8004d10:	d112      	bne.n	8004d38 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2228      	movs	r2, #40	; 0x28
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2221      	movs	r2, #33	; 0x21
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d20:	2101      	movs	r1, #1
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fabd 	bl	80052a2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fe02 	bl	800493a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d36:	e017      	b.n	8004d68 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b2a      	cmp	r3, #42	; 0x2a
 8004d42:	d111      	bne.n	8004d68 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2228      	movs	r2, #40	; 0x28
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2222      	movs	r2, #34	; 0x22
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d52:	2102      	movs	r1, #2
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 faa4 	bl	80052a2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f00e ffb0 	bl	8013cc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b21      	cmp	r3, #33	; 0x21
 8004d9a:	d002      	beq.n	8004da2 <I2C_ITSlaveCplt+0x32>
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b29      	cmp	r3, #41	; 0x29
 8004da0:	d108      	bne.n	8004db4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004da2:	f248 0101 	movw	r1, #32769	; 0x8001
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa7b 	bl	80052a2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2221      	movs	r2, #33	; 0x21
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
 8004db2:	e00d      	b.n	8004dd0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b22      	cmp	r3, #34	; 0x22
 8004db8:	d002      	beq.n	8004dc0 <I2C_ITSlaveCplt+0x50>
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dbe:	d107      	bne.n	8004dd0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004dc0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fa6c 	bl	80052a2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2222      	movs	r2, #34	; 0x22
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dde:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b64      	ldr	r3, [pc, #400]	; (8004f7c <I2C_ITSlaveCplt+0x20c>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa14 	bl	800521e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	0b9b      	lsrs	r3, r3, #14
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d020      	beq.n	8004e5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e28:	e018      	b.n	8004e5c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	0bdb      	lsrs	r3, r3, #15
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	089b      	lsrs	r3, r3, #2
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0304 	bic.w	r3, r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f043 0204 	orr.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8a7 	bl	8005030 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b28      	cmp	r3, #40	; 0x28
 8004eec:	d141      	bne.n	8004f72 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f847 	bl	8004f84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ef6:	e03c      	b.n	8004f72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f00:	d014      	beq.n	8004f2c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fed6 	bl	8004cb4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <I2C_ITSlaveCplt+0x210>)
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fd20 	bl	800496a <HAL_I2C_ListenCpltCallback>
}
 8004f2a:	e022      	b.n	8004f72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b22      	cmp	r3, #34	; 0x22
 8004f36:	d10e      	bne.n	8004f56 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f00e feba 	bl	8013cc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f54:	e00d      	b.n	8004f72 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fce4 	bl	800493a <HAL_I2C_SlaveTxCpltCallback>
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	fe00e800 	.word	0xfe00e800
 8004f80:	ffff0000 	.word	0xffff0000

08004f84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <I2C_ITListenCplt+0xa8>)
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d022      	beq.n	8005002 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d012      	beq.n	8005002 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005002:	f248 0103 	movw	r1, #32771	; 0x8003
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f94b 	bl	80052a2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2210      	movs	r2, #16
 8005012:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fca4 	bl	800496a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	ffff0000 	.word	0xffff0000

08005030 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a5d      	ldr	r2, [pc, #372]	; (80051c4 <I2C_ITError+0x194>)
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b28      	cmp	r3, #40	; 0x28
 8005066:	d005      	beq.n	8005074 <I2C_ITError+0x44>
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b29      	cmp	r3, #41	; 0x29
 800506c:	d002      	beq.n	8005074 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b2a      	cmp	r3, #42	; 0x2a
 8005072:	d10b      	bne.n	800508c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005074:	2103      	movs	r1, #3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f913 	bl	80052a2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2228      	movs	r2, #40	; 0x28
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a50      	ldr	r2, [pc, #320]	; (80051c8 <I2C_ITError+0x198>)
 8005088:	635a      	str	r2, [r3, #52]	; 0x34
 800508a:	e011      	b.n	80050b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800508c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f906 	bl	80052a2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b60      	cmp	r3, #96	; 0x60
 80050a0:	d003      	beq.n	80050aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d039      	beq.n	8005132 <I2C_ITError+0x102>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b11      	cmp	r3, #17
 80050c2:	d002      	beq.n	80050ca <I2C_ITError+0x9a>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b21      	cmp	r3, #33	; 0x21
 80050c8:	d133      	bne.n	8005132 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d8:	d107      	bne.n	80050ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fd ff32 	bl	8002f58 <HAL_DMA_GetState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d017      	beq.n	800512a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4a33      	ldr	r2, [pc, #204]	; (80051cc <I2C_ITError+0x19c>)
 8005100:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	4618      	mov	r0, r3
 8005110:	f7fd fd76 	bl	8002c00 <HAL_DMA_Abort_IT>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d04d      	beq.n	80051b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005128:	e045      	b.n	80051b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f850 	bl	80051d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005130:	e041      	b.n	80051b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d039      	beq.n	80051ae <I2C_ITError+0x17e>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b12      	cmp	r3, #18
 800513e:	d002      	beq.n	8005146 <I2C_ITError+0x116>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b22      	cmp	r3, #34	; 0x22
 8005144:	d133      	bne.n	80051ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	d107      	bne.n	8005166 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005164:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fef4 	bl	8002f58 <HAL_DMA_GetState>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d017      	beq.n	80051a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <I2C_ITError+0x19c>)
 800517c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fd38 	bl	8002c00 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d011      	beq.n	80051ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051a4:	e009      	b.n	80051ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f812 	bl	80051d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ac:	e005      	b.n	80051ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f80e 	bl	80051d0 <I2C_TreatErrorCallback>
  }
}
 80051b4:	e002      	b.n	80051bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ba:	bf00      	nop
}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	ffff0000 	.word	0xffff0000
 80051c8:	080049a7 	.word	0x080049a7
 80051cc:	08005267 	.word	0x08005267

080051d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b60      	cmp	r3, #96	; 0x60
 80051e2:	d10e      	bne.n	8005202 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fbc9 	bl	8004992 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005200:	e009      	b.n	8005216 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff fbb4 	bl	800497e <HAL_I2C_ErrorCallback>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d103      	bne.n	800523c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d007      	beq.n	800525a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	619a      	str	r2, [r3, #24]
  }
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	2200      	movs	r2, #0
 8005282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	2200      	movs	r2, #0
 8005292:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ff9b 	bl	80051d0 <I2C_TreatErrorCallback>
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00f      	beq.n	80052dc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80052c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052d0:	2b28      	cmp	r3, #40	; 0x28
 80052d2:	d003      	beq.n	80052dc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00f      	beq.n	8005306 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80052ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052fa:	2b28      	cmp	r3, #40	; 0x28
 80052fc:	d003      	beq.n	8005306 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005304:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	da03      	bge.n	8005316 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	2b10      	cmp	r3, #16
 800531a:	d103      	bne.n	8005324 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005322:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	2b20      	cmp	r3, #32
 8005328:	d103      	bne.n	8005332 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f043 0320 	orr.w	r3, r3, #32
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d103      	bne.n	8005340 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43da      	mvns	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b20      	cmp	r3, #32
 8005372:	d138      	bne.n	80053e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800537e:	2302      	movs	r3, #2
 8005380:	e032      	b.n	80053e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2224      	movs	r2, #36	; 0x24
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6819      	ldr	r1, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
  }
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b20      	cmp	r3, #32
 8005408:	d139      	bne.n	800547e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005414:	2302      	movs	r3, #2
 8005416:	e033      	b.n	8005480 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2224      	movs	r2, #36	; 0x24
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005446:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	b08f      	sub	sp, #60	; 0x3c
 8005490:	af0a      	add	r7, sp, #40	; 0x28
 8005492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e116      	b.n	80056cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fc f8c3 	bl	8001644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2203      	movs	r2, #3
 80054c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f004 f82f 	bl	8009540 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	687e      	ldr	r6, [r7, #4]
 80054ea:	466d      	mov	r5, sp
 80054ec:	f106 0410 	add.w	r4, r6, #16
 80054f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005500:	1d33      	adds	r3, r6, #4
 8005502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f003 ffc3 	bl	8009490 <USB_CoreInit>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0d7      	b.n	80056cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f004 f81d 	bl	8009562 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e04a      	b.n	80055c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	333d      	adds	r3, #61	; 0x3d
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	333c      	adds	r3, #60	; 0x3c
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	b298      	uxth	r0, r3
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3344      	adds	r3, #68	; 0x44
 800556a:	4602      	mov	r2, r0
 800556c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800556e:	7bfa      	ldrb	r2, [r7, #15]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3340      	adds	r3, #64	; 0x40
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005582:	7bfa      	ldrb	r2, [r7, #15]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3348      	adds	r3, #72	; 0x48
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334c      	adds	r3, #76	; 0x4c
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3354      	adds	r3, #84	; 0x54
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	3301      	adds	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
 80055c4:	7bfa      	ldrb	r2, [r7, #15]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3af      	bcc.n	800552e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	e044      	b.n	800565e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055fc:	7bfa      	ldrb	r2, [r7, #15]
 80055fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800562c:	7bfa      	ldrb	r2, [r7, #15]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	3301      	adds	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d3b5      	bcc.n	80055d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	687e      	ldr	r6, [r7, #4]
 8005670:	466d      	mov	r5, sp
 8005672:	f106 0410 	add.w	r4, r6, #16
 8005676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005682:	e885 0003 	stmia.w	r5, {r0, r1}
 8005686:	1d33      	adds	r3, r6, #4
 8005688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800568a:	6838      	ldr	r0, [r7, #0]
 800568c:	f003 ffb6 	bl	80095fc <USB_DevInit>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e014      	b.n	80056cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f80a 	bl	80056d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f004 f974 	bl	80099b2 <USB_DevDisconnect>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_PCDEx_ActivateLPM+0x44>)
 8005704:	4313      	orrs	r3, r2
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	10000003 	.word	0x10000003

0800571c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40007000 	.word	0x40007000

0800573c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005744:	2300      	movs	r3, #0
 8005746:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e291      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8087 	beq.w	800586e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	4b96      	ldr	r3, [pc, #600]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b04      	cmp	r3, #4
 800576a:	d00c      	beq.n	8005786 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576c:	4b93      	ldr	r3, [pc, #588]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b08      	cmp	r3, #8
 8005776:	d112      	bne.n	800579e <HAL_RCC_OscConfig+0x62>
 8005778:	4b90      	ldr	r3, [pc, #576]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005784:	d10b      	bne.n	800579e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005786:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06c      	beq.n	800586c <HAL_RCC_OscConfig+0x130>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d168      	bne.n	800586c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e26b      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x7a>
 80057a8:	4b84      	ldr	r3, [pc, #528]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a83      	ldr	r2, [pc, #524]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e02e      	b.n	8005814 <HAL_RCC_OscConfig+0xd8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x9c>
 80057be:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7e      	ldr	r2, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a7b      	ldr	r2, [pc, #492]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e01d      	b.n	8005814 <HAL_RCC_OscConfig+0xd8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0xc0>
 80057e2:	4b76      	ldr	r3, [pc, #472]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a75      	ldr	r2, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b73      	ldr	r3, [pc, #460]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a72      	ldr	r2, [pc, #456]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xd8>
 80057fc:	4b6f      	ldr	r3, [pc, #444]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6e      	ldr	r2, [pc, #440]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6b      	ldr	r2, [pc, #428]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800580e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc faf0 	bl	8001e00 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc faec 	bl	8001e00 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e21f      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	4b61      	ldr	r3, [pc, #388]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0xe8>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fc fadc 	bl	8001e00 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584c:	f7fc fad8 	bl	8001e00 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e20b      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	4b57      	ldr	r3, [pc, #348]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x110>
 800586a:	e000      	b.n	800586e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d069      	beq.n	800594e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800587a:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005886:	4b4d      	ldr	r3, [pc, #308]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d11c      	bne.n	80058cc <HAL_RCC_OscConfig+0x190>
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x17a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1df      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	493d      	ldr	r1, [pc, #244]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	e040      	b.n	800594e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d023      	beq.n	800591c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a38      	ldr	r2, [pc, #224]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fc fa8e 	bl	8001e00 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e8:	f7fc fa8a 	bl	8001e00 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1bd      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4929      	ldr	r1, [pc, #164]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]
 800591a:	e018      	b.n	800594e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc fa6a 	bl	8001e00 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005930:	f7fc fa66 	bl	8001e00 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e199      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d038      	beq.n	80059cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d019      	beq.n	8005996 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fc fa47 	bl	8001e00 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005976:	f7fc fa43 	bl	8001e00 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e176      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800598a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <HAL_RCC_OscConfig+0x23a>
 8005994:	e01a      	b.n	80059cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <HAL_RCC_OscConfig+0x280>)
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fc fa2d 	bl	8001e00 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059aa:	f7fc fa29 	bl	8001e00 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d903      	bls.n	80059c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e15c      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
 80059bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c0:	4b91      	ldr	r3, [pc, #580]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 80059c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ee      	bne.n	80059aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a4 	beq.w	8005b22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059da:	4b8b      	ldr	r3, [pc, #556]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e6:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a87      	ldr	r2, [pc, #540]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6413      	str	r3, [r2, #64]	; 0x40
 80059f2:	4b85      	ldr	r3, [pc, #532]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a02:	4b82      	ldr	r3, [pc, #520]	; (8005c0c <HAL_RCC_OscConfig+0x4d0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d118      	bne.n	8005a40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a0e:	4b7f      	ldr	r3, [pc, #508]	; (8005c0c <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7e      	ldr	r2, [pc, #504]	; (8005c0c <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a1a:	f7fc f9f1 	bl	8001e00 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a22:	f7fc f9ed 	bl	8001e00 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b64      	cmp	r3, #100	; 0x64
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e120      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a34:	4b75      	ldr	r3, [pc, #468]	; (8005c0c <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_OscConfig+0x31a>
 8005a48:	4b6f      	ldr	r3, [pc, #444]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	4a6e      	ldr	r2, [pc, #440]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6713      	str	r3, [r2, #112]	; 0x70
 8005a54:	e02d      	b.n	8005ab2 <HAL_RCC_OscConfig+0x376>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x33c>
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a69      	ldr	r2, [pc, #420]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6a:	4b67      	ldr	r3, [pc, #412]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a66      	ldr	r2, [pc, #408]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	e01c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x376>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d10c      	bne.n	8005a9a <HAL_RCC_OscConfig+0x35e>
 8005a80:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4a60      	ldr	r2, [pc, #384]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a86:	f043 0304 	orr.w	r3, r3, #4
 8005a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8c:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	4a5d      	ldr	r2, [pc, #372]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCC_OscConfig+0x376>
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	4a5a      	ldr	r2, [pc, #360]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa6:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a57      	ldr	r2, [pc, #348]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fc f9a1 	bl	8001e00 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc f99d 	bl	8001e00 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0ce      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	4b4b      	ldr	r3, [pc, #300]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ee      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x386>
 8005ae4:	e014      	b.n	8005b10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc f98b 	bl	8001e00 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fc f987 	bl	8001e00 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0b8      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b04:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ee      	bne.n	8005aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	4a3b      	ldr	r2, [pc, #236]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80a4 	beq.w	8005c74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d06b      	beq.n	8005c10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d149      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b40:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fc f958 	bl	8001e00 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fc f954 	bl	8001e00 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e087      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	019b      	lsls	r3, r3, #6
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	4313      	orrs	r3, r2
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fc f928 	bl	8001e00 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fc f924 	bl	8001e00 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e057      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x478>
 8005bd2:	e04f      	b.n	8005c74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fc f90e 	bl	8001e00 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fc f90a 	bl	8001e00 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e03d      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_OscConfig+0x4cc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4ac>
 8005c06:	e035      	b.n	8005c74 <HAL_RCC_OscConfig+0x538>
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <HAL_RCC_OscConfig+0x544>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d028      	beq.n	8005c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d121      	bne.n	8005c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d11a      	bne.n	8005c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d111      	bne.n	8005c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800

08005c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0d0      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d910      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 020f 	bic.w	r2, r3, #15
 8005cb2:	4965      	ldr	r1, [pc, #404]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d040      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d115      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d46:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e073      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d56:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e06b      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 0203 	bic.w	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4936      	ldr	r1, [pc, #216]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d78:	f7fc f842 	bl	8001e00 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d80:	f7fc f83e 	bl	8001e00 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e053      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 020c 	and.w	r2, r3, #12
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1eb      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d210      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db6:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 020f 	bic.w	r2, r3, #15
 8005dbe:	4922      	ldr	r1, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f821 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490a      	ldr	r1, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x1cc>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1d0>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_ClockConfig+0x1d4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fb ff9e 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	08017b0c 	.word	0x08017b0c
 8005e54:	20000000 	.word	0x20000000
 8005e58:	20000004 	.word	0x20000004

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b094      	sub	sp, #80	; 0x50
 8005e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e74:	4b79      	ldr	r3, [pc, #484]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d00d      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x40>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	f200 80e1 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x34>
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e8e:	e0db      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b73      	ldr	r3, [pc, #460]	; (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e94:	e0db      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e96:	4b73      	ldr	r3, [pc, #460]	; (8006064 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e9a:	e0d8      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d063      	beq.n	8005f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	2200      	movs	r2, #0
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	0159      	lsls	r1, r3, #5
 8005edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ee0:	0150      	lsls	r0, r2, #5
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	1a51      	subs	r1, r2, r1
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	4629      	mov	r1, r5
 8005eee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	018b      	lsls	r3, r1, #6
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	018a      	lsls	r2, r1, #6
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ebb2 0801 	subs.w	r8, r2, r1
 8005f14:	4659      	mov	r1, fp
 8005f16:	eb63 0901 	sbc.w	r9, r3, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2e:	4690      	mov	r8, r2
 8005f30:	4699      	mov	r9, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	eb18 0303 	adds.w	r3, r8, r3
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	eb49 0303 	adc.w	r3, r9, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f4e:	4629      	mov	r1, r5
 8005f50:	024b      	lsls	r3, r1, #9
 8005f52:	4621      	mov	r1, r4
 8005f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f58:	4621      	mov	r1, r4
 8005f5a:	024a      	lsls	r2, r1, #9
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	2200      	movs	r2, #0
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f6c:	f7fa f9a0 	bl	80002b0 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4613      	mov	r3, r2
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f78:	e058      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7a:	4b38      	ldr	r3, [pc, #224]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	2200      	movs	r2, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	4611      	mov	r1, r2
 8005f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa6:	0150      	lsls	r0, r2, #5
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4641      	mov	r1, r8
 8005fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	00eb      	lsls	r3, r5, #3
 8005fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe2:	00e2      	lsls	r2, r4, #3
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	18e3      	adds	r3, r4, r3
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb45 0303 	adc.w	r3, r5, r3
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006002:	4629      	mov	r1, r5
 8006004:	028b      	lsls	r3, r1, #10
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800600c:	4621      	mov	r1, r4
 800600e:	028a      	lsls	r2, r1, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006016:	2200      	movs	r2, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	61fa      	str	r2, [r7, #28]
 800601c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006020:	f7fa f946 	bl	80002b0 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4613      	mov	r3, r2
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	3301      	adds	r3, #1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800603c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800603e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006046:	e002      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800604c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006050:	4618      	mov	r0, r3
 8006052:	3750      	adds	r7, #80	; 0x50
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	00f42400 	.word	0x00f42400
 8006064:	007a1200 	.word	0x007a1200

08006068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <HAL_RCC_GetHCLKFreq+0x14>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000000 	.word	0x20000000

08006080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006084:	f7ff fff0 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	4903      	ldr	r1, [pc, #12]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40023800 	.word	0x40023800
 80060a4:	08017b1c 	.word	0x08017b1c

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060ac:	f7ff ffdc 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0b5b      	lsrs	r3, r3, #13
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	08017b1c 	.word	0x08017b1c

080060d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060f8:	4b69      	ldr	r3, [pc, #420]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4a68      	ldr	r2, [pc, #416]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006102:	6093      	str	r3, [r2, #8]
 8006104:	4b66      	ldr	r3, [pc, #408]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	4964      	ldr	r1, [pc, #400]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800611a:	2301      	movs	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d017      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800612a:	4b5d      	ldr	r3, [pc, #372]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006138:	4959      	ldr	r1, [pc, #356]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006148:	d101      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800614a:	2301      	movs	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006156:	2301      	movs	r3, #1
 8006158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d017      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006166:	4b4e      	ldr	r3, [pc, #312]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	494a      	ldr	r1, [pc, #296]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006184:	d101      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006186:	2301      	movs	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006192:	2301      	movs	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 808b 	beq.w	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061b4:	4b3a      	ldr	r3, [pc, #232]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	4a39      	ldr	r2, [pc, #228]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061be:	6413      	str	r3, [r2, #64]	; 0x40
 80061c0:	4b37      	ldr	r3, [pc, #220]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d8:	f7fb fe12 	bl	8001e00 <HAL_GetTick>
 80061dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e0:	f7fb fe0e 	bl	8001e00 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	; 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e357      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f0      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061fe:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d035      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d02e      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006226:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006232:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800623e:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d114      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fb fdd6 	bl	8001e00 <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006256:	e00a      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fb fdd2 	bl	8001e00 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e319      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0ee      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006286:	d111      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006296:	400b      	ands	r3, r1
 8006298:	4901      	ldr	r1, [pc, #4]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
 800629e:	e00b      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	0ffffcff 	.word	0x0ffffcff
 80062ac:	4baa      	ldr	r3, [pc, #680]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4aa9      	ldr	r2, [pc, #676]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062b6:	6093      	str	r3, [r2, #8]
 80062b8:	4ba7      	ldr	r3, [pc, #668]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c4:	49a4      	ldr	r1, [pc, #656]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d010      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062d6:	4ba0      	ldr	r3, [pc, #640]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062dc:	4a9e      	ldr	r2, [pc, #632]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062e6:	4b9c      	ldr	r3, [pc, #624]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	4999      	ldr	r1, [pc, #612]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006304:	4b94      	ldr	r3, [pc, #592]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	4991      	ldr	r1, [pc, #580]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006326:	4b8c      	ldr	r3, [pc, #560]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006334:	4988      	ldr	r1, [pc, #544]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006348:	4b83      	ldr	r3, [pc, #524]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006356:	4980      	ldr	r1, [pc, #512]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800636a:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	4977      	ldr	r1, [pc, #476]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800638c:	4b72      	ldr	r3, [pc, #456]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f023 0203 	bic.w	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	496f      	ldr	r1, [pc, #444]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ae:	4b6a      	ldr	r3, [pc, #424]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	f023 020c 	bic.w	r2, r3, #12
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063bc:	4966      	ldr	r1, [pc, #408]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063de:	495e      	ldr	r1, [pc, #376]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f2:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006400:	4955      	ldr	r1, [pc, #340]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006414:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	494d      	ldr	r1, [pc, #308]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006436:	4b48      	ldr	r3, [pc, #288]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	4944      	ldr	r1, [pc, #272]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006466:	493c      	ldr	r1, [pc, #240]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800647a:	4b37      	ldr	r3, [pc, #220]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006488:	4933      	ldr	r1, [pc, #204]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800649c:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064aa:	492b      	ldr	r1, [pc, #172]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d011      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064cc:	4922      	ldr	r1, [pc, #136]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064dc:	d101      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064fe:	4b16      	ldr	r3, [pc, #88]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650c:	4912      	ldr	r1, [pc, #72]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006530:	4909      	ldr	r1, [pc, #36]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d006      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80d9 	beq.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a01      	ldr	r2, [pc, #4]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006556:	e001      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006558:	40023800 	.word	0x40023800
 800655c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655e:	f7fb fc4f 	bl	8001e00 <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006564:	e008      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006566:	f7fb fc4b 	bl	8001e00 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b64      	cmp	r3, #100	; 0x64
 8006572:	d901      	bls.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e194      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006578:	4b6c      	ldr	r3, [pc, #432]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f0      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d021      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11d      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006598:	4b64      	ldr	r3, [pc, #400]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065a6:	4b61      	ldr	r3, [pc, #388]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ac:	0e1b      	lsrs	r3, r3, #24
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	019a      	lsls	r2, r3, #6
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	431a      	orrs	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	061b      	lsls	r3, r3, #24
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	071b      	lsls	r3, r3, #28
 80065cc:	4957      	ldr	r1, [pc, #348]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02e      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065fe:	d129      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006600:	4b4a      	ldr	r3, [pc, #296]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800660e:	4b47      	ldr	r3, [pc, #284]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006614:	0f1b      	lsrs	r3, r3, #28
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	019a      	lsls	r2, r3, #6
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	041b      	lsls	r3, r3, #16
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	061b      	lsls	r3, r3, #24
 800662e:	431a      	orrs	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	071b      	lsls	r3, r3, #28
 8006634:	493d      	ldr	r1, [pc, #244]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006642:	f023 021f 	bic.w	r2, r3, #31
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	3b01      	subs	r3, #1
 800664c:	4937      	ldr	r1, [pc, #220]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01d      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006660:	4b32      	ldr	r3, [pc, #200]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006666:	0e1b      	lsrs	r3, r3, #24
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800666e:	4b2f      	ldr	r3, [pc, #188]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006674:	0f1b      	lsrs	r3, r3, #28
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	431a      	orrs	r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	431a      	orrs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	071b      	lsls	r3, r3, #28
 8006694:	4925      	ldr	r1, [pc, #148]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d011      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	019a      	lsls	r2, r3, #6
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	061b      	lsls	r3, r3, #24
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	071b      	lsls	r3, r3, #28
 80066c4:	4919      	ldr	r1, [pc, #100]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a16      	ldr	r2, [pc, #88]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d8:	f7fb fb92 	bl	8001e00 <HAL_GetTick>
 80066dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066de:	e008      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066e0:	f7fb fb8e 	bl	8001e00 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b64      	cmp	r3, #100	; 0x64
 80066ec:	d901      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e0d7      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b01      	cmp	r3, #1
 8006702:	f040 80cd 	bne.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a08      	ldr	r2, [pc, #32]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006712:	f7fb fb75 	bl	8001e00 <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006718:	e00a      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800671a:	f7fb fb71 	bl	8001e00 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b64      	cmp	r3, #100	; 0x64
 8006726:	d903      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e0ba      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800672c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006730:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673c:	d0ed      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800675a:	2b00      	cmp	r3, #0
 800675c:	d02e      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d12a      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006766:	4b51      	ldr	r3, [pc, #324]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006774:	4b4d      	ldr	r3, [pc, #308]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	0f1b      	lsrs	r3, r3, #28
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	019a      	lsls	r2, r3, #6
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	071b      	lsls	r3, r3, #28
 800679a:	4944      	ldr	r1, [pc, #272]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067a2:	4b42      	ldr	r3, [pc, #264]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	493d      	ldr	r1, [pc, #244]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d022      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d0:	d11d      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067d2:	4b36      	ldr	r3, [pc, #216]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	0e1b      	lsrs	r3, r3, #24
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067e0:	4b32      	ldr	r3, [pc, #200]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	0f1b      	lsrs	r3, r3, #28
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	019a      	lsls	r2, r3, #6
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	431a      	orrs	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	071b      	lsls	r3, r3, #28
 8006806:	4929      	ldr	r1, [pc, #164]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d028      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	0e1b      	lsrs	r3, r3, #24
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006828:	4b20      	ldr	r3, [pc, #128]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	019a      	lsls	r2, r3, #6
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	431a      	orrs	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	071b      	lsls	r3, r3, #28
 800684e:	4917      	ldr	r1, [pc, #92]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800685c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4911      	ldr	r1, [pc, #68]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006878:	f7fb fac2 	bl	8001e00 <HAL_GetTick>
 800687c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006880:	f7fb fabe 	bl	8001e00 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e007      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689e:	d1ef      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40023800 	.word	0x40023800

080068b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e09d      	b.n	80069fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d2:	d009      	beq.n	80068e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	61da      	str	r2, [r3, #28]
 80068da:	e005      	b.n	80068e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fa fc94 	bl	8001230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006928:	d902      	bls.n	8006930 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	e002      	b.n	8006936 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006934:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800693e:	d007      	beq.n	8006950 <HAL_SPI_Init+0xa0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006948:	d002      	beq.n	8006950 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006988:	431a      	orrs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	ea42 0103 	orr.w	r1, r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	f003 0204 	and.w	r2, r3, #4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069cc:	ea42 0103 	orr.w	r1, r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_SPI_Transmit+0x22>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e158      	b.n	8006cda <HAL_SPI_Transmit+0x2d4>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a30:	f7fb f9e6 	bl	8001e00 <HAL_GetTick>
 8006a34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
 8006a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a4a:	e13d      	b.n	8006cc8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_SPI_Transmit+0x52>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a5c:	e134      	b.n	8006cc8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa8:	d10f      	bne.n	8006aca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d007      	beq.n	8006ae8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af0:	d94b      	bls.n	8006b8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_SPI_Transmit+0xfa>
 8006afa:	8afb      	ldrh	r3, [r7, #22]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d13e      	bne.n	8006b7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	1c9a      	adds	r2, r3, #2
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b24:	e02b      	b.n	8006b7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d112      	bne.n	8006b5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	881a      	ldrh	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	1c9a      	adds	r2, r3, #2
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b58:	e011      	b.n	8006b7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5a:	f7fb f951 	bl	8001e00 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d803      	bhi.n	8006b72 <HAL_SPI_Transmit+0x16c>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d102      	bne.n	8006b78 <HAL_SPI_Transmit+0x172>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b7c:	e0a4      	b.n	8006cc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ce      	bne.n	8006b26 <HAL_SPI_Transmit+0x120>
 8006b88:	e07c      	b.n	8006c84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0x192>
 8006b92:	8afb      	ldrh	r3, [r7, #22]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d170      	bne.n	8006c7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d912      	bls.n	8006bc8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	881a      	ldrh	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	1c9a      	adds	r2, r3, #2
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b02      	subs	r3, #2
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc6:	e058      	b.n	8006c7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	7812      	ldrb	r2, [r2, #0]
 8006bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006bee:	e044      	b.n	8006c7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d12b      	bne.n	8006c56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d912      	bls.n	8006c2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b02      	subs	r3, #2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c2c:	e025      	b.n	8006c7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c54:	e011      	b.n	8006c7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c56:	f7fb f8d3 	bl	8001e00 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d803      	bhi.n	8006c6e <HAL_SPI_Transmit+0x268>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d102      	bne.n	8006c74 <HAL_SPI_Transmit+0x26e>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c78:	e026      	b.n	8006cc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1b5      	bne.n	8006bf0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fda7 	bl	80077dc <SPI_EndRxTxTransaction>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e000      	b.n	8006cc8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d110      	bne.n	8006d20 <HAL_SPI_Receive_IT+0x3c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d06:	d10b      	bne.n	8006d20 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f894 	bl	8006e44 <HAL_SPI_TransmitReceive_IT>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	e089      	b.n	8006e34 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_SPI_Receive_IT+0x4a>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e082      	b.n	8006e34 <HAL_SPI_Receive_IT+0x150>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d002      	beq.n	8006d48 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006d42:	2302      	movs	r3, #2
 8006d44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d46:	e070      	b.n	8006e2a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_SPI_Receive_IT+0x70>
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d58:	e067      	b.n	8006e2a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d9e:	d90b      	bls.n	8006db8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dae:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a22      	ldr	r2, [pc, #136]	; (8006e3c <HAL_SPI_Receive_IT+0x158>)
 8006db4:	64da      	str	r2, [r3, #76]	; 0x4c
 8006db6:	e00a      	b.n	8006dce <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dc6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a1d      	ldr	r2, [pc, #116]	; (8006e40 <HAL_SPI_Receive_IT+0x15c>)
 8006dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d10f      	bne.n	8006df8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006df6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006e06:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d008      	beq.n	8006e28 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e000      	b.n	8006e2a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006e28:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	0800745d 	.word	0x0800745d
 8006e40:	0800740d 	.word	0x0800740d

08006e44 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_SPI_TransmitReceive_IT+0x20>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e091      	b.n	8006f88 <HAL_SPI_TransmitReceive_IT+0x144>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e7a:	7dbb      	ldrb	r3, [r7, #22]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d00d      	beq.n	8006e9c <HAL_SPI_TransmitReceive_IT+0x58>
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d106      	bne.n	8006e96 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_TransmitReceive_IT+0x52>
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d002      	beq.n	8006e9c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
 8006e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e9a:	e070      	b.n	8006f7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_SPI_TransmitReceive_IT+0x6a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_SPI_TransmitReceive_IT+0x6a>
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eb2:	e064      	b.n	8006f7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d003      	beq.n	8006ec8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	887a      	ldrh	r2, [r7, #2]
 8006ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	887a      	ldrh	r2, [r7, #2]
 8006eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efe:	d906      	bls.n	8006f0e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006f04:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f0c:	e005      	b.n	8006f1a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <HAL_SPI_TransmitReceive_IT+0x158>)
 8006f12:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f22:	d802      	bhi.n	8006f2a <HAL_SPI_TransmitReceive_IT+0xe6>
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d908      	bls.n	8006f3c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e007      	b.n	8006f4c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d008      	beq.n	8006f7c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e000      	b.n	8006f7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006f7c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	08007347 	.word	0x08007347
 8006f98:	080073ad 	.word	0x080073ad
 8006f9c:	080071f7 	.word	0x080071f7
 8006fa0:	080072b5 	.word	0x080072b5

08006fa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	099b      	lsrs	r3, r3, #6
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d004      	beq.n	8006fe8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
    return;
 8006fe6:	e0d7      	b.n	8007198 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_SPI_IRQHandler+0x66>
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	09db      	lsrs	r3, r3, #7
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
    return;
 8007008:	e0c6      	b.n	8007198 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10c      	bne.n	8007030 <HAL_SPI_IRQHandler+0x8c>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	099b      	lsrs	r3, r3, #6
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80b4 	beq.w	8007198 <HAL_SPI_IRQHandler+0x1f4>
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80ad 	beq.w	8007198 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d023      	beq.n	8007092 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d011      	beq.n	800707a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705a:	f043 0204 	orr.w	r2, r3, #4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	e00b      	b.n	8007092 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	693b      	ldr	r3, [r7, #16]
        return;
 8007090:	e082      	b.n	8007198 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d014      	beq.n	80070c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a2:	f043 0201 	orr.w	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00c      	beq.n	80070ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	f043 0208 	orr.w	r2, r3, #8
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070e0:	2300      	movs	r3, #0
 80070e2:	60bb      	str	r3, [r7, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04f      	beq.n	8007196 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007104:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <HAL_SPI_IRQHandler+0x17e>
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d034      	beq.n	800718c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0203 	bic.w	r2, r2, #3
 8007130:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <HAL_SPI_IRQHandler+0x1fc>)
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	4618      	mov	r0, r3
 8007148:	f7fb fd5a 	bl	8002c00 <HAL_DMA_Abort_IT>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <HAL_SPI_IRQHandler+0x1fc>)
 800716c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	4618      	mov	r0, r3
 8007174:	f7fb fd44 	bl	8002c00 <HAL_DMA_Abort_IT>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007182:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800718a:	e003      	b.n	8007194 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f813 	bl	80071b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007192:	e000      	b.n	8007196 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007194:	bf00      	nop
    return;
 8007196:	bf00      	nop
  }
}
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	080071cd 	.word	0x080071cd

080071a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff ffe5 	bl	80071b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d923      	bls.n	8007252 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	b292      	uxth	r2, r2
 8007216:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b02      	subs	r3, #2
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d11f      	bne.n	8007280 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	e016      	b.n	8007280 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f103 020c 	add.w	r2, r3, #12
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10f      	bne.n	80072ac <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800729a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d102      	bne.n	80072ac <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fb02 	bl	80078b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d912      	bls.n	80072ec <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	881a      	ldrh	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	1c9a      	adds	r2, r3, #2
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b02      	subs	r3, #2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ea:	e012      	b.n	8007312 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	7812      	ldrb	r2, [r2, #0]
 80072f8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d110      	bne.n	800733e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800732a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fab9 	bl	80078b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	b292      	uxth	r2, r2
 800735a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007392:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa86 	bl	80078b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	1c9a      	adds	r2, r3, #2
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d110      	bne.n	8007404 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa56 	bl	80078b0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f103 020c 	add.w	r2, r3, #12
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa70 	bl	8007934 <SPI_CloseRx_ISR>
  }
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	b292      	uxth	r2, r2
 8007470:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d102      	bne.n	80074a0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa4a 	bl	8007934 <SPI_CloseRx_ISR>
  }
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074b8:	f7fa fca2 	bl	8001e00 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074c8:	f7fa fc9a 	bl	8001e00 <HAL_GetTick>
 80074cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074ce:	4b39      	ldr	r3, [pc, #228]	; (80075b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	015b      	lsls	r3, r3, #5
 80074d4:	0d1b      	lsrs	r3, r3, #20
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	fb02 f303 	mul.w	r3, r2, r3
 80074dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074de:	e054      	b.n	800758a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d050      	beq.n	800758a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074e8:	f7fa fc8a 	bl	8001e00 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d902      	bls.n	80074fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d13d      	bne.n	800757a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800750c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007516:	d111      	bne.n	800753c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d004      	beq.n	800752c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d107      	bne.n	800753c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007544:	d10f      	bne.n	8007566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e017      	b.n	80075aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3b01      	subs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	429a      	cmp	r2, r3
 8007598:	bf0c      	ite	eq
 800759a:	2301      	moveq	r3, #1
 800759c:	2300      	movne	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d19b      	bne.n	80074e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000000 	.word	0x20000000

080075b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80075ca:	f7fa fc19 	bl	8001e00 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4413      	add	r3, r2
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80075da:	f7fa fc11 	bl	8001e00 <HAL_GetTick>
 80075de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075e8:	4b3d      	ldr	r3, [pc, #244]	; (80076e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	0d1b      	lsrs	r3, r3, #20
 80075f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
 80075fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007600:	e060      	b.n	80076c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007608:	d107      	bne.n	800761a <SPI_WaitFifoStateUntilTimeout+0x62>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007618:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d050      	beq.n	80076c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007622:	f7fa fbed 	bl	8001e00 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	429a      	cmp	r2, r3
 8007630:	d902      	bls.n	8007638 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d13d      	bne.n	80076b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007646:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007650:	d111      	bne.n	8007676 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765a:	d004      	beq.n	8007666 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007664:	d107      	bne.n	8007676 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767e:	d10f      	bne.n	80076a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800769e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e010      	b.n	80076d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4013      	ands	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d196      	bne.n	8007602 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3728      	adds	r7, #40	; 0x28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000000 	.word	0x20000000

080076e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f8:	d111      	bne.n	800771e <SPI_EndRxTransaction+0x3a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007702:	d004      	beq.n	800770e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770c:	d107      	bne.n	800771e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007726:	d112      	bne.n	800774e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff feb8 	bl	80074a8 <SPI_WaitFlagStateUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d021      	beq.n	8007782 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e03d      	b.n	80077ca <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800774e:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <SPI_EndRxTransaction+0xf0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <SPI_EndRxTransaction+0xf4>)
 8007754:	fba2 2303 	umull	r2, r3, r2, r3
 8007758:	0d5b      	lsrs	r3, r3, #21
 800775a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3b01      	subs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d0f2      	beq.n	8007764 <SPI_EndRxTransaction+0x80>
 800777e:	e000      	b.n	8007782 <SPI_EndRxTransaction+0x9e>
        break;
 8007780:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778a:	d11d      	bne.n	80077c8 <SPI_EndRxTransaction+0xe4>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007794:	d004      	beq.n	80077a0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779e:	d113      	bne.n	80077c8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff ff03 	bl	80075b8 <SPI_WaitFifoStateUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e000      	b.n	80077ca <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000000 	.word	0x20000000
 80077d8:	165e9f81 	.word	0x165e9f81

080077dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fedf 	bl	80075b8 <SPI_WaitFifoStateUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	f043 0220 	orr.w	r2, r3, #32
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e046      	b.n	800789e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007810:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <SPI_EndRxTxTransaction+0xcc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a25      	ldr	r2, [pc, #148]	; (80078ac <SPI_EndRxTxTransaction+0xd0>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	0d5b      	lsrs	r3, r3, #21
 800781c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782e:	d112      	bne.n	8007856 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fe34 	bl	80074a8 <SPI_WaitFlagStateUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e023      	b.n	800789e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3b01      	subs	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d0f2      	beq.n	8007856 <SPI_EndRxTxTransaction+0x7a>
 8007870:	e000      	b.n	8007874 <SPI_EndRxTxTransaction+0x98>
        break;
 8007872:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fe99 	bl	80075b8 <SPI_WaitFifoStateUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007890:	f043 0220 	orr.w	r2, r3, #32
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e000      	b.n	800789e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000000 	.word	0x20000000
 80078ac:	165e9f81 	.word	0x165e9f81

080078b0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b8:	f7fa faa2 	bl	8001e00 <HAL_GetTick>
 80078bc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0220 	bic.w	r2, r2, #32
 80078cc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	2164      	movs	r1, #100	; 0x64
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff ff82 	bl	80077dc <SPI_EndRxTxTransaction>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d115      	bne.n	800791e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d107      	bne.n	800790e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f00c fa72 	bl	8013df0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800790c:	e00e      	b.n	800792c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fc44 	bl	80071a4 <HAL_SPI_TxRxCpltCallback>
}
 800791c:	e006      	b.n	800792c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fc46 	bl	80071b8 <HAL_SPI_ErrorCallback>
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800794a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800794c:	f7fa fa58 	bl	8001e00 <HAL_GetTick>
 8007950:	4603      	mov	r3, r0
 8007952:	461a      	mov	r2, r3
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fec4 	bl	80076e4 <SPI_EndRxTransaction>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f00c fa36 	bl	8013df0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007984:	e002      	b.n	800798c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fc16 	bl	80071b8 <HAL_SPI_ErrorCallback>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e049      	b.n	8007a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7f9 fcfa 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f000 fa46 	bl	8007e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d122      	bne.n	8007a9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d11b      	bne.n	8007a9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f06f 0202 	mvn.w	r2, #2
 8007a6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9cf 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007a8a:	e005      	b.n	8007a98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9c1 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9d2 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d122      	bne.n	8007af2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d11b      	bne.n	8007af2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f06f 0204 	mvn.w	r2, #4
 8007ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9a5 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007ade:	e005      	b.n	8007aec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f997 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9a8 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d122      	bne.n	8007b46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d11b      	bne.n	8007b46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f06f 0208 	mvn.w	r2, #8
 8007b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f97b 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007b32:	e005      	b.n	8007b40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f96d 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f97e 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d122      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d11b      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0210 	mvn.w	r2, #16
 8007b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2208      	movs	r2, #8
 8007b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f951 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007b86:	e005      	b.n	8007b94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f943 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f954 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10e      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f06f 0201 	mvn.w	r2, #1
 8007bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f00c f8a1 	bl	8013d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d10e      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b80      	cmp	r3, #128	; 0x80
 8007be0:	d107      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb0b 	bl	8008208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	d10e      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d107      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fafe 	bl	800821c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d10e      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	d107      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f902 	bl	8007e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	d10e      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d107      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0220 	mvn.w	r2, #32
 8007c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fabe 	bl	80081f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_TIM_ConfigClockSource+0x1c>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e0b4      	b.n	8007e06 <HAL_TIM_ConfigClockSource+0x186>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	4b56      	ldr	r3, [pc, #344]	; (8007e10 <HAL_TIM_ConfigClockSource+0x190>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd4:	d03e      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0xd4>
 8007cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cda:	f200 8087 	bhi.w	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	f000 8086 	beq.w	8007df2 <HAL_TIM_ConfigClockSource+0x172>
 8007ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cea:	d87f      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cec:	2b70      	cmp	r3, #112	; 0x70
 8007cee:	d01a      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0xa6>
 8007cf0:	2b70      	cmp	r3, #112	; 0x70
 8007cf2:	d87b      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cf4:	2b60      	cmp	r3, #96	; 0x60
 8007cf6:	d050      	beq.n	8007d9a <HAL_TIM_ConfigClockSource+0x11a>
 8007cf8:	2b60      	cmp	r3, #96	; 0x60
 8007cfa:	d877      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cfc:	2b50      	cmp	r3, #80	; 0x50
 8007cfe:	d03c      	beq.n	8007d7a <HAL_TIM_ConfigClockSource+0xfa>
 8007d00:	2b50      	cmp	r3, #80	; 0x50
 8007d02:	d873      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	d058      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x13a>
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d86f      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	d064      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d10:	2b30      	cmp	r3, #48	; 0x30
 8007d12:	d86b      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d060      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d867      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d05c      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d05a      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d24:	e062      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6899      	ldr	r1, [r3, #8]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f000 f9af 	bl	8008098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	609a      	str	r2, [r3, #8]
      break;
 8007d52:	e04f      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6899      	ldr	r1, [r3, #8]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f000 f998 	bl	8008098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d76:	609a      	str	r2, [r3, #8]
      break;
 8007d78:	e03c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6859      	ldr	r1, [r3, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f000 f90c 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2150      	movs	r1, #80	; 0x50
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f965 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007d98:	e02c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6859      	ldr	r1, [r3, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f000 f92b 	bl	8008002 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2160      	movs	r1, #96	; 0x60
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f955 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007db8:	e01c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 f8ec 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2140      	movs	r1, #64	; 0x40
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f945 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e00c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f000 f93c 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 8007dea:	e003      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
      break;
 8007df0:	e000      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	fffeff88 	.word	0xfffeff88

08007e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a40      	ldr	r2, [pc, #256]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d013      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e82:	d00f      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3d      	ldr	r2, [pc, #244]	; (8007f7c <TIM_Base_SetConfig+0x118>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a3c      	ldr	r2, [pc, #240]	; (8007f80 <TIM_Base_SetConfig+0x11c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d007      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a3b      	ldr	r2, [pc, #236]	; (8007f84 <TIM_Base_SetConfig+0x120>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a3a      	ldr	r2, [pc, #232]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d108      	bne.n	8007eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a2f      	ldr	r2, [pc, #188]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d02b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec4:	d027      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2c      	ldr	r2, [pc, #176]	; (8007f7c <TIM_Base_SetConfig+0x118>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d023      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2b      	ldr	r2, [pc, #172]	; (8007f80 <TIM_Base_SetConfig+0x11c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01f      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2a      	ldr	r2, [pc, #168]	; (8007f84 <TIM_Base_SetConfig+0x120>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d017      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	; (8007f8c <TIM_Base_SetConfig+0x128>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <TIM_Base_SetConfig+0x12c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <TIM_Base_SetConfig+0x130>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <TIM_Base_SetConfig+0x134>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <TIM_Base_SetConfig+0x138>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a23      	ldr	r2, [pc, #140]	; (8007fa0 <TIM_Base_SetConfig+0x13c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d108      	bne.n	8007f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_Base_SetConfig+0xf8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d103      	bne.n	8007f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	615a      	str	r2, [r3, #20]
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	40001800 	.word	0x40001800
 8007f9c:	40001c00 	.word	0x40001c00
 8007fa0:	40002000 	.word	0x40002000

08007fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0201 	bic.w	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f023 030a 	bic.w	r3, r3, #10
 8007fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	f023 0210 	bic.w	r2, r3, #16
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800802c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800803e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	f043 0307 	orr.w	r3, r3, #7
 8008084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	021a      	lsls	r2, r3, #8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e06d      	b.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a30      	ldr	r2, [pc, #192]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d004      	beq.n	8008124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2f      	ldr	r2, [pc, #188]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d108      	bne.n	8008136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800812a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a20      	ldr	r2, [pc, #128]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008162:	d01d      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1d      	ldr	r2, [pc, #116]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1a      	ldr	r2, [pc, #104]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a15      	ldr	r2, [pc, #84]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a16      	ldr	r2, [pc, #88]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10c      	bne.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40010400 	.word	0x40010400
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40000c00 	.word	0x40000c00
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40001800 	.word	0x40001800

080081f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e040      	b.n	80082c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7f9 f8d2 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2224      	movs	r2, #36	; 0x24
 800825c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0201 	bic.w	r2, r2, #1
 800826c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fc66 	bl	8008b40 <UART_SetConfig>
 8008274:	4603      	mov	r3, r0
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e022      	b.n	80082c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 febe 	bl	8009008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800829a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0201 	orr.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 ff45 	bl	800914c <UART_CheckIdleState>
 80082c2:	4603      	mov	r3, r0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	d171      	bne.n	80083c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_UART_Transmit+0x24>
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e06a      	b.n	80083ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2221      	movs	r2, #33	; 0x21
 8008300:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008302:	f7f9 fd7d 	bl	8001e00 <HAL_GetTick>
 8008306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	88fa      	ldrh	r2, [r7, #6]
 800830c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008320:	d108      	bne.n	8008334 <HAL_UART_Transmit+0x68>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	e003      	b.n	800833c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800833c:	e02c      	b.n	8008398 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2200      	movs	r2, #0
 8008346:	2180      	movs	r1, #128	; 0x80
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 ff36 	bl	80091ba <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e038      	b.n	80083ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800836c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	3302      	adds	r3, #2
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e007      	b.n	8008386 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	3301      	adds	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1cc      	bne.n	800833e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2200      	movs	r2, #0
 80083ac:	2140      	movs	r1, #64	; 0x40
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 ff03 	bl	80091ba <UART_WaitOnFlagUntilTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e005      	b.n	80083ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e000      	b.n	80083ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
  }
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b08a      	sub	sp, #40	; 0x28
 80083d6:	af02      	add	r7, sp, #8
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	603b      	str	r3, [r7, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	f040 80b1 	bne.w	8008550 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_Receive+0x28>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e0a9      	b.n	8008552 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2222      	movs	r2, #34	; 0x22
 800840a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008414:	f7f9 fcf4 	bl	8001e00 <HAL_GetTick>
 8008418:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	d10e      	bne.n	8008452 <HAL_UART_Receive+0x80>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <HAL_UART_Receive+0x76>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008446:	e02d      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	22ff      	movs	r2, #255	; 0xff
 800844c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008450:	e028      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10d      	bne.n	8008476 <HAL_UART_Receive+0xa4>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d104      	bne.n	800846c <HAL_UART_Receive+0x9a>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	22ff      	movs	r2, #255	; 0xff
 8008466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800846a:	e01b      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	227f      	movs	r2, #127	; 0x7f
 8008470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008474:	e016      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800847e:	d10d      	bne.n	800849c <HAL_UART_Receive+0xca>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <HAL_UART_Receive+0xc0>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	227f      	movs	r2, #127	; 0x7f
 800848c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008490:	e008      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	223f      	movs	r2, #63	; 0x3f
 8008496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800849a:	e003      	b.n	80084a4 <HAL_UART_Receive+0xd2>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b4:	d108      	bne.n	80084c8 <HAL_UART_Receive+0xf6>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	e003      	b.n	80084d0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80084d0:	e032      	b.n	8008538 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	2120      	movs	r1, #32
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fe6c 	bl	80091ba <UART_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e032      	b.n	8008552 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10c      	bne.n	800850c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	8a7b      	ldrh	r3, [r7, #18]
 80084fc:	4013      	ands	r3, r2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	3302      	adds	r3, #2
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e00c      	b.n	8008526 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	b2da      	uxtb	r2, r3
 8008514:	8a7b      	ldrh	r3, [r7, #18]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	4013      	ands	r3, r2
 800851a:	b2da      	uxtb	r2, r3
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	3301      	adds	r3, #1
 8008524:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1c6      	bne.n	80084d2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008550:	2302      	movs	r3, #2
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b0ba      	sub	sp, #232	; 0xe8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008586:	f640 030f 	movw	r3, #2063	; 0x80f
 800858a:	4013      	ands	r3, r2
 800858c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d115      	bne.n	80085c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00f      	beq.n	80085c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d009      	beq.n	80085c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8297 	beq.w	8008ae8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
      }
      return;
 80085c2:	e291      	b.n	8008ae8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8117 	beq.w	80087fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085de:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <HAL_UART_IRQHandler+0x298>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 810a 	beq.w	80087fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d011      	beq.n	8008618 <HAL_UART_IRQHandler+0xbc>
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800860e:	f043 0201 	orr.w	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d011      	beq.n	8008648 <HAL_UART_IRQHandler+0xec>
 8008624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2202      	movs	r2, #2
 8008636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800863e:	f043 0204 	orr.w	r2, r3, #4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d011      	beq.n	8008678 <HAL_UART_IRQHandler+0x11c>
 8008654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2204      	movs	r2, #4
 8008666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866e:	f043 0202 	orr.w	r2, r3, #2
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d017      	beq.n	80086b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b00      	cmp	r3, #0
 800868e:	d105      	bne.n	800869c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2208      	movs	r2, #8
 80086a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086aa:	f043 0208 	orr.w	r2, r3, #8
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d012      	beq.n	80086e6 <HAL_UART_IRQHandler+0x18a>
 80086c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086dc:	f043 0220 	orr.w	r2, r3, #32
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 81fd 	beq.w	8008aec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00d      	beq.n	800871a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04f      	beq.n	80087de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fe01 	bl	8009346 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d141      	bne.n	80087d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800877e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800878a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1d9      	bne.n	8008752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d013      	beq.n	80087ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087aa:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <HAL_UART_IRQHandler+0x29c>)
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fa fa24 	bl	8002c00 <HAL_DMA_Abort_IT>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d017      	beq.n	80087ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087cc:	e00f      	b.n	80087ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f9a0 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d4:	e00b      	b.n	80087ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f99c 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	e007      	b.n	80087ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f998 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80087ec:	e17e      	b.n	8008aec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ee:	bf00      	nop
    return;
 80087f0:	e17c      	b.n	8008aec <HAL_UART_IRQHandler+0x590>
 80087f2:	bf00      	nop
 80087f4:	04000120 	.word	0x04000120
 80087f8:	0800940f 	.word	0x0800940f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008800:	2b01      	cmp	r3, #1
 8008802:	f040 814c 	bne.w	8008a9e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 8145 	beq.w	8008a9e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 813e 	beq.w	8008a9e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2210      	movs	r2, #16
 8008828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	f040 80b6 	bne.w	80089a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8150 	beq.w	8008af0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885a:	429a      	cmp	r2, r3
 800885c:	f080 8148 	bcs.w	8008af0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008874:	f000 8086 	beq.w	8008984 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800888c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1da      	bne.n	8008878 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e1      	bne.n	80088c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800890e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e3      	bne.n	80088fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008954:	f023 0310 	bic.w	r3, r3, #16
 8008958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008966:	65bb      	str	r3, [r7, #88]	; 0x58
 8008968:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800896c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e4      	bne.n	8008944 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800897e:	4618      	mov	r0, r3
 8008980:	f7fa f8ce 	bl	8002b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008996:	b29b      	uxth	r3, r3
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	b29b      	uxth	r3, r3
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f8c2 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a4:	e0a4      	b.n	8008af0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 8096 	beq.w	8008af4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80089c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8091 	beq.w	8008af4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089f4:	647b      	str	r3, [r7, #68]	; 0x44
 80089f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e4      	bne.n	80089d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	623b      	str	r3, [r7, #32]
   return(result);
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e3      	bne.n	8008a08 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f023 0310 	bic.w	r3, r3, #16
 8008a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	69b9      	ldr	r1, [r7, #24]
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	617b      	str	r3, [r7, #20]
   return(result);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e4      	bne.n	8008a54 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f846 	bl	8008b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a9c:	e02a      	b.n	8008af4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d008      	beq.n	8008ac8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01c      	beq.n	8008af8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
    }
    return;
 8008ac6:	e017      	b.n	8008af8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d012      	beq.n	8008afa <HAL_UART_IRQHandler+0x59e>
 8008ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fcaa 	bl	800943a <UART_EndTransmit_IT>
    return;
 8008ae6:	e008      	b.n	8008afa <HAL_UART_IRQHandler+0x59e>
      return;
 8008ae8:	bf00      	nop
 8008aea:	e006      	b.n	8008afa <HAL_UART_IRQHandler+0x59e>
    return;
 8008aec:	bf00      	nop
 8008aee:	e004      	b.n	8008afa <HAL_UART_IRQHandler+0x59e>
      return;
 8008af0:	bf00      	nop
 8008af2:	e002      	b.n	8008afa <HAL_UART_IRQHandler+0x59e>
      return;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <HAL_UART_IRQHandler+0x59e>
    return;
 8008af8:	bf00      	nop
  }

}
 8008afa:	37e8      	adds	r7, #232	; 0xe8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	4ba6      	ldr	r3, [pc, #664]	; (8008e04 <UART_SetConfig+0x2c4>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	430b      	orrs	r3, r1
 8008b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a94      	ldr	r2, [pc, #592]	; (8008e08 <UART_SetConfig+0x2c8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d120      	bne.n	8008bfe <UART_SetConfig+0xbe>
 8008bbc:	4b93      	ldr	r3, [pc, #588]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d816      	bhi.n	8008bf8 <UART_SetConfig+0xb8>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x90>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008be7 	.word	0x08008be7
 8008bdc:	08008bf3 	.word	0x08008bf3
 8008be0:	2301      	movs	r3, #1
 8008be2:	77fb      	strb	r3, [r7, #31]
 8008be4:	e150      	b.n	8008e88 <UART_SetConfig+0x348>
 8008be6:	2302      	movs	r3, #2
 8008be8:	77fb      	strb	r3, [r7, #31]
 8008bea:	e14d      	b.n	8008e88 <UART_SetConfig+0x348>
 8008bec:	2304      	movs	r3, #4
 8008bee:	77fb      	strb	r3, [r7, #31]
 8008bf0:	e14a      	b.n	8008e88 <UART_SetConfig+0x348>
 8008bf2:	2308      	movs	r3, #8
 8008bf4:	77fb      	strb	r3, [r7, #31]
 8008bf6:	e147      	b.n	8008e88 <UART_SetConfig+0x348>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	77fb      	strb	r3, [r7, #31]
 8008bfc:	e144      	b.n	8008e88 <UART_SetConfig+0x348>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a83      	ldr	r2, [pc, #524]	; (8008e10 <UART_SetConfig+0x2d0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d132      	bne.n	8008c6e <UART_SetConfig+0x12e>
 8008c08:	4b80      	ldr	r3, [pc, #512]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f003 030c 	and.w	r3, r3, #12
 8008c12:	2b0c      	cmp	r3, #12
 8008c14:	d828      	bhi.n	8008c68 <UART_SetConfig+0x128>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0xdc>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c51 	.word	0x08008c51
 8008c20:	08008c69 	.word	0x08008c69
 8008c24:	08008c69 	.word	0x08008c69
 8008c28:	08008c69 	.word	0x08008c69
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c69 	.word	0x08008c69
 8008c34:	08008c69 	.word	0x08008c69
 8008c38:	08008c69 	.word	0x08008c69
 8008c3c:	08008c57 	.word	0x08008c57
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c63 	.word	0x08008c63
 8008c50:	2300      	movs	r3, #0
 8008c52:	77fb      	strb	r3, [r7, #31]
 8008c54:	e118      	b.n	8008e88 <UART_SetConfig+0x348>
 8008c56:	2302      	movs	r3, #2
 8008c58:	77fb      	strb	r3, [r7, #31]
 8008c5a:	e115      	b.n	8008e88 <UART_SetConfig+0x348>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	77fb      	strb	r3, [r7, #31]
 8008c60:	e112      	b.n	8008e88 <UART_SetConfig+0x348>
 8008c62:	2308      	movs	r3, #8
 8008c64:	77fb      	strb	r3, [r7, #31]
 8008c66:	e10f      	b.n	8008e88 <UART_SetConfig+0x348>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e10c      	b.n	8008e88 <UART_SetConfig+0x348>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a68      	ldr	r2, [pc, #416]	; (8008e14 <UART_SetConfig+0x2d4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d120      	bne.n	8008cba <UART_SetConfig+0x17a>
 8008c78:	4b64      	ldr	r3, [pc, #400]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c82:	2b30      	cmp	r3, #48	; 0x30
 8008c84:	d013      	beq.n	8008cae <UART_SetConfig+0x16e>
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	d814      	bhi.n	8008cb4 <UART_SetConfig+0x174>
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d009      	beq.n	8008ca2 <UART_SetConfig+0x162>
 8008c8e:	2b20      	cmp	r3, #32
 8008c90:	d810      	bhi.n	8008cb4 <UART_SetConfig+0x174>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <UART_SetConfig+0x15c>
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d006      	beq.n	8008ca8 <UART_SetConfig+0x168>
 8008c9a:	e00b      	b.n	8008cb4 <UART_SetConfig+0x174>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	e0f2      	b.n	8008e88 <UART_SetConfig+0x348>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	77fb      	strb	r3, [r7, #31]
 8008ca6:	e0ef      	b.n	8008e88 <UART_SetConfig+0x348>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	77fb      	strb	r3, [r7, #31]
 8008cac:	e0ec      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cae:	2308      	movs	r3, #8
 8008cb0:	77fb      	strb	r3, [r7, #31]
 8008cb2:	e0e9      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	77fb      	strb	r3, [r7, #31]
 8008cb8:	e0e6      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a56      	ldr	r2, [pc, #344]	; (8008e18 <UART_SetConfig+0x2d8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d120      	bne.n	8008d06 <UART_SetConfig+0x1c6>
 8008cc4:	4b51      	ldr	r3, [pc, #324]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008cce:	2bc0      	cmp	r3, #192	; 0xc0
 8008cd0:	d013      	beq.n	8008cfa <UART_SetConfig+0x1ba>
 8008cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008cd4:	d814      	bhi.n	8008d00 <UART_SetConfig+0x1c0>
 8008cd6:	2b80      	cmp	r3, #128	; 0x80
 8008cd8:	d009      	beq.n	8008cee <UART_SetConfig+0x1ae>
 8008cda:	2b80      	cmp	r3, #128	; 0x80
 8008cdc:	d810      	bhi.n	8008d00 <UART_SetConfig+0x1c0>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <UART_SetConfig+0x1a8>
 8008ce2:	2b40      	cmp	r3, #64	; 0x40
 8008ce4:	d006      	beq.n	8008cf4 <UART_SetConfig+0x1b4>
 8008ce6:	e00b      	b.n	8008d00 <UART_SetConfig+0x1c0>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	77fb      	strb	r3, [r7, #31]
 8008cec:	e0cc      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	77fb      	strb	r3, [r7, #31]
 8008cf2:	e0c9      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	77fb      	strb	r3, [r7, #31]
 8008cf8:	e0c6      	b.n	8008e88 <UART_SetConfig+0x348>
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	77fb      	strb	r3, [r7, #31]
 8008cfe:	e0c3      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d00:	2310      	movs	r3, #16
 8008d02:	77fb      	strb	r3, [r7, #31]
 8008d04:	e0c0      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a44      	ldr	r2, [pc, #272]	; (8008e1c <UART_SetConfig+0x2dc>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d125      	bne.n	8008d5c <UART_SetConfig+0x21c>
 8008d10:	4b3e      	ldr	r3, [pc, #248]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d1e:	d017      	beq.n	8008d50 <UART_SetConfig+0x210>
 8008d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d24:	d817      	bhi.n	8008d56 <UART_SetConfig+0x216>
 8008d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2a:	d00b      	beq.n	8008d44 <UART_SetConfig+0x204>
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d30:	d811      	bhi.n	8008d56 <UART_SetConfig+0x216>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <UART_SetConfig+0x1fe>
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3a:	d006      	beq.n	8008d4a <UART_SetConfig+0x20a>
 8008d3c:	e00b      	b.n	8008d56 <UART_SetConfig+0x216>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e0a1      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d44:	2302      	movs	r3, #2
 8008d46:	77fb      	strb	r3, [r7, #31]
 8008d48:	e09e      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d4a:	2304      	movs	r3, #4
 8008d4c:	77fb      	strb	r3, [r7, #31]
 8008d4e:	e09b      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d50:	2308      	movs	r3, #8
 8008d52:	77fb      	strb	r3, [r7, #31]
 8008d54:	e098      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d56:	2310      	movs	r3, #16
 8008d58:	77fb      	strb	r3, [r7, #31]
 8008d5a:	e095      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2f      	ldr	r2, [pc, #188]	; (8008e20 <UART_SetConfig+0x2e0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d125      	bne.n	8008db2 <UART_SetConfig+0x272>
 8008d66:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d74:	d017      	beq.n	8008da6 <UART_SetConfig+0x266>
 8008d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d7a:	d817      	bhi.n	8008dac <UART_SetConfig+0x26c>
 8008d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d80:	d00b      	beq.n	8008d9a <UART_SetConfig+0x25a>
 8008d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d86:	d811      	bhi.n	8008dac <UART_SetConfig+0x26c>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <UART_SetConfig+0x254>
 8008d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d90:	d006      	beq.n	8008da0 <UART_SetConfig+0x260>
 8008d92:	e00b      	b.n	8008dac <UART_SetConfig+0x26c>
 8008d94:	2301      	movs	r3, #1
 8008d96:	77fb      	strb	r3, [r7, #31]
 8008d98:	e076      	b.n	8008e88 <UART_SetConfig+0x348>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	77fb      	strb	r3, [r7, #31]
 8008d9e:	e073      	b.n	8008e88 <UART_SetConfig+0x348>
 8008da0:	2304      	movs	r3, #4
 8008da2:	77fb      	strb	r3, [r7, #31]
 8008da4:	e070      	b.n	8008e88 <UART_SetConfig+0x348>
 8008da6:	2308      	movs	r3, #8
 8008da8:	77fb      	strb	r3, [r7, #31]
 8008daa:	e06d      	b.n	8008e88 <UART_SetConfig+0x348>
 8008dac:	2310      	movs	r3, #16
 8008dae:	77fb      	strb	r3, [r7, #31]
 8008db0:	e06a      	b.n	8008e88 <UART_SetConfig+0x348>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a1b      	ldr	r2, [pc, #108]	; (8008e24 <UART_SetConfig+0x2e4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d138      	bne.n	8008e2e <UART_SetConfig+0x2ee>
 8008dbc:	4b13      	ldr	r3, [pc, #76]	; (8008e0c <UART_SetConfig+0x2cc>)
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dca:	d017      	beq.n	8008dfc <UART_SetConfig+0x2bc>
 8008dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd0:	d82a      	bhi.n	8008e28 <UART_SetConfig+0x2e8>
 8008dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd6:	d00b      	beq.n	8008df0 <UART_SetConfig+0x2b0>
 8008dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ddc:	d824      	bhi.n	8008e28 <UART_SetConfig+0x2e8>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <UART_SetConfig+0x2aa>
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	d006      	beq.n	8008df6 <UART_SetConfig+0x2b6>
 8008de8:	e01e      	b.n	8008e28 <UART_SetConfig+0x2e8>
 8008dea:	2300      	movs	r3, #0
 8008dec:	77fb      	strb	r3, [r7, #31]
 8008dee:	e04b      	b.n	8008e88 <UART_SetConfig+0x348>
 8008df0:	2302      	movs	r3, #2
 8008df2:	77fb      	strb	r3, [r7, #31]
 8008df4:	e048      	b.n	8008e88 <UART_SetConfig+0x348>
 8008df6:	2304      	movs	r3, #4
 8008df8:	77fb      	strb	r3, [r7, #31]
 8008dfa:	e045      	b.n	8008e88 <UART_SetConfig+0x348>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	e042      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e02:	bf00      	nop
 8008e04:	efff69f3 	.word	0xefff69f3
 8008e08:	40011000 	.word	0x40011000
 8008e0c:	40023800 	.word	0x40023800
 8008e10:	40004400 	.word	0x40004400
 8008e14:	40004800 	.word	0x40004800
 8008e18:	40004c00 	.word	0x40004c00
 8008e1c:	40005000 	.word	0x40005000
 8008e20:	40011400 	.word	0x40011400
 8008e24:	40007800 	.word	0x40007800
 8008e28:	2310      	movs	r3, #16
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	e02c      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a72      	ldr	r2, [pc, #456]	; (8008ffc <UART_SetConfig+0x4bc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d125      	bne.n	8008e84 <UART_SetConfig+0x344>
 8008e38:	4b71      	ldr	r3, [pc, #452]	; (8009000 <UART_SetConfig+0x4c0>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e46:	d017      	beq.n	8008e78 <UART_SetConfig+0x338>
 8008e48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e4c:	d817      	bhi.n	8008e7e <UART_SetConfig+0x33e>
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e52:	d00b      	beq.n	8008e6c <UART_SetConfig+0x32c>
 8008e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e58:	d811      	bhi.n	8008e7e <UART_SetConfig+0x33e>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <UART_SetConfig+0x326>
 8008e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e62:	d006      	beq.n	8008e72 <UART_SetConfig+0x332>
 8008e64:	e00b      	b.n	8008e7e <UART_SetConfig+0x33e>
 8008e66:	2300      	movs	r3, #0
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e00d      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e00a      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e72:	2304      	movs	r3, #4
 8008e74:	77fb      	strb	r3, [r7, #31]
 8008e76:	e007      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	77fb      	strb	r3, [r7, #31]
 8008e7c:	e004      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	77fb      	strb	r3, [r7, #31]
 8008e82:	e001      	b.n	8008e88 <UART_SetConfig+0x348>
 8008e84:	2310      	movs	r3, #16
 8008e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e90:	d15b      	bne.n	8008f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008e92:	7ffb      	ldrb	r3, [r7, #31]
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d828      	bhi.n	8008eea <UART_SetConfig+0x3aa>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0x360>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008ecd 	.word	0x08008ecd
 8008ea8:	08008ed5 	.word	0x08008ed5
 8008eac:	08008eeb 	.word	0x08008eeb
 8008eb0:	08008edb 	.word	0x08008edb
 8008eb4:	08008eeb 	.word	0x08008eeb
 8008eb8:	08008eeb 	.word	0x08008eeb
 8008ebc:	08008eeb 	.word	0x08008eeb
 8008ec0:	08008ee3 	.word	0x08008ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec4:	f7fd f8dc 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8008ec8:	61b8      	str	r0, [r7, #24]
        break;
 8008eca:	e013      	b.n	8008ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ecc:	f7fd f8ec 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8008ed0:	61b8      	str	r0, [r7, #24]
        break;
 8008ed2:	e00f      	b.n	8008ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ed4:	4b4b      	ldr	r3, [pc, #300]	; (8009004 <UART_SetConfig+0x4c4>)
 8008ed6:	61bb      	str	r3, [r7, #24]
        break;
 8008ed8:	e00c      	b.n	8008ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eda:	f7fc ffbf 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8008ede:	61b8      	str	r0, [r7, #24]
        break;
 8008ee0:	e008      	b.n	8008ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee6:	61bb      	str	r3, [r7, #24]
        break;
 8008ee8:	e004      	b.n	8008ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8008ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d074      	beq.n	8008fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	005a      	lsls	r2, r3, #1
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	441a      	add	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2b0f      	cmp	r3, #15
 8008f14:	d916      	bls.n	8008f44 <UART_SetConfig+0x404>
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f1c:	d212      	bcs.n	8008f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f023 030f 	bic.w	r3, r3, #15
 8008f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	89fb      	ldrh	r3, [r7, #14]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	89fa      	ldrh	r2, [r7, #14]
 8008f40:	60da      	str	r2, [r3, #12]
 8008f42:	e04f      	b.n	8008fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	77bb      	strb	r3, [r7, #30]
 8008f48:	e04c      	b.n	8008fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f4a:	7ffb      	ldrb	r3, [r7, #31]
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d828      	bhi.n	8008fa2 <UART_SetConfig+0x462>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x418>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f85 	.word	0x08008f85
 8008f60:	08008f8d 	.word	0x08008f8d
 8008f64:	08008fa3 	.word	0x08008fa3
 8008f68:	08008f93 	.word	0x08008f93
 8008f6c:	08008fa3 	.word	0x08008fa3
 8008f70:	08008fa3 	.word	0x08008fa3
 8008f74:	08008fa3 	.word	0x08008fa3
 8008f78:	08008f9b 	.word	0x08008f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f7c:	f7fd f880 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8008f80:	61b8      	str	r0, [r7, #24]
        break;
 8008f82:	e013      	b.n	8008fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f84:	f7fd f890 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8008f88:	61b8      	str	r0, [r7, #24]
        break;
 8008f8a:	e00f      	b.n	8008fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <UART_SetConfig+0x4c4>)
 8008f8e:	61bb      	str	r3, [r7, #24]
        break;
 8008f90:	e00c      	b.n	8008fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f92:	f7fc ff63 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8008f96:	61b8      	str	r0, [r7, #24]
        break;
 8008f98:	e008      	b.n	8008fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f9e:	61bb      	str	r3, [r7, #24]
        break;
 8008fa0:	e004      	b.n	8008fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8008faa:	bf00      	nop
    }

    if (pclk != 0U)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d018      	beq.n	8008fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	085a      	lsrs	r2, r3, #1
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	441a      	add	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b0f      	cmp	r3, #15
 8008fca:	d909      	bls.n	8008fe0 <UART_SetConfig+0x4a0>
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd2:	d205      	bcs.n	8008fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60da      	str	r2, [r3, #12]
 8008fde:	e001      	b.n	8008fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40007c00 	.word	0x40007c00
 8009000:	40023800 	.word	0x40023800
 8009004:	00f42400 	.word	0x00f42400

08009008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	430a      	orrs	r2, r1
 80090da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01a      	beq.n	800911e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009106:	d10a      	bne.n	800911e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	605a      	str	r2, [r3, #4]
  }
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800915c:	f7f8 fe50 	bl	8001e00 <HAL_GetTick>
 8009160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0308 	and.w	r3, r3, #8
 800916c:	2b08      	cmp	r3, #8
 800916e:	d10e      	bne.n	800918e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f81b 	bl	80091ba <UART_WaitOnFlagUntilTimeout>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e011      	b.n	80091b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b09c      	sub	sp, #112	; 0x70
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ca:	e0a7      	b.n	800931c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d2:	f000 80a3 	beq.w	800931c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091d6:	f7f8 fe13 	bl	8001e00 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d302      	bcc.n	80091ec <UART_WaitOnFlagUntilTimeout+0x32>
 80091e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d13f      	bne.n	800926c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009200:	667b      	str	r3, [r7, #100]	; 0x64
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800920a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800920c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	f023 0301 	bic.w	r3, r3, #1
 8009234:	663b      	str	r3, [r7, #96]	; 0x60
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800923e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800924c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e5      	bne.n	800921e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2220      	movs	r2, #32
 800925c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e068      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0304 	and.w	r3, r3, #4
 8009276:	2b00      	cmp	r3, #0
 8009278:	d050      	beq.n	800931c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009288:	d148      	bne.n	800931c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009292:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b2:	637b      	str	r3, [r7, #52]	; 0x34
 80092b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	613b      	str	r3, [r7, #16]
   return(result);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092e6:	623a      	str	r2, [r7, #32]
 80092e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	69f9      	ldr	r1, [r7, #28]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2220      	movs	r2, #32
 8009304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2220      	movs	r2, #32
 800930c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e010      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69da      	ldr	r2, [r3, #28]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4013      	ands	r3, r2
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	429a      	cmp	r2, r3
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	429a      	cmp	r2, r3
 8009338:	f43f af48 	beq.w	80091cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3770      	adds	r7, #112	; 0x70
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009346:	b480      	push	{r7}
 8009348:	b095      	sub	sp, #84	; 0x54
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936c:	643b      	str	r3, [r7, #64]	; 0x40
 800936e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	64bb      	str	r3, [r7, #72]	; 0x48
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d118      	bne.n	80093ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f023 0310 	bic.w	r3, r3, #16
 80093d0:	647b      	str	r3, [r7, #68]	; 0x44
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e6      	bne.n	80093bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009402:	bf00      	nop
 8009404:	3754      	adds	r7, #84	; 0x54
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fb71 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009456:	61fb      	str	r3, [r7, #28]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6979      	ldr	r1, [r7, #20]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	613b      	str	r3, [r7, #16]
   return(result);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e6      	bne.n	8009442 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff fb3d 	bl	8008b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009486:	bf00      	nop
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009490:	b084      	sub	sp, #16
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	f107 001c 	add.w	r0, r7, #28
 800949e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d120      	bne.n	80094ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	4b20      	ldr	r3, [pc, #128]	; (800953c <USB_CoreInit+0xac>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d105      	bne.n	80094de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa96 	bl	8009a10 <USB_CoreReset>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]
 80094e8:	e010      	b.n	800950c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa8a 	bl	8009a10 <USB_CoreReset>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	2b01      	cmp	r3, #1
 8009510:	d10b      	bne.n	800952a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f043 0206 	orr.w	r2, r3, #6
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f043 0220 	orr.w	r2, r3, #32
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009536:	b004      	add	sp, #16
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	ffbdffbf 	.word	0xffbdffbf

08009540 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f023 0201 	bic.w	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d115      	bne.n	80095b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009590:	2001      	movs	r0, #1
 8009592:	f7f8 fc41 	bl	8001e18 <HAL_Delay>
      ms++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3301      	adds	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa29 	bl	80099f4 <USB_GetMode>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d01e      	beq.n	80095e6 <USB_SetCurrentMode+0x84>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b31      	cmp	r3, #49	; 0x31
 80095ac:	d9f0      	bls.n	8009590 <USB_SetCurrentMode+0x2e>
 80095ae:	e01a      	b.n	80095e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d115      	bne.n	80095e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095c2:	2001      	movs	r0, #1
 80095c4:	f7f8 fc28 	bl	8001e18 <HAL_Delay>
      ms++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa10 	bl	80099f4 <USB_GetMode>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <USB_SetCurrentMode+0x84>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b31      	cmp	r3, #49	; 0x31
 80095de:	d9f0      	bls.n	80095c2 <USB_SetCurrentMode+0x60>
 80095e0:	e001      	b.n	80095e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e005      	b.n	80095f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b32      	cmp	r3, #50	; 0x32
 80095ea:	d101      	bne.n	80095f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095fc:	b084      	sub	sp, #16
 80095fe:	b580      	push	{r7, lr}
 8009600:	b086      	sub	sp, #24
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800960a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
 800961a:	e009      	b.n	8009630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3340      	adds	r3, #64	; 0x40
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3301      	adds	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b0e      	cmp	r3, #14
 8009634:	d9f2      	bls.n	800961c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11c      	bne.n	8009676 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800964a:	f043 0302 	orr.w	r3, r3, #2
 800964e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e005      	b.n	8009682 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009688:	461a      	mov	r2, r3
 800968a:	2300      	movs	r3, #0
 800968c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009694:	4619      	mov	r1, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969c:	461a      	mov	r2, r3
 800969e:	680b      	ldr	r3, [r1, #0]
 80096a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d10c      	bne.n	80096c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f965 	bl	8009980 <USB_SetDevSpeed>
 80096b6:	e008      	b.n	80096ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096b8:	2101      	movs	r1, #1
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f960 	bl	8009980 <USB_SetDevSpeed>
 80096c0:	e003      	b.n	80096ca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096c2:	2103      	movs	r1, #3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f95b 	bl	8009980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096ca:	2110      	movs	r1, #16
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8f3 	bl	80098b8 <USB_FlushTxFifo>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f91f 	bl	8009920 <USB_FlushRxFifo>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	461a      	mov	r2, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fe:	461a      	mov	r2, r3
 8009700:	2300      	movs	r3, #0
 8009702:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	461a      	mov	r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009710:	2300      	movs	r3, #0
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	e043      	b.n	800979e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800972c:	d118      	bne.n	8009760 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009740:	461a      	mov	r2, r3
 8009742:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e013      	b.n	8009772 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009756:	461a      	mov	r2, r3
 8009758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	e008      	b.n	8009772 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	461a      	mov	r2, r3
 800976e:	2300      	movs	r3, #0
 8009770:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977e:	461a      	mov	r2, r3
 8009780:	2300      	movs	r3, #0
 8009782:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	461a      	mov	r2, r3
 8009792:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	3301      	adds	r3, #1
 800979c:	613b      	str	r3, [r7, #16]
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3b7      	bcc.n	8009716 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	e043      	b.n	8009834 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c2:	d118      	bne.n	80097f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	461a      	mov	r2, r3
 80097d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	e013      	b.n	8009808 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ec:	461a      	mov	r2, r3
 80097ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	e008      	b.n	8009808 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009802:	461a      	mov	r2, r3
 8009804:	2300      	movs	r3, #0
 8009806:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009814:	461a      	mov	r2, r3
 8009816:	2300      	movs	r3, #0
 8009818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	461a      	mov	r2, r3
 8009828:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800982c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3301      	adds	r3, #1
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	429a      	cmp	r2, r3
 800983a:	d3b7      	bcc.n	80097ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800984a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800984e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800985c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	2b00      	cmp	r3, #0
 8009862:	d105      	bne.n	8009870 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f043 0210 	orr.w	r2, r3, #16
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	699a      	ldr	r2, [r3, #24]
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <USB_DevInit+0x2b4>)
 8009876:	4313      	orrs	r3, r2
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800987c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f043 0208 	orr.w	r2, r3, #8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800988e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d105      	bne.n	80098a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <USB_DevInit+0x2b8>)
 800989a:	4313      	orrs	r3, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ac:	b004      	add	sp, #16
 80098ae:	4770      	bx	lr
 80098b0:	803c3800 	.word	0x803c3800
 80098b4:	40000004 	.word	0x40000004

080098b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a13      	ldr	r2, [pc, #76]	; (800991c <USB_FlushTxFifo+0x64>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d901      	bls.n	80098d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e01b      	b.n	8009910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	daf2      	bge.n	80098c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	019b      	lsls	r3, r3, #6
 80098e8:	f043 0220 	orr.w	r2, r3, #32
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3301      	adds	r3, #1
 80098f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a08      	ldr	r2, [pc, #32]	; (800991c <USB_FlushTxFifo+0x64>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d901      	bls.n	8009902 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e006      	b.n	8009910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b20      	cmp	r3, #32
 800990c:	d0f0      	beq.n	80098f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	00030d40 	.word	0x00030d40

08009920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4a11      	ldr	r2, [pc, #68]	; (800997c <USB_FlushRxFifo+0x5c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d901      	bls.n	800993e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e018      	b.n	8009970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	daf2      	bge.n	800992c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2210      	movs	r2, #16
 800994e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3301      	adds	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4a08      	ldr	r2, [pc, #32]	; (800997c <USB_FlushRxFifo+0x5c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d901      	bls.n	8009962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e006      	b.n	8009970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 0310 	and.w	r3, r3, #16
 800996a:	2b10      	cmp	r3, #16
 800996c:	d0f0      	beq.n	8009950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	00030d40 	.word	0x00030d40

08009980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a0:	4313      	orrs	r3, r2
 80099a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e0:	f043 0302 	orr.w	r3, r3, #2
 80099e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	f003 0301 	and.w	r3, r3, #1
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4a13      	ldr	r2, [pc, #76]	; (8009a74 <USB_CoreReset+0x64>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d901      	bls.n	8009a2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e01b      	b.n	8009a66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	daf2      	bge.n	8009a1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f043 0201 	orr.w	r2, r3, #1
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4a09      	ldr	r2, [pc, #36]	; (8009a74 <USB_CoreReset+0x64>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d901      	bls.n	8009a58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e006      	b.n	8009a66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d0f0      	beq.n	8009a46 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	00030d40 	.word	0x00030d40

08009a78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009a7e:	4b8d      	ldr	r3, [pc, #564]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009a80:	22c0      	movs	r2, #192	; 0xc0
 8009a82:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009a84:	4b8b      	ldr	r3, [pc, #556]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009a86:	22a8      	movs	r2, #168	; 0xa8
 8009a88:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009a8a:	4b8a      	ldr	r3, [pc, #552]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 77;
 8009a90:	4b88      	ldr	r3, [pc, #544]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009a92:	224d      	movs	r2, #77	; 0x4d
 8009a94:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009a96:	4b88      	ldr	r3, [pc, #544]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009a98:	22ff      	movs	r2, #255	; 0xff
 8009a9a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009a9c:	4b86      	ldr	r3, [pc, #536]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009a9e:	22ff      	movs	r2, #255	; 0xff
 8009aa0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009aa2:	4b85      	ldr	r3, [pc, #532]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009aa4:	22ff      	movs	r2, #255	; 0xff
 8009aa6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009aa8:	4b83      	ldr	r3, [pc, #524]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009aae:	4b83      	ldr	r3, [pc, #524]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009ab0:	22c0      	movs	r2, #192	; 0xc0
 8009ab2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009ab4:	4b81      	ldr	r3, [pc, #516]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009ab6:	22a8      	movs	r2, #168	; 0xa8
 8009ab8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009aba:	4b80      	ldr	r3, [pc, #512]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009abc:	2201      	movs	r2, #1
 8009abe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8009ac0:	4b7e      	ldr	r3, [pc, #504]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009ac2:	2264      	movs	r2, #100	; 0x64
 8009ac4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009ac6:	f000 fc7d 	bl	800a3c4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009aca:	4b7a      	ldr	r3, [pc, #488]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	061a      	lsls	r2, r3, #24
 8009ad0:	4b78      	ldr	r3, [pc, #480]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	041b      	lsls	r3, r3, #16
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	4b76      	ldr	r3, [pc, #472]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009ada:	789b      	ldrb	r3, [r3, #2]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	4a74      	ldr	r2, [pc, #464]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009ae2:	78d2      	ldrb	r2, [r2, #3]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	061a      	lsls	r2, r3, #24
 8009ae8:	4b72      	ldr	r3, [pc, #456]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	0619      	lsls	r1, r3, #24
 8009aee:	4b71      	ldr	r3, [pc, #452]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	4319      	orrs	r1, r3
 8009af6:	4b6f      	ldr	r3, [pc, #444]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009af8:	789b      	ldrb	r3, [r3, #2]
 8009afa:	021b      	lsls	r3, r3, #8
 8009afc:	430b      	orrs	r3, r1
 8009afe:	496d      	ldr	r1, [pc, #436]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b00:	78c9      	ldrb	r1, [r1, #3]
 8009b02:	430b      	orrs	r3, r1
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	4b69      	ldr	r3, [pc, #420]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	0619      	lsls	r1, r3, #24
 8009b12:	4b68      	ldr	r3, [pc, #416]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	4319      	orrs	r1, r3
 8009b1a:	4b66      	ldr	r3, [pc, #408]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b1c:	789b      	ldrb	r3, [r3, #2]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	430b      	orrs	r3, r1
 8009b22:	4964      	ldr	r1, [pc, #400]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b24:	78c9      	ldrb	r1, [r1, #3]
 8009b26:	430b      	orrs	r3, r1
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	4b60      	ldr	r3, [pc, #384]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	0619      	lsls	r1, r3, #24
 8009b36:	4b5f      	ldr	r3, [pc, #380]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	4319      	orrs	r1, r3
 8009b3e:	4b5d      	ldr	r3, [pc, #372]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b40:	789b      	ldrb	r3, [r3, #2]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	430b      	orrs	r3, r1
 8009b46:	495b      	ldr	r1, [pc, #364]	; (8009cb4 <MX_LWIP_Init+0x23c>)
 8009b48:	78c9      	ldrb	r1, [r1, #3]
 8009b4a:	430b      	orrs	r3, r1
 8009b4c:	0e1b      	lsrs	r3, r3, #24
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	4a5b      	ldr	r2, [pc, #364]	; (8009cc0 <MX_LWIP_Init+0x248>)
 8009b52:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009b54:	4b58      	ldr	r3, [pc, #352]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	061a      	lsls	r2, r3, #24
 8009b5a:	4b57      	ldr	r3, [pc, #348]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b5c:	785b      	ldrb	r3, [r3, #1]
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	431a      	orrs	r2, r3
 8009b62:	4b55      	ldr	r3, [pc, #340]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b64:	789b      	ldrb	r3, [r3, #2]
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	4a53      	ldr	r2, [pc, #332]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b6c:	78d2      	ldrb	r2, [r2, #3]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	061a      	lsls	r2, r3, #24
 8009b72:	4b51      	ldr	r3, [pc, #324]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	0619      	lsls	r1, r3, #24
 8009b78:	4b4f      	ldr	r3, [pc, #316]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	041b      	lsls	r3, r3, #16
 8009b7e:	4319      	orrs	r1, r3
 8009b80:	4b4d      	ldr	r3, [pc, #308]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b82:	789b      	ldrb	r3, [r3, #2]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	430b      	orrs	r3, r1
 8009b88:	494b      	ldr	r1, [pc, #300]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b8a:	78c9      	ldrb	r1, [r1, #3]
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b94:	431a      	orrs	r2, r3
 8009b96:	4b48      	ldr	r3, [pc, #288]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	0619      	lsls	r1, r3, #24
 8009b9c:	4b46      	ldr	r3, [pc, #280]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009b9e:	785b      	ldrb	r3, [r3, #1]
 8009ba0:	041b      	lsls	r3, r3, #16
 8009ba2:	4319      	orrs	r1, r3
 8009ba4:	4b44      	ldr	r3, [pc, #272]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009ba6:	789b      	ldrb	r3, [r3, #2]
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	430b      	orrs	r3, r1
 8009bac:	4942      	ldr	r1, [pc, #264]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009bae:	78c9      	ldrb	r1, [r1, #3]
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	0619      	lsls	r1, r3, #24
 8009bc0:	4b3d      	ldr	r3, [pc, #244]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	041b      	lsls	r3, r3, #16
 8009bc6:	4319      	orrs	r1, r3
 8009bc8:	4b3b      	ldr	r3, [pc, #236]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	4939      	ldr	r1, [pc, #228]	; (8009cb8 <MX_LWIP_Init+0x240>)
 8009bd2:	78c9      	ldrb	r1, [r1, #3]
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	0e1b      	lsrs	r3, r3, #24
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	4a3a      	ldr	r2, [pc, #232]	; (8009cc4 <MX_LWIP_Init+0x24c>)
 8009bdc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009bde:	4b37      	ldr	r3, [pc, #220]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	061a      	lsls	r2, r3, #24
 8009be4:	4b35      	ldr	r3, [pc, #212]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	041b      	lsls	r3, r3, #16
 8009bea:	431a      	orrs	r2, r3
 8009bec:	4b33      	ldr	r3, [pc, #204]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009bee:	789b      	ldrb	r3, [r3, #2]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	4a31      	ldr	r2, [pc, #196]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009bf6:	78d2      	ldrb	r2, [r2, #3]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	061a      	lsls	r2, r3, #24
 8009bfc:	4b2f      	ldr	r3, [pc, #188]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	0619      	lsls	r1, r3, #24
 8009c02:	4b2e      	ldr	r3, [pc, #184]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	4319      	orrs	r1, r3
 8009c0a:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c0c:	789b      	ldrb	r3, [r3, #2]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	430b      	orrs	r3, r1
 8009c12:	492a      	ldr	r1, [pc, #168]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c14:	78c9      	ldrb	r1, [r1, #3]
 8009c16:	430b      	orrs	r3, r1
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	4b26      	ldr	r3, [pc, #152]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	0619      	lsls	r1, r3, #24
 8009c26:	4b25      	ldr	r3, [pc, #148]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	4319      	orrs	r1, r3
 8009c2e:	4b23      	ldr	r3, [pc, #140]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c30:	789b      	ldrb	r3, [r3, #2]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	430b      	orrs	r3, r1
 8009c36:	4921      	ldr	r1, [pc, #132]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c38:	78c9      	ldrb	r1, [r1, #3]
 8009c3a:	430b      	orrs	r3, r1
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c42:	431a      	orrs	r2, r3
 8009c44:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	0619      	lsls	r1, r3, #24
 8009c4a:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	4319      	orrs	r1, r3
 8009c52:	4b1a      	ldr	r3, [pc, #104]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c54:	789b      	ldrb	r3, [r3, #2]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	4918      	ldr	r1, [pc, #96]	; (8009cbc <MX_LWIP_Init+0x244>)
 8009c5c:	78c9      	ldrb	r1, [r1, #3]
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	0e1b      	lsrs	r3, r3, #24
 8009c62:	4313      	orrs	r3, r2
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <MX_LWIP_Init+0x250>)
 8009c66:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009c68:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <MX_LWIP_Init+0x254>)
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <MX_LWIP_Init+0x258>)
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	2300      	movs	r3, #0
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4b14      	ldr	r3, [pc, #80]	; (8009cc8 <MX_LWIP_Init+0x250>)
 8009c76:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <MX_LWIP_Init+0x24c>)
 8009c78:	4911      	ldr	r1, [pc, #68]	; (8009cc0 <MX_LWIP_Init+0x248>)
 8009c7a:	4816      	ldr	r0, [pc, #88]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009c7c:	f001 f88e 	bl	800ad9c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009c80:	4814      	ldr	r0, [pc, #80]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009c82:	f001 fa3d 	bl	800b100 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009c86:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c8c:	089b      	lsrs	r3, r3, #2
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009c98:	480e      	ldr	r0, [pc, #56]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009c9a:	f001 fa41 	bl	800b120 <netif_set_up>
 8009c9e:	e002      	b.n	8009ca6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009ca0:	480c      	ldr	r0, [pc, #48]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009ca2:	f001 faa9 	bl	800b1f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009ca6:	490c      	ldr	r1, [pc, #48]	; (8009cd8 <MX_LWIP_Init+0x260>)
 8009ca8:	480a      	ldr	r0, [pc, #40]	; (8009cd4 <MX_LWIP_Init+0x25c>)
 8009caa:	f001 fb3b 	bl	800b324 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009cae:	bf00      	nop
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000c6c 	.word	0x20000c6c
 8009cb8:	20000c70 	.word	0x20000c70
 8009cbc:	20000c74 	.word	0x20000c74
 8009cc0:	20000c60 	.word	0x20000c60
 8009cc4:	20000c64 	.word	0x20000c64
 8009cc8:	20000c68 	.word	0x20000c68
 8009ccc:	08013b1d 	.word	0x08013b1d
 8009cd0:	08009f25 	.word	0x08009f25
 8009cd4:	20000c2c 	.word	0x20000c2c
 8009cd8:	08009cdd 	.word	0x08009cdd

08009cdc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009cfc:	4b40      	ldr	r3, [pc, #256]	; (8009e00 <low_level_init+0x110>)
 8009cfe:	4a41      	ldr	r2, [pc, #260]	; (8009e04 <low_level_init+0x114>)
 8009d00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009d02:	2300      	movs	r3, #0
 8009d04:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009d06:	2380      	movs	r3, #128	; 0x80
 8009d08:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009d0a:	23e1      	movs	r3, #225	; 0xe1
 8009d0c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009d12:	2300      	movs	r3, #0
 8009d14:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009d16:	2300      	movs	r3, #0
 8009d18:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009d1a:	4a39      	ldr	r2, [pc, #228]	; (8009e00 <low_level_init+0x110>)
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <low_level_init+0x110>)
 8009d24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009d28:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009d2a:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <low_level_init+0x110>)
 8009d2c:	4a36      	ldr	r2, [pc, #216]	; (8009e08 <low_level_init+0x118>)
 8009d2e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009d30:	4b33      	ldr	r3, [pc, #204]	; (8009e00 <low_level_init+0x110>)
 8009d32:	4a36      	ldr	r2, [pc, #216]	; (8009e0c <low_level_init+0x11c>)
 8009d34:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009d36:	4b32      	ldr	r3, [pc, #200]	; (8009e00 <low_level_init+0x110>)
 8009d38:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009d3e:	4830      	ldr	r0, [pc, #192]	; (8009e00 <low_level_init+0x110>)
 8009d40:	f7f9 f9ca 	bl	80030d8 <HAL_ETH_Init>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009d48:	2238      	movs	r2, #56	; 0x38
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4830      	ldr	r0, [pc, #192]	; (8009e10 <low_level_init+0x120>)
 8009d4e:	f00a f903 	bl	8013f58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009d52:	4b2f      	ldr	r3, [pc, #188]	; (8009e10 <low_level_init+0x120>)
 8009d54:	2221      	movs	r2, #33	; 0x21
 8009d56:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009d58:	4b2d      	ldr	r3, [pc, #180]	; (8009e10 <low_level_init+0x120>)
 8009d5a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009d5e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009d60:	4b2b      	ldr	r3, [pc, #172]	; (8009e10 <low_level_init+0x120>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009d66:	482b      	ldr	r0, [pc, #172]	; (8009e14 <low_level_init+0x124>)
 8009d68:	f000 fee0 	bl	800ab2c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2206      	movs	r2, #6
 8009d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009d74:	4b22      	ldr	r3, [pc, #136]	; (8009e00 <low_level_init+0x110>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009d80:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <low_level_init+0x110>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	785a      	ldrb	r2, [r3, #1]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009d8c:	4b1c      	ldr	r3, [pc, #112]	; (8009e00 <low_level_init+0x110>)
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	789a      	ldrb	r2, [r3, #2]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <low_level_init+0x110>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	78da      	ldrb	r2, [r3, #3]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009da4:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <low_level_init+0x110>)
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	791a      	ldrb	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009db0:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <low_level_init+0x110>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	795a      	ldrb	r2, [r3, #5]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009dc2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009dca:	f043 030a 	orr.w	r3, r3, #10
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009dd6:	4910      	ldr	r1, [pc, #64]	; (8009e18 <low_level_init+0x128>)
 8009dd8:	4810      	ldr	r0, [pc, #64]	; (8009e1c <low_level_init+0x12c>)
 8009dda:	f7f7 fe5e 	bl	8001a9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009dde:	480f      	ldr	r0, [pc, #60]	; (8009e1c <low_level_init+0x12c>)
 8009de0:	f7f7 fe8d 	bl	8001afe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d103      	bne.n	8009df2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fa00 	bl	800a1f0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009df0:	e001      	b.n	8009df6 <low_level_init+0x106>
    Error_Handler();
 8009df2:	f7f6 ffcf 	bl	8000d94 <Error_Handler>
}
 8009df6:	bf00      	nop
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20005604 	.word	0x20005604
 8009e04:	40028000 	.word	0x40028000
 8009e08:	20000130 	.word	0x20000130
 8009e0c:	20000090 	.word	0x20000090
 8009e10:	200056b4 	.word	0x200056b4
 8009e14:	08017b2c 	.word	0x08017b2c
 8009e18:	2000000c 	.word	0x2000000c
 8009e1c:	200056ec 	.word	0x200056ec

08009e20 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b092      	sub	sp, #72	; 0x48
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009e38:	f107 030c 	add.w	r3, r7, #12
 8009e3c:	2230      	movs	r2, #48	; 0x30
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f00a f889 	bl	8013f58 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	2230      	movs	r2, #48	; 0x30
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f00a f882 	bl	8013f58 <memset>

  for(q = p; q != NULL; q = q->next)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	643b      	str	r3, [r7, #64]	; 0x40
 8009e58:	e045      	b.n	8009ee6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d902      	bls.n	8009e66 <low_level_output+0x46>
      return ERR_IF;
 8009e60:	f06f 030b 	mvn.w	r3, #11
 8009e64:	e055      	b.n	8009f12 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e68:	6859      	ldr	r1, [r3, #4]
 8009e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	3348      	adds	r3, #72	; 0x48
 8009e76:	443b      	add	r3, r7
 8009e78:	3b3c      	subs	r3, #60	; 0x3c
 8009e7a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e84:	4613      	mov	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	3348      	adds	r3, #72	; 0x48
 8009e8e:	443b      	add	r3, r7
 8009e90:	3b38      	subs	r3, #56	; 0x38
 8009e92:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d011      	beq.n	8009ebe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	f107 000c 	add.w	r0, r7, #12
 8009ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	440b      	add	r3, r1
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	18c1      	adds	r1, r0, r3
 8009eae:	4613      	mov	r3, r2
 8009eb0:	005b      	lsls	r3, r3, #1
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	3348      	adds	r3, #72	; 0x48
 8009eb8:	443b      	add	r3, r7
 8009eba:	3b34      	subs	r3, #52	; 0x34
 8009ebc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec8:	4613      	mov	r3, r2
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	3348      	adds	r3, #72	; 0x48
 8009ed2:	443b      	add	r3, r7
 8009ed4:	3b34      	subs	r3, #52	; 0x34
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009edc:	3301      	adds	r3, #1
 8009ede:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1b6      	bne.n	8009e5a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	891b      	ldrh	r3, [r3, #8]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <low_level_output+0xfc>)
 8009ef4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009ef6:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <low_level_output+0xfc>)
 8009ef8:	f107 030c 	add.w	r3, r7, #12
 8009efc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009efe:	4a07      	ldr	r2, [pc, #28]	; (8009f1c <low_level_output+0xfc>)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009f04:	2214      	movs	r2, #20
 8009f06:	4905      	ldr	r1, [pc, #20]	; (8009f1c <low_level_output+0xfc>)
 8009f08:	4805      	ldr	r0, [pc, #20]	; (8009f20 <low_level_output+0x100>)
 8009f0a:	f7f9 fa19 	bl	8003340 <HAL_ETH_Transmit>

  return errval;
 8009f0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3748      	adds	r7, #72	; 0x48
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200056b4 	.word	0x200056b4
 8009f20:	20005604 	.word	0x20005604

08009f24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <ethernetif_init+0x1c>
 8009f32:	4b0e      	ldr	r3, [pc, #56]	; (8009f6c <ethernetif_init+0x48>)
 8009f34:	f240 127b 	movw	r2, #379	; 0x17b
 8009f38:	490d      	ldr	r1, [pc, #52]	; (8009f70 <ethernetif_init+0x4c>)
 8009f3a:	480e      	ldr	r0, [pc, #56]	; (8009f74 <ethernetif_init+0x50>)
 8009f3c:	f00a f814 	bl	8013f68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2273      	movs	r2, #115	; 0x73
 8009f44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2274      	movs	r2, #116	; 0x74
 8009f4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <ethernetif_init+0x54>)
 8009f54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <ethernetif_init+0x58>)
 8009f5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fec7 	bl	8009cf0 <low_level_init>

  return ERR_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	0801510c 	.word	0x0801510c
 8009f70:	08015128 	.word	0x08015128
 8009f74:	08015138 	.word	0x08015138
 8009f78:	08011fd5 	.word	0x08011fd5
 8009f7c:	08009e21 	.word	0x08009e21

08009f80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	4807      	ldr	r0, [pc, #28]	; (8009fac <pbuf_free_custom+0x2c>)
 8009f90:	f000 feae 	bl	800acf0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <pbuf_free_custom+0x30>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d102      	bne.n	8009fa2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009f9c:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <pbuf_free_custom+0x30>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	08017b2c 	.word	0x08017b2c
 8009fb0:	20005600 	.word	0x20005600

08009fb4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009fb8:	f7f7 ff22 	bl	8001e00 <HAL_GetTick>
 8009fbc:	4603      	mov	r3, r0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08e      	sub	sp, #56	; 0x38
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	609a      	str	r2, [r3, #8]
 8009fd8:	60da      	str	r2, [r3, #12]
 8009fda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a56      	ldr	r2, [pc, #344]	; (800a13c <HAL_ETH_MspInit+0x178>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	f040 80a6 	bne.w	800a134 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009fe8:	4b55      	ldr	r3, [pc, #340]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	4a54      	ldr	r2, [pc, #336]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 8009fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ff4:	4b52      	ldr	r3, [pc, #328]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffc:	623b      	str	r3, [r7, #32]
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	4b4f      	ldr	r3, [pc, #316]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	4a4e      	ldr	r2, [pc, #312]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a00a:	6313      	str	r3, [r2, #48]	; 0x30
 800a00c:	4b4c      	ldr	r3, [pc, #304]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a014:	61fb      	str	r3, [r7, #28]
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	4b49      	ldr	r3, [pc, #292]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01c:	4a48      	ldr	r2, [pc, #288]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a01e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a022:	6313      	str	r3, [r2, #48]	; 0x30
 800a024:	4b46      	ldr	r3, [pc, #280]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a030:	4b43      	ldr	r3, [pc, #268]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	4a42      	ldr	r2, [pc, #264]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a036:	f043 0304 	orr.w	r3, r3, #4
 800a03a:	6313      	str	r3, [r2, #48]	; 0x30
 800a03c:	4b40      	ldr	r3, [pc, #256]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a048:	4b3d      	ldr	r3, [pc, #244]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04c:	4a3c      	ldr	r2, [pc, #240]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	6313      	str	r3, [r2, #48]	; 0x30
 800a054:	4b3a      	ldr	r3, [pc, #232]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	613b      	str	r3, [r7, #16]
 800a05e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a060:	4b37      	ldr	r3, [pc, #220]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a064:	4a36      	ldr	r2, [pc, #216]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a066:	f043 0302 	orr.w	r3, r3, #2
 800a06a:	6313      	str	r3, [r2, #48]	; 0x30
 800a06c:	4b34      	ldr	r3, [pc, #208]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a078:	4b31      	ldr	r3, [pc, #196]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07c:	4a30      	ldr	r2, [pc, #192]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a082:	6313      	str	r3, [r2, #48]	; 0x30
 800a084:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <HAL_ETH_MspInit+0x17c>)
 800a086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	60bb      	str	r3, [r7, #8]
 800a08e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a090:	2332      	movs	r3, #50	; 0x32
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a094:	2302      	movs	r3, #2
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a09c:	2303      	movs	r3, #3
 800a09e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0a0:	230b      	movs	r3, #11
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4826      	ldr	r0, [pc, #152]	; (800a144 <HAL_ETH_MspInit+0x180>)
 800a0ac:	f7fa f936 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a0b0:	2386      	movs	r3, #134	; 0x86
 800a0b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0c0:	230b      	movs	r3, #11
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	481f      	ldr	r0, [pc, #124]	; (800a148 <HAL_ETH_MspInit+0x184>)
 800a0cc:	f7fa f926 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a0d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0e2:	230b      	movs	r3, #11
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a0e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4817      	ldr	r0, [pc, #92]	; (800a14c <HAL_ETH_MspInit+0x188>)
 800a0ee:	f7fa f915 	bl	800431c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a0f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a100:	2303      	movs	r3, #3
 800a102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a104:	230b      	movs	r3, #11
 800a106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a10c:	4619      	mov	r1, r3
 800a10e:	4810      	ldr	r0, [pc, #64]	; (800a150 <HAL_ETH_MspInit+0x18c>)
 800a110:	f7fa f904 	bl	800431c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800a114:	2200      	movs	r2, #0
 800a116:	2100      	movs	r1, #0
 800a118:	203d      	movs	r0, #61	; 0x3d
 800a11a:	f7f8 fb3e 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a11e:	203d      	movs	r0, #61	; 0x3d
 800a120:	f7f8 fb57 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800a124:	2200      	movs	r2, #0
 800a126:	2100      	movs	r1, #0
 800a128:	203e      	movs	r0, #62	; 0x3e
 800a12a:	f7f8 fb36 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a12e:	203e      	movs	r0, #62	; 0x3e
 800a130:	f7f8 fb4f 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a134:	bf00      	nop
 800a136:	3738      	adds	r7, #56	; 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40028000 	.word	0x40028000
 800a140:	40023800 	.word	0x40023800
 800a144:	40020800 	.word	0x40020800
 800a148:	40020000 	.word	0x40020000
 800a14c:	40020400 	.word	0x40020400
 800a150:	40021800 	.word	0x40021800

0800a154 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a158:	4802      	ldr	r0, [pc, #8]	; (800a164 <ETH_PHY_IO_Init+0x10>)
 800a15a:	f7f9 fc85 	bl	8003a68 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20005604 	.word	0x20005604

0800a168 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
  return 0;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	68f9      	ldr	r1, [r7, #12]
 800a18a:	4807      	ldr	r0, [pc, #28]	; (800a1a8 <ETH_PHY_IO_ReadReg+0x30>)
 800a18c:	f7f9 fad4 	bl	8003738 <HAL_ETH_ReadPHYRegister>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e000      	b.n	800a19e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20005604 	.word	0x20005604

0800a1ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	4807      	ldr	r0, [pc, #28]	; (800a1dc <ETH_PHY_IO_WriteReg+0x30>)
 800a1c0:	f7f9 fb05 	bl	80037ce <HAL_ETH_WritePHYRegister>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ce:	e000      	b.n	800a1d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20005604 	.word	0x20005604

0800a1e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a1e4:	f7f7 fe0c 	bl	8001e00 <HAL_GetTick>
 800a1e8:	4603      	mov	r3, r0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b0a0      	sub	sp, #128	; 0x80
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a1f8:	f107 030c 	add.w	r3, r7, #12
 800a1fc:	2264      	movs	r2, #100	; 0x64
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f009 fea9 	bl	8013f58 <memset>
  int32_t PHYLinkState = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a20e:	2300      	movs	r3, #0
 800a210:	67bb      	str	r3, [r7, #120]	; 0x78
 800a212:	2300      	movs	r3, #0
 800a214:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a216:	483a      	ldr	r0, [pc, #232]	; (800a300 <ethernet_link_check_state+0x110>)
 800a218:	f7f7 fd19 	bl	8001c4e <LAN8742_GetLinkState>
 800a21c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a224:	089b      	lsrs	r3, r3, #2
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <ethernet_link_check_state+0x5a>
 800a230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a232:	2b01      	cmp	r3, #1
 800a234:	dc09      	bgt.n	800a24a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a236:	4833      	ldr	r0, [pc, #204]	; (800a304 <ethernet_link_check_state+0x114>)
 800a238:	f7f9 f829 	bl	800328e <HAL_ETH_Stop>
    netif_set_down(netif);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 ffdb 	bl	800b1f8 <netif_set_down>
    netif_set_link_down(netif);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 f83e 	bl	800b2c4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a248:	e055      	b.n	800a2f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d14e      	bne.n	800a2f6 <ethernet_link_check_state+0x106>
 800a258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	dd4b      	ble.n	800a2f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a260:	3b02      	subs	r3, #2
 800a262:	2b03      	cmp	r3, #3
 800a264:	d82a      	bhi.n	800a2bc <ethernet_link_check_state+0xcc>
 800a266:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <ethernet_link_check_state+0x7c>)
 800a268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26c:	0800a27d 	.word	0x0800a27d
 800a270:	0800a28f 	.word	0x0800a28f
 800a274:	0800a29f 	.word	0x0800a29f
 800a278:	0800a2af 	.word	0x0800a2af
      duplex = ETH_FULLDUPLEX_MODE;
 800a27c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a280:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a286:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a288:	2301      	movs	r3, #1
 800a28a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a28c:	e017      	b.n	800a2be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a28e:	2300      	movs	r3, #0
 800a290:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a296:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a29c:	e00f      	b.n	800a2be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a29e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2ac:	e007      	b.n	800a2be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2ba:	e000      	b.n	800a2be <ethernet_link_check_state+0xce>
      break;
 800a2bc:	bf00      	nop
    if(linkchanged)
 800a2be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d018      	beq.n	800a2f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	480e      	ldr	r0, [pc, #56]	; (800a304 <ethernet_link_check_state+0x114>)
 800a2cc:	f7f9 fac8 	bl	8003860 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a2d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a2d8:	f107 030c 	add.w	r3, r7, #12
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4809      	ldr	r0, [pc, #36]	; (800a304 <ethernet_link_check_state+0x114>)
 800a2e0:	f7f9 fba8 	bl	8003a34 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a2e4:	4807      	ldr	r0, [pc, #28]	; (800a304 <ethernet_link_check_state+0x114>)
 800a2e6:	f7f8 ff73 	bl	80031d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 ff18 	bl	800b120 <netif_set_up>
      netif_set_link_up(netif);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 ffb3 	bl	800b25c <netif_set_link_up>
}
 800a2f6:	bf00      	nop
 800a2f8:	3780      	adds	r7, #128	; 0x80
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	200056ec 	.word	0x200056ec
 800a304:	20005604 	.word	0x20005604

0800a308 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a310:	4812      	ldr	r0, [pc, #72]	; (800a35c <HAL_ETH_RxAllocateCallback+0x54>)
 800a312:	f000 fc7f 	bl	800ac14 <memp_malloc_pool>
 800a316:	60f8      	str	r0, [r7, #12]
  if (p)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d014      	beq.n	800a348 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f103 0220 	add.w	r2, r3, #32
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a0d      	ldr	r2, [pc, #52]	; (800a360 <HAL_ETH_RxAllocateCallback+0x58>)
 800a32c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a336:	9201      	str	r2, [sp, #4]
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2241      	movs	r2, #65	; 0x41
 800a33e:	2100      	movs	r1, #0
 800a340:	2000      	movs	r0, #0
 800a342:	f001 f995 	bl	800b670 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a346:	e005      	b.n	800a354 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a348:	4b06      	ldr	r3, [pc, #24]	; (800a364 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	08017b2c 	.word	0x08017b2c
 800a360:	08009f81 	.word	0x08009f81
 800a364:	20005600 	.word	0x20005600

0800a368 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a372:	88fb      	ldrh	r3, [r7, #6]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	b21a      	sxth	r2, r3
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	b21b      	sxth	r3, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	b21b      	sxth	r3, r3
 800a384:	b29b      	uxth	r3, r3
}
 800a386:	4618      	mov	r0, r3
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	061a      	lsls	r2, r3, #24
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	0a1b      	lsrs	r3, r3, #8
 800a3ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	4313      	orrs	r3, r2
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a3ce:	f000 f8d5 	bl	800a57c <mem_init>
  memp_init();
 800a3d2:	f000 fbdb 	bl	800ab8c <memp_init>
  pbuf_init();
  netif_init();
 800a3d6:	f000 fcd9 	bl	800ad8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3da:	f006 fff5 	bl	80113c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3de:	f001 fd8f 	bl	800bf00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3e2:	f006 ffa9 	bl	8011338 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3fa:	4b05      	ldr	r3, [pc, #20]	; (800a410 <ptr_to_mem+0x20>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	88fb      	ldrh	r3, [r7, #6]
 800a400:	4413      	add	r3, r2
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20005d78 	.word	0x20005d78

0800a414 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <mem_to_ptr+0x20>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	b29b      	uxth	r3, r3
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20005d78 	.word	0x20005d78

0800a438 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a438:	b590      	push	{r4, r7, lr}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a440:	4b45      	ldr	r3, [pc, #276]	; (800a558 <plug_holes+0x120>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d206      	bcs.n	800a458 <plug_holes+0x20>
 800a44a:	4b44      	ldr	r3, [pc, #272]	; (800a55c <plug_holes+0x124>)
 800a44c:	f240 12df 	movw	r2, #479	; 0x1df
 800a450:	4943      	ldr	r1, [pc, #268]	; (800a560 <plug_holes+0x128>)
 800a452:	4844      	ldr	r0, [pc, #272]	; (800a564 <plug_holes+0x12c>)
 800a454:	f009 fd88 	bl	8013f68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a458:	4b43      	ldr	r3, [pc, #268]	; (800a568 <plug_holes+0x130>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d306      	bcc.n	800a470 <plug_holes+0x38>
 800a462:	4b3e      	ldr	r3, [pc, #248]	; (800a55c <plug_holes+0x124>)
 800a464:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a468:	4940      	ldr	r1, [pc, #256]	; (800a56c <plug_holes+0x134>)
 800a46a:	483e      	ldr	r0, [pc, #248]	; (800a564 <plug_holes+0x12c>)
 800a46c:	f009 fd7c 	bl	8013f68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	791b      	ldrb	r3, [r3, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <plug_holes+0x4e>
 800a478:	4b38      	ldr	r3, [pc, #224]	; (800a55c <plug_holes+0x124>)
 800a47a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a47e:	493c      	ldr	r1, [pc, #240]	; (800a570 <plug_holes+0x138>)
 800a480:	4838      	ldr	r0, [pc, #224]	; (800a564 <plug_holes+0x12c>)
 800a482:	f009 fd71 	bl	8013f68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a48e:	d906      	bls.n	800a49e <plug_holes+0x66>
 800a490:	4b32      	ldr	r3, [pc, #200]	; (800a55c <plug_holes+0x124>)
 800a492:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a496:	4937      	ldr	r1, [pc, #220]	; (800a574 <plug_holes+0x13c>)
 800a498:	4832      	ldr	r0, [pc, #200]	; (800a564 <plug_holes+0x12c>)
 800a49a:	f009 fd65 	bl	8013f68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff ffa4 	bl	800a3f0 <ptr_to_mem>
 800a4a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d024      	beq.n	800a4fc <plug_holes+0xc4>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	791b      	ldrb	r3, [r3, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d120      	bne.n	800a4fc <plug_holes+0xc4>
 800a4ba:	4b2b      	ldr	r3, [pc, #172]	; (800a568 <plug_holes+0x130>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d01b      	beq.n	800a4fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4c4:	4b2c      	ldr	r3, [pc, #176]	; (800a578 <plug_holes+0x140>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d102      	bne.n	800a4d4 <plug_holes+0x9c>
      lfree = mem;
 800a4ce:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <plug_holes+0x140>)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	881a      	ldrh	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4e4:	d00a      	beq.n	800a4fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff ff80 	bl	800a3f0 <ptr_to_mem>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff ff8e 	bl	800a414 <mem_to_ptr>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	885b      	ldrh	r3, [r3, #2]
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff ff75 	bl	800a3f0 <ptr_to_mem>
 800a506:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d01f      	beq.n	800a550 <plug_holes+0x118>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	791b      	ldrb	r3, [r3, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d11b      	bne.n	800a550 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a518:	4b17      	ldr	r3, [pc, #92]	; (800a578 <plug_holes+0x140>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d102      	bne.n	800a528 <plug_holes+0xf0>
      lfree = pmem;
 800a522:	4a15      	ldr	r2, [pc, #84]	; (800a578 <plug_holes+0x140>)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	881a      	ldrh	r2, [r3, #0]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a538:	d00a      	beq.n	800a550 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7ff ff56 	bl	800a3f0 <ptr_to_mem>
 800a544:	4604      	mov	r4, r0
 800a546:	68b8      	ldr	r0, [r7, #8]
 800a548:	f7ff ff64 	bl	800a414 <mem_to_ptr>
 800a54c:	4603      	mov	r3, r0
 800a54e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	bd90      	pop	{r4, r7, pc}
 800a558:	20005d78 	.word	0x20005d78
 800a55c:	08015160 	.word	0x08015160
 800a560:	08015190 	.word	0x08015190
 800a564:	080151a8 	.word	0x080151a8
 800a568:	20005d7c 	.word	0x20005d7c
 800a56c:	080151d0 	.word	0x080151d0
 800a570:	080151ec 	.word	0x080151ec
 800a574:	08015208 	.word	0x08015208
 800a578:	20005d80 	.word	0x20005d80

0800a57c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a582:	4b18      	ldr	r3, [pc, #96]	; (800a5e4 <mem_init+0x68>)
 800a584:	3303      	adds	r3, #3
 800a586:	f023 0303 	bic.w	r3, r3, #3
 800a58a:	461a      	mov	r2, r3
 800a58c:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <mem_init+0x6c>)
 800a58e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a590:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <mem_init+0x6c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a59c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a5aa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a5ae:	f7ff ff1f 	bl	800a3f0 <ptr_to_mem>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <mem_init+0x70>)
 800a5b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <mem_init+0x70>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <mem_init+0x70>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <mem_init+0x70>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <mem_init+0x6c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a05      	ldr	r2, [pc, #20]	; (800a5f0 <mem_init+0x74>)
 800a5da:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20005724 	.word	0x20005724
 800a5e8:	20005d78 	.word	0x20005d78
 800a5ec:	20005d7c 	.word	0x20005d7c
 800a5f0:	20005d80 	.word	0x20005d80

0800a5f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ff09 	bl	800a414 <mem_to_ptr>
 800a602:	4603      	mov	r3, r0
 800a604:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fef0 	bl	800a3f0 <ptr_to_mem>
 800a610:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff feea 	bl	800a3f0 <ptr_to_mem>
 800a61c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a626:	d818      	bhi.n	800a65a <mem_link_valid+0x66>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a630:	d813      	bhi.n	800a65a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a636:	8afa      	ldrh	r2, [r7, #22]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d004      	beq.n	800a646 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	8afa      	ldrh	r2, [r7, #22]
 800a642:	429a      	cmp	r2, r3
 800a644:	d109      	bne.n	800a65a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <mem_link_valid+0x74>)
 800a648:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d006      	beq.n	800a65e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	8afa      	ldrh	r2, [r7, #22]
 800a656:	429a      	cmp	r2, r3
 800a658:	d001      	beq.n	800a65e <mem_link_valid+0x6a>
    return 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <mem_link_valid+0x6c>
  }
  return 1;
 800a65e:	2301      	movs	r3, #1
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20005d7c 	.word	0x20005d7c

0800a66c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d04c      	beq.n	800a714 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a684:	4b25      	ldr	r3, [pc, #148]	; (800a71c <mem_free+0xb0>)
 800a686:	f240 2273 	movw	r2, #627	; 0x273
 800a68a:	4925      	ldr	r1, [pc, #148]	; (800a720 <mem_free+0xb4>)
 800a68c:	4825      	ldr	r0, [pc, #148]	; (800a724 <mem_free+0xb8>)
 800a68e:	f009 fc6b 	bl	8013f68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a692:	e040      	b.n	800a716 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3b08      	subs	r3, #8
 800a698:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a69a:	4b23      	ldr	r3, [pc, #140]	; (800a728 <mem_free+0xbc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d306      	bcc.n	800a6b2 <mem_free+0x46>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 020c 	add.w	r2, r3, #12
 800a6aa:	4b20      	ldr	r3, [pc, #128]	; (800a72c <mem_free+0xc0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d907      	bls.n	800a6c2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	; (800a71c <mem_free+0xb0>)
 800a6b4:	f240 227f 	movw	r2, #639	; 0x27f
 800a6b8:	491d      	ldr	r1, [pc, #116]	; (800a730 <mem_free+0xc4>)
 800a6ba:	481a      	ldr	r0, [pc, #104]	; (800a724 <mem_free+0xb8>)
 800a6bc:	f009 fc54 	bl	8013f68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6c0:	e029      	b.n	800a716 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	791b      	ldrb	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d107      	bne.n	800a6da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6ca:	4b14      	ldr	r3, [pc, #80]	; (800a71c <mem_free+0xb0>)
 800a6cc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6d0:	4918      	ldr	r1, [pc, #96]	; (800a734 <mem_free+0xc8>)
 800a6d2:	4814      	ldr	r0, [pc, #80]	; (800a724 <mem_free+0xb8>)
 800a6d4:	f009 fc48 	bl	8013f68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6d8:	e01d      	b.n	800a716 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff ff8a 	bl	800a5f4 <mem_link_valid>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <mem_free+0xb0>)
 800a6e8:	f240 2295 	movw	r2, #661	; 0x295
 800a6ec:	4912      	ldr	r1, [pc, #72]	; (800a738 <mem_free+0xcc>)
 800a6ee:	480d      	ldr	r0, [pc, #52]	; (800a724 <mem_free+0xb8>)
 800a6f0:	f009 fc3a 	bl	8013f68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a6f4:	e00f      	b.n	800a716 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <mem_free+0xd0>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	429a      	cmp	r2, r3
 800a704:	d202      	bcs.n	800a70c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a706:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <mem_free+0xd0>)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7ff fe93 	bl	800a438 <plug_holes>
 800a712:	e000      	b.n	800a716 <mem_free+0xaa>
    return;
 800a714:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	08015160 	.word	0x08015160
 800a720:	08015234 	.word	0x08015234
 800a724:	080151a8 	.word	0x080151a8
 800a728:	20005d78 	.word	0x20005d78
 800a72c:	20005d7c 	.word	0x20005d7c
 800a730:	08015258 	.word	0x08015258
 800a734:	08015274 	.word	0x08015274
 800a738:	0801529c 	.word	0x0801529c
 800a73c:	20005d80 	.word	0x20005d80

0800a740 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a74c:	887b      	ldrh	r3, [r7, #2]
 800a74e:	3303      	adds	r3, #3
 800a750:	b29b      	uxth	r3, r3
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a758:	8bfb      	ldrh	r3, [r7, #30]
 800a75a:	2b0b      	cmp	r3, #11
 800a75c:	d801      	bhi.n	800a762 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a75e:	230c      	movs	r3, #12
 800a760:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a762:	8bfb      	ldrh	r3, [r7, #30]
 800a764:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a768:	d803      	bhi.n	800a772 <mem_trim+0x32>
 800a76a:	8bfa      	ldrh	r2, [r7, #30]
 800a76c:	887b      	ldrh	r3, [r7, #2]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d201      	bcs.n	800a776 <mem_trim+0x36>
    return NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	e0cc      	b.n	800a910 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a776:	4b68      	ldr	r3, [pc, #416]	; (800a918 <mem_trim+0x1d8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d304      	bcc.n	800a78a <mem_trim+0x4a>
 800a780:	4b66      	ldr	r3, [pc, #408]	; (800a91c <mem_trim+0x1dc>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	d306      	bcc.n	800a798 <mem_trim+0x58>
 800a78a:	4b65      	ldr	r3, [pc, #404]	; (800a920 <mem_trim+0x1e0>)
 800a78c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a790:	4964      	ldr	r1, [pc, #400]	; (800a924 <mem_trim+0x1e4>)
 800a792:	4865      	ldr	r0, [pc, #404]	; (800a928 <mem_trim+0x1e8>)
 800a794:	f009 fbe8 	bl	8013f68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a798:	4b5f      	ldr	r3, [pc, #380]	; (800a918 <mem_trim+0x1d8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d304      	bcc.n	800a7ac <mem_trim+0x6c>
 800a7a2:	4b5e      	ldr	r3, [pc, #376]	; (800a91c <mem_trim+0x1dc>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d301      	bcc.n	800a7b0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	e0af      	b.n	800a910 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3b08      	subs	r3, #8
 800a7b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a7b6:	69b8      	ldr	r0, [r7, #24]
 800a7b8:	f7ff fe2c 	bl	800a414 <mem_to_ptr>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	881a      	ldrh	r2, [r3, #0]
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	3b08      	subs	r3, #8
 800a7cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a7ce:	8bfa      	ldrh	r2, [r7, #30]
 800a7d0:	8abb      	ldrh	r3, [r7, #20]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d906      	bls.n	800a7e4 <mem_trim+0xa4>
 800a7d6:	4b52      	ldr	r3, [pc, #328]	; (800a920 <mem_trim+0x1e0>)
 800a7d8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a7dc:	4953      	ldr	r1, [pc, #332]	; (800a92c <mem_trim+0x1ec>)
 800a7de:	4852      	ldr	r0, [pc, #328]	; (800a928 <mem_trim+0x1e8>)
 800a7e0:	f009 fbc2 	bl	8013f68 <iprintf>
  if (newsize > size) {
 800a7e4:	8bfa      	ldrh	r2, [r7, #30]
 800a7e6:	8abb      	ldrh	r3, [r7, #20]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d901      	bls.n	800a7f0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e08f      	b.n	800a910 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a7f0:	8bfa      	ldrh	r2, [r7, #30]
 800a7f2:	8abb      	ldrh	r3, [r7, #20]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d101      	bne.n	800a7fc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	e089      	b.n	800a910 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fdf5 	bl	800a3f0 <ptr_to_mem>
 800a806:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	791b      	ldrb	r3, [r3, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d13f      	bne.n	800a890 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a818:	d106      	bne.n	800a828 <mem_trim+0xe8>
 800a81a:	4b41      	ldr	r3, [pc, #260]	; (800a920 <mem_trim+0x1e0>)
 800a81c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a820:	4943      	ldr	r1, [pc, #268]	; (800a930 <mem_trim+0x1f0>)
 800a822:	4841      	ldr	r0, [pc, #260]	; (800a928 <mem_trim+0x1e8>)
 800a824:	f009 fba0 	bl	8013f68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a82e:	8afa      	ldrh	r2, [r7, #22]
 800a830:	8bfb      	ldrh	r3, [r7, #30]
 800a832:	4413      	add	r3, r2
 800a834:	b29b      	uxth	r3, r3
 800a836:	3308      	adds	r3, #8
 800a838:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a83a:	4b3e      	ldr	r3, [pc, #248]	; (800a934 <mem_trim+0x1f4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	429a      	cmp	r2, r3
 800a842:	d106      	bne.n	800a852 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a844:	89fb      	ldrh	r3, [r7, #14]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fdd2 	bl	800a3f0 <ptr_to_mem>
 800a84c:	4603      	mov	r3, r0
 800a84e:	4a39      	ldr	r2, [pc, #228]	; (800a934 <mem_trim+0x1f4>)
 800a850:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a852:	89fb      	ldrh	r3, [r7, #14]
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff fdcb 	bl	800a3f0 <ptr_to_mem>
 800a85a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2200      	movs	r2, #0
 800a860:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	89ba      	ldrh	r2, [r7, #12]
 800a866:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	8afa      	ldrh	r2, [r7, #22]
 800a86c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	89fa      	ldrh	r2, [r7, #14]
 800a872:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a87c:	d047      	beq.n	800a90e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fdb4 	bl	800a3f0 <ptr_to_mem>
 800a888:	4602      	mov	r2, r0
 800a88a:	89fb      	ldrh	r3, [r7, #14]
 800a88c:	8053      	strh	r3, [r2, #2]
 800a88e:	e03e      	b.n	800a90e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a890:	8bfb      	ldrh	r3, [r7, #30]
 800a892:	f103 0214 	add.w	r2, r3, #20
 800a896:	8abb      	ldrh	r3, [r7, #20]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d838      	bhi.n	800a90e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a89c:	8afa      	ldrh	r2, [r7, #22]
 800a89e:	8bfb      	ldrh	r3, [r7, #30]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8b0:	d106      	bne.n	800a8c0 <mem_trim+0x180>
 800a8b2:	4b1b      	ldr	r3, [pc, #108]	; (800a920 <mem_trim+0x1e0>)
 800a8b4:	f240 3216 	movw	r2, #790	; 0x316
 800a8b8:	491d      	ldr	r1, [pc, #116]	; (800a930 <mem_trim+0x1f0>)
 800a8ba:	481b      	ldr	r0, [pc, #108]	; (800a928 <mem_trim+0x1e8>)
 800a8bc:	f009 fb54 	bl	8013f68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a8c0:	89fb      	ldrh	r3, [r7, #14]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fd94 	bl	800a3f0 <ptr_to_mem>
 800a8c8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a8ca:	4b1a      	ldr	r3, [pc, #104]	; (800a934 <mem_trim+0x1f4>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d202      	bcs.n	800a8da <mem_trim+0x19a>
      lfree = mem2;
 800a8d4:	4a17      	ldr	r2, [pc, #92]	; (800a934 <mem_trim+0x1f4>)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	881a      	ldrh	r2, [r3, #0]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	8afa      	ldrh	r2, [r7, #22]
 800a8ec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	89fa      	ldrh	r2, [r7, #14]
 800a8f2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8fc:	d007      	beq.n	800a90e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fd74 	bl	800a3f0 <ptr_to_mem>
 800a908:	4602      	mov	r2, r0
 800a90a:	89fb      	ldrh	r3, [r7, #14]
 800a90c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a90e:	687b      	ldr	r3, [r7, #4]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20005d78 	.word	0x20005d78
 800a91c:	20005d7c 	.word	0x20005d7c
 800a920:	08015160 	.word	0x08015160
 800a924:	080152d0 	.word	0x080152d0
 800a928:	080151a8 	.word	0x080151a8
 800a92c:	080152e8 	.word	0x080152e8
 800a930:	08015308 	.word	0x08015308
 800a934:	20005d80 	.word	0x20005d80

0800a938 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <mem_malloc+0x14>
    return NULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	e0d9      	b.n	800ab00 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	3303      	adds	r3, #3
 800a950:	b29b      	uxth	r3, r3
 800a952:	f023 0303 	bic.w	r3, r3, #3
 800a956:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a958:	8bbb      	ldrh	r3, [r7, #28]
 800a95a:	2b0b      	cmp	r3, #11
 800a95c:	d801      	bhi.n	800a962 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a95e:	230c      	movs	r3, #12
 800a960:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a962:	8bbb      	ldrh	r3, [r7, #28]
 800a964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a968:	d803      	bhi.n	800a972 <mem_malloc+0x3a>
 800a96a:	8bba      	ldrh	r2, [r7, #28]
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d201      	bcs.n	800a976 <mem_malloc+0x3e>
    return NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	e0c4      	b.n	800ab00 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a976:	4b64      	ldr	r3, [pc, #400]	; (800ab08 <mem_malloc+0x1d0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff fd4a 	bl	800a414 <mem_to_ptr>
 800a980:	4603      	mov	r3, r0
 800a982:	83fb      	strh	r3, [r7, #30]
 800a984:	e0b4      	b.n	800aaf0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a986:	8bfb      	ldrh	r3, [r7, #30]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fd31 	bl	800a3f0 <ptr_to_mem>
 800a98e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	791b      	ldrb	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f040 80a4 	bne.w	800aae2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	8bfb      	ldrh	r3, [r7, #30]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	f1a3 0208 	sub.w	r2, r3, #8
 800a9a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	f0c0 8099 	bcc.w	800aae2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	8bfb      	ldrh	r3, [r7, #30]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	f1a3 0208 	sub.w	r2, r3, #8
 800a9be:	8bbb      	ldrh	r3, [r7, #28]
 800a9c0:	3314      	adds	r3, #20
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d333      	bcc.n	800aa2e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a9c6:	8bfa      	ldrh	r2, [r7, #30]
 800a9c8:	8bbb      	ldrh	r3, [r7, #28]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a9d2:	8a7b      	ldrh	r3, [r7, #18]
 800a9d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9d8:	d106      	bne.n	800a9e8 <mem_malloc+0xb0>
 800a9da:	4b4c      	ldr	r3, [pc, #304]	; (800ab0c <mem_malloc+0x1d4>)
 800a9dc:	f240 3287 	movw	r2, #903	; 0x387
 800a9e0:	494b      	ldr	r1, [pc, #300]	; (800ab10 <mem_malloc+0x1d8>)
 800a9e2:	484c      	ldr	r0, [pc, #304]	; (800ab14 <mem_malloc+0x1dc>)
 800a9e4:	f009 fac0 	bl	8013f68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a9e8:	8a7b      	ldrh	r3, [r7, #18]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fd00 	bl	800a3f0 <ptr_to_mem>
 800a9f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	881a      	ldrh	r2, [r3, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8bfa      	ldrh	r2, [r7, #30]
 800aa04:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	8a7a      	ldrh	r2, [r7, #18]
 800aa0a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa1a:	d00b      	beq.n	800aa34 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fce5 	bl	800a3f0 <ptr_to_mem>
 800aa26:	4602      	mov	r2, r0
 800aa28:	8a7b      	ldrh	r3, [r7, #18]
 800aa2a:	8053      	strh	r3, [r2, #2]
 800aa2c:	e002      	b.n	800aa34 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2201      	movs	r2, #1
 800aa32:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aa34:	4b34      	ldr	r3, [pc, #208]	; (800ab08 <mem_malloc+0x1d0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d127      	bne.n	800aa8e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <mem_malloc+0x1d0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aa44:	e005      	b.n	800aa52 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7ff fcd0 	bl	800a3f0 <ptr_to_mem>
 800aa50:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	791b      	ldrb	r3, [r3, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <mem_malloc+0x12c>
 800aa5a:	4b2f      	ldr	r3, [pc, #188]	; (800ab18 <mem_malloc+0x1e0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d1f0      	bne.n	800aa46 <mem_malloc+0x10e>
          }
          lfree = cur;
 800aa64:	4a28      	ldr	r2, [pc, #160]	; (800ab08 <mem_malloc+0x1d0>)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aa6a:	4b27      	ldr	r3, [pc, #156]	; (800ab08 <mem_malloc+0x1d0>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b2a      	ldr	r3, [pc, #168]	; (800ab18 <mem_malloc+0x1e0>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d00b      	beq.n	800aa8e <mem_malloc+0x156>
 800aa76:	4b24      	ldr	r3, [pc, #144]	; (800ab08 <mem_malloc+0x1d0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	791b      	ldrb	r3, [r3, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d006      	beq.n	800aa8e <mem_malloc+0x156>
 800aa80:	4b22      	ldr	r3, [pc, #136]	; (800ab0c <mem_malloc+0x1d4>)
 800aa82:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aa86:	4925      	ldr	r1, [pc, #148]	; (800ab1c <mem_malloc+0x1e4>)
 800aa88:	4822      	ldr	r0, [pc, #136]	; (800ab14 <mem_malloc+0x1dc>)
 800aa8a:	f009 fa6d 	bl	8013f68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aa8e:	8bba      	ldrh	r2, [r7, #28]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	4413      	add	r3, r2
 800aa94:	3308      	adds	r3, #8
 800aa96:	4a20      	ldr	r2, [pc, #128]	; (800ab18 <mem_malloc+0x1e0>)
 800aa98:	6812      	ldr	r2, [r2, #0]
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d906      	bls.n	800aaac <mem_malloc+0x174>
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <mem_malloc+0x1d4>)
 800aaa0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aaa4:	491e      	ldr	r1, [pc, #120]	; (800ab20 <mem_malloc+0x1e8>)
 800aaa6:	481b      	ldr	r0, [pc, #108]	; (800ab14 <mem_malloc+0x1dc>)
 800aaa8:	f009 fa5e 	bl	8013f68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d006      	beq.n	800aac4 <mem_malloc+0x18c>
 800aab6:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <mem_malloc+0x1d4>)
 800aab8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aabc:	4919      	ldr	r1, [pc, #100]	; (800ab24 <mem_malloc+0x1ec>)
 800aabe:	4815      	ldr	r0, [pc, #84]	; (800ab14 <mem_malloc+0x1dc>)
 800aac0:	f009 fa52 	bl	8013f68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <mem_malloc+0x1a4>
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <mem_malloc+0x1d4>)
 800aad0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aad4:	4914      	ldr	r1, [pc, #80]	; (800ab28 <mem_malloc+0x1f0>)
 800aad6:	480f      	ldr	r0, [pc, #60]	; (800ab14 <mem_malloc+0x1dc>)
 800aad8:	f009 fa46 	bl	8013f68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	3308      	adds	r3, #8
 800aae0:	e00e      	b.n	800ab00 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800aae2:	8bfb      	ldrh	r3, [r7, #30]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fc83 	bl	800a3f0 <ptr_to_mem>
 800aaea:	4603      	mov	r3, r0
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aaf0:	8bfa      	ldrh	r2, [r7, #30]
 800aaf2:	8bbb      	ldrh	r3, [r7, #28]
 800aaf4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	f4ff af44 	bcc.w	800a986 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20005d80 	.word	0x20005d80
 800ab0c:	08015160 	.word	0x08015160
 800ab10:	08015308 	.word	0x08015308
 800ab14:	080151a8 	.word	0x080151a8
 800ab18:	20005d7c 	.word	0x20005d7c
 800ab1c:	0801531c 	.word	0x0801531c
 800ab20:	08015338 	.word	0x08015338
 800ab24:	08015368 	.word	0x08015368
 800ab28:	08015398 	.word	0x08015398

0800ab2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	3303      	adds	r3, #3
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	e011      	b.n	800ab72 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4413      	add	r3, r2
 800ab6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	885b      	ldrh	r3, [r3, #2]
 800ab76:	461a      	mov	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	dbe7      	blt.n	800ab4e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab92:	2300      	movs	r3, #0
 800ab94:	80fb      	strh	r3, [r7, #6]
 800ab96:	e009      	b.n	800abac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	4a08      	ldr	r2, [pc, #32]	; (800abbc <memp_init+0x30>)
 800ab9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff ffc3 	bl	800ab2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	3301      	adds	r3, #1
 800abaa:	80fb      	strh	r3, [r7, #6]
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d9f2      	bls.n	800ab98 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800abb2:	bf00      	nop
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	08017ba4 	.word	0x08017ba4

0800abc0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d012      	beq.n	800abfc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d006      	beq.n	800abf8 <do_memp_malloc_pool+0x38>
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <do_memp_malloc_pool+0x48>)
 800abec:	f44f 728c 	mov.w	r2, #280	; 0x118
 800abf0:	4906      	ldr	r1, [pc, #24]	; (800ac0c <do_memp_malloc_pool+0x4c>)
 800abf2:	4807      	ldr	r0, [pc, #28]	; (800ac10 <do_memp_malloc_pool+0x50>)
 800abf4:	f009 f9b8 	bl	8013f68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	e000      	b.n	800abfe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	080153bc 	.word	0x080153bc
 800ac0c:	080153ec 	.word	0x080153ec
 800ac10:	08015410 	.word	0x08015410

0800ac14 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <memp_malloc_pool+0x1c>
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <memp_malloc_pool+0x38>)
 800ac24:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ac28:	4909      	ldr	r1, [pc, #36]	; (800ac50 <memp_malloc_pool+0x3c>)
 800ac2a:	480a      	ldr	r0, [pc, #40]	; (800ac54 <memp_malloc_pool+0x40>)
 800ac2c:	f009 f99c 	bl	8013f68 <iprintf>
  if (desc == NULL) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <memp_malloc_pool+0x26>
    return NULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e003      	b.n	800ac42 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff ffc0 	bl	800abc0 <do_memp_malloc_pool>
 800ac40:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	080153bc 	.word	0x080153bc
 800ac50:	08015438 	.word	0x08015438
 800ac54:	08015410 	.word	0x08015410

0800ac58 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d908      	bls.n	800ac7a <memp_malloc+0x22>
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <memp_malloc+0x3c>)
 800ac6a:	f240 1257 	movw	r2, #343	; 0x157
 800ac6e:	490a      	ldr	r1, [pc, #40]	; (800ac98 <memp_malloc+0x40>)
 800ac70:	480a      	ldr	r0, [pc, #40]	; (800ac9c <memp_malloc+0x44>)
 800ac72:	f009 f979 	bl	8013f68 <iprintf>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e008      	b.n	800ac8c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	4a08      	ldr	r2, [pc, #32]	; (800aca0 <memp_malloc+0x48>)
 800ac7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff ff9c 	bl	800abc0 <do_memp_malloc_pool>
 800ac88:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	080153bc 	.word	0x080153bc
 800ac98:	0801544c 	.word	0x0801544c
 800ac9c:	08015410 	.word	0x08015410
 800aca0:	08017ba4 	.word	0x08017ba4

0800aca4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d006      	beq.n	800acc6 <do_memp_free_pool+0x22>
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <do_memp_free_pool+0x40>)
 800acba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800acbe:	490a      	ldr	r1, [pc, #40]	; (800ace8 <do_memp_free_pool+0x44>)
 800acc0:	480a      	ldr	r0, [pc, #40]	; (800acec <do_memp_free_pool+0x48>)
 800acc2:	f009 f951 	bl	8013f68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	080153bc 	.word	0x080153bc
 800ace8:	0801546c 	.word	0x0801546c
 800acec:	08015410 	.word	0x08015410

0800acf0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <memp_free_pool+0x1e>
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <memp_free_pool+0x3c>)
 800ad02:	f240 1295 	movw	r2, #405	; 0x195
 800ad06:	490a      	ldr	r1, [pc, #40]	; (800ad30 <memp_free_pool+0x40>)
 800ad08:	480a      	ldr	r0, [pc, #40]	; (800ad34 <memp_free_pool+0x44>)
 800ad0a:	f009 f92d 	bl	8013f68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <memp_free_pool+0x34>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff ffc1 	bl	800aca4 <do_memp_free_pool>
 800ad22:	e000      	b.n	800ad26 <memp_free_pool+0x36>
    return;
 800ad24:	bf00      	nop
}
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	080153bc 	.word	0x080153bc
 800ad30:	08015438 	.word	0x08015438
 800ad34:	08015410 	.word	0x08015410

0800ad38 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b08      	cmp	r3, #8
 800ad48:	d907      	bls.n	800ad5a <memp_free+0x22>
 800ad4a:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <memp_free+0x44>)
 800ad4c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ad50:	490b      	ldr	r1, [pc, #44]	; (800ad80 <memp_free+0x48>)
 800ad52:	480c      	ldr	r0, [pc, #48]	; (800ad84 <memp_free+0x4c>)
 800ad54:	f009 f908 	bl	8013f68 <iprintf>
 800ad58:	e00c      	b.n	800ad74 <memp_free+0x3c>

  if (mem == NULL) {
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d008      	beq.n	800ad72 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	4a09      	ldr	r2, [pc, #36]	; (800ad88 <memp_free+0x50>)
 800ad64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff ff9a 	bl	800aca4 <do_memp_free_pool>
 800ad70:	e000      	b.n	800ad74 <memp_free+0x3c>
    return;
 800ad72:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	080153bc 	.word	0x080153bc
 800ad80:	0801548c 	.word	0x0801548c
 800ad84:	08015410 	.word	0x08015410
 800ad88:	08017ba4 	.word	0x08017ba4

0800ad8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ad90:	bf00      	nop
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <netif_add+0x26>
 800adb0:	4b57      	ldr	r3, [pc, #348]	; (800af10 <netif_add+0x174>)
 800adb2:	f240 1227 	movw	r2, #295	; 0x127
 800adb6:	4957      	ldr	r1, [pc, #348]	; (800af14 <netif_add+0x178>)
 800adb8:	4857      	ldr	r0, [pc, #348]	; (800af18 <netif_add+0x17c>)
 800adba:	f009 f8d5 	bl	8013f68 <iprintf>
 800adbe:	2300      	movs	r3, #0
 800adc0:	e0a2      	b.n	800af08 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d108      	bne.n	800adda <netif_add+0x3e>
 800adc8:	4b51      	ldr	r3, [pc, #324]	; (800af10 <netif_add+0x174>)
 800adca:	f44f 7294 	mov.w	r2, #296	; 0x128
 800adce:	4953      	ldr	r1, [pc, #332]	; (800af1c <netif_add+0x180>)
 800add0:	4851      	ldr	r0, [pc, #324]	; (800af18 <netif_add+0x17c>)
 800add2:	f009 f8c9 	bl	8013f68 <iprintf>
 800add6:	2300      	movs	r3, #0
 800add8:	e096      	b.n	800af08 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ade0:	4b4f      	ldr	r3, [pc, #316]	; (800af20 <netif_add+0x184>)
 800ade2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800adea:	4b4d      	ldr	r3, [pc, #308]	; (800af20 <netif_add+0x184>)
 800adec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800adf4:	4b4a      	ldr	r3, [pc, #296]	; (800af20 <netif_add+0x184>)
 800adf6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	4a45      	ldr	r2, [pc, #276]	; (800af24 <netif_add+0x188>)
 800ae0e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a3a      	ldr	r2, [r7, #32]
 800ae28:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae2a:	4b3f      	ldr	r3, [pc, #252]	; (800af28 <netif_add+0x18c>)
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae38:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f913 	bl	800b06c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	4798      	blx	r3
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <netif_add+0xba>
    return NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e058      	b.n	800af08 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae5c:	2bff      	cmp	r3, #255	; 0xff
 800ae5e:	d103      	bne.n	800ae68 <netif_add+0xcc>
        netif->num = 0;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae6c:	4b2f      	ldr	r3, [pc, #188]	; (800af2c <netif_add+0x190>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e02b      	b.n	800aecc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d106      	bne.n	800ae8a <netif_add+0xee>
 800ae7c:	4b24      	ldr	r3, [pc, #144]	; (800af10 <netif_add+0x174>)
 800ae7e:	f240 128b 	movw	r2, #395	; 0x18b
 800ae82:	492b      	ldr	r1, [pc, #172]	; (800af30 <netif_add+0x194>)
 800ae84:	4824      	ldr	r0, [pc, #144]	; (800af18 <netif_add+0x17c>)
 800ae86:	f009 f86f 	bl	8013f68 <iprintf>
        num_netifs++;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	2bff      	cmp	r3, #255	; 0xff
 800ae94:	dd06      	ble.n	800aea4 <netif_add+0x108>
 800ae96:	4b1e      	ldr	r3, [pc, #120]	; (800af10 <netif_add+0x174>)
 800ae98:	f240 128d 	movw	r2, #397	; 0x18d
 800ae9c:	4925      	ldr	r1, [pc, #148]	; (800af34 <netif_add+0x198>)
 800ae9e:	481e      	ldr	r0, [pc, #120]	; (800af18 <netif_add+0x17c>)
 800aea0:	f009 f862 	bl	8013f68 <iprintf>
        if (netif2->num == netif->num) {
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d108      	bne.n	800aec6 <netif_add+0x12a>
          netif->num++;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeba:	3301      	adds	r3, #1
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aec4:	e005      	b.n	800aed2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1d0      	bne.n	800ae74 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1be      	bne.n	800ae56 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aede:	2bfe      	cmp	r3, #254	; 0xfe
 800aee0:	d103      	bne.n	800aeea <netif_add+0x14e>
    netif_num = 0;
 800aee2:	4b11      	ldr	r3, [pc, #68]	; (800af28 <netif_add+0x18c>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e006      	b.n	800aef8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aef0:	3301      	adds	r3, #1
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <netif_add+0x18c>)
 800aef6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aef8:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <netif_add+0x190>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af00:	4a0a      	ldr	r2, [pc, #40]	; (800af2c <netif_add+0x190>)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af06:	68fb      	ldr	r3, [r7, #12]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	080154a8 	.word	0x080154a8
 800af14:	0801553c 	.word	0x0801553c
 800af18:	080154f8 	.word	0x080154f8
 800af1c:	08015558 	.word	0x08015558
 800af20:	08017c08 	.word	0x08017c08
 800af24:	0800b347 	.word	0x0800b347
 800af28:	20008c78 	.word	0x20008c78
 800af2c:	20008c70 	.word	0x20008c70
 800af30:	0801557c 	.word	0x0801557c
 800af34:	08015590 	.word	0x08015590

0800af38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f002 fb23 	bl	800d590 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f006 fbc5 	bl	80116dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <netif_do_set_ipaddr+0x20>
 800af6e:	4b1d      	ldr	r3, [pc, #116]	; (800afe4 <netif_do_set_ipaddr+0x88>)
 800af70:	f240 12cb 	movw	r2, #459	; 0x1cb
 800af74:	491c      	ldr	r1, [pc, #112]	; (800afe8 <netif_do_set_ipaddr+0x8c>)
 800af76:	481d      	ldr	r0, [pc, #116]	; (800afec <netif_do_set_ipaddr+0x90>)
 800af78:	f008 fff6 	bl	8013f68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <netif_do_set_ipaddr+0x34>
 800af82:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <netif_do_set_ipaddr+0x88>)
 800af84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800af88:	4917      	ldr	r1, [pc, #92]	; (800afe8 <netif_do_set_ipaddr+0x8c>)
 800af8a:	4818      	ldr	r0, [pc, #96]	; (800afec <netif_do_set_ipaddr+0x90>)
 800af8c:	f008 ffec 	bl	8013f68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3304      	adds	r3, #4
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d01c      	beq.n	800afd8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3304      	adds	r3, #4
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800afae:	f107 0314 	add.w	r3, r7, #20
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ffbf 	bl	800af38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <netif_do_set_ipaddr+0x6a>
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	e000      	b.n	800afc8 <netif_do_set_ipaddr+0x6c>
 800afc6:	2300      	movs	r3, #0
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800afcc:	2101      	movs	r1, #1
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 f8d2 	bl	800b178 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	080154a8 	.word	0x080154a8
 800afe8:	080155c0 	.word	0x080155c0
 800afec:	080154f8 	.word	0x080154f8

0800aff0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3308      	adds	r3, #8
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d00a      	beq.n	800b020 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <netif_do_set_netmask+0x26>
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	e000      	b.n	800b018 <netif_do_set_netmask+0x28>
 800b016:	2300      	movs	r3, #0
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b02e:	b480      	push	{r7}
 800b030:	b085      	sub	sp, #20
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	330c      	adds	r3, #12
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d00a      	beq.n	800b05e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <netif_do_set_gw+0x26>
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	e000      	b.n	800b056 <netif_do_set_gw+0x28>
 800b054:	2300      	movs	r3, #0
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b088:	4b1c      	ldr	r3, [pc, #112]	; (800b0fc <netif_set_addr+0x90>)
 800b08a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b092:	4b1a      	ldr	r3, [pc, #104]	; (800b0fc <netif_set_addr+0x90>)
 800b094:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b09c:	4b17      	ldr	r3, [pc, #92]	; (800b0fc <netif_set_addr+0x90>)
 800b09e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <netif_set_addr+0x42>
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <netif_set_addr+0x46>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e000      	b.n	800b0b4 <netif_set_addr+0x48>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d006      	beq.n	800b0ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0bc:	f107 0310 	add.w	r3, r7, #16
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff ff49 	bl	800af5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff ff8e 	bl	800aff0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff ffa8 	bl	800b02e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0e4:	f107 0310 	add.w	r3, r7, #16
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff ff35 	bl	800af5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b0f2:	bf00      	nop
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	08017c08 	.word	0x08017c08

0800b100 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b108:	4a04      	ldr	r2, [pc, #16]	; (800b11c <netif_set_default+0x1c>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b10e:	bf00      	nop
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	20008c74 	.word	0x20008c74

0800b120 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <netif_set_up+0x1e>
 800b12e:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <netif_set_up+0x4c>)
 800b130:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b134:	490e      	ldr	r1, [pc, #56]	; (800b170 <netif_set_up+0x50>)
 800b136:	480f      	ldr	r0, [pc, #60]	; (800b174 <netif_set_up+0x54>)
 800b138:	f008 ff16 	bl	8013f68 <iprintf>
 800b13c:	e013      	b.n	800b166 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10c      	bne.n	800b166 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	b2da      	uxtb	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b15e:	2103      	movs	r1, #3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f809 	bl	800b178 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	080154a8 	.word	0x080154a8
 800b170:	08015630 	.word	0x08015630
 800b174:	080154f8 	.word	0x080154f8

0800b178 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <netif_issue_reports+0x20>
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <netif_issue_reports+0x74>)
 800b18c:	f240 326d 	movw	r2, #877	; 0x36d
 800b190:	4917      	ldr	r1, [pc, #92]	; (800b1f0 <netif_issue_reports+0x78>)
 800b192:	4818      	ldr	r0, [pc, #96]	; (800b1f4 <netif_issue_reports+0x7c>)
 800b194:	f008 fee8 	bl	8013f68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01e      	beq.n	800b1e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d017      	beq.n	800b1e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d013      	beq.n	800b1e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00e      	beq.n	800b1e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f007 f9e7 	bl	80125b0 <etharp_request>
 800b1e2:	e000      	b.n	800b1e6 <netif_issue_reports+0x6e>
    return;
 800b1e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	080154a8 	.word	0x080154a8
 800b1f0:	0801564c 	.word	0x0801564c
 800b1f4:	080154f8 	.word	0x080154f8

0800b1f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d107      	bne.n	800b216 <netif_set_down+0x1e>
 800b206:	4b12      	ldr	r3, [pc, #72]	; (800b250 <netif_set_down+0x58>)
 800b208:	f240 329b 	movw	r2, #923	; 0x39b
 800b20c:	4911      	ldr	r1, [pc, #68]	; (800b254 <netif_set_down+0x5c>)
 800b20e:	4812      	ldr	r0, [pc, #72]	; (800b258 <netif_set_down+0x60>)
 800b210:	f008 feaa 	bl	8013f68 <iprintf>
 800b214:	e019      	b.n	800b24a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d012      	beq.n	800b24a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f006 fd71 	bl	8011d2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	080154a8 	.word	0x080154a8
 800b254:	08015670 	.word	0x08015670
 800b258:	080154f8 	.word	0x080154f8

0800b25c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d107      	bne.n	800b27a <netif_set_link_up+0x1e>
 800b26a:	4b13      	ldr	r3, [pc, #76]	; (800b2b8 <netif_set_link_up+0x5c>)
 800b26c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b270:	4912      	ldr	r1, [pc, #72]	; (800b2bc <netif_set_link_up+0x60>)
 800b272:	4813      	ldr	r0, [pc, #76]	; (800b2c0 <netif_set_link_up+0x64>)
 800b274:	f008 fe78 	bl	8013f68 <iprintf>
 800b278:	e01b      	b.n	800b2b2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	d114      	bne.n	800b2b2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b28e:	f043 0304 	orr.w	r3, r3, #4
 800b292:	b2da      	uxtb	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b29a:	2103      	movs	r1, #3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ff6b 	bl	800b178 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <netif_set_link_up+0x56>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	080154a8 	.word	0x080154a8
 800b2bc:	08015690 	.word	0x08015690
 800b2c0:	080154f8 	.word	0x080154f8

0800b2c4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d107      	bne.n	800b2e2 <netif_set_link_down+0x1e>
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <netif_set_link_down+0x54>)
 800b2d4:	f240 4206 	movw	r2, #1030	; 0x406
 800b2d8:	4910      	ldr	r1, [pc, #64]	; (800b31c <netif_set_link_down+0x58>)
 800b2da:	4811      	ldr	r0, [pc, #68]	; (800b320 <netif_set_link_down+0x5c>)
 800b2dc:	f008 fe44 	bl	8013f68 <iprintf>
 800b2e0:	e017      	b.n	800b312 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d010      	beq.n	800b312 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2f6:	f023 0304 	bic.w	r3, r3, #4
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <netif_set_link_down+0x4e>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	080154a8 	.word	0x080154a8
 800b31c:	080156b4 	.word	0x080156b4
 800b320:	080154f8 	.word	0x080154f8

0800b324 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	61da      	str	r2, [r3, #28]
  }
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b352:	f06f 030b 	mvn.w	r3, #11
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
	...

0800b364 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d013      	beq.n	800b39c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b374:	4b0d      	ldr	r3, [pc, #52]	; (800b3ac <netif_get_by_index+0x48>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e00c      	b.n	800b396 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b382:	3301      	adds	r3, #1
 800b384:	b2db      	uxtb	r3, r3
 800b386:	79fa      	ldrb	r2, [r7, #7]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d101      	bne.n	800b390 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	e006      	b.n	800b39e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1ef      	bne.n	800b37c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20008c70 	.word	0x20008c70

0800b3b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b3b4:	4b03      	ldr	r3, [pc, #12]	; (800b3c4 <pbuf_pool_is_empty+0x14>)
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3ba:	bf00      	nop
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	20008c79 	.word	0x20008c79

0800b3c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	80fb      	strh	r3, [r7, #6]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	88fa      	ldrh	r2, [r7, #6]
 800b3ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88ba      	ldrh	r2, [r7, #4]
 800b3f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b3f6:	8b3b      	ldrh	r3, [r7, #24]
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	7f3a      	ldrb	r2, [r7, #28]
 800b402:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2201      	movs	r2, #1
 800b408:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	73da      	strb	r2, [r3, #15]
}
 800b410:	bf00      	nop
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08c      	sub	sp, #48	; 0x30
 800b420:	af02      	add	r7, sp, #8
 800b422:	4603      	mov	r3, r0
 800b424:	71fb      	strb	r3, [r7, #7]
 800b426:	460b      	mov	r3, r1
 800b428:	80bb      	strh	r3, [r7, #4]
 800b42a:	4613      	mov	r3, r2
 800b42c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b432:	887b      	ldrh	r3, [r7, #2]
 800b434:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b438:	d07f      	beq.n	800b53a <pbuf_alloc+0x11e>
 800b43a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b43e:	f300 80c8 	bgt.w	800b5d2 <pbuf_alloc+0x1b6>
 800b442:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b446:	d010      	beq.n	800b46a <pbuf_alloc+0x4e>
 800b448:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b44c:	f300 80c1 	bgt.w	800b5d2 <pbuf_alloc+0x1b6>
 800b450:	2b01      	cmp	r3, #1
 800b452:	d002      	beq.n	800b45a <pbuf_alloc+0x3e>
 800b454:	2b41      	cmp	r3, #65	; 0x41
 800b456:	f040 80bc 	bne.w	800b5d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b45a:	887a      	ldrh	r2, [r7, #2]
 800b45c:	88bb      	ldrh	r3, [r7, #4]
 800b45e:	4619      	mov	r1, r3
 800b460:	2000      	movs	r0, #0
 800b462:	f000 f8d1 	bl	800b608 <pbuf_alloc_reference>
 800b466:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b468:	e0bd      	b.n	800b5e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b472:	88bb      	ldrh	r3, [r7, #4]
 800b474:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b476:	2008      	movs	r0, #8
 800b478:	f7ff fbee 	bl	800ac58 <memp_malloc>
 800b47c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d109      	bne.n	800b498 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b484:	f7ff ff94 	bl	800b3b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b48e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b490:	f000 faa8 	bl	800b9e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	e0a7      	b.n	800b5e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b49a:	3303      	adds	r3, #3
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	f023 0303 	bic.w	r3, r3, #3
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	8b7a      	ldrh	r2, [r7, #26]
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	bf28      	it	cs
 800b4b0:	4613      	movcs	r3, r2
 800b4b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4b6:	3310      	adds	r3, #16
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	3303      	adds	r3, #3
 800b4be:	f023 0303 	bic.w	r3, r3, #3
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	89f9      	ldrh	r1, [r7, #14]
 800b4c6:	8b7a      	ldrh	r2, [r7, #26]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	887b      	ldrh	r3, [r7, #2]
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	6938      	ldr	r0, [r7, #16]
 800b4d6:	f7ff ff77 	bl	800b3c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d006      	beq.n	800b4f4 <pbuf_alloc+0xd8>
 800b4e6:	4b42      	ldr	r3, [pc, #264]	; (800b5f0 <pbuf_alloc+0x1d4>)
 800b4e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ec:	4941      	ldr	r1, [pc, #260]	; (800b5f4 <pbuf_alloc+0x1d8>)
 800b4ee:	4842      	ldr	r0, [pc, #264]	; (800b5f8 <pbuf_alloc+0x1dc>)
 800b4f0:	f008 fd3a 	bl	8013f68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4f6:	3303      	adds	r3, #3
 800b4f8:	f023 0303 	bic.w	r3, r3, #3
 800b4fc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b500:	d106      	bne.n	800b510 <pbuf_alloc+0xf4>
 800b502:	4b3b      	ldr	r3, [pc, #236]	; (800b5f0 <pbuf_alloc+0x1d4>)
 800b504:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b508:	493c      	ldr	r1, [pc, #240]	; (800b5fc <pbuf_alloc+0x1e0>)
 800b50a:	483b      	ldr	r0, [pc, #236]	; (800b5f8 <pbuf_alloc+0x1dc>)
 800b50c:	f008 fd2c 	bl	8013f68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
 800b51a:	e002      	b.n	800b522 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b526:	8b7a      	ldrh	r2, [r7, #26]
 800b528:	89fb      	ldrh	r3, [r7, #14]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b532:	8b7b      	ldrh	r3, [r7, #26]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d19e      	bne.n	800b476 <pbuf_alloc+0x5a>
      break;
 800b538:	e055      	b.n	800b5e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b53a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b53c:	3303      	adds	r3, #3
 800b53e:	b29b      	uxth	r3, r3
 800b540:	f023 0303 	bic.w	r3, r3, #3
 800b544:	b29a      	uxth	r2, r3
 800b546:	88bb      	ldrh	r3, [r7, #4]
 800b548:	3303      	adds	r3, #3
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	f023 0303 	bic.w	r3, r3, #3
 800b550:	b29b      	uxth	r3, r3
 800b552:	4413      	add	r3, r2
 800b554:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b556:	8b3b      	ldrh	r3, [r7, #24]
 800b558:	3310      	adds	r3, #16
 800b55a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b55c:	8b3a      	ldrh	r2, [r7, #24]
 800b55e:	88bb      	ldrh	r3, [r7, #4]
 800b560:	3303      	adds	r3, #3
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	429a      	cmp	r2, r3
 800b568:	d306      	bcc.n	800b578 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b56a:	8afa      	ldrh	r2, [r7, #22]
 800b56c:	88bb      	ldrh	r3, [r7, #4]
 800b56e:	3303      	adds	r3, #3
 800b570:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b574:	429a      	cmp	r2, r3
 800b576:	d201      	bcs.n	800b57c <pbuf_alloc+0x160>
        return NULL;
 800b578:	2300      	movs	r3, #0
 800b57a:	e035      	b.n	800b5e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b57c:	8afb      	ldrh	r3, [r7, #22]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff f9da 	bl	800a938 <mem_malloc>
 800b584:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <pbuf_alloc+0x174>
        return NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e02b      	b.n	800b5e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b592:	3310      	adds	r3, #16
 800b594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b596:	4413      	add	r3, r2
 800b598:	3303      	adds	r3, #3
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	4618      	mov	r0, r3
 800b5a0:	88b9      	ldrh	r1, [r7, #4]
 800b5a2:	88ba      	ldrh	r2, [r7, #4]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	887b      	ldrh	r3, [r7, #2]
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5b2:	f7ff ff09 	bl	800b3c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d010      	beq.n	800b5e4 <pbuf_alloc+0x1c8>
 800b5c2:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <pbuf_alloc+0x1d4>)
 800b5c4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b5c8:	490d      	ldr	r1, [pc, #52]	; (800b600 <pbuf_alloc+0x1e4>)
 800b5ca:	480b      	ldr	r0, [pc, #44]	; (800b5f8 <pbuf_alloc+0x1dc>)
 800b5cc:	f008 fccc 	bl	8013f68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b5d0:	e008      	b.n	800b5e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b5d2:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <pbuf_alloc+0x1d4>)
 800b5d4:	f240 1227 	movw	r2, #295	; 0x127
 800b5d8:	490a      	ldr	r1, [pc, #40]	; (800b604 <pbuf_alloc+0x1e8>)
 800b5da:	4807      	ldr	r0, [pc, #28]	; (800b5f8 <pbuf_alloc+0x1dc>)
 800b5dc:	f008 fcc4 	bl	8013f68 <iprintf>
      return NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	e001      	b.n	800b5e8 <pbuf_alloc+0x1cc>
      break;
 800b5e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3728      	adds	r7, #40	; 0x28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	080156d8 	.word	0x080156d8
 800b5f4:	08015708 	.word	0x08015708
 800b5f8:	08015738 	.word	0x08015738
 800b5fc:	08015760 	.word	0x08015760
 800b600:	08015794 	.word	0x08015794
 800b604:	080157c0 	.word	0x080157c0

0800b608 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	807b      	strh	r3, [r7, #2]
 800b614:	4613      	mov	r3, r2
 800b616:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b618:	883b      	ldrh	r3, [r7, #0]
 800b61a:	2b41      	cmp	r3, #65	; 0x41
 800b61c:	d009      	beq.n	800b632 <pbuf_alloc_reference+0x2a>
 800b61e:	883b      	ldrh	r3, [r7, #0]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d006      	beq.n	800b632 <pbuf_alloc_reference+0x2a>
 800b624:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <pbuf_alloc_reference+0x5c>)
 800b626:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b62a:	490f      	ldr	r1, [pc, #60]	; (800b668 <pbuf_alloc_reference+0x60>)
 800b62c:	480f      	ldr	r0, [pc, #60]	; (800b66c <pbuf_alloc_reference+0x64>)
 800b62e:	f008 fc9b 	bl	8013f68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b632:	2007      	movs	r0, #7
 800b634:	f7ff fb10 	bl	800ac58 <memp_malloc>
 800b638:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	e00b      	b.n	800b65c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b644:	8879      	ldrh	r1, [r7, #2]
 800b646:	887a      	ldrh	r2, [r7, #2]
 800b648:	2300      	movs	r3, #0
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	883b      	ldrh	r3, [r7, #0]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	460b      	mov	r3, r1
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff feb7 	bl	800b3c8 <pbuf_init_alloced_pbuf>
  return p;
 800b65a:	68fb      	ldr	r3, [r7, #12]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	080156d8 	.word	0x080156d8
 800b668:	080157dc 	.word	0x080157dc
 800b66c:	08015738 	.word	0x08015738

0800b670 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af02      	add	r7, sp, #8
 800b676:	607b      	str	r3, [r7, #4]
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
 800b67c:	460b      	mov	r3, r1
 800b67e:	81bb      	strh	r3, [r7, #12]
 800b680:	4613      	mov	r3, r2
 800b682:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b688:	8a7b      	ldrh	r3, [r7, #18]
 800b68a:	3303      	adds	r3, #3
 800b68c:	f023 0203 	bic.w	r2, r3, #3
 800b690:	89bb      	ldrh	r3, [r7, #12]
 800b692:	441a      	add	r2, r3
 800b694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b696:	429a      	cmp	r2, r3
 800b698:	d901      	bls.n	800b69e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e018      	b.n	800b6d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d007      	beq.n	800b6b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b6a4:	8a7b      	ldrh	r3, [r7, #18]
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	6a3a      	ldr	r2, [r7, #32]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	e001      	b.n	800b6b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	89b9      	ldrh	r1, [r7, #12]
 800b6bc:	89ba      	ldrh	r2, [r7, #12]
 800b6be:	2302      	movs	r3, #2
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	897b      	ldrh	r3, [r7, #10]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	6979      	ldr	r1, [r7, #20]
 800b6ca:	f7ff fe7d 	bl	800b3c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b6ce:	687b      	ldr	r3, [r7, #4]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <pbuf_realloc+0x20>
 800b6ea:	4b3a      	ldr	r3, [pc, #232]	; (800b7d4 <pbuf_realloc+0xfc>)
 800b6ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b6f0:	4939      	ldr	r1, [pc, #228]	; (800b7d8 <pbuf_realloc+0x100>)
 800b6f2:	483a      	ldr	r0, [pc, #232]	; (800b7dc <pbuf_realloc+0x104>)
 800b6f4:	f008 fc38 	bl	8013f68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	891b      	ldrh	r3, [r3, #8]
 800b6fc:	887a      	ldrh	r2, [r7, #2]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d263      	bcs.n	800b7ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	891a      	ldrh	r2, [r3, #8]
 800b706:	887b      	ldrh	r3, [r7, #2]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b70c:	887b      	ldrh	r3, [r7, #2]
 800b70e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b714:	e018      	b.n	800b748 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	895b      	ldrh	r3, [r3, #10]
 800b71a:	897a      	ldrh	r2, [r7, #10]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	891a      	ldrh	r2, [r3, #8]
 800b724:	893b      	ldrh	r3, [r7, #8]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <pbuf_realloc+0x70>
 800b73a:	4b26      	ldr	r3, [pc, #152]	; (800b7d4 <pbuf_realloc+0xfc>)
 800b73c:	f240 12af 	movw	r2, #431	; 0x1af
 800b740:	4927      	ldr	r1, [pc, #156]	; (800b7e0 <pbuf_realloc+0x108>)
 800b742:	4826      	ldr	r0, [pc, #152]	; (800b7dc <pbuf_realloc+0x104>)
 800b744:	f008 fc10 	bl	8013f68 <iprintf>
  while (rem_len > q->len) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	895b      	ldrh	r3, [r3, #10]
 800b74c:	897a      	ldrh	r2, [r7, #10]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d8e1      	bhi.n	800b716 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	7b1b      	ldrb	r3, [r3, #12]
 800b756:	f003 030f 	and.w	r3, r3, #15
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d121      	bne.n	800b7a2 <pbuf_realloc+0xca>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	897a      	ldrh	r2, [r7, #10]
 800b764:	429a      	cmp	r2, r3
 800b766:	d01c      	beq.n	800b7a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	7b5b      	ldrb	r3, [r3, #13]
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d116      	bne.n	800b7a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	897b      	ldrh	r3, [r7, #10]
 800b780:	4413      	add	r3, r2
 800b782:	b29b      	uxth	r3, r3
 800b784:	4619      	mov	r1, r3
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f7fe ffda 	bl	800a740 <mem_trim>
 800b78c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <pbuf_realloc+0xca>
 800b794:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <pbuf_realloc+0xfc>)
 800b796:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b79a:	4912      	ldr	r1, [pc, #72]	; (800b7e4 <pbuf_realloc+0x10c>)
 800b79c:	480f      	ldr	r0, [pc, #60]	; (800b7dc <pbuf_realloc+0x104>)
 800b79e:	f008 fbe3 	bl	8013f68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	897a      	ldrh	r2, [r7, #10]
 800b7a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	895a      	ldrh	r2, [r3, #10]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d004      	beq.n	800b7c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f911 	bl	800b9e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	e000      	b.n	800b7cc <pbuf_realloc+0xf4>
    return;
 800b7ca:	bf00      	nop

}
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	080156d8 	.word	0x080156d8
 800b7d8:	080157f0 	.word	0x080157f0
 800b7dc:	08015738 	.word	0x08015738
 800b7e0:	08015808 	.word	0x08015808
 800b7e4:	08015820 	.word	0x08015820

0800b7e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <pbuf_add_header_impl+0x22>
 800b7fc:	4b2b      	ldr	r3, [pc, #172]	; (800b8ac <pbuf_add_header_impl+0xc4>)
 800b7fe:	f240 12df 	movw	r2, #479	; 0x1df
 800b802:	492b      	ldr	r1, [pc, #172]	; (800b8b0 <pbuf_add_header_impl+0xc8>)
 800b804:	482b      	ldr	r0, [pc, #172]	; (800b8b4 <pbuf_add_header_impl+0xcc>)
 800b806:	f008 fbaf 	bl	8013f68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <pbuf_add_header_impl+0x30>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b816:	d301      	bcc.n	800b81c <pbuf_add_header_impl+0x34>
    return 1;
 800b818:	2301      	movs	r3, #1
 800b81a:	e043      	b.n	800b8a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <pbuf_add_header_impl+0x3e>
    return 0;
 800b822:	2300      	movs	r3, #0
 800b824:	e03e      	b.n	800b8a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	891a      	ldrh	r2, [r3, #8]
 800b82e:	8a7b      	ldrh	r3, [r7, #18]
 800b830:	4413      	add	r3, r2
 800b832:	b29b      	uxth	r3, r3
 800b834:	8a7a      	ldrh	r2, [r7, #18]
 800b836:	429a      	cmp	r2, r3
 800b838:	d901      	bls.n	800b83e <pbuf_add_header_impl+0x56>
    return 1;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e032      	b.n	800b8a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	7b1b      	ldrb	r3, [r3, #12]
 800b842:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b844:	8a3b      	ldrh	r3, [r7, #16]
 800b846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00c      	beq.n	800b868 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	425b      	negs	r3, r3
 800b856:	4413      	add	r3, r2
 800b858:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3310      	adds	r3, #16
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d20d      	bcs.n	800b880 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b864:	2301      	movs	r3, #1
 800b866:	e01d      	b.n	800b8a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d006      	beq.n	800b87c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	425b      	negs	r3, r3
 800b876:	4413      	add	r3, r2
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	e001      	b.n	800b880 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e011      	b.n	800b8a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	895a      	ldrh	r2, [r3, #10]
 800b88a:	8a7b      	ldrh	r3, [r7, #18]
 800b88c:	4413      	add	r3, r2
 800b88e:	b29a      	uxth	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	891a      	ldrh	r2, [r3, #8]
 800b898:	8a7b      	ldrh	r3, [r7, #18]
 800b89a:	4413      	add	r3, r2
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	080156d8 	.word	0x080156d8
 800b8b0:	0801583c 	.word	0x0801583c
 800b8b4:	08015738 	.word	0x08015738

0800b8b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff ff8e 	bl	800b7e8 <pbuf_add_header_impl>
 800b8cc:	4603      	mov	r3, r0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <pbuf_remove_header+0x1e>
 800b8e8:	4b20      	ldr	r3, [pc, #128]	; (800b96c <pbuf_remove_header+0x94>)
 800b8ea:	f240 224b 	movw	r2, #587	; 0x24b
 800b8ee:	4920      	ldr	r1, [pc, #128]	; (800b970 <pbuf_remove_header+0x98>)
 800b8f0:	4820      	ldr	r0, [pc, #128]	; (800b974 <pbuf_remove_header+0x9c>)
 800b8f2:	f008 fb39 	bl	8013f68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <pbuf_remove_header+0x2c>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b902:	d301      	bcc.n	800b908 <pbuf_remove_header+0x30>
    return 1;
 800b904:	2301      	movs	r3, #1
 800b906:	e02c      	b.n	800b962 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <pbuf_remove_header+0x3a>
    return 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	e027      	b.n	800b962 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	895b      	ldrh	r3, [r3, #10]
 800b91a:	89fa      	ldrh	r2, [r7, #14]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d908      	bls.n	800b932 <pbuf_remove_header+0x5a>
 800b920:	4b12      	ldr	r3, [pc, #72]	; (800b96c <pbuf_remove_header+0x94>)
 800b922:	f240 2255 	movw	r2, #597	; 0x255
 800b926:	4914      	ldr	r1, [pc, #80]	; (800b978 <pbuf_remove_header+0xa0>)
 800b928:	4812      	ldr	r0, [pc, #72]	; (800b974 <pbuf_remove_header+0x9c>)
 800b92a:	f008 fb1d 	bl	8013f68 <iprintf>
 800b92e:	2301      	movs	r3, #1
 800b930:	e017      	b.n	800b962 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	441a      	add	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	895a      	ldrh	r2, [r3, #10]
 800b948:	89fb      	ldrh	r3, [r7, #14]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	891a      	ldrh	r2, [r3, #8]
 800b956:	89fb      	ldrh	r3, [r7, #14]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	080156d8 	.word	0x080156d8
 800b970:	0801583c 	.word	0x0801583c
 800b974:	08015738 	.word	0x08015738
 800b978:	08015848 	.word	0x08015848

0800b97c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	807b      	strh	r3, [r7, #2]
 800b988:	4613      	mov	r3, r2
 800b98a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b98c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da08      	bge.n	800b9a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b998:	425b      	negs	r3, r3
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff ff9b 	bl	800b8d8 <pbuf_remove_header>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	e007      	b.n	800b9b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b9a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9aa:	787a      	ldrb	r2, [r7, #1]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff ff1a 	bl	800b7e8 <pbuf_add_header_impl>
 800b9b4:	4603      	mov	r3, r0
  }
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b9ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff ffd2 	bl	800b97c <pbuf_header_impl>
 800b9d8:	4603      	mov	r3, r0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10b      	bne.n	800ba0a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d106      	bne.n	800ba06 <pbuf_free+0x22>
 800b9f8:	4b38      	ldr	r3, [pc, #224]	; (800badc <pbuf_free+0xf8>)
 800b9fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b9fe:	4938      	ldr	r1, [pc, #224]	; (800bae0 <pbuf_free+0xfc>)
 800ba00:	4838      	ldr	r0, [pc, #224]	; (800bae4 <pbuf_free+0x100>)
 800ba02:	f008 fab1 	bl	8013f68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e063      	b.n	800bad2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba0e:	e05c      	b.n	800baca <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	7b9b      	ldrb	r3, [r3, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d106      	bne.n	800ba26 <pbuf_free+0x42>
 800ba18:	4b30      	ldr	r3, [pc, #192]	; (800badc <pbuf_free+0xf8>)
 800ba1a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ba1e:	4932      	ldr	r1, [pc, #200]	; (800bae8 <pbuf_free+0x104>)
 800ba20:	4830      	ldr	r0, [pc, #192]	; (800bae4 <pbuf_free+0x100>)
 800ba22:	f008 faa1 	bl	8013f68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	7b9b      	ldrb	r3, [r3, #14]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	739a      	strb	r2, [r3, #14]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7b9b      	ldrb	r3, [r3, #14]
 800ba36:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d143      	bne.n	800bac6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	7b1b      	ldrb	r3, [r3, #12]
 800ba48:	f003 030f 	and.w	r3, r3, #15
 800ba4c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	7b5b      	ldrb	r3, [r3, #13]
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d011      	beq.n	800ba7e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <pbuf_free+0x90>
 800ba66:	4b1d      	ldr	r3, [pc, #116]	; (800badc <pbuf_free+0xf8>)
 800ba68:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ba6c:	491f      	ldr	r1, [pc, #124]	; (800baec <pbuf_free+0x108>)
 800ba6e:	481d      	ldr	r0, [pc, #116]	; (800bae4 <pbuf_free+0x100>)
 800ba70:	f008 fa7a 	bl	8013f68 <iprintf>
        pc->custom_free_function(p);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	4798      	blx	r3
 800ba7c:	e01d      	b.n	800baba <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d104      	bne.n	800ba8e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	2008      	movs	r0, #8
 800ba88:	f7ff f956 	bl	800ad38 <memp_free>
 800ba8c:	e015      	b.n	800baba <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d104      	bne.n	800ba9e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	2007      	movs	r0, #7
 800ba98:	f7ff f94e 	bl	800ad38 <memp_free>
 800ba9c:	e00d      	b.n	800baba <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <pbuf_free+0xc8>
          mem_free(p);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fe fde1 	bl	800a66c <mem_free>
 800baaa:	e006      	b.n	800baba <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800baac:	4b0b      	ldr	r3, [pc, #44]	; (800badc <pbuf_free+0xf8>)
 800baae:	f240 320f 	movw	r2, #783	; 0x30f
 800bab2:	490f      	ldr	r1, [pc, #60]	; (800baf0 <pbuf_free+0x10c>)
 800bab4:	480b      	ldr	r0, [pc, #44]	; (800bae4 <pbuf_free+0x100>)
 800bab6:	f008 fa57 	bl	8013f68 <iprintf>
        }
      }
      count++;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	3301      	adds	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	607b      	str	r3, [r7, #4]
 800bac4:	e001      	b.n	800baca <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d19f      	bne.n	800ba10 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	080156d8 	.word	0x080156d8
 800bae0:	0801583c 	.word	0x0801583c
 800bae4:	08015738 	.word	0x08015738
 800bae8:	08015868 	.word	0x08015868
 800baec:	08015880 	.word	0x08015880
 800baf0:	080158a4 	.word	0x080158a4

0800baf4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb00:	e005      	b.n	800bb0e <pbuf_clen+0x1a>
    ++len;
 800bb02:	89fb      	ldrh	r3, [r7, #14]
 800bb04:	3301      	adds	r3, #1
 800bb06:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1f6      	bne.n	800bb02 <pbuf_clen+0xe>
  }
  return len;
 800bb14:	89fb      	ldrh	r3, [r7, #14]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d010      	beq.n	800bb54 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7b9b      	ldrb	r3, [r3, #14]
 800bb36:	3301      	adds	r3, #1
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7b9b      	ldrb	r3, [r3, #14]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d106      	bne.n	800bb54 <pbuf_ref+0x30>
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <pbuf_ref+0x38>)
 800bb48:	f240 3242 	movw	r2, #834	; 0x342
 800bb4c:	4904      	ldr	r1, [pc, #16]	; (800bb60 <pbuf_ref+0x3c>)
 800bb4e:	4805      	ldr	r0, [pc, #20]	; (800bb64 <pbuf_ref+0x40>)
 800bb50:	f008 fa0a 	bl	8013f68 <iprintf>
  }
}
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	080156d8 	.word	0x080156d8
 800bb60:	080158b8 	.word	0x080158b8
 800bb64:	08015738 	.word	0x08015738

0800bb68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <pbuf_cat+0x16>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d107      	bne.n	800bb8e <pbuf_cat+0x26>
 800bb7e:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <pbuf_cat+0x98>)
 800bb80:	f240 3259 	movw	r2, #857	; 0x359
 800bb84:	491f      	ldr	r1, [pc, #124]	; (800bc04 <pbuf_cat+0x9c>)
 800bb86:	4820      	ldr	r0, [pc, #128]	; (800bc08 <pbuf_cat+0xa0>)
 800bb88:	f008 f9ee 	bl	8013f68 <iprintf>
 800bb8c:	e034      	b.n	800bbf8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60fb      	str	r3, [r7, #12]
 800bb92:	e00a      	b.n	800bbaa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	891a      	ldrh	r2, [r3, #8]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	891b      	ldrh	r3, [r3, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1f0      	bne.n	800bb94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	891a      	ldrh	r2, [r3, #8]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	895b      	ldrh	r3, [r3, #10]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d006      	beq.n	800bbcc <pbuf_cat+0x64>
 800bbbe:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <pbuf_cat+0x98>)
 800bbc0:	f240 3262 	movw	r2, #866	; 0x362
 800bbc4:	4911      	ldr	r1, [pc, #68]	; (800bc0c <pbuf_cat+0xa4>)
 800bbc6:	4810      	ldr	r0, [pc, #64]	; (800bc08 <pbuf_cat+0xa0>)
 800bbc8:	f008 f9ce 	bl	8013f68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d006      	beq.n	800bbe2 <pbuf_cat+0x7a>
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <pbuf_cat+0x98>)
 800bbd6:	f240 3263 	movw	r2, #867	; 0x363
 800bbda:	490d      	ldr	r1, [pc, #52]	; (800bc10 <pbuf_cat+0xa8>)
 800bbdc:	480a      	ldr	r0, [pc, #40]	; (800bc08 <pbuf_cat+0xa0>)
 800bbde:	f008 f9c3 	bl	8013f68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	891a      	ldrh	r2, [r3, #8]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	891b      	ldrh	r3, [r3, #8]
 800bbea:	4413      	add	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	080156d8 	.word	0x080156d8
 800bc04:	080158cc 	.word	0x080158cc
 800bc08:	08015738 	.word	0x08015738
 800bc0c:	08015904 	.word	0x08015904
 800bc10:	08015934 	.word	0x08015934

0800bc14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	2300      	movs	r3, #0
 800bc24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d008      	beq.n	800bc3e <pbuf_copy+0x2a>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d005      	beq.n	800bc3e <pbuf_copy+0x2a>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	891a      	ldrh	r2, [r3, #8]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	891b      	ldrh	r3, [r3, #8]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d209      	bcs.n	800bc52 <pbuf_copy+0x3e>
 800bc3e:	4b57      	ldr	r3, [pc, #348]	; (800bd9c <pbuf_copy+0x188>)
 800bc40:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bc44:	4956      	ldr	r1, [pc, #344]	; (800bda0 <pbuf_copy+0x18c>)
 800bc46:	4857      	ldr	r0, [pc, #348]	; (800bda4 <pbuf_copy+0x190>)
 800bc48:	f008 f98e 	bl	8013f68 <iprintf>
 800bc4c:	f06f 030f 	mvn.w	r3, #15
 800bc50:	e09f      	b.n	800bd92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	895b      	ldrh	r3, [r3, #10]
 800bc56:	461a      	mov	r2, r3
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	895b      	ldrh	r3, [r3, #10]
 800bc60:	4619      	mov	r1, r3
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	1acb      	subs	r3, r1, r3
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d306      	bcc.n	800bc78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	895b      	ldrh	r3, [r3, #10]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e005      	b.n	800bc84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	895b      	ldrh	r3, [r3, #10]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	18d0      	adds	r0, r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	4413      	add	r3, r2
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4619      	mov	r1, r3
 800bc98:	f008 f950 	bl	8013f3c <memcpy>
    offset_to += len;
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4413      	add	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	895b      	ldrh	r3, [r3, #10]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d906      	bls.n	800bcc6 <pbuf_copy+0xb2>
 800bcb8:	4b38      	ldr	r3, [pc, #224]	; (800bd9c <pbuf_copy+0x188>)
 800bcba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bcbe:	493a      	ldr	r1, [pc, #232]	; (800bda8 <pbuf_copy+0x194>)
 800bcc0:	4838      	ldr	r0, [pc, #224]	; (800bda4 <pbuf_copy+0x190>)
 800bcc2:	f008 f951 	bl	8013f68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	895b      	ldrh	r3, [r3, #10]
 800bcca:	461a      	mov	r2, r3
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d906      	bls.n	800bce0 <pbuf_copy+0xcc>
 800bcd2:	4b32      	ldr	r3, [pc, #200]	; (800bd9c <pbuf_copy+0x188>)
 800bcd4:	f240 32da 	movw	r2, #986	; 0x3da
 800bcd8:	4934      	ldr	r1, [pc, #208]	; (800bdac <pbuf_copy+0x198>)
 800bcda:	4832      	ldr	r0, [pc, #200]	; (800bda4 <pbuf_copy+0x190>)
 800bcdc:	f008 f944 	bl	8013f68 <iprintf>
    if (offset_from >= p_from->len) {
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	895b      	ldrh	r3, [r3, #10]
 800bce4:	461a      	mov	r2, r3
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d304      	bcc.n	800bcf6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	895b      	ldrh	r3, [r3, #10]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d114      	bne.n	800bd2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10c      	bne.n	800bd2c <pbuf_copy+0x118>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d009      	beq.n	800bd2c <pbuf_copy+0x118>
 800bd18:	4b20      	ldr	r3, [pc, #128]	; (800bd9c <pbuf_copy+0x188>)
 800bd1a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bd1e:	4924      	ldr	r1, [pc, #144]	; (800bdb0 <pbuf_copy+0x19c>)
 800bd20:	4820      	ldr	r0, [pc, #128]	; (800bda4 <pbuf_copy+0x190>)
 800bd22:	f008 f921 	bl	8013f68 <iprintf>
 800bd26:	f06f 030f 	mvn.w	r3, #15
 800bd2a:	e032      	b.n	800bd92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d013      	beq.n	800bd5a <pbuf_copy+0x146>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	895a      	ldrh	r2, [r3, #10]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	891b      	ldrh	r3, [r3, #8]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d10d      	bne.n	800bd5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d009      	beq.n	800bd5a <pbuf_copy+0x146>
 800bd46:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <pbuf_copy+0x188>)
 800bd48:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bd4c:	4919      	ldr	r1, [pc, #100]	; (800bdb4 <pbuf_copy+0x1a0>)
 800bd4e:	4815      	ldr	r0, [pc, #84]	; (800bda4 <pbuf_copy+0x190>)
 800bd50:	f008 f90a 	bl	8013f68 <iprintf>
 800bd54:	f06f 0305 	mvn.w	r3, #5
 800bd58:	e01b      	b.n	800bd92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d013      	beq.n	800bd88 <pbuf_copy+0x174>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	895a      	ldrh	r2, [r3, #10]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	891b      	ldrh	r3, [r3, #8]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d10d      	bne.n	800bd88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d009      	beq.n	800bd88 <pbuf_copy+0x174>
 800bd74:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <pbuf_copy+0x188>)
 800bd76:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bd7a:	490e      	ldr	r1, [pc, #56]	; (800bdb4 <pbuf_copy+0x1a0>)
 800bd7c:	4809      	ldr	r0, [pc, #36]	; (800bda4 <pbuf_copy+0x190>)
 800bd7e:	f008 f8f3 	bl	8013f68 <iprintf>
 800bd82:	f06f 0305 	mvn.w	r3, #5
 800bd86:	e004      	b.n	800bd92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f47f af61 	bne.w	800bc52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	080156d8 	.word	0x080156d8
 800bda0:	08015980 	.word	0x08015980
 800bda4:	08015738 	.word	0x08015738
 800bda8:	080159b0 	.word	0x080159b0
 800bdac:	080159c8 	.word	0x080159c8
 800bdb0:	080159e4 	.word	0x080159e4
 800bdb4:	080159f4 	.word	0x080159f4

0800bdb8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	80fb      	strh	r3, [r7, #6]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d108      	bne.n	800bdee <pbuf_copy_partial+0x36>
 800bddc:	4b2b      	ldr	r3, [pc, #172]	; (800be8c <pbuf_copy_partial+0xd4>)
 800bdde:	f240 420a 	movw	r2, #1034	; 0x40a
 800bde2:	492b      	ldr	r1, [pc, #172]	; (800be90 <pbuf_copy_partial+0xd8>)
 800bde4:	482b      	ldr	r0, [pc, #172]	; (800be94 <pbuf_copy_partial+0xdc>)
 800bde6:	f008 f8bf 	bl	8013f68 <iprintf>
 800bdea:	2300      	movs	r3, #0
 800bdec:	e04a      	b.n	800be84 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d108      	bne.n	800be06 <pbuf_copy_partial+0x4e>
 800bdf4:	4b25      	ldr	r3, [pc, #148]	; (800be8c <pbuf_copy_partial+0xd4>)
 800bdf6:	f240 420b 	movw	r2, #1035	; 0x40b
 800bdfa:	4927      	ldr	r1, [pc, #156]	; (800be98 <pbuf_copy_partial+0xe0>)
 800bdfc:	4825      	ldr	r0, [pc, #148]	; (800be94 <pbuf_copy_partial+0xdc>)
 800bdfe:	f008 f8b3 	bl	8013f68 <iprintf>
 800be02:	2300      	movs	r3, #0
 800be04:	e03e      	b.n	800be84 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	e034      	b.n	800be76 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be0c:	88bb      	ldrh	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00a      	beq.n	800be28 <pbuf_copy_partial+0x70>
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	895b      	ldrh	r3, [r3, #10]
 800be16:	88ba      	ldrh	r2, [r7, #4]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d305      	bcc.n	800be28 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	895b      	ldrh	r3, [r3, #10]
 800be20:	88ba      	ldrh	r2, [r7, #4]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	80bb      	strh	r3, [r7, #4]
 800be26:	e023      	b.n	800be70 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	895a      	ldrh	r2, [r3, #10]
 800be2c:	88bb      	ldrh	r3, [r7, #4]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800be32:	8b3a      	ldrh	r2, [r7, #24]
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	429a      	cmp	r2, r3
 800be38:	d901      	bls.n	800be3e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800be3a:	88fb      	ldrh	r3, [r7, #6]
 800be3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800be3e:	8b7b      	ldrh	r3, [r7, #26]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	18d0      	adds	r0, r2, r3
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	88bb      	ldrh	r3, [r7, #4]
 800be4a:	4413      	add	r3, r2
 800be4c:	8b3a      	ldrh	r2, [r7, #24]
 800be4e:	4619      	mov	r1, r3
 800be50:	f008 f874 	bl	8013f3c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800be54:	8afa      	ldrh	r2, [r7, #22]
 800be56:	8b3b      	ldrh	r3, [r7, #24]
 800be58:	4413      	add	r3, r2
 800be5a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800be5c:	8b7a      	ldrh	r2, [r7, #26]
 800be5e:	8b3b      	ldrh	r3, [r7, #24]
 800be60:	4413      	add	r3, r2
 800be62:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800be64:	88fa      	ldrh	r2, [r7, #6]
 800be66:	8b3b      	ldrh	r3, [r7, #24]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	61fb      	str	r3, [r7, #28]
 800be76:	88fb      	ldrh	r3, [r7, #6]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <pbuf_copy_partial+0xca>
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1c4      	bne.n	800be0c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800be82:	8afb      	ldrh	r3, [r7, #22]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3720      	adds	r7, #32
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	080156d8 	.word	0x080156d8
 800be90:	08015a20 	.word	0x08015a20
 800be94:	08015738 	.word	0x08015738
 800be98:	08015a40 	.word	0x08015a40

0800be9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	603a      	str	r2, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
 800bea8:	460b      	mov	r3, r1
 800beaa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	8919      	ldrh	r1, [r3, #8]
 800beb0:	88ba      	ldrh	r2, [r7, #4]
 800beb2:	79fb      	ldrb	r3, [r7, #7]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff fab1 	bl	800b41c <pbuf_alloc>
 800beba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <pbuf_clone+0x2a>
    return NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	e011      	b.n	800beea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f7ff fea3 	bl	800bc14 <pbuf_copy>
 800bece:	4603      	mov	r3, r0
 800bed0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bed2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d006      	beq.n	800bee8 <pbuf_clone+0x4c>
 800beda:	4b06      	ldr	r3, [pc, #24]	; (800bef4 <pbuf_clone+0x58>)
 800bedc:	f240 5224 	movw	r2, #1316	; 0x524
 800bee0:	4905      	ldr	r1, [pc, #20]	; (800bef8 <pbuf_clone+0x5c>)
 800bee2:	4806      	ldr	r0, [pc, #24]	; (800befc <pbuf_clone+0x60>)
 800bee4:	f008 f840 	bl	8013f68 <iprintf>
  return q;
 800bee8:	68fb      	ldr	r3, [r7, #12]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	080156d8 	.word	0x080156d8
 800bef8:	08015b4c 	.word	0x08015b4c
 800befc:	08015738 	.word	0x08015738

0800bf00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf04:	f008 f8be 	bl	8014084 <rand>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	4b01      	ldr	r3, [pc, #4]	; (800bf20 <tcp_init+0x20>)
 800bf1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf1c:	bf00      	nop
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20000020 	.word	0x20000020

0800bf24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	7d1b      	ldrb	r3, [r3, #20]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d105      	bne.n	800bf40 <tcp_free+0x1c>
 800bf34:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <tcp_free+0x2c>)
 800bf36:	22d4      	movs	r2, #212	; 0xd4
 800bf38:	4906      	ldr	r1, [pc, #24]	; (800bf54 <tcp_free+0x30>)
 800bf3a:	4807      	ldr	r0, [pc, #28]	; (800bf58 <tcp_free+0x34>)
 800bf3c:	f008 f814 	bl	8013f68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	2001      	movs	r0, #1
 800bf44:	f7fe fef8 	bl	800ad38 <memp_free>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	08015bd8 	.word	0x08015bd8
 800bf54:	08015c08 	.word	0x08015c08
 800bf58:	08015c1c 	.word	0x08015c1c

0800bf5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	7d1b      	ldrb	r3, [r3, #20]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d105      	bne.n	800bf78 <tcp_free_listen+0x1c>
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <tcp_free_listen+0x2c>)
 800bf6e:	22df      	movs	r2, #223	; 0xdf
 800bf70:	4906      	ldr	r1, [pc, #24]	; (800bf8c <tcp_free_listen+0x30>)
 800bf72:	4807      	ldr	r0, [pc, #28]	; (800bf90 <tcp_free_listen+0x34>)
 800bf74:	f007 fff8 	bl	8013f68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	2002      	movs	r0, #2
 800bf7c:	f7fe fedc 	bl	800ad38 <memp_free>
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	08015bd8 	.word	0x08015bd8
 800bf8c:	08015c44 	.word	0x08015c44
 800bf90:	08015c1c 	.word	0x08015c1c

0800bf94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bf98:	f000 fea2 	bl	800cce0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bf9c:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <tcp_tmr+0x28>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <tcp_tmr+0x28>)
 800bfa6:	701a      	strb	r2, [r3, #0]
 800bfa8:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <tcp_tmr+0x28>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bfb4:	f000 fb54 	bl	800c660 <tcp_slowtmr>
  }
}
 800bfb8:	bf00      	nop
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20008c91 	.word	0x20008c91

0800bfc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d105      	bne.n	800bfdc <tcp_remove_listener+0x1c>
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <tcp_remove_listener+0x48>)
 800bfd2:	22ff      	movs	r2, #255	; 0xff
 800bfd4:	490d      	ldr	r1, [pc, #52]	; (800c00c <tcp_remove_listener+0x4c>)
 800bfd6:	480e      	ldr	r0, [pc, #56]	; (800c010 <tcp_remove_listener+0x50>)
 800bfd8:	f007 ffc6 	bl	8013f68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e00a      	b.n	800bff8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d102      	bne.n	800bff2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1f1      	bne.n	800bfe2 <tcp_remove_listener+0x22>
    }
  }
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	08015bd8 	.word	0x08015bd8
 800c00c:	08015c60 	.word	0x08015c60
 800c010:	08015c1c 	.word	0x08015c1c

0800c014 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <tcp_listen_closed+0x1c>
 800c022:	4b14      	ldr	r3, [pc, #80]	; (800c074 <tcp_listen_closed+0x60>)
 800c024:	f240 1211 	movw	r2, #273	; 0x111
 800c028:	4913      	ldr	r1, [pc, #76]	; (800c078 <tcp_listen_closed+0x64>)
 800c02a:	4814      	ldr	r0, [pc, #80]	; (800c07c <tcp_listen_closed+0x68>)
 800c02c:	f007 ff9c 	bl	8013f68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7d1b      	ldrb	r3, [r3, #20]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d006      	beq.n	800c046 <tcp_listen_closed+0x32>
 800c038:	4b0e      	ldr	r3, [pc, #56]	; (800c074 <tcp_listen_closed+0x60>)
 800c03a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c03e:	4910      	ldr	r1, [pc, #64]	; (800c080 <tcp_listen_closed+0x6c>)
 800c040:	480e      	ldr	r0, [pc, #56]	; (800c07c <tcp_listen_closed+0x68>)
 800c042:	f007 ff91 	bl	8013f68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c046:	2301      	movs	r3, #1
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	e00b      	b.n	800c064 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c04c:	4a0d      	ldr	r2, [pc, #52]	; (800c084 <tcp_listen_closed+0x70>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ffb1 	bl	800bfc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3301      	adds	r3, #1
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b03      	cmp	r3, #3
 800c068:	d9f0      	bls.n	800c04c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	08015bd8 	.word	0x08015bd8
 800c078:	08015c88 	.word	0x08015c88
 800c07c:	08015c1c 	.word	0x08015c1c
 800c080:	08015c94 	.word	0x08015c94
 800c084:	08017be0 	.word	0x08017be0

0800c088 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c088:	b5b0      	push	{r4, r5, r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af04      	add	r7, sp, #16
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d106      	bne.n	800c0a8 <tcp_close_shutdown+0x20>
 800c09a:	4b63      	ldr	r3, [pc, #396]	; (800c228 <tcp_close_shutdown+0x1a0>)
 800c09c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c0a0:	4962      	ldr	r1, [pc, #392]	; (800c22c <tcp_close_shutdown+0x1a4>)
 800c0a2:	4863      	ldr	r0, [pc, #396]	; (800c230 <tcp_close_shutdown+0x1a8>)
 800c0a4:	f007 ff60 	bl	8013f68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d066      	beq.n	800c17c <tcp_close_shutdown+0xf4>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	7d1b      	ldrb	r3, [r3, #20]
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d003      	beq.n	800c0be <tcp_close_shutdown+0x36>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ba:	2b07      	cmp	r3, #7
 800c0bc:	d15e      	bne.n	800c17c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d104      	bne.n	800c0d0 <tcp_close_shutdown+0x48>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c0ce:	d055      	beq.n	800c17c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	8b5b      	ldrh	r3, [r3, #26]
 800c0d4:	f003 0310 	and.w	r3, r3, #16
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <tcp_close_shutdown+0x62>
 800c0dc:	4b52      	ldr	r3, [pc, #328]	; (800c228 <tcp_close_shutdown+0x1a0>)
 800c0de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c0e2:	4954      	ldr	r1, [pc, #336]	; (800c234 <tcp_close_shutdown+0x1ac>)
 800c0e4:	4852      	ldr	r0, [pc, #328]	; (800c230 <tcp_close_shutdown+0x1a8>)
 800c0e6:	f007 ff3f 	bl	8013f68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c0f2:	687d      	ldr	r5, [r7, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	8ad2      	ldrh	r2, [r2, #22]
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	8b09      	ldrh	r1, [r1, #24]
 800c100:	9102      	str	r1, [sp, #8]
 800c102:	9201      	str	r2, [sp, #4]
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	462b      	mov	r3, r5
 800c108:	4622      	mov	r2, r4
 800c10a:	4601      	mov	r1, r0
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f004 fe91 	bl	8010e34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f001 f8c6 	bl	800d2a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c118:	4b47      	ldr	r3, [pc, #284]	; (800c238 <tcp_close_shutdown+0x1b0>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d105      	bne.n	800c12e <tcp_close_shutdown+0xa6>
 800c122:	4b45      	ldr	r3, [pc, #276]	; (800c238 <tcp_close_shutdown+0x1b0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	4a43      	ldr	r2, [pc, #268]	; (800c238 <tcp_close_shutdown+0x1b0>)
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	e013      	b.n	800c156 <tcp_close_shutdown+0xce>
 800c12e:	4b42      	ldr	r3, [pc, #264]	; (800c238 <tcp_close_shutdown+0x1b0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e00c      	b.n	800c150 <tcp_close_shutdown+0xc8>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d104      	bne.n	800c14a <tcp_close_shutdown+0xc2>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68da      	ldr	r2, [r3, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	60da      	str	r2, [r3, #12]
 800c148:	e005      	b.n	800c156 <tcp_close_shutdown+0xce>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1ef      	bne.n	800c136 <tcp_close_shutdown+0xae>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	60da      	str	r2, [r3, #12]
 800c15c:	4b37      	ldr	r3, [pc, #220]	; (800c23c <tcp_close_shutdown+0x1b4>)
 800c15e:	2201      	movs	r2, #1
 800c160:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c162:	4b37      	ldr	r3, [pc, #220]	; (800c240 <tcp_close_shutdown+0x1b8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d102      	bne.n	800c172 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c16c:	f003 fd5e 	bl	800fc2c <tcp_trigger_input_pcb_close>
 800c170:	e002      	b.n	800c178 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fed6 	bl	800bf24 <tcp_free>
      }
      return ERR_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	e050      	b.n	800c21e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d03b      	beq.n	800c1fc <tcp_close_shutdown+0x174>
 800c184:	2b02      	cmp	r3, #2
 800c186:	dc44      	bgt.n	800c212 <tcp_close_shutdown+0x18a>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <tcp_close_shutdown+0x10a>
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d02a      	beq.n	800c1e6 <tcp_close_shutdown+0x15e>
 800c190:	e03f      	b.n	800c212 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8adb      	ldrh	r3, [r3, #22]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d021      	beq.n	800c1de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c19a:	4b2a      	ldr	r3, [pc, #168]	; (800c244 <tcp_close_shutdown+0x1bc>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d105      	bne.n	800c1b0 <tcp_close_shutdown+0x128>
 800c1a4:	4b27      	ldr	r3, [pc, #156]	; (800c244 <tcp_close_shutdown+0x1bc>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	4a26      	ldr	r2, [pc, #152]	; (800c244 <tcp_close_shutdown+0x1bc>)
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	e013      	b.n	800c1d8 <tcp_close_shutdown+0x150>
 800c1b0:	4b24      	ldr	r3, [pc, #144]	; (800c244 <tcp_close_shutdown+0x1bc>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	60bb      	str	r3, [r7, #8]
 800c1b6:	e00c      	b.n	800c1d2 <tcp_close_shutdown+0x14a>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d104      	bne.n	800c1cc <tcp_close_shutdown+0x144>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	60da      	str	r2, [r3, #12]
 800c1ca:	e005      	b.n	800c1d8 <tcp_close_shutdown+0x150>
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	60bb      	str	r3, [r7, #8]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1ef      	bne.n	800c1b8 <tcp_close_shutdown+0x130>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fea0 	bl	800bf24 <tcp_free>
      break;
 800c1e4:	e01a      	b.n	800c21c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff ff14 	bl	800c014 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	4816      	ldr	r0, [pc, #88]	; (800c248 <tcp_close_shutdown+0x1c0>)
 800c1f0:	f001 f8a8 	bl	800d344 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff feb1 	bl	800bf5c <tcp_free_listen>
      break;
 800c1fa:	e00f      	b.n	800c21c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	480e      	ldr	r0, [pc, #56]	; (800c238 <tcp_close_shutdown+0x1b0>)
 800c200:	f001 f8a0 	bl	800d344 <tcp_pcb_remove>
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <tcp_close_shutdown+0x1b4>)
 800c206:	2201      	movs	r2, #1
 800c208:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7ff fe8a 	bl	800bf24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c210:	e004      	b.n	800c21c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f81a 	bl	800c24c <tcp_close_shutdown_fin>
 800c218:	4603      	mov	r3, r0
 800c21a:	e000      	b.n	800c21e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bdb0      	pop	{r4, r5, r7, pc}
 800c226:	bf00      	nop
 800c228:	08015bd8 	.word	0x08015bd8
 800c22c:	08015cac 	.word	0x08015cac
 800c230:	08015c1c 	.word	0x08015c1c
 800c234:	08015ccc 	.word	0x08015ccc
 800c238:	20008c88 	.word	0x20008c88
 800c23c:	20008c90 	.word	0x20008c90
 800c240:	20008cc8 	.word	0x20008cc8
 800c244:	20008c80 	.word	0x20008c80
 800c248:	20008c84 	.word	0x20008c84

0800c24c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <tcp_close_shutdown_fin+0x1c>
 800c25a:	4b2e      	ldr	r3, [pc, #184]	; (800c314 <tcp_close_shutdown_fin+0xc8>)
 800c25c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c260:	492d      	ldr	r1, [pc, #180]	; (800c318 <tcp_close_shutdown_fin+0xcc>)
 800c262:	482e      	ldr	r0, [pc, #184]	; (800c31c <tcp_close_shutdown_fin+0xd0>)
 800c264:	f007 fe80 	bl	8013f68 <iprintf>

  switch (pcb->state) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	2b07      	cmp	r3, #7
 800c26e:	d020      	beq.n	800c2b2 <tcp_close_shutdown_fin+0x66>
 800c270:	2b07      	cmp	r3, #7
 800c272:	dc2b      	bgt.n	800c2cc <tcp_close_shutdown_fin+0x80>
 800c274:	2b03      	cmp	r3, #3
 800c276:	d002      	beq.n	800c27e <tcp_close_shutdown_fin+0x32>
 800c278:	2b04      	cmp	r3, #4
 800c27a:	d00d      	beq.n	800c298 <tcp_close_shutdown_fin+0x4c>
 800c27c:	e026      	b.n	800c2cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f003 fee6 	bl	8010050 <tcp_send_fin>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d11f      	bne.n	800c2d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2205      	movs	r2, #5
 800c294:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c296:	e01b      	b.n	800c2d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f003 fed9 	bl	8010050 <tcp_send_fin>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d114      	bne.n	800c2d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2205      	movs	r2, #5
 800c2ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2b0:	e010      	b.n	800c2d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f003 fecc 	bl	8010050 <tcp_send_fin>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d109      	bne.n	800c2d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2209      	movs	r2, #9
 800c2c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2ca:	e005      	b.n	800c2d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e01c      	b.n	800c30a <tcp_close_shutdown_fin+0xbe>
      break;
 800c2d0:	bf00      	nop
 800c2d2:	e002      	b.n	800c2da <tcp_close_shutdown_fin+0x8e>
      break;
 800c2d4:	bf00      	nop
 800c2d6:	e000      	b.n	800c2da <tcp_close_shutdown_fin+0x8e>
      break;
 800c2d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d103      	bne.n	800c2ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f003 fff2 	bl	80102cc <tcp_output>
 800c2e8:	e00d      	b.n	800c306 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f2:	d108      	bne.n	800c306 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	8b5b      	ldrh	r3, [r3, #26]
 800c2f8:	f043 0308 	orr.w	r3, r3, #8
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	e001      	b.n	800c30a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	08015bd8 	.word	0x08015bd8
 800c318:	08015c88 	.word	0x08015c88
 800c31c:	08015c1c 	.word	0x08015c1c

0800c320 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d109      	bne.n	800c342 <tcp_close+0x22>
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <tcp_close+0x4c>)
 800c330:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c334:	490e      	ldr	r1, [pc, #56]	; (800c370 <tcp_close+0x50>)
 800c336:	480f      	ldr	r0, [pc, #60]	; (800c374 <tcp_close+0x54>)
 800c338:	f007 fe16 	bl	8013f68 <iprintf>
 800c33c:	f06f 030f 	mvn.w	r3, #15
 800c340:	e00f      	b.n	800c362 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7d1b      	ldrb	r3, [r3, #20]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d006      	beq.n	800c358 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	8b5b      	ldrh	r3, [r3, #26]
 800c34e:	f043 0310 	orr.w	r3, r3, #16
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c358:	2101      	movs	r1, #1
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff fe94 	bl	800c088 <tcp_close_shutdown>
 800c360:	4603      	mov	r3, r0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08015bd8 	.word	0x08015bd8
 800c370:	08015ce8 	.word	0x08015ce8
 800c374:	08015c1c 	.word	0x08015c1c

0800c378 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08e      	sub	sp, #56	; 0x38
 800c37c:	af04      	add	r7, sp, #16
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d107      	bne.n	800c398 <tcp_abandon+0x20>
 800c388:	4b52      	ldr	r3, [pc, #328]	; (800c4d4 <tcp_abandon+0x15c>)
 800c38a:	f240 223d 	movw	r2, #573	; 0x23d
 800c38e:	4952      	ldr	r1, [pc, #328]	; (800c4d8 <tcp_abandon+0x160>)
 800c390:	4852      	ldr	r0, [pc, #328]	; (800c4dc <tcp_abandon+0x164>)
 800c392:	f007 fde9 	bl	8013f68 <iprintf>
 800c396:	e099      	b.n	800c4cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7d1b      	ldrb	r3, [r3, #20]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d106      	bne.n	800c3ae <tcp_abandon+0x36>
 800c3a0:	4b4c      	ldr	r3, [pc, #304]	; (800c4d4 <tcp_abandon+0x15c>)
 800c3a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c3a6:	494e      	ldr	r1, [pc, #312]	; (800c4e0 <tcp_abandon+0x168>)
 800c3a8:	484c      	ldr	r0, [pc, #304]	; (800c4dc <tcp_abandon+0x164>)
 800c3aa:	f007 fddd 	bl	8013f68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7d1b      	ldrb	r3, [r3, #20]
 800c3b2:	2b0a      	cmp	r3, #10
 800c3b4:	d107      	bne.n	800c3c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	484a      	ldr	r0, [pc, #296]	; (800c4e4 <tcp_abandon+0x16c>)
 800c3ba:	f000 ffc3 	bl	800d344 <tcp_pcb_remove>
    tcp_free(pcb);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff fdb0 	bl	800bf24 <tcp_free>
 800c3c4:	e082      	b.n	800c4cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7d1b      	ldrb	r3, [r3, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d126      	bne.n	800c43e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8adb      	ldrh	r3, [r3, #22]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d02e      	beq.n	800c456 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c3f8:	4b3b      	ldr	r3, [pc, #236]	; (800c4e8 <tcp_abandon+0x170>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d105      	bne.n	800c40e <tcp_abandon+0x96>
 800c402:	4b39      	ldr	r3, [pc, #228]	; (800c4e8 <tcp_abandon+0x170>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4a37      	ldr	r2, [pc, #220]	; (800c4e8 <tcp_abandon+0x170>)
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	e013      	b.n	800c436 <tcp_abandon+0xbe>
 800c40e:	4b36      	ldr	r3, [pc, #216]	; (800c4e8 <tcp_abandon+0x170>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	61fb      	str	r3, [r7, #28]
 800c414:	e00c      	b.n	800c430 <tcp_abandon+0xb8>
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d104      	bne.n	800c42a <tcp_abandon+0xb2>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68da      	ldr	r2, [r3, #12]
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	60da      	str	r2, [r3, #12]
 800c428:	e005      	b.n	800c436 <tcp_abandon+0xbe>
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	61fb      	str	r3, [r7, #28]
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1ef      	bne.n	800c416 <tcp_abandon+0x9e>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	60da      	str	r2, [r3, #12]
 800c43c:	e00b      	b.n	800c456 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	8adb      	ldrh	r3, [r3, #22]
 800c446:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4828      	ldr	r0, [pc, #160]	; (800c4ec <tcp_abandon+0x174>)
 800c44c:	f000 ff7a 	bl	800d344 <tcp_pcb_remove>
 800c450:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <tcp_abandon+0x178>)
 800c452:	2201      	movs	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fd1c 	bl	800cea0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c474:	4618      	mov	r0, r3
 800c476:	f000 fd13 	bl	800cea0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d004      	beq.n	800c48c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fd0a 	bl	800cea0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00e      	beq.n	800c4b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3304      	adds	r3, #4
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	8b12      	ldrh	r2, [r2, #24]
 800c49c:	9202      	str	r2, [sp, #8]
 800c49e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4a0:	9201      	str	r2, [sp, #4]
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	69b9      	ldr	r1, [r7, #24]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f004 fcc2 	bl	8010e34 <tcp_rst>
    }
    last_state = pcb->state;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7d1b      	ldrb	r3, [r3, #20]
 800c4b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fd34 	bl	800bf24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <tcp_abandon+0x154>
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f06f 010c 	mvn.w	r1, #12
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	4798      	blx	r3
  }
}
 800c4cc:	3728      	adds	r7, #40	; 0x28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	08015bd8 	.word	0x08015bd8
 800c4d8:	08015d1c 	.word	0x08015d1c
 800c4dc:	08015c1c 	.word	0x08015c1c
 800c4e0:	08015d38 	.word	0x08015d38
 800c4e4:	20008c8c 	.word	0x20008c8c
 800c4e8:	20008c80 	.word	0x20008c80
 800c4ec:	20008c88 	.word	0x20008c88
 800c4f0:	20008c90 	.word	0x20008c90

0800c4f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff ff3a 	bl	800c378 <tcp_abandon>
}
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcp_update_rcv_ann_wnd+0x1c>
 800c51a:	4b25      	ldr	r3, [pc, #148]	; (800c5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c51c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c520:	4924      	ldr	r1, [pc, #144]	; (800c5b4 <tcp_update_rcv_ann_wnd+0xa8>)
 800c522:	4825      	ldr	r0, [pc, #148]	; (800c5b8 <tcp_update_rcv_ann_wnd+0xac>)
 800c524:	f007 fd20 	bl	8013f68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c530:	4413      	add	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c53c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c540:	bf28      	it	cs
 800c542:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c546:	b292      	uxth	r2, r2
 800c548:	4413      	add	r3, r2
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	db08      	blt.n	800c564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	e020      	b.n	800c5a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dd03      	ble.n	800c57a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c578:	e014      	b.n	800c5a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58c:	d306      	bcc.n	800c59c <tcp_update_rcv_ann_wnd+0x90>
 800c58e:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c590:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c594:	4909      	ldr	r1, [pc, #36]	; (800c5bc <tcp_update_rcv_ann_wnd+0xb0>)
 800c596:	4808      	ldr	r0, [pc, #32]	; (800c5b8 <tcp_update_rcv_ann_wnd+0xac>)
 800c598:	f007 fce6 	bl	8013f68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c5a4:	2300      	movs	r3, #0
  }
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	08015bd8 	.word	0x08015bd8
 800c5b4:	08015e34 	.word	0x08015e34
 800c5b8:	08015c1c 	.word	0x08015c1c
 800c5bc:	08015e58 	.word	0x08015e58

0800c5c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d107      	bne.n	800c5e2 <tcp_recved+0x22>
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	; (800c650 <tcp_recved+0x90>)
 800c5d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c5d8:	491e      	ldr	r1, [pc, #120]	; (800c654 <tcp_recved+0x94>)
 800c5da:	481f      	ldr	r0, [pc, #124]	; (800c658 <tcp_recved+0x98>)
 800c5dc:	f007 fcc4 	bl	8013f68 <iprintf>
 800c5e0:	e032      	b.n	800c648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	7d1b      	ldrb	r3, [r3, #20]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d106      	bne.n	800c5f8 <tcp_recved+0x38>
 800c5ea:	4b19      	ldr	r3, [pc, #100]	; (800c650 <tcp_recved+0x90>)
 800c5ec:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c5f0:	491a      	ldr	r1, [pc, #104]	; (800c65c <tcp_recved+0x9c>)
 800c5f2:	4819      	ldr	r0, [pc, #100]	; (800c658 <tcp_recved+0x98>)
 800c5f4:	f007 fcb8 	bl	8013f68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c5fc:	887b      	ldrh	r3, [r7, #2]
 800c5fe:	4413      	add	r3, r2
 800c600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c602:	89fb      	ldrh	r3, [r7, #14]
 800c604:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c608:	d804      	bhi.n	800c614 <tcp_recved+0x54>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c60e:	89fa      	ldrh	r2, [r7, #14]
 800c610:	429a      	cmp	r2, r3
 800c612:	d204      	bcs.n	800c61e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c61a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c61c:	e002      	b.n	800c624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	89fa      	ldrh	r2, [r7, #14]
 800c622:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff ff71 	bl	800c50c <tcp_update_rcv_ann_wnd>
 800c62a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c632:	d309      	bcc.n	800c648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	8b5b      	ldrh	r3, [r3, #26]
 800c638:	f043 0302 	orr.w	r3, r3, #2
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f003 fe42 	bl	80102cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	08015bd8 	.word	0x08015bd8
 800c654:	08015e74 	.word	0x08015e74
 800c658:	08015c1c 	.word	0x08015c1c
 800c65c:	08015e8c 	.word	0x08015e8c

0800c660 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c660:	b5b0      	push	{r4, r5, r7, lr}
 800c662:	b090      	sub	sp, #64	; 0x40
 800c664:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c66c:	4b94      	ldr	r3, [pc, #592]	; (800c8c0 <tcp_slowtmr+0x260>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3301      	adds	r3, #1
 800c672:	4a93      	ldr	r2, [pc, #588]	; (800c8c0 <tcp_slowtmr+0x260>)
 800c674:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c676:	4b93      	ldr	r3, [pc, #588]	; (800c8c4 <tcp_slowtmr+0x264>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	4b91      	ldr	r3, [pc, #580]	; (800c8c4 <tcp_slowtmr+0x264>)
 800c680:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c682:	2300      	movs	r3, #0
 800c684:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c686:	4b90      	ldr	r3, [pc, #576]	; (800c8c8 <tcp_slowtmr+0x268>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c68c:	e29d      	b.n	800cbca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <tcp_slowtmr+0x44>
 800c696:	4b8d      	ldr	r3, [pc, #564]	; (800c8cc <tcp_slowtmr+0x26c>)
 800c698:	f240 42be 	movw	r2, #1214	; 0x4be
 800c69c:	498c      	ldr	r1, [pc, #560]	; (800c8d0 <tcp_slowtmr+0x270>)
 800c69e:	488d      	ldr	r0, [pc, #564]	; (800c8d4 <tcp_slowtmr+0x274>)
 800c6a0:	f007 fc62 	bl	8013f68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	7d1b      	ldrb	r3, [r3, #20]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d106      	bne.n	800c6ba <tcp_slowtmr+0x5a>
 800c6ac:	4b87      	ldr	r3, [pc, #540]	; (800c8cc <tcp_slowtmr+0x26c>)
 800c6ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c6b2:	4989      	ldr	r1, [pc, #548]	; (800c8d8 <tcp_slowtmr+0x278>)
 800c6b4:	4887      	ldr	r0, [pc, #540]	; (800c8d4 <tcp_slowtmr+0x274>)
 800c6b6:	f007 fc57 	bl	8013f68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	7d1b      	ldrb	r3, [r3, #20]
 800c6be:	2b0a      	cmp	r3, #10
 800c6c0:	d106      	bne.n	800c6d0 <tcp_slowtmr+0x70>
 800c6c2:	4b82      	ldr	r3, [pc, #520]	; (800c8cc <tcp_slowtmr+0x26c>)
 800c6c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c6c8:	4984      	ldr	r1, [pc, #528]	; (800c8dc <tcp_slowtmr+0x27c>)
 800c6ca:	4882      	ldr	r0, [pc, #520]	; (800c8d4 <tcp_slowtmr+0x274>)
 800c6cc:	f007 fc4c 	bl	8013f68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	7f9a      	ldrb	r2, [r3, #30]
 800c6d4:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <tcp_slowtmr+0x264>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d105      	bne.n	800c6e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c6e6:	e270      	b.n	800cbca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c6e8:	4b76      	ldr	r3, [pc, #472]	; (800c8c4 <tcp_slowtmr+0x264>)
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	7d1b      	ldrb	r3, [r3, #20]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d10a      	bne.n	800c71a <tcp_slowtmr+0xba>
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d905      	bls.n	800c71a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c712:	3301      	adds	r3, #1
 800c714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c718:	e11e      	b.n	800c958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c720:	2b0b      	cmp	r3, #11
 800c722:	d905      	bls.n	800c730 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c728:	3301      	adds	r3, #1
 800c72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c72e:	e113      	b.n	800c958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c736:	2b00      	cmp	r3, #0
 800c738:	d075      	beq.n	800c826 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d006      	beq.n	800c750 <tcp_slowtmr+0xf0>
 800c742:	4b62      	ldr	r3, [pc, #392]	; (800c8cc <tcp_slowtmr+0x26c>)
 800c744:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c748:	4965      	ldr	r1, [pc, #404]	; (800c8e0 <tcp_slowtmr+0x280>)
 800c74a:	4862      	ldr	r0, [pc, #392]	; (800c8d4 <tcp_slowtmr+0x274>)
 800c74c:	f007 fc0c 	bl	8013f68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d106      	bne.n	800c766 <tcp_slowtmr+0x106>
 800c758:	4b5c      	ldr	r3, [pc, #368]	; (800c8cc <tcp_slowtmr+0x26c>)
 800c75a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c75e:	4961      	ldr	r1, [pc, #388]	; (800c8e4 <tcp_slowtmr+0x284>)
 800c760:	485c      	ldr	r0, [pc, #368]	; (800c8d4 <tcp_slowtmr+0x274>)
 800c762:	f007 fc01 	bl	8013f68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c76c:	2b0b      	cmp	r3, #11
 800c76e:	d905      	bls.n	800c77c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c774:	3301      	adds	r3, #1
 800c776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c77a:	e0ed      	b.n	800c958 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c782:	3b01      	subs	r3, #1
 800c784:	4a58      	ldr	r2, [pc, #352]	; (800c8e8 <tcp_slowtmr+0x288>)
 800c786:	5cd3      	ldrb	r3, [r2, r3]
 800c788:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c790:	7c7a      	ldrb	r2, [r7, #17]
 800c792:	429a      	cmp	r2, r3
 800c794:	d907      	bls.n	800c7a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c79c:	3301      	adds	r3, #1
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7ac:	7c7a      	ldrb	r2, [r7, #17]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	f200 80d2 	bhi.w	800c958 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d108      	bne.n	800c7d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c7c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7c4:	f004 fc2a 	bl	801101c <tcp_zero_window_probe>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d014      	beq.n	800c7f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	623b      	str	r3, [r7, #32]
 800c7d2:	e011      	b.n	800c7f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7de:	f003 faef 	bl	800fdc0 <tcp_split_unsent_seg>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d107      	bne.n	800c7f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ea:	f003 fd6f 	bl	80102cc <tcp_output>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80ac 	beq.w	800c958 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	2200      	movs	r2, #0
 800c804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c80e:	2b06      	cmp	r3, #6
 800c810:	f200 80a2 	bhi.w	800c958 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c81a:	3301      	adds	r3, #1
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c824:	e098      	b.n	800c958 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	db0f      	blt.n	800c850 <tcp_slowtmr+0x1f0>
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c836:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d008      	beq.n	800c850 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c844:	b29b      	uxth	r3, r3
 800c846:	3301      	adds	r3, #1
 800c848:	b29b      	uxth	r3, r3
 800c84a:	b21a      	sxth	r2, r3
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c85c:	429a      	cmp	r2, r3
 800c85e:	db7b      	blt.n	800c958 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c862:	f004 f825 	bl	80108b0 <tcp_rexmit_rto_prepare>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d007      	beq.n	800c87c <tcp_slowtmr+0x21c>
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c870:	2b00      	cmp	r3, #0
 800c872:	d171      	bne.n	800c958 <tcp_slowtmr+0x2f8>
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d06d      	beq.n	800c958 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	7d1b      	ldrb	r3, [r3, #20]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d03a      	beq.n	800c8fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c88a:	2b0c      	cmp	r3, #12
 800c88c:	bf28      	it	cs
 800c88e:	230c      	movcs	r3, #12
 800c890:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c898:	10db      	asrs	r3, r3, #3
 800c89a:	b21b      	sxth	r3, r3
 800c89c:	461a      	mov	r2, r3
 800c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c8a4:	4413      	add	r3, r2
 800c8a6:	7efa      	ldrb	r2, [r7, #27]
 800c8a8:	4910      	ldr	r1, [pc, #64]	; (800c8ec <tcp_slowtmr+0x28c>)
 800c8aa:	5c8a      	ldrb	r2, [r1, r2]
 800c8ac:	4093      	lsls	r3, r2
 800c8ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	dc1a      	bgt.n	800c8f0 <tcp_slowtmr+0x290>
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	b21a      	sxth	r2, r3
 800c8be:	e019      	b.n	800c8f4 <tcp_slowtmr+0x294>
 800c8c0:	20008c7c 	.word	0x20008c7c
 800c8c4:	20008c92 	.word	0x20008c92
 800c8c8:	20008c88 	.word	0x20008c88
 800c8cc:	08015bd8 	.word	0x08015bd8
 800c8d0:	08015f1c 	.word	0x08015f1c
 800c8d4:	08015c1c 	.word	0x08015c1c
 800c8d8:	08015f48 	.word	0x08015f48
 800c8dc:	08015f74 	.word	0x08015f74
 800c8e0:	08015fa4 	.word	0x08015fa4
 800c8e4:	08015fd8 	.word	0x08015fd8
 800c8e8:	08017bd8 	.word	0x08017bd8
 800c8ec:	08017bc8 	.word	0x08017bc8
 800c8f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c90c:	4293      	cmp	r3, r2
 800c90e:	bf28      	it	cs
 800c910:	4613      	movcs	r3, r2
 800c912:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c914:	8a7b      	ldrh	r3, [r7, #18]
 800c916:	085b      	lsrs	r3, r3, #1
 800c918:	b29a      	uxth	r2, r3
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	429a      	cmp	r2, r3
 800c930:	d206      	bcs.n	800c940 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	b29a      	uxth	r2, r3
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	2200      	movs	r2, #0
 800c94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c954:	f004 f81c 	bl	8010990 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	7d1b      	ldrb	r3, [r3, #20]
 800c95c:	2b06      	cmp	r3, #6
 800c95e:	d111      	bne.n	800c984 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c962:	8b5b      	ldrh	r3, [r3, #26]
 800c964:	f003 0310 	and.w	r3, r3, #16
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00b      	beq.n	800c984 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c96c:	4b9c      	ldr	r3, [pc, #624]	; (800cbe0 <tcp_slowtmr+0x580>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b28      	cmp	r3, #40	; 0x28
 800c978:	d904      	bls.n	800c984 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c97e:	3301      	adds	r3, #1
 800c980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	7a5b      	ldrb	r3, [r3, #9]
 800c988:	f003 0308 	and.w	r3, r3, #8
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d04a      	beq.n	800ca26 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c994:	2b04      	cmp	r3, #4
 800c996:	d003      	beq.n	800c9a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c99c:	2b07      	cmp	r3, #7
 800c99e:	d142      	bne.n	800ca26 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9a0:	4b8f      	ldr	r3, [pc, #572]	; (800cbe0 <tcp_slowtmr+0x580>)
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c9b0:	4b8c      	ldr	r3, [pc, #560]	; (800cbe4 <tcp_slowtmr+0x584>)
 800c9b2:	440b      	add	r3, r1
 800c9b4:	498c      	ldr	r1, [pc, #560]	; (800cbe8 <tcp_slowtmr+0x588>)
 800c9b6:	fba1 1303 	umull	r1, r3, r1, r3
 800c9ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d90a      	bls.n	800c9d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c9ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9d4:	e027      	b.n	800ca26 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9d6:	4b82      	ldr	r3, [pc, #520]	; (800cbe0 <tcp_slowtmr+0x580>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	4b7f      	ldr	r3, [pc, #508]	; (800cbec <tcp_slowtmr+0x58c>)
 800c9f0:	fb00 f303 	mul.w	r3, r0, r3
 800c9f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c9f6:	497c      	ldr	r1, [pc, #496]	; (800cbe8 <tcp_slowtmr+0x588>)
 800c9f8:	fba1 1303 	umull	r1, r3, r1, r3
 800c9fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d911      	bls.n	800ca26 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ca02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca04:	f004 faca 	bl	8010f9c <tcp_keepalive>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ca0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d107      	bne.n	800ca26 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d011      	beq.n	800ca52 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca2e:	4b6c      	ldr	r3, [pc, #432]	; (800cbe0 <tcp_slowtmr+0x580>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ca3e:	4619      	mov	r1, r3
 800ca40:	460b      	mov	r3, r1
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	440b      	add	r3, r1
 800ca46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d302      	bcc.n	800ca52 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ca4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca4e:	f000 fddd 	bl	800d60c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d10b      	bne.n	800ca72 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca5a:	4b61      	ldr	r3, [pc, #388]	; (800cbe0 <tcp_slowtmr+0x580>)
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	6a1b      	ldr	r3, [r3, #32]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b28      	cmp	r3, #40	; 0x28
 800ca66:	d904      	bls.n	800ca72 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ca68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	7d1b      	ldrb	r3, [r3, #20]
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	d10b      	bne.n	800ca92 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ca7a:	4b59      	ldr	r3, [pc, #356]	; (800cbe0 <tcp_slowtmr+0x580>)
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	2bf0      	cmp	r3, #240	; 0xf0
 800ca86:	d904      	bls.n	800ca92 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ca88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ca92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d060      	beq.n	800cb5c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800caa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caa4:	f000 fbfe 	bl	800d2a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d010      	beq.n	800cad0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800caae:	4b50      	ldr	r3, [pc, #320]	; (800cbf0 <tcp_slowtmr+0x590>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d106      	bne.n	800cac6 <tcp_slowtmr+0x466>
 800cab8:	4b4e      	ldr	r3, [pc, #312]	; (800cbf4 <tcp_slowtmr+0x594>)
 800caba:	f240 526d 	movw	r2, #1389	; 0x56d
 800cabe:	494e      	ldr	r1, [pc, #312]	; (800cbf8 <tcp_slowtmr+0x598>)
 800cac0:	484e      	ldr	r0, [pc, #312]	; (800cbfc <tcp_slowtmr+0x59c>)
 800cac2:	f007 fa51 	bl	8013f68 <iprintf>
        prev->next = pcb->next;
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cacc:	60da      	str	r2, [r3, #12]
 800cace:	e00f      	b.n	800caf0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cad0:	4b47      	ldr	r3, [pc, #284]	; (800cbf0 <tcp_slowtmr+0x590>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d006      	beq.n	800cae8 <tcp_slowtmr+0x488>
 800cada:	4b46      	ldr	r3, [pc, #280]	; (800cbf4 <tcp_slowtmr+0x594>)
 800cadc:	f240 5271 	movw	r2, #1393	; 0x571
 800cae0:	4947      	ldr	r1, [pc, #284]	; (800cc00 <tcp_slowtmr+0x5a0>)
 800cae2:	4846      	ldr	r0, [pc, #280]	; (800cbfc <tcp_slowtmr+0x59c>)
 800cae4:	f007 fa40 	bl	8013f68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	4a40      	ldr	r2, [pc, #256]	; (800cbf0 <tcp_slowtmr+0x590>)
 800caee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800caf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d013      	beq.n	800cb20 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb00:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	3304      	adds	r3, #4
 800cb06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb08:	8ad2      	ldrh	r2, [r2, #22]
 800cb0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb0c:	8b09      	ldrh	r1, [r1, #24]
 800cb0e:	9102      	str	r1, [sp, #8]
 800cb10:	9201      	str	r2, [sp, #4]
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	462b      	mov	r3, r5
 800cb16:	4622      	mov	r2, r4
 800cb18:	4601      	mov	r1, r0
 800cb1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb1c:	f004 f98a 	bl	8010e34 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	7d1b      	ldrb	r3, [r3, #20]
 800cb2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb36:	6838      	ldr	r0, [r7, #0]
 800cb38:	f7ff f9f4 	bl	800bf24 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cb3c:	4b31      	ldr	r3, [pc, #196]	; (800cc04 <tcp_slowtmr+0x5a4>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d004      	beq.n	800cb52 <tcp_slowtmr+0x4f2>
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f06f 010c 	mvn.w	r1, #12
 800cb4e:	68b8      	ldr	r0, [r7, #8]
 800cb50:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb52:	4b2c      	ldr	r3, [pc, #176]	; (800cc04 <tcp_slowtmr+0x5a4>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d037      	beq.n	800cbca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cb5a:	e592      	b.n	800c682 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	7f1b      	ldrb	r3, [r3, #28]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	7f1a      	ldrb	r2, [r3, #28]
 800cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb78:	7f5b      	ldrb	r3, [r3, #29]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d325      	bcc.n	800cbca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	2200      	movs	r2, #0
 800cb82:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cb84:	4b1f      	ldr	r3, [pc, #124]	; (800cc04 <tcp_slowtmr+0x5a4>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <tcp_slowtmr+0x54c>
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9c:	6912      	ldr	r2, [r2, #16]
 800cb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	4603      	mov	r3, r0
 800cba6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cbaa:	e002      	b.n	800cbb2 <tcp_slowtmr+0x552>
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cbb2:	4b14      	ldr	r3, [pc, #80]	; (800cc04 <tcp_slowtmr+0x5a4>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d000      	beq.n	800cbbc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cbba:	e562      	b.n	800c682 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cbbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d102      	bne.n	800cbca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cbc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc6:	f003 fb81 	bl	80102cc <tcp_output>
  while (pcb != NULL) {
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f47f ad5e 	bne.w	800c68e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <tcp_slowtmr+0x5a8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cbdc:	e069      	b.n	800ccb2 <tcp_slowtmr+0x652>
 800cbde:	bf00      	nop
 800cbe0:	20008c7c 	.word	0x20008c7c
 800cbe4:	000a4cb8 	.word	0x000a4cb8
 800cbe8:	10624dd3 	.word	0x10624dd3
 800cbec:	000124f8 	.word	0x000124f8
 800cbf0:	20008c88 	.word	0x20008c88
 800cbf4:	08015bd8 	.word	0x08015bd8
 800cbf8:	08016010 	.word	0x08016010
 800cbfc:	08015c1c 	.word	0x08015c1c
 800cc00:	0801603c 	.word	0x0801603c
 800cc04:	20008c90 	.word	0x20008c90
 800cc08:	20008c8c 	.word	0x20008c8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	7d1b      	ldrb	r3, [r3, #20]
 800cc10:	2b0a      	cmp	r3, #10
 800cc12:	d006      	beq.n	800cc22 <tcp_slowtmr+0x5c2>
 800cc14:	4b2b      	ldr	r3, [pc, #172]	; (800ccc4 <tcp_slowtmr+0x664>)
 800cc16:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cc1a:	492b      	ldr	r1, [pc, #172]	; (800ccc8 <tcp_slowtmr+0x668>)
 800cc1c:	482b      	ldr	r0, [pc, #172]	; (800cccc <tcp_slowtmr+0x66c>)
 800cc1e:	f007 f9a3 	bl	8013f68 <iprintf>
    pcb_remove = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc28:	4b29      	ldr	r3, [pc, #164]	; (800ccd0 <tcp_slowtmr+0x670>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	2bf0      	cmp	r3, #240	; 0xf0
 800cc34:	d904      	bls.n	800cc40 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cc36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d02f      	beq.n	800cca8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc4a:	f000 fb2b 	bl	800d2a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d010      	beq.n	800cc76 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc54:	4b1f      	ldr	r3, [pc, #124]	; (800ccd4 <tcp_slowtmr+0x674>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d106      	bne.n	800cc6c <tcp_slowtmr+0x60c>
 800cc5e:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <tcp_slowtmr+0x664>)
 800cc60:	f240 52af 	movw	r2, #1455	; 0x5af
 800cc64:	491c      	ldr	r1, [pc, #112]	; (800ccd8 <tcp_slowtmr+0x678>)
 800cc66:	4819      	ldr	r0, [pc, #100]	; (800cccc <tcp_slowtmr+0x66c>)
 800cc68:	f007 f97e 	bl	8013f68 <iprintf>
        prev->next = pcb->next;
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	68da      	ldr	r2, [r3, #12]
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	60da      	str	r2, [r3, #12]
 800cc74:	e00f      	b.n	800cc96 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cc76:	4b17      	ldr	r3, [pc, #92]	; (800ccd4 <tcp_slowtmr+0x674>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d006      	beq.n	800cc8e <tcp_slowtmr+0x62e>
 800cc80:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <tcp_slowtmr+0x664>)
 800cc82:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cc86:	4915      	ldr	r1, [pc, #84]	; (800ccdc <tcp_slowtmr+0x67c>)
 800cc88:	4810      	ldr	r0, [pc, #64]	; (800cccc <tcp_slowtmr+0x66c>)
 800cc8a:	f007 f96d 	bl	8013f68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	4a10      	ldr	r2, [pc, #64]	; (800ccd4 <tcp_slowtmr+0x674>)
 800cc94:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc98:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cca0:	69f8      	ldr	r0, [r7, #28]
 800cca2:	f7ff f93f 	bl	800bf24 <tcp_free>
 800cca6:	e004      	b.n	800ccb2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1a9      	bne.n	800cc0c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	3730      	adds	r7, #48	; 0x30
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	08015bd8 	.word	0x08015bd8
 800ccc8:	08016068 	.word	0x08016068
 800cccc:	08015c1c 	.word	0x08015c1c
 800ccd0:	20008c7c 	.word	0x20008c7c
 800ccd4:	20008c8c 	.word	0x20008c8c
 800ccd8:	08016098 	.word	0x08016098
 800ccdc:	080160c0 	.word	0x080160c0

0800cce0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cce6:	4b2d      	ldr	r3, [pc, #180]	; (800cd9c <tcp_fasttmr+0xbc>)
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	3301      	adds	r3, #1
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	4b2b      	ldr	r3, [pc, #172]	; (800cd9c <tcp_fasttmr+0xbc>)
 800ccf0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ccf2:	4b2b      	ldr	r3, [pc, #172]	; (800cda0 <tcp_fasttmr+0xc0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ccf8:	e048      	b.n	800cd8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	7f9a      	ldrb	r2, [r3, #30]
 800ccfe:	4b27      	ldr	r3, [pc, #156]	; (800cd9c <tcp_fasttmr+0xbc>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d03f      	beq.n	800cd86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cd06:	4b25      	ldr	r3, [pc, #148]	; (800cd9c <tcp_fasttmr+0xbc>)
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8b5b      	ldrh	r3, [r3, #26]
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d010      	beq.n	800cd3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8b5b      	ldrh	r3, [r3, #26]
 800cd1e:	f043 0302 	orr.w	r3, r3, #2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f003 facf 	bl	80102cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8b5b      	ldrh	r3, [r3, #26]
 800cd32:	f023 0303 	bic.w	r3, r3, #3
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d009      	beq.n	800cd5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f023 0308 	bic.w	r3, r3, #8
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff fa78 	bl	800c24c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd6a:	4b0e      	ldr	r3, [pc, #56]	; (800cda4 <tcp_fasttmr+0xc4>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f819 	bl	800cda8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cd76:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <tcp_fasttmr+0xc4>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d000      	beq.n	800cd80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cd7e:	e7b8      	b.n	800ccf2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	607b      	str	r3, [r7, #4]
 800cd84:	e002      	b.n	800cd8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1b3      	bne.n	800ccfa <tcp_fasttmr+0x1a>
    }
  }
}
 800cd92:	bf00      	nop
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20008c92 	.word	0x20008c92
 800cda0:	20008c88 	.word	0x20008c88
 800cda4:	20008c90 	.word	0x20008c90

0800cda8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cda8:	b590      	push	{r4, r7, lr}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <tcp_process_refused_data+0x22>
 800cdb6:	4b37      	ldr	r3, [pc, #220]	; (800ce94 <tcp_process_refused_data+0xec>)
 800cdb8:	f240 6209 	movw	r2, #1545	; 0x609
 800cdbc:	4936      	ldr	r1, [pc, #216]	; (800ce98 <tcp_process_refused_data+0xf0>)
 800cdbe:	4837      	ldr	r0, [pc, #220]	; (800ce9c <tcp_process_refused_data+0xf4>)
 800cdc0:	f007 f8d2 	bl	8013f68 <iprintf>
 800cdc4:	f06f 030f 	mvn.w	r3, #15
 800cdc8:	e060      	b.n	800ce8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdce:	7b5b      	ldrb	r3, [r3, #13]
 800cdd0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdd6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00b      	beq.n	800ce00 <tcp_process_refused_data+0x58>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6918      	ldr	r0, [r3, #16]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	47a0      	blx	r4
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	73fb      	strb	r3, [r7, #15]
 800cdfe:	e007      	b.n	800ce10 <tcp_process_refused_data+0x68>
 800ce00:	2300      	movs	r3, #0
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	2000      	movs	r0, #0
 800ce08:	f000 f8a4 	bl	800cf54 <tcp_recv_null>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ce10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d12a      	bne.n	800ce6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d033      	beq.n	800ce8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce2a:	d005      	beq.n	800ce38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce30:	3301      	adds	r3, #1
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00b      	beq.n	800ce5a <tcp_process_refused_data+0xb2>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6918      	ldr	r0, [r3, #16]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	2200      	movs	r2, #0
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	47a0      	blx	r4
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
 800ce58:	e001      	b.n	800ce5e <tcp_process_refused_data+0xb6>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce62:	f113 0f0d 	cmn.w	r3, #13
 800ce66:	d110      	bne.n	800ce8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce68:	f06f 030c 	mvn.w	r3, #12
 800ce6c:	e00e      	b.n	800ce8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce72:	f113 0f0d 	cmn.w	r3, #13
 800ce76:	d102      	bne.n	800ce7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ce78:	f06f 030c 	mvn.w	r3, #12
 800ce7c:	e006      	b.n	800ce8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ce84:	f06f 0304 	mvn.w	r3, #4
 800ce88:	e000      	b.n	800ce8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd90      	pop	{r4, r7, pc}
 800ce94:	08015bd8 	.word	0x08015bd8
 800ce98:	080160e8 	.word	0x080160e8
 800ce9c:	08015c1c 	.word	0x08015c1c

0800cea0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cea8:	e007      	b.n	800ceba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f80a 	bl	800ceca <tcp_seg_free>
    seg = next;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1f4      	bne.n	800ceaa <tcp_segs_free+0xa>
  }
}
 800cec0:	bf00      	nop
 800cec2:	bf00      	nop
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00c      	beq.n	800cef2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d004      	beq.n	800ceea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fd7d 	bl	800b9e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ceea:	6879      	ldr	r1, [r7, #4]
 800ceec:	2003      	movs	r0, #3
 800ceee:	f7fd ff23 	bl	800ad38 <memp_free>
  }
}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <tcp_seg_copy+0x1c>
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <tcp_seg_copy+0x4c>)
 800cf0c:	f240 6282 	movw	r2, #1666	; 0x682
 800cf10:	490e      	ldr	r1, [pc, #56]	; (800cf4c <tcp_seg_copy+0x50>)
 800cf12:	480f      	ldr	r0, [pc, #60]	; (800cf50 <tcp_seg_copy+0x54>)
 800cf14:	f007 f828 	bl	8013f68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cf18:	2003      	movs	r0, #3
 800cf1a:	f7fd fe9d 	bl	800ac58 <memp_malloc>
 800cf1e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <tcp_seg_copy+0x2e>
    return NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e00a      	b.n	800cf40 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf2a:	2210      	movs	r2, #16
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f007 f804 	bl	8013f3c <memcpy>
  pbuf_ref(cseg->p);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe fdf3 	bl	800bb24 <pbuf_ref>
  return cseg;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	08015bd8 	.word	0x08015bd8
 800cf4c:	0801612c 	.word	0x0801612c
 800cf50:	08015c1c 	.word	0x08015c1c

0800cf54 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d109      	bne.n	800cf7c <tcp_recv_null+0x28>
 800cf68:	4b12      	ldr	r3, [pc, #72]	; (800cfb4 <tcp_recv_null+0x60>)
 800cf6a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf6e:	4912      	ldr	r1, [pc, #72]	; (800cfb8 <tcp_recv_null+0x64>)
 800cf70:	4812      	ldr	r0, [pc, #72]	; (800cfbc <tcp_recv_null+0x68>)
 800cf72:	f006 fff9 	bl	8013f68 <iprintf>
 800cf76:	f06f 030f 	mvn.w	r3, #15
 800cf7a:	e016      	b.n	800cfaa <tcp_recv_null+0x56>

  if (p != NULL) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	891b      	ldrh	r3, [r3, #8]
 800cf86:	4619      	mov	r1, r3
 800cf88:	68b8      	ldr	r0, [r7, #8]
 800cf8a:	f7ff fb19 	bl	800c5c0 <tcp_recved>
    pbuf_free(p);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7fe fd28 	bl	800b9e4 <pbuf_free>
 800cf94:	e008      	b.n	800cfa8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cf96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d104      	bne.n	800cfa8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cf9e:	68b8      	ldr	r0, [r7, #8]
 800cfa0:	f7ff f9be 	bl	800c320 <tcp_close>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	e000      	b.n	800cfaa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	08015bd8 	.word	0x08015bd8
 800cfb8:	08016148 	.word	0x08016148
 800cfbc:	08015c1c 	.word	0x08015c1c

0800cfc0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cfca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	db01      	blt.n	800cfd6 <tcp_kill_prio+0x16>
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	e000      	b.n	800cfd8 <tcp_kill_prio+0x18>
 800cfd6:	237f      	movs	r3, #127	; 0x7f
 800cfd8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cfda:	7afb      	ldrb	r3, [r7, #11]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d034      	beq.n	800d04a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cfea:	2300      	movs	r3, #0
 800cfec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfee:	4b19      	ldr	r3, [pc, #100]	; (800d054 <tcp_kill_prio+0x94>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	e01f      	b.n	800d036 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	7d5b      	ldrb	r3, [r3, #21]
 800cffa:	7afa      	ldrb	r2, [r7, #11]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d80c      	bhi.n	800d01a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d004:	7afa      	ldrb	r2, [r7, #11]
 800d006:	429a      	cmp	r2, r3
 800d008:	d112      	bne.n	800d030 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d00a:	4b13      	ldr	r3, [pc, #76]	; (800d058 <tcp_kill_prio+0x98>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	429a      	cmp	r2, r3
 800d018:	d80a      	bhi.n	800d030 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d01a:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <tcp_kill_prio+0x98>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	6a1b      	ldr	r3, [r3, #32]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	7d5b      	ldrb	r3, [r3, #21]
 800d02e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1dc      	bne.n	800cff6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d004      	beq.n	800d04c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d042:	6938      	ldr	r0, [r7, #16]
 800d044:	f7ff fa56 	bl	800c4f4 <tcp_abort>
 800d048:	e000      	b.n	800d04c <tcp_kill_prio+0x8c>
    return;
 800d04a:	bf00      	nop
  }
}
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20008c88 	.word	0x20008c88
 800d058:	20008c7c 	.word	0x20008c7c

0800d05c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	2b08      	cmp	r3, #8
 800d06a:	d009      	beq.n	800d080 <tcp_kill_state+0x24>
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	2b09      	cmp	r3, #9
 800d070:	d006      	beq.n	800d080 <tcp_kill_state+0x24>
 800d072:	4b1a      	ldr	r3, [pc, #104]	; (800d0dc <tcp_kill_state+0x80>)
 800d074:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d078:	4919      	ldr	r1, [pc, #100]	; (800d0e0 <tcp_kill_state+0x84>)
 800d07a:	481a      	ldr	r0, [pc, #104]	; (800d0e4 <tcp_kill_state+0x88>)
 800d07c:	f006 ff74 	bl	8013f68 <iprintf>

  inactivity = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d088:	4b17      	ldr	r3, [pc, #92]	; (800d0e8 <tcp_kill_state+0x8c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	e017      	b.n	800d0c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	7d1b      	ldrb	r3, [r3, #20]
 800d094:	79fa      	ldrb	r2, [r7, #7]
 800d096:	429a      	cmp	r2, r3
 800d098:	d10f      	bne.n	800d0ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d09a:	4b14      	ldr	r3, [pc, #80]	; (800d0ec <tcp_kill_state+0x90>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d807      	bhi.n	800d0ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d0aa:	4b10      	ldr	r3, [pc, #64]	; (800d0ec <tcp_kill_state+0x90>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e4      	bne.n	800d090 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d003      	beq.n	800d0d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	6938      	ldr	r0, [r7, #16]
 800d0d0:	f7ff f952 	bl	800c378 <tcp_abandon>
  }
}
 800d0d4:	bf00      	nop
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	08015bd8 	.word	0x08015bd8
 800d0e0:	08016164 	.word	0x08016164
 800d0e4:	08015c1c 	.word	0x08015c1c
 800d0e8:	20008c88 	.word	0x20008c88
 800d0ec:	20008c7c 	.word	0x20008c7c

0800d0f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0fe:	4b12      	ldr	r3, [pc, #72]	; (800d148 <tcp_kill_timewait+0x58>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	e012      	b.n	800d12c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d106:	4b11      	ldr	r3, [pc, #68]	; (800d14c <tcp_kill_timewait+0x5c>)
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	429a      	cmp	r2, r3
 800d114:	d807      	bhi.n	800d126 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d116:	4b0d      	ldr	r3, [pc, #52]	; (800d14c <tcp_kill_timewait+0x5c>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e9      	bne.n	800d106 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d138:	68b8      	ldr	r0, [r7, #8]
 800d13a:	f7ff f9db 	bl	800c4f4 <tcp_abort>
  }
}
 800d13e:	bf00      	nop
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20008c8c 	.word	0x20008c8c
 800d14c:	20008c7c 	.word	0x20008c7c

0800d150 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d156:	4b10      	ldr	r3, [pc, #64]	; (800d198 <tcp_handle_closepend+0x48>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d15c:	e014      	b.n	800d188 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	8b5b      	ldrh	r3, [r3, #26]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d009      	beq.n	800d184 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8b5b      	ldrh	r3, [r3, #26]
 800d174:	f023 0308 	bic.w	r3, r3, #8
 800d178:	b29a      	uxth	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff f864 	bl	800c24c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1e7      	bne.n	800d15e <tcp_handle_closepend+0xe>
  }
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20008c88 	.word	0x20008c88

0800d19c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	f7fd fd56 	bl	800ac58 <memp_malloc>
 800d1ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d126      	bne.n	800d202 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d1b4:	f7ff ffcc 	bl	800d150 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d1b8:	f7ff ff9a 	bl	800d0f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1bc:	2001      	movs	r0, #1
 800d1be:	f7fd fd4b 	bl	800ac58 <memp_malloc>
 800d1c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d11b      	bne.n	800d202 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d1ca:	2009      	movs	r0, #9
 800d1cc:	f7ff ff46 	bl	800d05c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	f7fd fd41 	bl	800ac58 <memp_malloc>
 800d1d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d111      	bne.n	800d202 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d1de:	2008      	movs	r0, #8
 800d1e0:	f7ff ff3c 	bl	800d05c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	f7fd fd37 	bl	800ac58 <memp_malloc>
 800d1ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d107      	bne.n	800d202 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff fee3 	bl	800cfc0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	f7fd fd2c 	bl	800ac58 <memp_malloc>
 800d200:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d03f      	beq.n	800d288 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d208:	229c      	movs	r2, #156	; 0x9c
 800d20a:	2100      	movs	r1, #0
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f006 fea3 	bl	8013f58 <memset>
    pcb->prio = prio;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d21e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d228:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	22ff      	movs	r2, #255	; 0xff
 800d236:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d23e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2206      	movs	r2, #6
 800d244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2206      	movs	r2, #6
 800d24c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d254:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2201      	movs	r2, #1
 800d25a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d25e:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <tcp_alloc+0xf8>)
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d266:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <tcp_alloc+0xfc>)
 800d268:	781a      	ldrb	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d274:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4a08      	ldr	r2, [pc, #32]	; (800d29c <tcp_alloc+0x100>)
 800d27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4a07      	ldr	r2, [pc, #28]	; (800d2a0 <tcp_alloc+0x104>)
 800d284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d288:	68fb      	ldr	r3, [r7, #12]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	20008c7c 	.word	0x20008c7c
 800d298:	20008c92 	.word	0x20008c92
 800d29c:	0800cf55 	.word	0x0800cf55
 800d2a0:	006ddd00 	.word	0x006ddd00

0800d2a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d107      	bne.n	800d2c2 <tcp_pcb_purge+0x1e>
 800d2b2:	4b21      	ldr	r3, [pc, #132]	; (800d338 <tcp_pcb_purge+0x94>)
 800d2b4:	f640 0251 	movw	r2, #2129	; 0x851
 800d2b8:	4920      	ldr	r1, [pc, #128]	; (800d33c <tcp_pcb_purge+0x98>)
 800d2ba:	4821      	ldr	r0, [pc, #132]	; (800d340 <tcp_pcb_purge+0x9c>)
 800d2bc:	f006 fe54 	bl	8013f68 <iprintf>
 800d2c0:	e037      	b.n	800d332 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7d1b      	ldrb	r3, [r3, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d033      	beq.n	800d332 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d2ce:	2b0a      	cmp	r3, #10
 800d2d0:	d02f      	beq.n	800d332 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d02b      	beq.n	800d332 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d007      	beq.n	800d2f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fb7c 	bl	800b9e4 <pbuf_free>
      pcb->refused_data = NULL;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f986 	bl	800d60c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d306:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff fdc7 	bl	800cea0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fdc2 	bl	800cea0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	66da      	str	r2, [r3, #108]	; 0x6c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	08015bd8 	.word	0x08015bd8
 800d33c:	08016224 	.word	0x08016224
 800d340:	08015c1c 	.word	0x08015c1c

0800d344 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d106      	bne.n	800d362 <tcp_pcb_remove+0x1e>
 800d354:	4b3e      	ldr	r3, [pc, #248]	; (800d450 <tcp_pcb_remove+0x10c>)
 800d356:	f640 0283 	movw	r2, #2179	; 0x883
 800d35a:	493e      	ldr	r1, [pc, #248]	; (800d454 <tcp_pcb_remove+0x110>)
 800d35c:	483e      	ldr	r0, [pc, #248]	; (800d458 <tcp_pcb_remove+0x114>)
 800d35e:	f006 fe03 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <tcp_pcb_remove+0x32>
 800d368:	4b39      	ldr	r3, [pc, #228]	; (800d450 <tcp_pcb_remove+0x10c>)
 800d36a:	f640 0284 	movw	r2, #2180	; 0x884
 800d36e:	493b      	ldr	r1, [pc, #236]	; (800d45c <tcp_pcb_remove+0x118>)
 800d370:	4839      	ldr	r0, [pc, #228]	; (800d458 <tcp_pcb_remove+0x114>)
 800d372:	f006 fdf9 	bl	8013f68 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d105      	bne.n	800d38c <tcp_pcb_remove+0x48>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	e013      	b.n	800d3b4 <tcp_pcb_remove+0x70>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	e00c      	b.n	800d3ae <tcp_pcb_remove+0x6a>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d104      	bne.n	800d3a8 <tcp_pcb_remove+0x64>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	60da      	str	r2, [r3, #12]
 800d3a6:	e005      	b.n	800d3b4 <tcp_pcb_remove+0x70>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1ef      	bne.n	800d394 <tcp_pcb_remove+0x50>
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d3ba:	6838      	ldr	r0, [r7, #0]
 800d3bc:	f7ff ff72 	bl	800d2a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	2b0a      	cmp	r3, #10
 800d3c6:	d013      	beq.n	800d3f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d00f      	beq.n	800d3f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d009      	beq.n	800d3f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	8b5b      	ldrh	r3, [r3, #26]
 800d3e0:	f043 0302 	orr.w	r3, r3, #2
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d3ea:	6838      	ldr	r0, [r7, #0]
 800d3ec:	f002 ff6e 	bl	80102cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	7d1b      	ldrb	r3, [r3, #20]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d020      	beq.n	800d43a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d006      	beq.n	800d40e <tcp_pcb_remove+0xca>
 800d400:	4b13      	ldr	r3, [pc, #76]	; (800d450 <tcp_pcb_remove+0x10c>)
 800d402:	f640 0293 	movw	r2, #2195	; 0x893
 800d406:	4916      	ldr	r1, [pc, #88]	; (800d460 <tcp_pcb_remove+0x11c>)
 800d408:	4813      	ldr	r0, [pc, #76]	; (800d458 <tcp_pcb_remove+0x114>)
 800d40a:	f006 fdad 	bl	8013f68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d412:	2b00      	cmp	r3, #0
 800d414:	d006      	beq.n	800d424 <tcp_pcb_remove+0xe0>
 800d416:	4b0e      	ldr	r3, [pc, #56]	; (800d450 <tcp_pcb_remove+0x10c>)
 800d418:	f640 0294 	movw	r2, #2196	; 0x894
 800d41c:	4911      	ldr	r1, [pc, #68]	; (800d464 <tcp_pcb_remove+0x120>)
 800d41e:	480e      	ldr	r0, [pc, #56]	; (800d458 <tcp_pcb_remove+0x114>)
 800d420:	f006 fda2 	bl	8013f68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d006      	beq.n	800d43a <tcp_pcb_remove+0xf6>
 800d42c:	4b08      	ldr	r3, [pc, #32]	; (800d450 <tcp_pcb_remove+0x10c>)
 800d42e:	f640 0296 	movw	r2, #2198	; 0x896
 800d432:	490d      	ldr	r1, [pc, #52]	; (800d468 <tcp_pcb_remove+0x124>)
 800d434:	4808      	ldr	r0, [pc, #32]	; (800d458 <tcp_pcb_remove+0x114>)
 800d436:	f006 fd97 	bl	8013f68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2200      	movs	r2, #0
 800d43e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2200      	movs	r2, #0
 800d444:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d446:	bf00      	nop
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	08015bd8 	.word	0x08015bd8
 800d454:	08016240 	.word	0x08016240
 800d458:	08015c1c 	.word	0x08015c1c
 800d45c:	0801625c 	.word	0x0801625c
 800d460:	0801627c 	.word	0x0801627c
 800d464:	08016294 	.word	0x08016294
 800d468:	080162b0 	.word	0x080162b0

0800d46c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <tcp_next_iss+0x1c>
 800d47a:	4b0a      	ldr	r3, [pc, #40]	; (800d4a4 <tcp_next_iss+0x38>)
 800d47c:	f640 02af 	movw	r2, #2223	; 0x8af
 800d480:	4909      	ldr	r1, [pc, #36]	; (800d4a8 <tcp_next_iss+0x3c>)
 800d482:	480a      	ldr	r0, [pc, #40]	; (800d4ac <tcp_next_iss+0x40>)
 800d484:	f006 fd70 	bl	8013f68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <tcp_next_iss+0x44>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	4b09      	ldr	r3, [pc, #36]	; (800d4b4 <tcp_next_iss+0x48>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4413      	add	r3, r2
 800d492:	4a07      	ldr	r2, [pc, #28]	; (800d4b0 <tcp_next_iss+0x44>)
 800d494:	6013      	str	r3, [r2, #0]
  return iss;
 800d496:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <tcp_next_iss+0x44>)
 800d498:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	08015bd8 	.word	0x08015bd8
 800d4a8:	080162c8 	.word	0x080162c8
 800d4ac:	08015c1c 	.word	0x08015c1c
 800d4b0:	20000024 	.word	0x20000024
 800d4b4:	20008c7c 	.word	0x20008c7c

0800d4b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <tcp_eff_send_mss_netif+0x22>
 800d4cc:	4b14      	ldr	r3, [pc, #80]	; (800d520 <tcp_eff_send_mss_netif+0x68>)
 800d4ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d4d2:	4914      	ldr	r1, [pc, #80]	; (800d524 <tcp_eff_send_mss_netif+0x6c>)
 800d4d4:	4814      	ldr	r0, [pc, #80]	; (800d528 <tcp_eff_send_mss_netif+0x70>)
 800d4d6:	f006 fd47 	bl	8013f68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d4e0:	89fb      	ldrh	r3, [r7, #14]
 800d4e2:	e019      	b.n	800d518 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d4ea:	8afb      	ldrh	r3, [r7, #22]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d012      	beq.n	800d516 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d4f0:	2328      	movs	r3, #40	; 0x28
 800d4f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d4f4:	8afa      	ldrh	r2, [r7, #22]
 800d4f6:	8abb      	ldrh	r3, [r7, #20]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d904      	bls.n	800d506 <tcp_eff_send_mss_netif+0x4e>
 800d4fc:	8afa      	ldrh	r2, [r7, #22]
 800d4fe:	8abb      	ldrh	r3, [r7, #20]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	b29b      	uxth	r3, r3
 800d504:	e000      	b.n	800d508 <tcp_eff_send_mss_netif+0x50>
 800d506:	2300      	movs	r3, #0
 800d508:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d50a:	8a7a      	ldrh	r2, [r7, #18]
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	4293      	cmp	r3, r2
 800d510:	bf28      	it	cs
 800d512:	4613      	movcs	r3, r2
 800d514:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d516:	89fb      	ldrh	r3, [r7, #14]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	08015bd8 	.word	0x08015bd8
 800d524:	080162e4 	.word	0x080162e4
 800d528:	08015c1c 	.word	0x08015c1c

0800d52c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d119      	bne.n	800d574 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d540:	4b10      	ldr	r3, [pc, #64]	; (800d584 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d542:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d546:	4910      	ldr	r1, [pc, #64]	; (800d588 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d548:	4810      	ldr	r0, [pc, #64]	; (800d58c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d54a:	f006 fd0d 	bl	8013f68 <iprintf>

  while (pcb != NULL) {
 800d54e:	e011      	b.n	800d574 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d108      	bne.n	800d56e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f7fe ffc6 	bl	800c4f4 <tcp_abort>
      pcb = next;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e002      	b.n	800d574 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1ea      	bne.n	800d550 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08015bd8 	.word	0x08015bd8
 800d588:	0801630c 	.word	0x0801630c
 800d58c:	08015c1c 	.word	0x08015c1c

0800d590 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02a      	beq.n	800d5f6 <tcp_netif_ip_addr_changed+0x66>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d026      	beq.n	800d5f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d5a8:	4b15      	ldr	r3, [pc, #84]	; (800d600 <tcp_netif_ip_addr_changed+0x70>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ffbc 	bl	800d52c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d5b4:	4b13      	ldr	r3, [pc, #76]	; (800d604 <tcp_netif_ip_addr_changed+0x74>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ffb6 	bl	800d52c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d017      	beq.n	800d5f6 <tcp_netif_ip_addr_changed+0x66>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d013      	beq.n	800d5f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5ce:	4b0e      	ldr	r3, [pc, #56]	; (800d608 <tcp_netif_ip_addr_changed+0x78>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e00c      	b.n	800d5f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d103      	bne.n	800d5ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	60fb      	str	r3, [r7, #12]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1ef      	bne.n	800d5d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d5f6:	bf00      	nop
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	20008c88 	.word	0x20008c88
 800d604:	20008c80 	.word	0x20008c80
 800d608:	20008c84 	.word	0x20008c84

0800d60c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d007      	beq.n	800d62c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fc3d 	bl	800cea0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d634:	b590      	push	{r4, r7, lr}
 800d636:	b08d      	sub	sp, #52	; 0x34
 800d638:	af04      	add	r7, sp, #16
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d105      	bne.n	800d650 <tcp_input+0x1c>
 800d644:	4b9b      	ldr	r3, [pc, #620]	; (800d8b4 <tcp_input+0x280>)
 800d646:	2283      	movs	r2, #131	; 0x83
 800d648:	499b      	ldr	r1, [pc, #620]	; (800d8b8 <tcp_input+0x284>)
 800d64a:	489c      	ldr	r0, [pc, #624]	; (800d8bc <tcp_input+0x288>)
 800d64c:	f006 fc8c 	bl	8013f68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	4a9a      	ldr	r2, [pc, #616]	; (800d8c0 <tcp_input+0x28c>)
 800d656:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	895b      	ldrh	r3, [r3, #10]
 800d65c:	2b13      	cmp	r3, #19
 800d65e:	f240 83d1 	bls.w	800de04 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d662:	4b98      	ldr	r3, [pc, #608]	; (800d8c4 <tcp_input+0x290>)
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	4a97      	ldr	r2, [pc, #604]	; (800d8c4 <tcp_input+0x290>)
 800d668:	6812      	ldr	r2, [r2, #0]
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f005 fbd5 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	f040 83c7 	bne.w	800de08 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d67a:	4b92      	ldr	r3, [pc, #584]	; (800d8c4 <tcp_input+0x290>)
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d682:	2be0      	cmp	r3, #224	; 0xe0
 800d684:	f000 83c0 	beq.w	800de08 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d688:	4b8d      	ldr	r3, [pc, #564]	; (800d8c0 <tcp_input+0x28c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	899b      	ldrh	r3, [r3, #12]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4618      	mov	r0, r3
 800d692:	f7fc fe69 	bl	800a368 <lwip_htons>
 800d696:	4603      	mov	r3, r0
 800d698:	0b1b      	lsrs	r3, r3, #12
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d6a2:	7cbb      	ldrb	r3, [r7, #18]
 800d6a4:	2b13      	cmp	r3, #19
 800d6a6:	f240 83b1 	bls.w	800de0c <tcp_input+0x7d8>
 800d6aa:	7cbb      	ldrb	r3, [r7, #18]
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	891b      	ldrh	r3, [r3, #8]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	f200 83aa 	bhi.w	800de0c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d6b8:	7cbb      	ldrb	r3, [r7, #18]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	3b14      	subs	r3, #20
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	4b81      	ldr	r3, [pc, #516]	; (800d8c8 <tcp_input+0x294>)
 800d6c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d6c4:	4b81      	ldr	r3, [pc, #516]	; (800d8cc <tcp_input+0x298>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	895a      	ldrh	r2, [r3, #10]
 800d6ce:	7cbb      	ldrb	r3, [r7, #18]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d309      	bcc.n	800d6ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d6d6:	4b7c      	ldr	r3, [pc, #496]	; (800d8c8 <tcp_input+0x294>)
 800d6d8:	881a      	ldrh	r2, [r3, #0]
 800d6da:	4b7d      	ldr	r3, [pc, #500]	; (800d8d0 <tcp_input+0x29c>)
 800d6dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d6de:	7cbb      	ldrb	r3, [r7, #18]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7fe f8f8 	bl	800b8d8 <pbuf_remove_header>
 800d6e8:	e04e      	b.n	800d788 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d105      	bne.n	800d6fe <tcp_input+0xca>
 800d6f2:	4b70      	ldr	r3, [pc, #448]	; (800d8b4 <tcp_input+0x280>)
 800d6f4:	22c2      	movs	r2, #194	; 0xc2
 800d6f6:	4977      	ldr	r1, [pc, #476]	; (800d8d4 <tcp_input+0x2a0>)
 800d6f8:	4870      	ldr	r0, [pc, #448]	; (800d8bc <tcp_input+0x288>)
 800d6fa:	f006 fc35 	bl	8013f68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d6fe:	2114      	movs	r1, #20
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7fe f8e9 	bl	800b8d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	895a      	ldrh	r2, [r3, #10]
 800d70a:	4b71      	ldr	r3, [pc, #452]	; (800d8d0 <tcp_input+0x29c>)
 800d70c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d70e:	4b6e      	ldr	r3, [pc, #440]	; (800d8c8 <tcp_input+0x294>)
 800d710:	881a      	ldrh	r2, [r3, #0]
 800d712:	4b6f      	ldr	r3, [pc, #444]	; (800d8d0 <tcp_input+0x29c>)
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d71a:	4b6d      	ldr	r3, [pc, #436]	; (800d8d0 <tcp_input+0x29c>)
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7fe f8d9 	bl	800b8d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	895b      	ldrh	r3, [r3, #10]
 800d72c:	8a3a      	ldrh	r2, [r7, #16]
 800d72e:	429a      	cmp	r2, r3
 800d730:	f200 836e 	bhi.w	800de10 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	4a64      	ldr	r2, [pc, #400]	; (800d8cc <tcp_input+0x298>)
 800d73c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	8a3a      	ldrh	r2, [r7, #16]
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe f8c6 	bl	800b8d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	891a      	ldrh	r2, [r3, #8]
 800d750:	8a3b      	ldrh	r3, [r7, #16]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	b29a      	uxth	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	895b      	ldrh	r3, [r3, #10]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <tcp_input+0x13a>
 800d762:	4b54      	ldr	r3, [pc, #336]	; (800d8b4 <tcp_input+0x280>)
 800d764:	22df      	movs	r2, #223	; 0xdf
 800d766:	495c      	ldr	r1, [pc, #368]	; (800d8d8 <tcp_input+0x2a4>)
 800d768:	4854      	ldr	r0, [pc, #336]	; (800d8bc <tcp_input+0x288>)
 800d76a:	f006 fbfd 	bl	8013f68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	891a      	ldrh	r2, [r3, #8]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	891b      	ldrh	r3, [r3, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d005      	beq.n	800d788 <tcp_input+0x154>
 800d77c:	4b4d      	ldr	r3, [pc, #308]	; (800d8b4 <tcp_input+0x280>)
 800d77e:	22e0      	movs	r2, #224	; 0xe0
 800d780:	4956      	ldr	r1, [pc, #344]	; (800d8dc <tcp_input+0x2a8>)
 800d782:	484e      	ldr	r0, [pc, #312]	; (800d8bc <tcp_input+0x288>)
 800d784:	f006 fbf0 	bl	8013f68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d788:	4b4d      	ldr	r3, [pc, #308]	; (800d8c0 <tcp_input+0x28c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	b29b      	uxth	r3, r3
 800d790:	4a4b      	ldr	r2, [pc, #300]	; (800d8c0 <tcp_input+0x28c>)
 800d792:	6814      	ldr	r4, [r2, #0]
 800d794:	4618      	mov	r0, r3
 800d796:	f7fc fde7 	bl	800a368 <lwip_htons>
 800d79a:	4603      	mov	r3, r0
 800d79c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d79e:	4b48      	ldr	r3, [pc, #288]	; (800d8c0 <tcp_input+0x28c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	885b      	ldrh	r3, [r3, #2]
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	4a46      	ldr	r2, [pc, #280]	; (800d8c0 <tcp_input+0x28c>)
 800d7a8:	6814      	ldr	r4, [r2, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fc fddc 	bl	800a368 <lwip_htons>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d7b4:	4b42      	ldr	r3, [pc, #264]	; (800d8c0 <tcp_input+0x28c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	4a41      	ldr	r2, [pc, #260]	; (800d8c0 <tcp_input+0x28c>)
 800d7bc:	6814      	ldr	r4, [r2, #0]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fc fde7 	bl	800a392 <lwip_htonl>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	6063      	str	r3, [r4, #4]
 800d7c8:	6863      	ldr	r3, [r4, #4]
 800d7ca:	4a45      	ldr	r2, [pc, #276]	; (800d8e0 <tcp_input+0x2ac>)
 800d7cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d7ce:	4b3c      	ldr	r3, [pc, #240]	; (800d8c0 <tcp_input+0x28c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	4a3a      	ldr	r2, [pc, #232]	; (800d8c0 <tcp_input+0x28c>)
 800d7d6:	6814      	ldr	r4, [r2, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fc fdda 	bl	800a392 <lwip_htonl>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	60a3      	str	r3, [r4, #8]
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	4a3f      	ldr	r2, [pc, #252]	; (800d8e4 <tcp_input+0x2b0>)
 800d7e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d7e8:	4b35      	ldr	r3, [pc, #212]	; (800d8c0 <tcp_input+0x28c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	89db      	ldrh	r3, [r3, #14]
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	4a33      	ldr	r2, [pc, #204]	; (800d8c0 <tcp_input+0x28c>)
 800d7f2:	6814      	ldr	r4, [r2, #0]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fc fdb7 	bl	800a368 <lwip_htons>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d7fe:	4b30      	ldr	r3, [pc, #192]	; (800d8c0 <tcp_input+0x28c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	899b      	ldrh	r3, [r3, #12]
 800d804:	b29b      	uxth	r3, r3
 800d806:	4618      	mov	r0, r3
 800d808:	f7fc fdae 	bl	800a368 <lwip_htons>
 800d80c:	4603      	mov	r3, r0
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b34      	ldr	r3, [pc, #208]	; (800d8e8 <tcp_input+0x2b4>)
 800d818:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	891a      	ldrh	r2, [r3, #8]
 800d81e:	4b33      	ldr	r3, [pc, #204]	; (800d8ec <tcp_input+0x2b8>)
 800d820:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d822:	4b31      	ldr	r3, [pc, #196]	; (800d8e8 <tcp_input+0x2b4>)
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	f003 0303 	and.w	r3, r3, #3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00c      	beq.n	800d848 <tcp_input+0x214>
    tcplen++;
 800d82e:	4b2f      	ldr	r3, [pc, #188]	; (800d8ec <tcp_input+0x2b8>)
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	b29a      	uxth	r2, r3
 800d836:	4b2d      	ldr	r3, [pc, #180]	; (800d8ec <tcp_input+0x2b8>)
 800d838:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	891a      	ldrh	r2, [r3, #8]
 800d83e:	4b2b      	ldr	r3, [pc, #172]	; (800d8ec <tcp_input+0x2b8>)
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	f200 82e6 	bhi.w	800de14 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d848:	2300      	movs	r3, #0
 800d84a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d84c:	4b28      	ldr	r3, [pc, #160]	; (800d8f0 <tcp_input+0x2bc>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	e09d      	b.n	800d990 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	7d1b      	ldrb	r3, [r3, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d105      	bne.n	800d868 <tcp_input+0x234>
 800d85c:	4b15      	ldr	r3, [pc, #84]	; (800d8b4 <tcp_input+0x280>)
 800d85e:	22fb      	movs	r2, #251	; 0xfb
 800d860:	4924      	ldr	r1, [pc, #144]	; (800d8f4 <tcp_input+0x2c0>)
 800d862:	4816      	ldr	r0, [pc, #88]	; (800d8bc <tcp_input+0x288>)
 800d864:	f006 fb80 	bl	8013f68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	7d1b      	ldrb	r3, [r3, #20]
 800d86c:	2b0a      	cmp	r3, #10
 800d86e:	d105      	bne.n	800d87c <tcp_input+0x248>
 800d870:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <tcp_input+0x280>)
 800d872:	22fc      	movs	r2, #252	; 0xfc
 800d874:	4920      	ldr	r1, [pc, #128]	; (800d8f8 <tcp_input+0x2c4>)
 800d876:	4811      	ldr	r0, [pc, #68]	; (800d8bc <tcp_input+0x288>)
 800d878:	f006 fb76 	bl	8013f68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	7d1b      	ldrb	r3, [r3, #20]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d105      	bne.n	800d890 <tcp_input+0x25c>
 800d884:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <tcp_input+0x280>)
 800d886:	22fd      	movs	r2, #253	; 0xfd
 800d888:	491c      	ldr	r1, [pc, #112]	; (800d8fc <tcp_input+0x2c8>)
 800d88a:	480c      	ldr	r0, [pc, #48]	; (800d8bc <tcp_input+0x288>)
 800d88c:	f006 fb6c 	bl	8013f68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	7a1b      	ldrb	r3, [r3, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d033      	beq.n	800d900 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	7a1a      	ldrb	r2, [r3, #8]
 800d89c:	4b09      	ldr	r3, [pc, #36]	; (800d8c4 <tcp_input+0x290>)
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d029      	beq.n	800d900 <tcp_input+0x2cc>
      prev = pcb;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	61bb      	str	r3, [r7, #24]
      continue;
 800d8b0:	e06b      	b.n	800d98a <tcp_input+0x356>
 800d8b2:	bf00      	nop
 800d8b4:	08016340 	.word	0x08016340
 800d8b8:	08016374 	.word	0x08016374
 800d8bc:	0801638c 	.word	0x0801638c
 800d8c0:	20008ca4 	.word	0x20008ca4
 800d8c4:	2000570c 	.word	0x2000570c
 800d8c8:	20008ca8 	.word	0x20008ca8
 800d8cc:	20008cac 	.word	0x20008cac
 800d8d0:	20008caa 	.word	0x20008caa
 800d8d4:	080163b4 	.word	0x080163b4
 800d8d8:	080163c4 	.word	0x080163c4
 800d8dc:	080163d0 	.word	0x080163d0
 800d8e0:	20008cb4 	.word	0x20008cb4
 800d8e4:	20008cb8 	.word	0x20008cb8
 800d8e8:	20008cc0 	.word	0x20008cc0
 800d8ec:	20008cbe 	.word	0x20008cbe
 800d8f0:	20008c88 	.word	0x20008c88
 800d8f4:	080163f0 	.word	0x080163f0
 800d8f8:	08016418 	.word	0x08016418
 800d8fc:	08016444 	.word	0x08016444
    }

    if (pcb->remote_port == tcphdr->src &&
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	8b1a      	ldrh	r2, [r3, #24]
 800d904:	4b72      	ldr	r3, [pc, #456]	; (800dad0 <tcp_input+0x49c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d13a      	bne.n	800d986 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	8ada      	ldrh	r2, [r3, #22]
 800d914:	4b6e      	ldr	r3, [pc, #440]	; (800dad0 <tcp_input+0x49c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	885b      	ldrh	r3, [r3, #2]
 800d91a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d132      	bne.n	800d986 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	4b6b      	ldr	r3, [pc, #428]	; (800dad4 <tcp_input+0x4a0>)
 800d926:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d928:	429a      	cmp	r2, r3
 800d92a:	d12c      	bne.n	800d986 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	4b68      	ldr	r3, [pc, #416]	; (800dad4 <tcp_input+0x4a0>)
 800d932:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d934:	429a      	cmp	r2, r3
 800d936:	d126      	bne.n	800d986 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	69fa      	ldr	r2, [r7, #28]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d106      	bne.n	800d950 <tcp_input+0x31c>
 800d942:	4b65      	ldr	r3, [pc, #404]	; (800dad8 <tcp_input+0x4a4>)
 800d944:	f240 120d 	movw	r2, #269	; 0x10d
 800d948:	4964      	ldr	r1, [pc, #400]	; (800dadc <tcp_input+0x4a8>)
 800d94a:	4865      	ldr	r0, [pc, #404]	; (800dae0 <tcp_input+0x4ac>)
 800d94c:	f006 fb0c 	bl	8013f68 <iprintf>
      if (prev != NULL) {
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <tcp_input+0x338>
        prev->next = pcb->next;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d95e:	4b61      	ldr	r3, [pc, #388]	; (800dae4 <tcp_input+0x4b0>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d966:	4a5f      	ldr	r2, [pc, #380]	; (800dae4 <tcp_input+0x4b0>)
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	69fa      	ldr	r2, [r7, #28]
 800d972:	429a      	cmp	r2, r3
 800d974:	d111      	bne.n	800d99a <tcp_input+0x366>
 800d976:	4b58      	ldr	r3, [pc, #352]	; (800dad8 <tcp_input+0x4a4>)
 800d978:	f240 1215 	movw	r2, #277	; 0x115
 800d97c:	495a      	ldr	r1, [pc, #360]	; (800dae8 <tcp_input+0x4b4>)
 800d97e:	4858      	ldr	r0, [pc, #352]	; (800dae0 <tcp_input+0x4ac>)
 800d980:	f006 faf2 	bl	8013f68 <iprintf>
      break;
 800d984:	e009      	b.n	800d99a <tcp_input+0x366>
    }
    prev = pcb;
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	61fb      	str	r3, [r7, #28]
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	f47f af5e 	bne.w	800d854 <tcp_input+0x220>
 800d998:	e000      	b.n	800d99c <tcp_input+0x368>
      break;
 800d99a:	bf00      	nop
  }

  if (pcb == NULL) {
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f040 80aa 	bne.w	800daf8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9a4:	4b51      	ldr	r3, [pc, #324]	; (800daec <tcp_input+0x4b8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	61fb      	str	r3, [r7, #28]
 800d9aa:	e03f      	b.n	800da2c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	7d1b      	ldrb	r3, [r3, #20]
 800d9b0:	2b0a      	cmp	r3, #10
 800d9b2:	d006      	beq.n	800d9c2 <tcp_input+0x38e>
 800d9b4:	4b48      	ldr	r3, [pc, #288]	; (800dad8 <tcp_input+0x4a4>)
 800d9b6:	f240 121f 	movw	r2, #287	; 0x11f
 800d9ba:	494d      	ldr	r1, [pc, #308]	; (800daf0 <tcp_input+0x4bc>)
 800d9bc:	4848      	ldr	r0, [pc, #288]	; (800dae0 <tcp_input+0x4ac>)
 800d9be:	f006 fad3 	bl	8013f68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	7a1b      	ldrb	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d009      	beq.n	800d9de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	7a1a      	ldrb	r2, [r3, #8]
 800d9ce:	4b41      	ldr	r3, [pc, #260]	; (800dad4 <tcp_input+0x4a0>)
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d122      	bne.n	800da24 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	8b1a      	ldrh	r2, [r3, #24]
 800d9e2:	4b3b      	ldr	r3, [pc, #236]	; (800dad0 <tcp_input+0x49c>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d11b      	bne.n	800da26 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	8ada      	ldrh	r2, [r3, #22]
 800d9f2:	4b37      	ldr	r3, [pc, #220]	; (800dad0 <tcp_input+0x49c>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	885b      	ldrh	r3, [r3, #2]
 800d9f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d113      	bne.n	800da26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	4b34      	ldr	r3, [pc, #208]	; (800dad4 <tcp_input+0x4a0>)
 800da04:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da06:	429a      	cmp	r2, r3
 800da08:	d10d      	bne.n	800da26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	4b31      	ldr	r3, [pc, #196]	; (800dad4 <tcp_input+0x4a0>)
 800da10:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da12:	429a      	cmp	r2, r3
 800da14:	d107      	bne.n	800da26 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da16:	69f8      	ldr	r0, [r7, #28]
 800da18:	f000 fb56 	bl	800e0c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7fd ffe1 	bl	800b9e4 <pbuf_free>
        return;
 800da22:	e1fd      	b.n	800de20 <tcp_input+0x7ec>
        continue;
 800da24:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	61fb      	str	r3, [r7, #28]
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1bc      	bne.n	800d9ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da36:	4b2f      	ldr	r3, [pc, #188]	; (800daf4 <tcp_input+0x4c0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	617b      	str	r3, [r7, #20]
 800da3c:	e02a      	b.n	800da94 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	7a1b      	ldrb	r3, [r3, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00c      	beq.n	800da60 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	7a1a      	ldrb	r2, [r3, #8]
 800da4a:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <tcp_input+0x4a0>)
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da52:	3301      	adds	r3, #1
 800da54:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da56:	429a      	cmp	r2, r3
 800da58:	d002      	beq.n	800da60 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	61bb      	str	r3, [r7, #24]
        continue;
 800da5e:	e016      	b.n	800da8e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	8ada      	ldrh	r2, [r3, #22]
 800da64:	4b1a      	ldr	r3, [pc, #104]	; (800dad0 <tcp_input+0x49c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	885b      	ldrh	r3, [r3, #2]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d10c      	bne.n	800da8a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	4b17      	ldr	r3, [pc, #92]	; (800dad4 <tcp_input+0x4a0>)
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d00f      	beq.n	800da9c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00d      	beq.n	800da9e <tcp_input+0x46a>
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d009      	beq.n	800da9e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	617b      	str	r3, [r7, #20]
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1d1      	bne.n	800da3e <tcp_input+0x40a>
 800da9a:	e000      	b.n	800da9e <tcp_input+0x46a>
            break;
 800da9c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d029      	beq.n	800daf8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00a      	beq.n	800dac0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dab2:	4b10      	ldr	r3, [pc, #64]	; (800daf4 <tcp_input+0x4c0>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800daba:	4a0e      	ldr	r2, [pc, #56]	; (800daf4 <tcp_input+0x4c0>)
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dac0:	6978      	ldr	r0, [r7, #20]
 800dac2:	f000 fa03 	bl	800decc <tcp_listen_input>
      }
      pbuf_free(p);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7fd ff8c 	bl	800b9e4 <pbuf_free>
      return;
 800dacc:	e1a8      	b.n	800de20 <tcp_input+0x7ec>
 800dace:	bf00      	nop
 800dad0:	20008ca4 	.word	0x20008ca4
 800dad4:	2000570c 	.word	0x2000570c
 800dad8:	08016340 	.word	0x08016340
 800dadc:	0801646c 	.word	0x0801646c
 800dae0:	0801638c 	.word	0x0801638c
 800dae4:	20008c88 	.word	0x20008c88
 800dae8:	08016498 	.word	0x08016498
 800daec:	20008c8c 	.word	0x20008c8c
 800daf0:	080164c4 	.word	0x080164c4
 800daf4:	20008c84 	.word	0x20008c84
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 8158 	beq.w	800ddb0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db00:	4b95      	ldr	r3, [pc, #596]	; (800dd58 <tcp_input+0x724>)
 800db02:	2200      	movs	r2, #0
 800db04:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	891a      	ldrh	r2, [r3, #8]
 800db0a:	4b93      	ldr	r3, [pc, #588]	; (800dd58 <tcp_input+0x724>)
 800db0c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db0e:	4a92      	ldr	r2, [pc, #584]	; (800dd58 <tcp_input+0x724>)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db14:	4b91      	ldr	r3, [pc, #580]	; (800dd5c <tcp_input+0x728>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a8f      	ldr	r2, [pc, #572]	; (800dd58 <tcp_input+0x724>)
 800db1a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db1c:	4b90      	ldr	r3, [pc, #576]	; (800dd60 <tcp_input+0x72c>)
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db22:	4b90      	ldr	r3, [pc, #576]	; (800dd64 <tcp_input+0x730>)
 800db24:	2200      	movs	r2, #0
 800db26:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db28:	4b8f      	ldr	r3, [pc, #572]	; (800dd68 <tcp_input+0x734>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db2e:	4b8f      	ldr	r3, [pc, #572]	; (800dd6c <tcp_input+0x738>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f003 0308 	and.w	r3, r3, #8
 800db36:	2b00      	cmp	r3, #0
 800db38:	d006      	beq.n	800db48 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	7b5b      	ldrb	r3, [r3, #13]
 800db3e:	f043 0301 	orr.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d017      	beq.n	800db80 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db50:	69f8      	ldr	r0, [r7, #28]
 800db52:	f7ff f929 	bl	800cda8 <tcp_process_refused_data>
 800db56:	4603      	mov	r3, r0
 800db58:	f113 0f0d 	cmn.w	r3, #13
 800db5c:	d007      	beq.n	800db6e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00c      	beq.n	800db80 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db66:	4b82      	ldr	r3, [pc, #520]	; (800dd70 <tcp_input+0x73c>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d008      	beq.n	800db80 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db72:	2b00      	cmp	r3, #0
 800db74:	f040 80e3 	bne.w	800dd3e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800db78:	69f8      	ldr	r0, [r7, #28]
 800db7a:	f003 f9ad 	bl	8010ed8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800db7e:	e0de      	b.n	800dd3e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800db80:	4a7c      	ldr	r2, [pc, #496]	; (800dd74 <tcp_input+0x740>)
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800db86:	69f8      	ldr	r0, [r7, #28]
 800db88:	f000 fb18 	bl	800e1bc <tcp_process>
 800db8c:	4603      	mov	r3, r0
 800db8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800db90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db94:	f113 0f0d 	cmn.w	r3, #13
 800db98:	f000 80d3 	beq.w	800dd42 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800db9c:	4b71      	ldr	r3, [pc, #452]	; (800dd64 <tcp_input+0x730>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f003 0308 	and.w	r3, r3, #8
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d015      	beq.n	800dbd4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d008      	beq.n	800dbc4 <tcp_input+0x590>
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	6912      	ldr	r2, [r2, #16]
 800dbbc:	f06f 010d 	mvn.w	r1, #13
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dbc4:	69f9      	ldr	r1, [r7, #28]
 800dbc6:	486c      	ldr	r0, [pc, #432]	; (800dd78 <tcp_input+0x744>)
 800dbc8:	f7ff fbbc 	bl	800d344 <tcp_pcb_remove>
        tcp_free(pcb);
 800dbcc:	69f8      	ldr	r0, [r7, #28]
 800dbce:	f7fe f9a9 	bl	800bf24 <tcp_free>
 800dbd2:	e0da      	b.n	800dd8a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dbd8:	4b63      	ldr	r3, [pc, #396]	; (800dd68 <tcp_input+0x734>)
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d01d      	beq.n	800dc1c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dbe0:	4b61      	ldr	r3, [pc, #388]	; (800dd68 <tcp_input+0x734>)
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00a      	beq.n	800dc06 <tcp_input+0x5d2>
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	6910      	ldr	r0, [r2, #16]
 800dbfa:	89fa      	ldrh	r2, [r7, #14]
 800dbfc:	69f9      	ldr	r1, [r7, #28]
 800dbfe:	4798      	blx	r3
 800dc00:	4603      	mov	r3, r0
 800dc02:	74fb      	strb	r3, [r7, #19]
 800dc04:	e001      	b.n	800dc0a <tcp_input+0x5d6>
 800dc06:	2300      	movs	r3, #0
 800dc08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc0e:	f113 0f0d 	cmn.w	r3, #13
 800dc12:	f000 8098 	beq.w	800dd46 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc16:	4b54      	ldr	r3, [pc, #336]	; (800dd68 <tcp_input+0x734>)
 800dc18:	2200      	movs	r2, #0
 800dc1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc1c:	69f8      	ldr	r0, [r7, #28]
 800dc1e:	f000 f915 	bl	800de4c <tcp_input_delayed_close>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f040 8090 	bne.w	800dd4a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc2a:	4b4d      	ldr	r3, [pc, #308]	; (800dd60 <tcp_input+0x72c>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d041      	beq.n	800dcb6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d006      	beq.n	800dc48 <tcp_input+0x614>
 800dc3a:	4b50      	ldr	r3, [pc, #320]	; (800dd7c <tcp_input+0x748>)
 800dc3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dc40:	494f      	ldr	r1, [pc, #316]	; (800dd80 <tcp_input+0x74c>)
 800dc42:	4850      	ldr	r0, [pc, #320]	; (800dd84 <tcp_input+0x750>)
 800dc44:	f006 f990 	bl	8013f68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	8b5b      	ldrh	r3, [r3, #26]
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d008      	beq.n	800dc66 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dc54:	4b42      	ldr	r3, [pc, #264]	; (800dd60 <tcp_input+0x72c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fd fec3 	bl	800b9e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dc5e:	69f8      	ldr	r0, [r7, #28]
 800dc60:	f7fe fc48 	bl	800c4f4 <tcp_abort>
            goto aborted;
 800dc64:	e091      	b.n	800dd8a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00c      	beq.n	800dc8a <tcp_input+0x656>
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	6918      	ldr	r0, [r3, #16]
 800dc7a:	4b39      	ldr	r3, [pc, #228]	; (800dd60 <tcp_input+0x72c>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	69f9      	ldr	r1, [r7, #28]
 800dc82:	47a0      	blx	r4
 800dc84:	4603      	mov	r3, r0
 800dc86:	74fb      	strb	r3, [r7, #19]
 800dc88:	e008      	b.n	800dc9c <tcp_input+0x668>
 800dc8a:	4b35      	ldr	r3, [pc, #212]	; (800dd60 <tcp_input+0x72c>)
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	69f9      	ldr	r1, [r7, #28]
 800dc92:	2000      	movs	r0, #0
 800dc94:	f7ff f95e 	bl	800cf54 <tcp_recv_null>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dc9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dca0:	f113 0f0d 	cmn.w	r3, #13
 800dca4:	d053      	beq.n	800dd4e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dca6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d003      	beq.n	800dcb6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dcae:	4b2c      	ldr	r3, [pc, #176]	; (800dd60 <tcp_input+0x72c>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dcb6:	4b2b      	ldr	r3, [pc, #172]	; (800dd64 <tcp_input+0x730>)
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 0320 	and.w	r3, r3, #32
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d030      	beq.n	800dd24 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcce:	7b5a      	ldrb	r2, [r3, #13]
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcd4:	f042 0220 	orr.w	r2, r2, #32
 800dcd8:	b2d2      	uxtb	r2, r2
 800dcda:	735a      	strb	r2, [r3, #13]
 800dcdc:	e022      	b.n	800dd24 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dce6:	d005      	beq.n	800dcf4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcec:	3301      	adds	r3, #1
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <tcp_input+0x6e2>
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	6918      	ldr	r0, [r3, #16]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	69f9      	ldr	r1, [r7, #28]
 800dd0e:	47a0      	blx	r4
 800dd10:	4603      	mov	r3, r0
 800dd12:	74fb      	strb	r3, [r7, #19]
 800dd14:	e001      	b.n	800dd1a <tcp_input+0x6e6>
 800dd16:	2300      	movs	r3, #0
 800dd18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd1e:	f113 0f0d 	cmn.w	r3, #13
 800dd22:	d016      	beq.n	800dd52 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd24:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <tcp_input+0x740>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd2a:	69f8      	ldr	r0, [r7, #28]
 800dd2c:	f000 f88e 	bl	800de4c <tcp_input_delayed_close>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d128      	bne.n	800dd88 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dd36:	69f8      	ldr	r0, [r7, #28]
 800dd38:	f002 fac8 	bl	80102cc <tcp_output>
 800dd3c:	e025      	b.n	800dd8a <tcp_input+0x756>
        goto aborted;
 800dd3e:	bf00      	nop
 800dd40:	e023      	b.n	800dd8a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dd42:	bf00      	nop
 800dd44:	e021      	b.n	800dd8a <tcp_input+0x756>
              goto aborted;
 800dd46:	bf00      	nop
 800dd48:	e01f      	b.n	800dd8a <tcp_input+0x756>
          goto aborted;
 800dd4a:	bf00      	nop
 800dd4c:	e01d      	b.n	800dd8a <tcp_input+0x756>
            goto aborted;
 800dd4e:	bf00      	nop
 800dd50:	e01b      	b.n	800dd8a <tcp_input+0x756>
              goto aborted;
 800dd52:	bf00      	nop
 800dd54:	e019      	b.n	800dd8a <tcp_input+0x756>
 800dd56:	bf00      	nop
 800dd58:	20008c94 	.word	0x20008c94
 800dd5c:	20008ca4 	.word	0x20008ca4
 800dd60:	20008cc4 	.word	0x20008cc4
 800dd64:	20008cc1 	.word	0x20008cc1
 800dd68:	20008cbc 	.word	0x20008cbc
 800dd6c:	20008cc0 	.word	0x20008cc0
 800dd70:	20008cbe 	.word	0x20008cbe
 800dd74:	20008cc8 	.word	0x20008cc8
 800dd78:	20008c88 	.word	0x20008c88
 800dd7c:	08016340 	.word	0x08016340
 800dd80:	080164f4 	.word	0x080164f4
 800dd84:	0801638c 	.word	0x0801638c
          goto aborted;
 800dd88:	bf00      	nop
    tcp_input_pcb = NULL;
 800dd8a:	4b27      	ldr	r3, [pc, #156]	; (800de28 <tcp_input+0x7f4>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dd90:	4b26      	ldr	r3, [pc, #152]	; (800de2c <tcp_input+0x7f8>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dd96:	4b26      	ldr	r3, [pc, #152]	; (800de30 <tcp_input+0x7fc>)
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d03f      	beq.n	800de1e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800dd9e:	4b24      	ldr	r3, [pc, #144]	; (800de30 <tcp_input+0x7fc>)
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fd fe1e 	bl	800b9e4 <pbuf_free>
      inseg.p = NULL;
 800dda8:	4b21      	ldr	r3, [pc, #132]	; (800de30 <tcp_input+0x7fc>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ddae:	e036      	b.n	800de1e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ddb0:	4b20      	ldr	r3, [pc, #128]	; (800de34 <tcp_input+0x800>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	899b      	ldrh	r3, [r3, #12]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fc fad5 	bl	800a368 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	f003 0304 	and.w	r3, r3, #4
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d118      	bne.n	800ddfc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddca:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <tcp_input+0x804>)
 800ddcc:	6819      	ldr	r1, [r3, #0]
 800ddce:	4b1b      	ldr	r3, [pc, #108]	; (800de3c <tcp_input+0x808>)
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4b1a      	ldr	r3, [pc, #104]	; (800de40 <tcp_input+0x80c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddda:	4b16      	ldr	r3, [pc, #88]	; (800de34 <tcp_input+0x800>)
 800dddc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddde:	885b      	ldrh	r3, [r3, #2]
 800dde0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dde2:	4a14      	ldr	r2, [pc, #80]	; (800de34 <tcp_input+0x800>)
 800dde4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dde6:	8812      	ldrh	r2, [r2, #0]
 800dde8:	b292      	uxth	r2, r2
 800ddea:	9202      	str	r2, [sp, #8]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	4b15      	ldr	r3, [pc, #84]	; (800de44 <tcp_input+0x810>)
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <tcp_input+0x814>)
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	f003 f81c 	bl	8010e34 <tcp_rst>
    pbuf_free(p);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7fd fdf1 	bl	800b9e4 <pbuf_free>
  return;
 800de02:	e00c      	b.n	800de1e <tcp_input+0x7ea>
    goto dropped;
 800de04:	bf00      	nop
 800de06:	e006      	b.n	800de16 <tcp_input+0x7e2>
    goto dropped;
 800de08:	bf00      	nop
 800de0a:	e004      	b.n	800de16 <tcp_input+0x7e2>
    goto dropped;
 800de0c:	bf00      	nop
 800de0e:	e002      	b.n	800de16 <tcp_input+0x7e2>
      goto dropped;
 800de10:	bf00      	nop
 800de12:	e000      	b.n	800de16 <tcp_input+0x7e2>
      goto dropped;
 800de14:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7fd fde4 	bl	800b9e4 <pbuf_free>
 800de1c:	e000      	b.n	800de20 <tcp_input+0x7ec>
  return;
 800de1e:	bf00      	nop
}
 800de20:	3724      	adds	r7, #36	; 0x24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd90      	pop	{r4, r7, pc}
 800de26:	bf00      	nop
 800de28:	20008cc8 	.word	0x20008cc8
 800de2c:	20008cc4 	.word	0x20008cc4
 800de30:	20008c94 	.word	0x20008c94
 800de34:	20008ca4 	.word	0x20008ca4
 800de38:	20008cb8 	.word	0x20008cb8
 800de3c:	20008cbe 	.word	0x20008cbe
 800de40:	20008cb4 	.word	0x20008cb4
 800de44:	2000571c 	.word	0x2000571c
 800de48:	20005720 	.word	0x20005720

0800de4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <tcp_input_delayed_close+0x1c>
 800de5a:	4b17      	ldr	r3, [pc, #92]	; (800deb8 <tcp_input_delayed_close+0x6c>)
 800de5c:	f240 225a 	movw	r2, #602	; 0x25a
 800de60:	4916      	ldr	r1, [pc, #88]	; (800debc <tcp_input_delayed_close+0x70>)
 800de62:	4817      	ldr	r0, [pc, #92]	; (800dec0 <tcp_input_delayed_close+0x74>)
 800de64:	f006 f880 	bl	8013f68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800de68:	4b16      	ldr	r3, [pc, #88]	; (800dec4 <tcp_input_delayed_close+0x78>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	f003 0310 	and.w	r3, r3, #16
 800de70:	2b00      	cmp	r3, #0
 800de72:	d01c      	beq.n	800deae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	8b5b      	ldrh	r3, [r3, #26]
 800de78:	f003 0310 	and.w	r3, r3, #16
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10d      	bne.n	800de9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de86:	2b00      	cmp	r3, #0
 800de88:	d008      	beq.n	800de9c <tcp_input_delayed_close+0x50>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	6912      	ldr	r2, [r2, #16]
 800de94:	f06f 010e 	mvn.w	r1, #14
 800de98:	4610      	mov	r0, r2
 800de9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	480a      	ldr	r0, [pc, #40]	; (800dec8 <tcp_input_delayed_close+0x7c>)
 800dea0:	f7ff fa50 	bl	800d344 <tcp_pcb_remove>
    tcp_free(pcb);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7fe f83d 	bl	800bf24 <tcp_free>
    return 1;
 800deaa:	2301      	movs	r3, #1
 800deac:	e000      	b.n	800deb0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	08016340 	.word	0x08016340
 800debc:	08016510 	.word	0x08016510
 800dec0:	0801638c 	.word	0x0801638c
 800dec4:	20008cc1 	.word	0x20008cc1
 800dec8:	20008c88 	.word	0x20008c88

0800decc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b08b      	sub	sp, #44	; 0x2c
 800ded0:	af04      	add	r7, sp, #16
 800ded2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ded4:	4b6f      	ldr	r3, [pc, #444]	; (800e094 <tcp_listen_input+0x1c8>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f040 80d2 	bne.w	800e086 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <tcp_listen_input+0x2a>
 800dee8:	4b6b      	ldr	r3, [pc, #428]	; (800e098 <tcp_listen_input+0x1cc>)
 800deea:	f240 2281 	movw	r2, #641	; 0x281
 800deee:	496b      	ldr	r1, [pc, #428]	; (800e09c <tcp_listen_input+0x1d0>)
 800def0:	486b      	ldr	r0, [pc, #428]	; (800e0a0 <tcp_listen_input+0x1d4>)
 800def2:	f006 f839 	bl	8013f68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800def6:	4b67      	ldr	r3, [pc, #412]	; (800e094 <tcp_listen_input+0x1c8>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	f003 0310 	and.w	r3, r3, #16
 800defe:	2b00      	cmp	r3, #0
 800df00:	d019      	beq.n	800df36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df02:	4b68      	ldr	r3, [pc, #416]	; (800e0a4 <tcp_listen_input+0x1d8>)
 800df04:	6819      	ldr	r1, [r3, #0]
 800df06:	4b68      	ldr	r3, [pc, #416]	; (800e0a8 <tcp_listen_input+0x1dc>)
 800df08:	881b      	ldrh	r3, [r3, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	4b67      	ldr	r3, [pc, #412]	; (800e0ac <tcp_listen_input+0x1e0>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df12:	4b67      	ldr	r3, [pc, #412]	; (800e0b0 <tcp_listen_input+0x1e4>)
 800df14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df16:	885b      	ldrh	r3, [r3, #2]
 800df18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df1a:	4a65      	ldr	r2, [pc, #404]	; (800e0b0 <tcp_listen_input+0x1e4>)
 800df1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df1e:	8812      	ldrh	r2, [r2, #0]
 800df20:	b292      	uxth	r2, r2
 800df22:	9202      	str	r2, [sp, #8]
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	4b63      	ldr	r3, [pc, #396]	; (800e0b4 <tcp_listen_input+0x1e8>)
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	4b63      	ldr	r3, [pc, #396]	; (800e0b8 <tcp_listen_input+0x1ec>)
 800df2c:	4602      	mov	r2, r0
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f002 ff80 	bl	8010e34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df34:	e0a9      	b.n	800e08a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df36:	4b57      	ldr	r3, [pc, #348]	; (800e094 <tcp_listen_input+0x1c8>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 0302 	and.w	r3, r3, #2
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 80a3 	beq.w	800e08a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	7d5b      	ldrb	r3, [r3, #21]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff f927 	bl	800d19c <tcp_alloc>
 800df4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d111      	bne.n	800df7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00a      	beq.n	800df74 <tcp_listen_input+0xa8>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6910      	ldr	r0, [r2, #16]
 800df66:	f04f 32ff 	mov.w	r2, #4294967295
 800df6a:	2100      	movs	r1, #0
 800df6c:	4798      	blx	r3
 800df6e:	4603      	mov	r3, r0
 800df70:	73bb      	strb	r3, [r7, #14]
      return;
 800df72:	e08b      	b.n	800e08c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df74:	23f0      	movs	r3, #240	; 0xf0
 800df76:	73bb      	strb	r3, [r7, #14]
      return;
 800df78:	e088      	b.n	800e08c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800df7a:	4b50      	ldr	r3, [pc, #320]	; (800e0bc <tcp_listen_input+0x1f0>)
 800df7c:	695a      	ldr	r2, [r3, #20]
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800df82:	4b4e      	ldr	r3, [pc, #312]	; (800e0bc <tcp_listen_input+0x1f0>)
 800df84:	691a      	ldr	r2, [r3, #16]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	8ada      	ldrh	r2, [r3, #22]
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800df92:	4b47      	ldr	r3, [pc, #284]	; (800e0b0 <tcp_listen_input+0x1e4>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	b29a      	uxth	r2, r3
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dfa4:	4b41      	ldr	r3, [pc, #260]	; (800e0ac <tcp_listen_input+0x1e0>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dfb6:	6978      	ldr	r0, [r7, #20]
 800dfb8:	f7ff fa58 	bl	800d46c <tcp_next_iss>
 800dfbc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dfd6:	4b35      	ldr	r3, [pc, #212]	; (800e0ac <tcp_listen_input+0x1e0>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	1e5a      	subs	r2, r3, #1
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691a      	ldr	r2, [r3, #16]
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	7a5b      	ldrb	r3, [r3, #9]
 800dff2:	f003 030c 	and.w	r3, r3, #12
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7a1a      	ldrb	r2, [r3, #8]
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e004:	4b2e      	ldr	r3, [pc, #184]	; (800e0c0 <tcp_listen_input+0x1f4>)
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	60da      	str	r2, [r3, #12]
 800e00c:	4a2c      	ldr	r2, [pc, #176]	; (800e0c0 <tcp_listen_input+0x1f4>)
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	f003 f8d1 	bl	80111b8 <tcp_timer_needed>
 800e016:	4b2b      	ldr	r3, [pc, #172]	; (800e0c4 <tcp_listen_input+0x1f8>)
 800e018:	2201      	movs	r2, #1
 800e01a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e01c:	6978      	ldr	r0, [r7, #20]
 800e01e:	f001 fd8f 	bl	800fb40 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e022:	4b23      	ldr	r3, [pc, #140]	; (800e0b0 <tcp_listen_input+0x1e4>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	89db      	ldrh	r3, [r3, #14]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	3304      	adds	r3, #4
 800e044:	4618      	mov	r0, r3
 800e046:	f004 fc53 	bl	80128f0 <ip4_route>
 800e04a:	4601      	mov	r1, r0
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	3304      	adds	r3, #4
 800e050:	461a      	mov	r2, r3
 800e052:	4620      	mov	r0, r4
 800e054:	f7ff fa30 	bl	800d4b8 <tcp_eff_send_mss_netif>
 800e058:	4603      	mov	r3, r0
 800e05a:	461a      	mov	r2, r3
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e060:	2112      	movs	r1, #18
 800e062:	6978      	ldr	r0, [r7, #20]
 800e064:	f002 f844 	bl	80100f0 <tcp_enqueue_flags>
 800e068:	4603      	mov	r3, r0
 800e06a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d004      	beq.n	800e07e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e074:	2100      	movs	r1, #0
 800e076:	6978      	ldr	r0, [r7, #20]
 800e078:	f7fe f97e 	bl	800c378 <tcp_abandon>
      return;
 800e07c:	e006      	b.n	800e08c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e07e:	6978      	ldr	r0, [r7, #20]
 800e080:	f002 f924 	bl	80102cc <tcp_output>
  return;
 800e084:	e001      	b.n	800e08a <tcp_listen_input+0x1be>
    return;
 800e086:	bf00      	nop
 800e088:	e000      	b.n	800e08c <tcp_listen_input+0x1c0>
  return;
 800e08a:	bf00      	nop
}
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd90      	pop	{r4, r7, pc}
 800e092:	bf00      	nop
 800e094:	20008cc0 	.word	0x20008cc0
 800e098:	08016340 	.word	0x08016340
 800e09c:	08016538 	.word	0x08016538
 800e0a0:	0801638c 	.word	0x0801638c
 800e0a4:	20008cb8 	.word	0x20008cb8
 800e0a8:	20008cbe 	.word	0x20008cbe
 800e0ac:	20008cb4 	.word	0x20008cb4
 800e0b0:	20008ca4 	.word	0x20008ca4
 800e0b4:	2000571c 	.word	0x2000571c
 800e0b8:	20005720 	.word	0x20005720
 800e0bc:	2000570c 	.word	0x2000570c
 800e0c0:	20008c88 	.word	0x20008c88
 800e0c4:	20008c90 	.word	0x20008c90

0800e0c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af04      	add	r7, sp, #16
 800e0ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e0d0:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <tcp_timewait_input+0xc8>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	f003 0304 	and.w	r3, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d153      	bne.n	800e184 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d106      	bne.n	800e0f0 <tcp_timewait_input+0x28>
 800e0e2:	4b2c      	ldr	r3, [pc, #176]	; (800e194 <tcp_timewait_input+0xcc>)
 800e0e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e0e8:	492b      	ldr	r1, [pc, #172]	; (800e198 <tcp_timewait_input+0xd0>)
 800e0ea:	482c      	ldr	r0, [pc, #176]	; (800e19c <tcp_timewait_input+0xd4>)
 800e0ec:	f005 ff3c 	bl	8013f68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e0f0:	4b27      	ldr	r3, [pc, #156]	; (800e190 <tcp_timewait_input+0xc8>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	f003 0302 	and.w	r3, r3, #2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d02a      	beq.n	800e152 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e0fc:	4b28      	ldr	r3, [pc, #160]	; (800e1a0 <tcp_timewait_input+0xd8>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	db2d      	blt.n	800e166 <tcp_timewait_input+0x9e>
 800e10a:	4b25      	ldr	r3, [pc, #148]	; (800e1a0 <tcp_timewait_input+0xd8>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e116:	440b      	add	r3, r1
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	dc23      	bgt.n	800e166 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e11e:	4b21      	ldr	r3, [pc, #132]	; (800e1a4 <tcp_timewait_input+0xdc>)
 800e120:	6819      	ldr	r1, [r3, #0]
 800e122:	4b21      	ldr	r3, [pc, #132]	; (800e1a8 <tcp_timewait_input+0xe0>)
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	4b1d      	ldr	r3, [pc, #116]	; (800e1a0 <tcp_timewait_input+0xd8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e12e:	4b1f      	ldr	r3, [pc, #124]	; (800e1ac <tcp_timewait_input+0xe4>)
 800e130:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e132:	885b      	ldrh	r3, [r3, #2]
 800e134:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e136:	4a1d      	ldr	r2, [pc, #116]	; (800e1ac <tcp_timewait_input+0xe4>)
 800e138:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e13a:	8812      	ldrh	r2, [r2, #0]
 800e13c:	b292      	uxth	r2, r2
 800e13e:	9202      	str	r2, [sp, #8]
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	4b1b      	ldr	r3, [pc, #108]	; (800e1b0 <tcp_timewait_input+0xe8>)
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <tcp_timewait_input+0xec>)
 800e148:	4602      	mov	r2, r0
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f002 fe72 	bl	8010e34 <tcp_rst>
      return;
 800e150:	e01b      	b.n	800e18a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e152:	4b0f      	ldr	r3, [pc, #60]	; (800e190 <tcp_timewait_input+0xc8>)
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d003      	beq.n	800e166 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e15e:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <tcp_timewait_input+0xf0>)
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e166:	4b10      	ldr	r3, [pc, #64]	; (800e1a8 <tcp_timewait_input+0xe0>)
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00c      	beq.n	800e188 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	8b5b      	ldrh	r3, [r3, #26]
 800e172:	f043 0302 	orr.w	r3, r3, #2
 800e176:	b29a      	uxth	r2, r3
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f002 f8a5 	bl	80102cc <tcp_output>
  }
  return;
 800e182:	e001      	b.n	800e188 <tcp_timewait_input+0xc0>
    return;
 800e184:	bf00      	nop
 800e186:	e000      	b.n	800e18a <tcp_timewait_input+0xc2>
  return;
 800e188:	bf00      	nop
}
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20008cc0 	.word	0x20008cc0
 800e194:	08016340 	.word	0x08016340
 800e198:	08016558 	.word	0x08016558
 800e19c:	0801638c 	.word	0x0801638c
 800e1a0:	20008cb4 	.word	0x20008cb4
 800e1a4:	20008cb8 	.word	0x20008cb8
 800e1a8:	20008cbe 	.word	0x20008cbe
 800e1ac:	20008ca4 	.word	0x20008ca4
 800e1b0:	2000571c 	.word	0x2000571c
 800e1b4:	20005720 	.word	0x20005720
 800e1b8:	20008c7c 	.word	0x20008c7c

0800e1bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b08d      	sub	sp, #52	; 0x34
 800e1c0:	af04      	add	r7, sp, #16
 800e1c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <tcp_process+0x24>
 800e1d2:	4b9d      	ldr	r3, [pc, #628]	; (800e448 <tcp_process+0x28c>)
 800e1d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e1d8:	499c      	ldr	r1, [pc, #624]	; (800e44c <tcp_process+0x290>)
 800e1da:	489d      	ldr	r0, [pc, #628]	; (800e450 <tcp_process+0x294>)
 800e1dc:	f005 fec4 	bl	8013f68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e1e0:	4b9c      	ldr	r3, [pc, #624]	; (800e454 <tcp_process+0x298>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d04e      	beq.n	800e28a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	7d1b      	ldrb	r3, [r3, #20]
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d108      	bne.n	800e206 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1f8:	4b97      	ldr	r3, [pc, #604]	; (800e458 <tcp_process+0x29c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d123      	bne.n	800e248 <tcp_process+0x8c>
        acceptable = 1;
 800e200:	2301      	movs	r3, #1
 800e202:	76fb      	strb	r3, [r7, #27]
 800e204:	e020      	b.n	800e248 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e20a:	4b94      	ldr	r3, [pc, #592]	; (800e45c <tcp_process+0x2a0>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d102      	bne.n	800e218 <tcp_process+0x5c>
        acceptable = 1;
 800e212:	2301      	movs	r3, #1
 800e214:	76fb      	strb	r3, [r7, #27]
 800e216:	e017      	b.n	800e248 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e218:	4b90      	ldr	r3, [pc, #576]	; (800e45c <tcp_process+0x2a0>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	db10      	blt.n	800e248 <tcp_process+0x8c>
 800e226:	4b8d      	ldr	r3, [pc, #564]	; (800e45c <tcp_process+0x2a0>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e232:	440b      	add	r3, r1
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	dc06      	bgt.n	800e248 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	8b5b      	ldrh	r3, [r3, #26]
 800e23e:	f043 0302 	orr.w	r3, r3, #2
 800e242:	b29a      	uxth	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e248:	7efb      	ldrb	r3, [r7, #27]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01b      	beq.n	800e286 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7d1b      	ldrb	r3, [r3, #20]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <tcp_process+0xa8>
 800e256:	4b7c      	ldr	r3, [pc, #496]	; (800e448 <tcp_process+0x28c>)
 800e258:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e25c:	4980      	ldr	r1, [pc, #512]	; (800e460 <tcp_process+0x2a4>)
 800e25e:	487c      	ldr	r0, [pc, #496]	; (800e450 <tcp_process+0x294>)
 800e260:	f005 fe82 	bl	8013f68 <iprintf>
      recv_flags |= TF_RESET;
 800e264:	4b7f      	ldr	r3, [pc, #508]	; (800e464 <tcp_process+0x2a8>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f043 0308 	orr.w	r3, r3, #8
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	4b7d      	ldr	r3, [pc, #500]	; (800e464 <tcp_process+0x2a8>)
 800e270:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	8b5b      	ldrh	r3, [r3, #26]
 800e276:	f023 0301 	bic.w	r3, r3, #1
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e280:	f06f 030d 	mvn.w	r3, #13
 800e284:	e37a      	b.n	800e97c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	e378      	b.n	800e97c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e28a:	4b72      	ldr	r3, [pc, #456]	; (800e454 <tcp_process+0x298>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d010      	beq.n	800e2b8 <tcp_process+0xfc>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7d1b      	ldrb	r3, [r3, #20]
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d00c      	beq.n	800e2b8 <tcp_process+0xfc>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	7d1b      	ldrb	r3, [r3, #20]
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d008      	beq.n	800e2b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	8b5b      	ldrh	r3, [r3, #26]
 800e2aa:	f043 0302 	orr.w	r3, r3, #2
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	e361      	b.n	800e97c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	8b5b      	ldrh	r3, [r3, #26]
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d103      	bne.n	800e2cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e2c4:	4b68      	ldr	r3, [pc, #416]	; (800e468 <tcp_process+0x2ac>)
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 fc2f 	bl	800fb40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	7d1b      	ldrb	r3, [r3, #20]
 800e2e6:	3b02      	subs	r3, #2
 800e2e8:	2b07      	cmp	r3, #7
 800e2ea:	f200 8337 	bhi.w	800e95c <tcp_process+0x7a0>
 800e2ee:	a201      	add	r2, pc, #4	; (adr r2, 800e2f4 <tcp_process+0x138>)
 800e2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f4:	0800e315 	.word	0x0800e315
 800e2f8:	0800e545 	.word	0x0800e545
 800e2fc:	0800e6bd 	.word	0x0800e6bd
 800e300:	0800e6e7 	.word	0x0800e6e7
 800e304:	0800e80b 	.word	0x0800e80b
 800e308:	0800e6bd 	.word	0x0800e6bd
 800e30c:	0800e897 	.word	0x0800e897
 800e310:	0800e927 	.word	0x0800e927
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e314:	4b4f      	ldr	r3, [pc, #316]	; (800e454 <tcp_process+0x298>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f003 0310 	and.w	r3, r3, #16
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 80e4 	beq.w	800e4ea <tcp_process+0x32e>
 800e322:	4b4c      	ldr	r3, [pc, #304]	; (800e454 <tcp_process+0x298>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f003 0302 	and.w	r3, r3, #2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 80dd 	beq.w	800e4ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	4b48      	ldr	r3, [pc, #288]	; (800e458 <tcp_process+0x29c>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	f040 80d5 	bne.w	800e4ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e340:	4b46      	ldr	r3, [pc, #280]	; (800e45c <tcp_process+0x2a0>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e352:	4b41      	ldr	r3, [pc, #260]	; (800e458 <tcp_process+0x29c>)
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e35a:	4b44      	ldr	r3, [pc, #272]	; (800e46c <tcp_process+0x2b0>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	89db      	ldrh	r3, [r3, #14]
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e374:	4b39      	ldr	r3, [pc, #228]	; (800e45c <tcp_process+0x2a0>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	1e5a      	subs	r2, r3, #1
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2204      	movs	r2, #4
 800e382:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f004 faaf 	bl	80128f0 <ip4_route>
 800e392:	4601      	mov	r1, r0
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3304      	adds	r3, #4
 800e398:	461a      	mov	r2, r3
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7ff f88c 	bl	800d4b8 <tcp_eff_send_mss_netif>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ac:	009a      	lsls	r2, r3, #2
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e3b8:	428b      	cmp	r3, r1
 800e3ba:	bf38      	it	cc
 800e3bc:	460b      	movcc	r3, r1
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d204      	bcs.n	800e3cc <tcp_process+0x210>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	e00d      	b.n	800e3e8 <tcp_process+0x22c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d904      	bls.n	800e3e4 <tcp_process+0x228>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3de:	005b      	lsls	r3, r3, #1
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	e001      	b.n	800e3e8 <tcp_process+0x22c>
 800e3e4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <tcp_process+0x24a>
 800e3f8:	4b13      	ldr	r3, [pc, #76]	; (800e448 <tcp_process+0x28c>)
 800e3fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e3fe:	491c      	ldr	r1, [pc, #112]	; (800e470 <tcp_process+0x2b4>)
 800e400:	4813      	ldr	r0, [pc, #76]	; (800e450 <tcp_process+0x294>)
 800e402:	f005 fdb1 	bl	8013f68 <iprintf>
        --pcb->snd_queuelen;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e40c:	3b01      	subs	r3, #1
 800e40e:	b29a      	uxth	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e41a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d12a      	bne.n	800e478 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e426:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <tcp_process+0x280>
 800e42e:	4b06      	ldr	r3, [pc, #24]	; (800e448 <tcp_process+0x28c>)
 800e430:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e434:	490f      	ldr	r1, [pc, #60]	; (800e474 <tcp_process+0x2b8>)
 800e436:	4806      	ldr	r0, [pc, #24]	; (800e450 <tcp_process+0x294>)
 800e438:	f005 fd96 	bl	8013f68 <iprintf>
          pcb->unsent = rseg->next;
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	66da      	str	r2, [r3, #108]	; 0x6c
 800e444:	e01c      	b.n	800e480 <tcp_process+0x2c4>
 800e446:	bf00      	nop
 800e448:	08016340 	.word	0x08016340
 800e44c:	08016578 	.word	0x08016578
 800e450:	0801638c 	.word	0x0801638c
 800e454:	20008cc0 	.word	0x20008cc0
 800e458:	20008cb8 	.word	0x20008cb8
 800e45c:	20008cb4 	.word	0x20008cb4
 800e460:	08016594 	.word	0x08016594
 800e464:	20008cc1 	.word	0x20008cc1
 800e468:	20008c7c 	.word	0x20008c7c
 800e46c:	20008ca4 	.word	0x20008ca4
 800e470:	080165b4 	.word	0x080165b4
 800e474:	080165cc 	.word	0x080165cc
        } else {
          pcb->unacked = rseg->next;
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e480:	69f8      	ldr	r0, [r7, #28]
 800e482:	f7fe fd22 	bl	800ceca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d104      	bne.n	800e498 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e494:	861a      	strh	r2, [r3, #48]	; 0x30
 800e496:	e006      	b.n	800e4a6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00a      	beq.n	800e4c6 <tcp_process+0x30a>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	6910      	ldr	r0, [r2, #16]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6879      	ldr	r1, [r7, #4]
 800e4be:	4798      	blx	r3
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	76bb      	strb	r3, [r7, #26]
 800e4c4:	e001      	b.n	800e4ca <tcp_process+0x30e>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e4ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4ce:	f113 0f0d 	cmn.w	r3, #13
 800e4d2:	d102      	bne.n	800e4da <tcp_process+0x31e>
          return ERR_ABRT;
 800e4d4:	f06f 030c 	mvn.w	r3, #12
 800e4d8:	e250      	b.n	800e97c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	8b5b      	ldrh	r3, [r3, #26]
 800e4de:	f043 0302 	orr.w	r3, r3, #2
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e4e8:	e23a      	b.n	800e960 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e4ea:	4b98      	ldr	r3, [pc, #608]	; (800e74c <tcp_process+0x590>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	f003 0310 	and.w	r3, r3, #16
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f000 8234 	beq.w	800e960 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4f8:	4b95      	ldr	r3, [pc, #596]	; (800e750 <tcp_process+0x594>)
 800e4fa:	6819      	ldr	r1, [r3, #0]
 800e4fc:	4b95      	ldr	r3, [pc, #596]	; (800e754 <tcp_process+0x598>)
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	4b95      	ldr	r3, [pc, #596]	; (800e758 <tcp_process+0x59c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e508:	4b94      	ldr	r3, [pc, #592]	; (800e75c <tcp_process+0x5a0>)
 800e50a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e50c:	885b      	ldrh	r3, [r3, #2]
 800e50e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e510:	4a92      	ldr	r2, [pc, #584]	; (800e75c <tcp_process+0x5a0>)
 800e512:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e514:	8812      	ldrh	r2, [r2, #0]
 800e516:	b292      	uxth	r2, r2
 800e518:	9202      	str	r2, [sp, #8]
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	4b90      	ldr	r3, [pc, #576]	; (800e760 <tcp_process+0x5a4>)
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	4b90      	ldr	r3, [pc, #576]	; (800e764 <tcp_process+0x5a8>)
 800e522:	4602      	mov	r2, r0
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f002 fc85 	bl	8010e34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e530:	2b05      	cmp	r3, #5
 800e532:	f200 8215 	bhi.w	800e960 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f002 fa4f 	bl	80109e0 <tcp_rexmit_rto>
      break;
 800e542:	e20d      	b.n	800e960 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e544:	4b81      	ldr	r3, [pc, #516]	; (800e74c <tcp_process+0x590>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 80a1 	beq.w	800e694 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e552:	4b7f      	ldr	r3, [pc, #508]	; (800e750 <tcp_process+0x594>)
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	3b01      	subs	r3, #1
 800e55e:	2b00      	cmp	r3, #0
 800e560:	db7e      	blt.n	800e660 <tcp_process+0x4a4>
 800e562:	4b7b      	ldr	r3, [pc, #492]	; (800e750 <tcp_process+0x594>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dc77      	bgt.n	800e660 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2204      	movs	r2, #4
 800e574:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e57e:	23fa      	movs	r3, #250	; 0xfa
 800e580:	76bb      	strb	r3, [r7, #26]
 800e582:	e01d      	b.n	800e5c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <tcp_process+0x3e0>
 800e58e:	4b76      	ldr	r3, [pc, #472]	; (800e768 <tcp_process+0x5ac>)
 800e590:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e594:	4975      	ldr	r1, [pc, #468]	; (800e76c <tcp_process+0x5b0>)
 800e596:	4876      	ldr	r0, [pc, #472]	; (800e770 <tcp_process+0x5b4>)
 800e598:	f005 fce6 	bl	8013f68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <tcp_process+0x400>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6910      	ldr	r0, [r2, #16]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	4798      	blx	r3
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	76bb      	strb	r3, [r7, #26]
 800e5ba:	e001      	b.n	800e5c0 <tcp_process+0x404>
 800e5bc:	23f0      	movs	r3, #240	; 0xf0
 800e5be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e5c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e5c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5cc:	f113 0f0d 	cmn.w	r3, #13
 800e5d0:	d002      	beq.n	800e5d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7fd ff8e 	bl	800c4f4 <tcp_abort>
            }
            return ERR_ABRT;
 800e5d8:	f06f 030c 	mvn.w	r3, #12
 800e5dc:	e1ce      	b.n	800e97c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fae0 	bl	800eba4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e5e4:	4b63      	ldr	r3, [pc, #396]	; (800e774 <tcp_process+0x5b8>)
 800e5e6:	881b      	ldrh	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <tcp_process+0x43c>
            recv_acked--;
 800e5ec:	4b61      	ldr	r3, [pc, #388]	; (800e774 <tcp_process+0x5b8>)
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	4b5f      	ldr	r3, [pc, #380]	; (800e774 <tcp_process+0x5b8>)
 800e5f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5fc:	009a      	lsls	r2, r3, #2
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	f241 111c 	movw	r1, #4380	; 0x111c
 800e608:	428b      	cmp	r3, r1
 800e60a:	bf38      	it	cc
 800e60c:	460b      	movcc	r3, r1
 800e60e:	429a      	cmp	r2, r3
 800e610:	d204      	bcs.n	800e61c <tcp_process+0x460>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	b29b      	uxth	r3, r3
 800e61a:	e00d      	b.n	800e638 <tcp_process+0x47c>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	f241 121c 	movw	r2, #4380	; 0x111c
 800e626:	4293      	cmp	r3, r2
 800e628:	d904      	bls.n	800e634 <tcp_process+0x478>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	b29b      	uxth	r3, r3
 800e632:	e001      	b.n	800e638 <tcp_process+0x47c>
 800e634:	f241 131c 	movw	r3, #4380	; 0x111c
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e63e:	4b4e      	ldr	r3, [pc, #312]	; (800e778 <tcp_process+0x5bc>)
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	f003 0320 	and.w	r3, r3, #32
 800e646:	2b00      	cmp	r3, #0
 800e648:	d037      	beq.n	800e6ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	8b5b      	ldrh	r3, [r3, #26]
 800e64e:	f043 0302 	orr.w	r3, r3, #2
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2207      	movs	r2, #7
 800e65c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e65e:	e02c      	b.n	800e6ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e660:	4b3b      	ldr	r3, [pc, #236]	; (800e750 <tcp_process+0x594>)
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	4b3b      	ldr	r3, [pc, #236]	; (800e754 <tcp_process+0x598>)
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	461a      	mov	r2, r3
 800e66a:	4b3b      	ldr	r3, [pc, #236]	; (800e758 <tcp_process+0x59c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e670:	4b3a      	ldr	r3, [pc, #232]	; (800e75c <tcp_process+0x5a0>)
 800e672:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e674:	885b      	ldrh	r3, [r3, #2]
 800e676:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e678:	4a38      	ldr	r2, [pc, #224]	; (800e75c <tcp_process+0x5a0>)
 800e67a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e67c:	8812      	ldrh	r2, [r2, #0]
 800e67e:	b292      	uxth	r2, r2
 800e680:	9202      	str	r2, [sp, #8]
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	4b36      	ldr	r3, [pc, #216]	; (800e760 <tcp_process+0x5a4>)
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	4b36      	ldr	r3, [pc, #216]	; (800e764 <tcp_process+0x5a8>)
 800e68a:	4602      	mov	r2, r0
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f002 fbd1 	bl	8010e34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e692:	e167      	b.n	800e964 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e694:	4b2d      	ldr	r3, [pc, #180]	; (800e74c <tcp_process+0x590>)
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 8161 	beq.w	800e964 <tcp_process+0x7a8>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a6:	1e5a      	subs	r2, r3, #1
 800e6a8:	4b2b      	ldr	r3, [pc, #172]	; (800e758 <tcp_process+0x59c>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	f040 8159 	bne.w	800e964 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f002 f9b6 	bl	8010a24 <tcp_rexmit>
      break;
 800e6b8:	e154      	b.n	800e964 <tcp_process+0x7a8>
 800e6ba:	e153      	b.n	800e964 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa71 	bl	800eba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e6c2:	4b2d      	ldr	r3, [pc, #180]	; (800e778 <tcp_process+0x5bc>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 814c 	beq.w	800e968 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	8b5b      	ldrh	r3, [r3, #26]
 800e6d4:	f043 0302 	orr.w	r3, r3, #2
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6e4:	e140      	b.n	800e968 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fa5c 	bl	800eba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e6ec:	4b22      	ldr	r3, [pc, #136]	; (800e778 <tcp_process+0x5bc>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	f003 0320 	and.w	r3, r3, #32
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d071      	beq.n	800e7dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6f8:	4b14      	ldr	r3, [pc, #80]	; (800e74c <tcp_process+0x590>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f003 0310 	and.w	r3, r3, #16
 800e700:	2b00      	cmp	r3, #0
 800e702:	d060      	beq.n	800e7c6 <tcp_process+0x60a>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e708:	4b11      	ldr	r3, [pc, #68]	; (800e750 <tcp_process+0x594>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d15a      	bne.n	800e7c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e714:	2b00      	cmp	r3, #0
 800e716:	d156      	bne.n	800e7c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	8b5b      	ldrh	r3, [r3, #26]
 800e71c:	f043 0302 	orr.w	r3, r3, #2
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7fe fdbc 	bl	800d2a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e72c:	4b13      	ldr	r3, [pc, #76]	; (800e77c <tcp_process+0x5c0>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	429a      	cmp	r2, r3
 800e734:	d105      	bne.n	800e742 <tcp_process+0x586>
 800e736:	4b11      	ldr	r3, [pc, #68]	; (800e77c <tcp_process+0x5c0>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	4a0f      	ldr	r2, [pc, #60]	; (800e77c <tcp_process+0x5c0>)
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	e02e      	b.n	800e7a0 <tcp_process+0x5e4>
 800e742:	4b0e      	ldr	r3, [pc, #56]	; (800e77c <tcp_process+0x5c0>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	e027      	b.n	800e79a <tcp_process+0x5de>
 800e74a:	bf00      	nop
 800e74c:	20008cc0 	.word	0x20008cc0
 800e750:	20008cb8 	.word	0x20008cb8
 800e754:	20008cbe 	.word	0x20008cbe
 800e758:	20008cb4 	.word	0x20008cb4
 800e75c:	20008ca4 	.word	0x20008ca4
 800e760:	2000571c 	.word	0x2000571c
 800e764:	20005720 	.word	0x20005720
 800e768:	08016340 	.word	0x08016340
 800e76c:	080165e0 	.word	0x080165e0
 800e770:	0801638c 	.word	0x0801638c
 800e774:	20008cbc 	.word	0x20008cbc
 800e778:	20008cc1 	.word	0x20008cc1
 800e77c:	20008c88 	.word	0x20008c88
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d104      	bne.n	800e794 <tcp_process+0x5d8>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	e005      	b.n	800e7a0 <tcp_process+0x5e4>
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1ef      	bne.n	800e780 <tcp_process+0x5c4>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	60da      	str	r2, [r3, #12]
 800e7a6:	4b77      	ldr	r3, [pc, #476]	; (800e984 <tcp_process+0x7c8>)
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	220a      	movs	r2, #10
 800e7b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e7b2:	4b75      	ldr	r3, [pc, #468]	; (800e988 <tcp_process+0x7cc>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	60da      	str	r2, [r3, #12]
 800e7ba:	4a73      	ldr	r2, [pc, #460]	; (800e988 <tcp_process+0x7cc>)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6013      	str	r3, [r2, #0]
 800e7c0:	f002 fcfa 	bl	80111b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e7c4:	e0d2      	b.n	800e96c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ca:	f043 0302 	orr.w	r3, r3, #2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2208      	movs	r2, #8
 800e7d8:	751a      	strb	r2, [r3, #20]
      break;
 800e7da:	e0c7      	b.n	800e96c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7dc:	4b6b      	ldr	r3, [pc, #428]	; (800e98c <tcp_process+0x7d0>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	f003 0310 	and.w	r3, r3, #16
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f000 80c1 	beq.w	800e96c <tcp_process+0x7b0>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7ee:	4b68      	ldr	r3, [pc, #416]	; (800e990 <tcp_process+0x7d4>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	f040 80ba 	bne.w	800e96c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f040 80b5 	bne.w	800e96c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2206      	movs	r2, #6
 800e806:	751a      	strb	r2, [r3, #20]
      break;
 800e808:	e0b0      	b.n	800e96c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f9ca 	bl	800eba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e810:	4b60      	ldr	r3, [pc, #384]	; (800e994 <tcp_process+0x7d8>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	f003 0320 	and.w	r3, r3, #32
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 80a9 	beq.w	800e970 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	8b5b      	ldrh	r3, [r3, #26]
 800e822:	f043 0302 	orr.w	r3, r3, #2
 800e826:	b29a      	uxth	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7fe fd39 	bl	800d2a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e832:	4b59      	ldr	r3, [pc, #356]	; (800e998 <tcp_process+0x7dc>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d105      	bne.n	800e848 <tcp_process+0x68c>
 800e83c:	4b56      	ldr	r3, [pc, #344]	; (800e998 <tcp_process+0x7dc>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	4a55      	ldr	r2, [pc, #340]	; (800e998 <tcp_process+0x7dc>)
 800e844:	6013      	str	r3, [r2, #0]
 800e846:	e013      	b.n	800e870 <tcp_process+0x6b4>
 800e848:	4b53      	ldr	r3, [pc, #332]	; (800e998 <tcp_process+0x7dc>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	613b      	str	r3, [r7, #16]
 800e84e:	e00c      	b.n	800e86a <tcp_process+0x6ae>
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	429a      	cmp	r2, r3
 800e858:	d104      	bne.n	800e864 <tcp_process+0x6a8>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	60da      	str	r2, [r3, #12]
 800e862:	e005      	b.n	800e870 <tcp_process+0x6b4>
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	613b      	str	r3, [r7, #16]
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1ef      	bne.n	800e850 <tcp_process+0x694>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	60da      	str	r2, [r3, #12]
 800e876:	4b43      	ldr	r3, [pc, #268]	; (800e984 <tcp_process+0x7c8>)
 800e878:	2201      	movs	r2, #1
 800e87a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	220a      	movs	r2, #10
 800e880:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e882:	4b41      	ldr	r3, [pc, #260]	; (800e988 <tcp_process+0x7cc>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	60da      	str	r2, [r3, #12]
 800e88a:	4a3f      	ldr	r2, [pc, #252]	; (800e988 <tcp_process+0x7cc>)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6013      	str	r3, [r2, #0]
 800e890:	f002 fc92 	bl	80111b8 <tcp_timer_needed>
      }
      break;
 800e894:	e06c      	b.n	800e970 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 f984 	bl	800eba4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e89c:	4b3b      	ldr	r3, [pc, #236]	; (800e98c <tcp_process+0x7d0>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 0310 	and.w	r3, r3, #16
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d065      	beq.n	800e974 <tcp_process+0x7b8>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ac:	4b38      	ldr	r3, [pc, #224]	; (800e990 <tcp_process+0x7d4>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d15f      	bne.n	800e974 <tcp_process+0x7b8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d15b      	bne.n	800e974 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7fe fcf1 	bl	800d2a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e8c2:	4b35      	ldr	r3, [pc, #212]	; (800e998 <tcp_process+0x7dc>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d105      	bne.n	800e8d8 <tcp_process+0x71c>
 800e8cc:	4b32      	ldr	r3, [pc, #200]	; (800e998 <tcp_process+0x7dc>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	4a31      	ldr	r2, [pc, #196]	; (800e998 <tcp_process+0x7dc>)
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	e013      	b.n	800e900 <tcp_process+0x744>
 800e8d8:	4b2f      	ldr	r3, [pc, #188]	; (800e998 <tcp_process+0x7dc>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e00c      	b.n	800e8fa <tcp_process+0x73e>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d104      	bne.n	800e8f4 <tcp_process+0x738>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	60da      	str	r2, [r3, #12]
 800e8f2:	e005      	b.n	800e900 <tcp_process+0x744>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	60fb      	str	r3, [r7, #12]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1ef      	bne.n	800e8e0 <tcp_process+0x724>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	60da      	str	r2, [r3, #12]
 800e906:	4b1f      	ldr	r3, [pc, #124]	; (800e984 <tcp_process+0x7c8>)
 800e908:	2201      	movs	r2, #1
 800e90a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	220a      	movs	r2, #10
 800e910:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e912:	4b1d      	ldr	r3, [pc, #116]	; (800e988 <tcp_process+0x7cc>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	60da      	str	r2, [r3, #12]
 800e91a:	4a1b      	ldr	r2, [pc, #108]	; (800e988 <tcp_process+0x7cc>)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	f002 fc4a 	bl	80111b8 <tcp_timer_needed>
      }
      break;
 800e924:	e026      	b.n	800e974 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f93c 	bl	800eba4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e92c:	4b17      	ldr	r3, [pc, #92]	; (800e98c <tcp_process+0x7d0>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	f003 0310 	and.w	r3, r3, #16
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01f      	beq.n	800e978 <tcp_process+0x7bc>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e93c:	4b14      	ldr	r3, [pc, #80]	; (800e990 <tcp_process+0x7d4>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d119      	bne.n	800e978 <tcp_process+0x7bc>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d115      	bne.n	800e978 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e94c:	4b11      	ldr	r3, [pc, #68]	; (800e994 <tcp_process+0x7d8>)
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	f043 0310 	orr.w	r3, r3, #16
 800e954:	b2da      	uxtb	r2, r3
 800e956:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <tcp_process+0x7d8>)
 800e958:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e95a:	e00d      	b.n	800e978 <tcp_process+0x7bc>
    default:
      break;
 800e95c:	bf00      	nop
 800e95e:	e00c      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e960:	bf00      	nop
 800e962:	e00a      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e964:	bf00      	nop
 800e966:	e008      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e968:	bf00      	nop
 800e96a:	e006      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e96c:	bf00      	nop
 800e96e:	e004      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e970:	bf00      	nop
 800e972:	e002      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e974:	bf00      	nop
 800e976:	e000      	b.n	800e97a <tcp_process+0x7be>
      break;
 800e978:	bf00      	nop
  }
  return ERR_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3724      	adds	r7, #36	; 0x24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	20008c90 	.word	0x20008c90
 800e988:	20008c8c 	.word	0x20008c8c
 800e98c:	20008cc0 	.word	0x20008cc0
 800e990:	20008cb8 	.word	0x20008cb8
 800e994:	20008cc1 	.word	0x20008cc1
 800e998:	20008c88 	.word	0x20008c88

0800e99c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d106      	bne.n	800e9ba <tcp_oos_insert_segment+0x1e>
 800e9ac:	4b3b      	ldr	r3, [pc, #236]	; (800ea9c <tcp_oos_insert_segment+0x100>)
 800e9ae:	f240 421f 	movw	r2, #1055	; 0x41f
 800e9b2:	493b      	ldr	r1, [pc, #236]	; (800eaa0 <tcp_oos_insert_segment+0x104>)
 800e9b4:	483b      	ldr	r0, [pc, #236]	; (800eaa4 <tcp_oos_insert_segment+0x108>)
 800e9b6:	f005 fad7 	bl	8013f68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	899b      	ldrh	r3, [r3, #12]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fb fcd0 	bl	800a368 <lwip_htons>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d028      	beq.n	800ea26 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e9d4:	6838      	ldr	r0, [r7, #0]
 800e9d6:	f7fe fa63 	bl	800cea0 <tcp_segs_free>
    next = NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	603b      	str	r3, [r7, #0]
 800e9de:	e056      	b.n	800ea8e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	899b      	ldrh	r3, [r3, #12]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fb fcbd 	bl	800a368 <lwip_htons>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00d      	beq.n	800ea16 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	899b      	ldrh	r3, [r3, #12]
 800ea00:	b29c      	uxth	r4, r3
 800ea02:	2001      	movs	r0, #1
 800ea04:	f7fb fcb0 	bl	800a368 <lwip_htons>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	4322      	orrs	r2, r4
 800ea12:	b292      	uxth	r2, r2
 800ea14:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f7fe fa52 	bl	800ceca <tcp_seg_free>
    while (next &&
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00e      	beq.n	800ea4a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	891b      	ldrh	r3, [r3, #8]
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b1d      	ldr	r3, [pc, #116]	; (800eaa8 <tcp_oos_insert_segment+0x10c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	441a      	add	r2, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	8909      	ldrh	r1, [r1, #8]
 800ea42:	440b      	add	r3, r1
 800ea44:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	daca      	bge.n	800e9e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d01e      	beq.n	800ea8e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	891b      	ldrh	r3, [r3, #8]
 800ea54:	461a      	mov	r2, r3
 800ea56:	4b14      	ldr	r3, [pc, #80]	; (800eaa8 <tcp_oos_insert_segment+0x10c>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	441a      	add	r2, r3
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dd12      	ble.n	800ea8e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b0d      	ldr	r3, [pc, #52]	; (800eaa8 <tcp_oos_insert_segment+0x10c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	891b      	ldrh	r3, [r3, #8]
 800ea86:	4619      	mov	r1, r3
 800ea88:	4610      	mov	r0, r2
 800ea8a:	f7fc fe25 	bl	800b6d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	601a      	str	r2, [r3, #0]
}
 800ea94:	bf00      	nop
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd90      	pop	{r4, r7, pc}
 800ea9c:	08016340 	.word	0x08016340
 800eaa0:	08016600 	.word	0x08016600
 800eaa4:	0801638c 	.word	0x0801638c
 800eaa8:	20008cb4 	.word	0x20008cb4

0800eaac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eaac:	b5b0      	push	{r4, r5, r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
 800eab8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eaba:	e03e      	b.n	800eb3a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd f812 	bl	800baf4 <pbuf_clen>
 800ead0:	4603      	mov	r3, r0
 800ead2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eada:	8a7a      	ldrh	r2, [r7, #18]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d906      	bls.n	800eaee <tcp_free_acked_segments+0x42>
 800eae0:	4b2a      	ldr	r3, [pc, #168]	; (800eb8c <tcp_free_acked_segments+0xe0>)
 800eae2:	f240 4257 	movw	r2, #1111	; 0x457
 800eae6:	492a      	ldr	r1, [pc, #168]	; (800eb90 <tcp_free_acked_segments+0xe4>)
 800eae8:	482a      	ldr	r0, [pc, #168]	; (800eb94 <tcp_free_acked_segments+0xe8>)
 800eaea:	f005 fa3d 	bl	8013f68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eaf4:	8a7b      	ldrh	r3, [r7, #18]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	891a      	ldrh	r2, [r3, #8]
 800eb04:	4b24      	ldr	r3, [pc, #144]	; (800eb98 <tcp_free_acked_segments+0xec>)
 800eb06:	881b      	ldrh	r3, [r3, #0]
 800eb08:	4413      	add	r3, r2
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	4b22      	ldr	r3, [pc, #136]	; (800eb98 <tcp_free_acked_segments+0xec>)
 800eb0e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb10:	6978      	ldr	r0, [r7, #20]
 800eb12:	f7fe f9da 	bl	800ceca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00c      	beq.n	800eb3a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d109      	bne.n	800eb3a <tcp_free_acked_segments+0x8e>
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <tcp_free_acked_segments+0x8e>
 800eb2c:	4b17      	ldr	r3, [pc, #92]	; (800eb8c <tcp_free_acked_segments+0xe0>)
 800eb2e:	f240 4261 	movw	r2, #1121	; 0x461
 800eb32:	491a      	ldr	r1, [pc, #104]	; (800eb9c <tcp_free_acked_segments+0xf0>)
 800eb34:	4817      	ldr	r0, [pc, #92]	; (800eb94 <tcp_free_acked_segments+0xe8>)
 800eb36:	f005 fa17 	bl	8013f68 <iprintf>
  while (seg_list != NULL &&
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d020      	beq.n	800eb82 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fb fc23 	bl	800a392 <lwip_htonl>
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	891b      	ldrh	r3, [r3, #8]
 800eb52:	461d      	mov	r5, r3
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fb fc03 	bl	800a368 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	f003 0303 	and.w	r3, r3, #3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <tcp_free_acked_segments+0xc6>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e000      	b.n	800eb74 <tcp_free_acked_segments+0xc8>
 800eb72:	2300      	movs	r3, #0
 800eb74:	442b      	add	r3, r5
 800eb76:	18e2      	adds	r2, r4, r3
 800eb78:	4b09      	ldr	r3, [pc, #36]	; (800eba0 <tcp_free_acked_segments+0xf4>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	dd9c      	ble.n	800eabc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eb82:	68bb      	ldr	r3, [r7, #8]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb8c:	08016340 	.word	0x08016340
 800eb90:	08016628 	.word	0x08016628
 800eb94:	0801638c 	.word	0x0801638c
 800eb98:	20008cbc 	.word	0x20008cbc
 800eb9c:	08016650 	.word	0x08016650
 800eba0:	20008cb8 	.word	0x20008cb8

0800eba4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eba4:	b5b0      	push	{r4, r5, r7, lr}
 800eba6:	b094      	sub	sp, #80	; 0x50
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d106      	bne.n	800ebc4 <tcp_receive+0x20>
 800ebb6:	4b91      	ldr	r3, [pc, #580]	; (800edfc <tcp_receive+0x258>)
 800ebb8:	f240 427b 	movw	r2, #1147	; 0x47b
 800ebbc:	4990      	ldr	r1, [pc, #576]	; (800ee00 <tcp_receive+0x25c>)
 800ebbe:	4891      	ldr	r0, [pc, #580]	; (800ee04 <tcp_receive+0x260>)
 800ebc0:	f005 f9d2 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	7d1b      	ldrb	r3, [r3, #20]
 800ebc8:	2b03      	cmp	r3, #3
 800ebca:	d806      	bhi.n	800ebda <tcp_receive+0x36>
 800ebcc:	4b8b      	ldr	r3, [pc, #556]	; (800edfc <tcp_receive+0x258>)
 800ebce:	f240 427c 	movw	r2, #1148	; 0x47c
 800ebd2:	498d      	ldr	r1, [pc, #564]	; (800ee08 <tcp_receive+0x264>)
 800ebd4:	488b      	ldr	r0, [pc, #556]	; (800ee04 <tcp_receive+0x260>)
 800ebd6:	f005 f9c7 	bl	8013f68 <iprintf>

  if (flags & TCP_ACK) {
 800ebda:	4b8c      	ldr	r3, [pc, #560]	; (800ee0c <tcp_receive+0x268>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 0310 	and.w	r3, r3, #16
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f000 8264 	beq.w	800f0b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebee:	461a      	mov	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebf4:	4413      	add	r3, r2
 800ebf6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebfc:	4b84      	ldr	r3, [pc, #528]	; (800ee10 <tcp_receive+0x26c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	db1b      	blt.n	800ec3e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec0a:	4b81      	ldr	r3, [pc, #516]	; (800ee10 <tcp_receive+0x26c>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d106      	bne.n	800ec20 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec16:	4b7f      	ldr	r3, [pc, #508]	; (800ee14 <tcp_receive+0x270>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	db0e      	blt.n	800ec3e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec24:	4b7b      	ldr	r3, [pc, #492]	; (800ee14 <tcp_receive+0x270>)
 800ec26:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d125      	bne.n	800ec78 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec2c:	4b7a      	ldr	r3, [pc, #488]	; (800ee18 <tcp_receive+0x274>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	89db      	ldrh	r3, [r3, #14]
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d91c      	bls.n	800ec78 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ec3e:	4b76      	ldr	r3, [pc, #472]	; (800ee18 <tcp_receive+0x274>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	89db      	ldrh	r3, [r3, #14]
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d205      	bcs.n	800ec68 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ec68:	4b69      	ldr	r3, [pc, #420]	; (800ee10 <tcp_receive+0x26c>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ec70:	4b68      	ldr	r3, [pc, #416]	; (800ee14 <tcp_receive+0x270>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ec78:	4b66      	ldr	r3, [pc, #408]	; (800ee14 <tcp_receive+0x270>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	dc58      	bgt.n	800ed38 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ec86:	4b65      	ldr	r3, [pc, #404]	; (800ee1c <tcp_receive+0x278>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d14b      	bne.n	800ed26 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ec98:	4413      	add	r3, r2
 800ec9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d142      	bne.n	800ed26 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	db3d      	blt.n	800ed26 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecae:	4b59      	ldr	r3, [pc, #356]	; (800ee14 <tcp_receive+0x270>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d137      	bne.n	800ed26 <tcp_receive+0x182>
              found_dupack = 1;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecc0:	2bff      	cmp	r3, #255	; 0xff
 800ecc2:	d007      	beq.n	800ecd4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecca:	3301      	adds	r3, #1
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	d91b      	bls.n	800ed16 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ece8:	4413      	add	r3, r2
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d30a      	bcc.n	800ed0c <tcp_receive+0x168>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed00:	4413      	add	r3, r2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed0a:	e004      	b.n	800ed16 <tcp_receive+0x172>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d902      	bls.n	800ed26 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f001 feeb 	bl	8010afc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 8161 	bne.w	800eff0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed36:	e15b      	b.n	800eff0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed38:	4b36      	ldr	r3, [pc, #216]	; (800ee14 <tcp_receive+0x270>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	3b01      	subs	r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f2c0 814e 	blt.w	800efe6 <tcp_receive+0x442>
 800ed4a:	4b32      	ldr	r3, [pc, #200]	; (800ee14 <tcp_receive+0x270>)
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f300 8146 	bgt.w	800efe6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8b5b      	ldrh	r3, [r3, #26]
 800ed5e:	f003 0304 	and.w	r3, r3, #4
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d010      	beq.n	800ed88 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	8b5b      	ldrh	r3, [r3, #26]
 800ed6a:	f023 0304 	bic.w	r3, r3, #4
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ed96:	10db      	asrs	r3, r3, #3
 800ed98:	b21b      	sxth	r3, r3
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	4413      	add	r3, r2
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	b21a      	sxth	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800edb0:	4b18      	ldr	r3, [pc, #96]	; (800ee14 <tcp_receive+0x270>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edba:	b29b      	uxth	r3, r3
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800edc8:	4b12      	ldr	r3, [pc, #72]	; (800ee14 <tcp_receive+0x270>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	f240 8097 	bls.w	800ef08 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d245      	bcs.n	800ee76 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	8b5b      	ldrh	r3, [r3, #26]
 800edee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d014      	beq.n	800ee20 <tcp_receive+0x27c>
 800edf6:	2301      	movs	r3, #1
 800edf8:	e013      	b.n	800ee22 <tcp_receive+0x27e>
 800edfa:	bf00      	nop
 800edfc:	08016340 	.word	0x08016340
 800ee00:	08016670 	.word	0x08016670
 800ee04:	0801638c 	.word	0x0801638c
 800ee08:	0801668c 	.word	0x0801668c
 800ee0c:	20008cc0 	.word	0x20008cc0
 800ee10:	20008cb4 	.word	0x20008cb4
 800ee14:	20008cb8 	.word	0x20008cb8
 800ee18:	20008ca4 	.word	0x20008ca4
 800ee1c:	20008cbe 	.word	0x20008cbe
 800ee20:	2302      	movs	r3, #2
 800ee22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee30:	fb12 f303 	smulbb	r3, r2, r3
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	bf28      	it	cs
 800ee3c:	4613      	movcs	r3, r2
 800ee3e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee48:	4413      	add	r3, r2
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d309      	bcc.n	800ee6a <tcp_receive+0x2c6>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee5e:	4413      	add	r3, r2
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee68:	e04e      	b.n	800ef08 <tcp_receive+0x364>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee74:	e048      	b.n	800ef08 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ee7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee7e:	4413      	add	r3, r2
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d309      	bcc.n	800eea0 <tcp_receive+0x2fc>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ee92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee94:	4413      	add	r3, r2
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ee9e:	e004      	b.n	800eeaa <tcp_receive+0x306>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d326      	bcc.n	800ef08 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeda:	4413      	add	r3, r2
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d30a      	bcc.n	800eefe <tcp_receive+0x35a>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eef2:	4413      	add	r3, r2
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eefc:	e004      	b.n	800ef08 <tcp_receive+0x364>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef10:	4a98      	ldr	r2, [pc, #608]	; (800f174 <tcp_receive+0x5d0>)
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff fdca 	bl	800eaac <tcp_free_acked_segments>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef26:	4a94      	ldr	r2, [pc, #592]	; (800f178 <tcp_receive+0x5d4>)
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff fdbf 	bl	800eaac <tcp_free_acked_segments>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d104      	bne.n	800ef46 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef42:	861a      	strh	r2, [r3, #48]	; 0x30
 800ef44:	e002      	b.n	800ef4c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d103      	bne.n	800ef62 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ef68:	4b84      	ldr	r3, [pc, #528]	; (800f17c <tcp_receive+0x5d8>)
 800ef6a:	881b      	ldrh	r3, [r3, #0]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8b5b      	ldrh	r3, [r3, #26]
 800ef7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d035      	beq.n	800efee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d118      	bne.n	800efbc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00c      	beq.n	800efac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fb f9f7 	bl	800a392 <lwip_htonl>
 800efa4:	4603      	mov	r3, r0
 800efa6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	dc20      	bgt.n	800efee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	8b5b      	ldrh	r3, [r3, #26]
 800efb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efba:	e018      	b.n	800efee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fb f9e2 	bl	800a392 <lwip_htonl>
 800efce:	4603      	mov	r3, r0
 800efd0:	1ae3      	subs	r3, r4, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dc0b      	bgt.n	800efee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8b5b      	ldrh	r3, [r3, #26]
 800efda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efe4:	e003      	b.n	800efee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 ff76 	bl	8010ed8 <tcp_send_empty_ack>
 800efec:	e000      	b.n	800eff0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d05b      	beq.n	800f0b0 <tcp_receive+0x50c>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effc:	4b60      	ldr	r3, [pc, #384]	; (800f180 <tcp_receive+0x5dc>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	da54      	bge.n	800f0b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f006:	4b5f      	ldr	r3, [pc, #380]	; (800f184 <tcp_receive+0x5e0>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f010:	b29b      	uxth	r3, r3
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	b29b      	uxth	r3, r3
 800f016:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f01a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f024:	10db      	asrs	r3, r3, #3
 800f026:	b21b      	sxth	r3, r3
 800f028:	b29b      	uxth	r3, r3
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f038:	b29a      	uxth	r2, r3
 800f03a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f03e:	4413      	add	r3, r2
 800f040:	b29b      	uxth	r3, r3
 800f042:	b21a      	sxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f048:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	da05      	bge.n	800f05c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f054:	425b      	negs	r3, r3
 800f056:	b29b      	uxth	r3, r3
 800f058:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f05c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f066:	109b      	asrs	r3, r3, #2
 800f068:	b21b      	sxth	r3, r3
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	b29b      	uxth	r3, r3
 800f070:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f080:	4413      	add	r3, r2
 800f082:	b29b      	uxth	r3, r3
 800f084:	b21a      	sxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f090:	10db      	asrs	r3, r3, #3
 800f092:	b21b      	sxth	r3, r3
 800f094:	b29a      	uxth	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	4413      	add	r3, r2
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	b21a      	sxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f0b0:	4b35      	ldr	r3, [pc, #212]	; (800f188 <tcp_receive+0x5e4>)
 800f0b2:	881b      	ldrh	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 84e2 	beq.w	800fa7e <tcp_receive+0xeda>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	7d1b      	ldrb	r3, [r3, #20]
 800f0be:	2b06      	cmp	r3, #6
 800f0c0:	f200 84dd 	bhi.w	800fa7e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0c8:	4b30      	ldr	r3, [pc, #192]	; (800f18c <tcp_receive+0x5e8>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f2c0 808f 	blt.w	800f1f4 <tcp_receive+0x650>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0da:	4b2b      	ldr	r3, [pc, #172]	; (800f188 <tcp_receive+0x5e4>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	4b2a      	ldr	r3, [pc, #168]	; (800f18c <tcp_receive+0x5e8>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	440b      	add	r3, r1
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f300 8082 	bgt.w	800f1f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f0f0:	4b27      	ldr	r3, [pc, #156]	; (800f190 <tcp_receive+0x5ec>)
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0fa:	4b24      	ldr	r3, [pc, #144]	; (800f18c <tcp_receive+0x5e8>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f102:	4b23      	ldr	r3, [pc, #140]	; (800f190 <tcp_receive+0x5ec>)
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d106      	bne.n	800f118 <tcp_receive+0x574>
 800f10a:	4b22      	ldr	r3, [pc, #136]	; (800f194 <tcp_receive+0x5f0>)
 800f10c:	f240 5294 	movw	r2, #1428	; 0x594
 800f110:	4921      	ldr	r1, [pc, #132]	; (800f198 <tcp_receive+0x5f4>)
 800f112:	4822      	ldr	r0, [pc, #136]	; (800f19c <tcp_receive+0x5f8>)
 800f114:	f004 ff28 	bl	8013f68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f11e:	4293      	cmp	r3, r2
 800f120:	d906      	bls.n	800f130 <tcp_receive+0x58c>
 800f122:	4b1c      	ldr	r3, [pc, #112]	; (800f194 <tcp_receive+0x5f0>)
 800f124:	f240 5295 	movw	r2, #1429	; 0x595
 800f128:	491d      	ldr	r1, [pc, #116]	; (800f1a0 <tcp_receive+0x5fc>)
 800f12a:	481c      	ldr	r0, [pc, #112]	; (800f19c <tcp_receive+0x5f8>)
 800f12c:	f004 ff1c 	bl	8013f68 <iprintf>
      off = (u16_t)off32;
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f136:	4b16      	ldr	r3, [pc, #88]	; (800f190 <tcp_receive+0x5ec>)
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	891b      	ldrh	r3, [r3, #8]
 800f13c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f140:	429a      	cmp	r2, r3
 800f142:	d906      	bls.n	800f152 <tcp_receive+0x5ae>
 800f144:	4b13      	ldr	r3, [pc, #76]	; (800f194 <tcp_receive+0x5f0>)
 800f146:	f240 5297 	movw	r2, #1431	; 0x597
 800f14a:	4916      	ldr	r1, [pc, #88]	; (800f1a4 <tcp_receive+0x600>)
 800f14c:	4813      	ldr	r0, [pc, #76]	; (800f19c <tcp_receive+0x5f8>)
 800f14e:	f004 ff0b 	bl	8013f68 <iprintf>
      inseg.len -= off;
 800f152:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <tcp_receive+0x5ec>)
 800f154:	891a      	ldrh	r2, [r3, #8]
 800f156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	4b0c      	ldr	r3, [pc, #48]	; (800f190 <tcp_receive+0x5ec>)
 800f160:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f162:	4b0b      	ldr	r3, [pc, #44]	; (800f190 <tcp_receive+0x5ec>)
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	891a      	ldrh	r2, [r3, #8]
 800f168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f170:	e02a      	b.n	800f1c8 <tcp_receive+0x624>
 800f172:	bf00      	nop
 800f174:	080166a8 	.word	0x080166a8
 800f178:	080166b0 	.word	0x080166b0
 800f17c:	20008cbc 	.word	0x20008cbc
 800f180:	20008cb8 	.word	0x20008cb8
 800f184:	20008c7c 	.word	0x20008c7c
 800f188:	20008cbe 	.word	0x20008cbe
 800f18c:	20008cb4 	.word	0x20008cb4
 800f190:	20008c94 	.word	0x20008c94
 800f194:	08016340 	.word	0x08016340
 800f198:	080166b8 	.word	0x080166b8
 800f19c:	0801638c 	.word	0x0801638c
 800f1a0:	080166c8 	.word	0x080166c8
 800f1a4:	080166d8 	.word	0x080166d8
        off -= p->len;
 800f1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1aa:	895b      	ldrh	r3, [r3, #10]
 800f1ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f1ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1be:	2200      	movs	r2, #0
 800f1c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f1c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ca:	895b      	ldrh	r3, [r3, #10]
 800f1cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d8e9      	bhi.n	800f1a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f1d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d8:	4619      	mov	r1, r3
 800f1da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f1dc:	f7fc fb7c 	bl	800b8d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	4a91      	ldr	r2, [pc, #580]	; (800f42c <tcp_receive+0x888>)
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	4b91      	ldr	r3, [pc, #580]	; (800f430 <tcp_receive+0x88c>)
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	4a8f      	ldr	r2, [pc, #572]	; (800f42c <tcp_receive+0x888>)
 800f1ee:	6812      	ldr	r2, [r2, #0]
 800f1f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f1f2:	e00d      	b.n	800f210 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f1f4:	4b8d      	ldr	r3, [pc, #564]	; (800f42c <tcp_receive+0x888>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	da06      	bge.n	800f210 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	8b5b      	ldrh	r3, [r3, #26]
 800f206:	f043 0302 	orr.w	r3, r3, #2
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f210:	4b86      	ldr	r3, [pc, #536]	; (800f42c <tcp_receive+0x888>)
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	1ad3      	subs	r3, r2, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f2c0 842a 	blt.w	800fa74 <tcp_receive+0xed0>
 800f220:	4b82      	ldr	r3, [pc, #520]	; (800f42c <tcp_receive+0x888>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f228:	6879      	ldr	r1, [r7, #4]
 800f22a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f22c:	440b      	add	r3, r1
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	3301      	adds	r3, #1
 800f232:	2b00      	cmp	r3, #0
 800f234:	f300 841e 	bgt.w	800fa74 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f23c:	4b7b      	ldr	r3, [pc, #492]	; (800f42c <tcp_receive+0x888>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	f040 829a 	bne.w	800f77a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f246:	4b7a      	ldr	r3, [pc, #488]	; (800f430 <tcp_receive+0x88c>)
 800f248:	891c      	ldrh	r4, [r3, #8]
 800f24a:	4b79      	ldr	r3, [pc, #484]	; (800f430 <tcp_receive+0x88c>)
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	899b      	ldrh	r3, [r3, #12]
 800f250:	b29b      	uxth	r3, r3
 800f252:	4618      	mov	r0, r3
 800f254:	f7fb f888 	bl	800a368 <lwip_htons>
 800f258:	4603      	mov	r3, r0
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <tcp_receive+0x6c4>
 800f264:	2301      	movs	r3, #1
 800f266:	e000      	b.n	800f26a <tcp_receive+0x6c6>
 800f268:	2300      	movs	r3, #0
 800f26a:	4423      	add	r3, r4
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	4b71      	ldr	r3, [pc, #452]	; (800f434 <tcp_receive+0x890>)
 800f270:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f276:	4b6f      	ldr	r3, [pc, #444]	; (800f434 <tcp_receive+0x890>)
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d275      	bcs.n	800f36a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f27e:	4b6c      	ldr	r3, [pc, #432]	; (800f430 <tcp_receive+0x88c>)
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	899b      	ldrh	r3, [r3, #12]
 800f284:	b29b      	uxth	r3, r3
 800f286:	4618      	mov	r0, r3
 800f288:	f7fb f86e 	bl	800a368 <lwip_htons>
 800f28c:	4603      	mov	r3, r0
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01f      	beq.n	800f2d8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f298:	4b65      	ldr	r3, [pc, #404]	; (800f430 <tcp_receive+0x88c>)
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	899b      	ldrh	r3, [r3, #12]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	b21b      	sxth	r3, r3
 800f2a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2a6:	b21c      	sxth	r4, r3
 800f2a8:	4b61      	ldr	r3, [pc, #388]	; (800f430 <tcp_receive+0x88c>)
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	899b      	ldrh	r3, [r3, #12]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fb f859 	bl	800a368 <lwip_htons>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fb f850 	bl	800a368 <lwip_htons>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	b21b      	sxth	r3, r3
 800f2cc:	4323      	orrs	r3, r4
 800f2ce:	b21a      	sxth	r2, r3
 800f2d0:	4b57      	ldr	r3, [pc, #348]	; (800f430 <tcp_receive+0x88c>)
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	b292      	uxth	r2, r2
 800f2d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2dc:	4b54      	ldr	r3, [pc, #336]	; (800f430 <tcp_receive+0x88c>)
 800f2de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f2e0:	4b53      	ldr	r3, [pc, #332]	; (800f430 <tcp_receive+0x88c>)
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	899b      	ldrh	r3, [r3, #12]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fb f83d 	bl	800a368 <lwip_htons>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d005      	beq.n	800f306 <tcp_receive+0x762>
            inseg.len -= 1;
 800f2fa:	4b4d      	ldr	r3, [pc, #308]	; (800f430 <tcp_receive+0x88c>)
 800f2fc:	891b      	ldrh	r3, [r3, #8]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	b29a      	uxth	r2, r3
 800f302:	4b4b      	ldr	r3, [pc, #300]	; (800f430 <tcp_receive+0x88c>)
 800f304:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f306:	4b4a      	ldr	r3, [pc, #296]	; (800f430 <tcp_receive+0x88c>)
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	4a49      	ldr	r2, [pc, #292]	; (800f430 <tcp_receive+0x88c>)
 800f30c:	8912      	ldrh	r2, [r2, #8]
 800f30e:	4611      	mov	r1, r2
 800f310:	4618      	mov	r0, r3
 800f312:	f7fc f9e1 	bl	800b6d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f316:	4b46      	ldr	r3, [pc, #280]	; (800f430 <tcp_receive+0x88c>)
 800f318:	891c      	ldrh	r4, [r3, #8]
 800f31a:	4b45      	ldr	r3, [pc, #276]	; (800f430 <tcp_receive+0x88c>)
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	899b      	ldrh	r3, [r3, #12]
 800f320:	b29b      	uxth	r3, r3
 800f322:	4618      	mov	r0, r3
 800f324:	f7fb f820 	bl	800a368 <lwip_htons>
 800f328:	4603      	mov	r3, r0
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	f003 0303 	and.w	r3, r3, #3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <tcp_receive+0x794>
 800f334:	2301      	movs	r3, #1
 800f336:	e000      	b.n	800f33a <tcp_receive+0x796>
 800f338:	2300      	movs	r3, #0
 800f33a:	4423      	add	r3, r4
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	4b3d      	ldr	r3, [pc, #244]	; (800f434 <tcp_receive+0x890>)
 800f340:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f342:	4b3c      	ldr	r3, [pc, #240]	; (800f434 <tcp_receive+0x890>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	4b38      	ldr	r3, [pc, #224]	; (800f42c <tcp_receive+0x888>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	441a      	add	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f356:	440b      	add	r3, r1
 800f358:	429a      	cmp	r2, r3
 800f35a:	d006      	beq.n	800f36a <tcp_receive+0x7c6>
 800f35c:	4b36      	ldr	r3, [pc, #216]	; (800f438 <tcp_receive+0x894>)
 800f35e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f362:	4936      	ldr	r1, [pc, #216]	; (800f43c <tcp_receive+0x898>)
 800f364:	4836      	ldr	r0, [pc, #216]	; (800f440 <tcp_receive+0x89c>)
 800f366:	f004 fdff 	bl	8013f68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 80e7 	beq.w	800f542 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f374:	4b2e      	ldr	r3, [pc, #184]	; (800f430 <tcp_receive+0x88c>)
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	899b      	ldrh	r3, [r3, #12]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fa fff3 	bl	800a368 <lwip_htons>
 800f382:	4603      	mov	r3, r0
 800f384:	b2db      	uxtb	r3, r3
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d010      	beq.n	800f3b0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f38e:	e00a      	b.n	800f3a6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f394:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7fd fd92 	bl	800ceca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1f0      	bne.n	800f390 <tcp_receive+0x7ec>
 800f3ae:	e0c8      	b.n	800f542 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f3b6:	e052      	b.n	800f45e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	899b      	ldrh	r3, [r3, #12]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fa ffd1 	bl	800a368 <lwip_htons>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	f003 0301 	and.w	r3, r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d03d      	beq.n	800f44e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f3d2:	4b17      	ldr	r3, [pc, #92]	; (800f430 <tcp_receive+0x88c>)
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	899b      	ldrh	r3, [r3, #12]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fa ffc4 	bl	800a368 <lwip_htons>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d130      	bne.n	800f44e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f3ec:	4b10      	ldr	r3, [pc, #64]	; (800f430 <tcp_receive+0x88c>)
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	b29c      	uxth	r4, r3
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	f7fa ffb7 	bl	800a368 <lwip_htons>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <tcp_receive+0x88c>)
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	4322      	orrs	r2, r4
 800f404:	b292      	uxth	r2, r2
 800f406:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f408:	4b09      	ldr	r3, [pc, #36]	; (800f430 <tcp_receive+0x88c>)
 800f40a:	891c      	ldrh	r4, [r3, #8]
 800f40c:	4b08      	ldr	r3, [pc, #32]	; (800f430 <tcp_receive+0x88c>)
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	899b      	ldrh	r3, [r3, #12]
 800f412:	b29b      	uxth	r3, r3
 800f414:	4618      	mov	r0, r3
 800f416:	f7fa ffa7 	bl	800a368 <lwip_htons>
 800f41a:	4603      	mov	r3, r0
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	f003 0303 	and.w	r3, r3, #3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00e      	beq.n	800f444 <tcp_receive+0x8a0>
 800f426:	2301      	movs	r3, #1
 800f428:	e00d      	b.n	800f446 <tcp_receive+0x8a2>
 800f42a:	bf00      	nop
 800f42c:	20008cb4 	.word	0x20008cb4
 800f430:	20008c94 	.word	0x20008c94
 800f434:	20008cbe 	.word	0x20008cbe
 800f438:	08016340 	.word	0x08016340
 800f43c:	080166e8 	.word	0x080166e8
 800f440:	0801638c 	.word	0x0801638c
 800f444:	2300      	movs	r3, #0
 800f446:	4423      	add	r3, r4
 800f448:	b29a      	uxth	r2, r3
 800f44a:	4b98      	ldr	r3, [pc, #608]	; (800f6ac <tcp_receive+0xb08>)
 800f44c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f458:	6938      	ldr	r0, [r7, #16]
 800f45a:	f7fd fd36 	bl	800ceca <tcp_seg_free>
            while (next &&
 800f45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00e      	beq.n	800f482 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f464:	4b91      	ldr	r3, [pc, #580]	; (800f6ac <tcp_receive+0xb08>)
 800f466:	881b      	ldrh	r3, [r3, #0]
 800f468:	461a      	mov	r2, r3
 800f46a:	4b91      	ldr	r3, [pc, #580]	; (800f6b0 <tcp_receive+0xb0c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	441a      	add	r2, r3
 800f470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f478:	8909      	ldrh	r1, [r1, #8]
 800f47a:	440b      	add	r3, r1
 800f47c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f47e:	2b00      	cmp	r3, #0
 800f480:	da9a      	bge.n	800f3b8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d059      	beq.n	800f53c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f488:	4b88      	ldr	r3, [pc, #544]	; (800f6ac <tcp_receive+0xb08>)
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	4b88      	ldr	r3, [pc, #544]	; (800f6b0 <tcp_receive+0xb0c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	441a      	add	r2, r3
 800f494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dd4d      	ble.n	800f53c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	4b81      	ldr	r3, [pc, #516]	; (800f6b0 <tcp_receive+0xb0c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	4b80      	ldr	r3, [pc, #512]	; (800f6b4 <tcp_receive+0xb10>)
 800f4b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f4b6:	4b7f      	ldr	r3, [pc, #508]	; (800f6b4 <tcp_receive+0xb10>)
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	899b      	ldrh	r3, [r3, #12]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fa ff52 	bl	800a368 <lwip_htons>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	f003 0302 	and.w	r3, r3, #2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d005      	beq.n	800f4dc <tcp_receive+0x938>
                inseg.len -= 1;
 800f4d0:	4b78      	ldr	r3, [pc, #480]	; (800f6b4 <tcp_receive+0xb10>)
 800f4d2:	891b      	ldrh	r3, [r3, #8]
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	4b76      	ldr	r3, [pc, #472]	; (800f6b4 <tcp_receive+0xb10>)
 800f4da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f4dc:	4b75      	ldr	r3, [pc, #468]	; (800f6b4 <tcp_receive+0xb10>)
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	4a74      	ldr	r2, [pc, #464]	; (800f6b4 <tcp_receive+0xb10>)
 800f4e2:	8912      	ldrh	r2, [r2, #8]
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fc f8f6 	bl	800b6d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f4ec:	4b71      	ldr	r3, [pc, #452]	; (800f6b4 <tcp_receive+0xb10>)
 800f4ee:	891c      	ldrh	r4, [r3, #8]
 800f4f0:	4b70      	ldr	r3, [pc, #448]	; (800f6b4 <tcp_receive+0xb10>)
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	899b      	ldrh	r3, [r3, #12]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fa ff35 	bl	800a368 <lwip_htons>
 800f4fe:	4603      	mov	r3, r0
 800f500:	b2db      	uxtb	r3, r3
 800f502:	f003 0303 	and.w	r3, r3, #3
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <tcp_receive+0x96a>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e000      	b.n	800f510 <tcp_receive+0x96c>
 800f50e:	2300      	movs	r3, #0
 800f510:	4423      	add	r3, r4
 800f512:	b29a      	uxth	r2, r3
 800f514:	4b65      	ldr	r3, [pc, #404]	; (800f6ac <tcp_receive+0xb08>)
 800f516:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f518:	4b64      	ldr	r3, [pc, #400]	; (800f6ac <tcp_receive+0xb08>)
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	461a      	mov	r2, r3
 800f51e:	4b64      	ldr	r3, [pc, #400]	; (800f6b0 <tcp_receive+0xb0c>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	441a      	add	r2, r3
 800f524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d006      	beq.n	800f53c <tcp_receive+0x998>
 800f52e:	4b62      	ldr	r3, [pc, #392]	; (800f6b8 <tcp_receive+0xb14>)
 800f530:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f534:	4961      	ldr	r1, [pc, #388]	; (800f6bc <tcp_receive+0xb18>)
 800f536:	4862      	ldr	r0, [pc, #392]	; (800f6c0 <tcp_receive+0xb1c>)
 800f538:	f004 fd16 	bl	8013f68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f540:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f542:	4b5a      	ldr	r3, [pc, #360]	; (800f6ac <tcp_receive+0xb08>)
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	4b59      	ldr	r3, [pc, #356]	; (800f6b0 <tcp_receive+0xb0c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	441a      	add	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f556:	4b55      	ldr	r3, [pc, #340]	; (800f6ac <tcp_receive+0xb08>)
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d206      	bcs.n	800f56c <tcp_receive+0x9c8>
 800f55e:	4b56      	ldr	r3, [pc, #344]	; (800f6b8 <tcp_receive+0xb14>)
 800f560:	f240 6207 	movw	r2, #1543	; 0x607
 800f564:	4957      	ldr	r1, [pc, #348]	; (800f6c4 <tcp_receive+0xb20>)
 800f566:	4856      	ldr	r0, [pc, #344]	; (800f6c0 <tcp_receive+0xb1c>)
 800f568:	f004 fcfe 	bl	8013f68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f570:	4b4e      	ldr	r3, [pc, #312]	; (800f6ac <tcp_receive+0xb08>)
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7fc ffc5 	bl	800c50c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f582:	4b4c      	ldr	r3, [pc, #304]	; (800f6b4 <tcp_receive+0xb10>)
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	891b      	ldrh	r3, [r3, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f58c:	4b49      	ldr	r3, [pc, #292]	; (800f6b4 <tcp_receive+0xb10>)
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	4a4d      	ldr	r2, [pc, #308]	; (800f6c8 <tcp_receive+0xb24>)
 800f592:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f594:	4b47      	ldr	r3, [pc, #284]	; (800f6b4 <tcp_receive+0xb10>)
 800f596:	2200      	movs	r2, #0
 800f598:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f59a:	4b46      	ldr	r3, [pc, #280]	; (800f6b4 <tcp_receive+0xb10>)
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fa fee0 	bl	800a368 <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f000 80b8 	beq.w	800f726 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f5b6:	4b45      	ldr	r3, [pc, #276]	; (800f6cc <tcp_receive+0xb28>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	f043 0320 	orr.w	r3, r3, #32
 800f5be:	b2da      	uxtb	r2, r3
 800f5c0:	4b42      	ldr	r3, [pc, #264]	; (800f6cc <tcp_receive+0xb28>)
 800f5c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f5c4:	e0af      	b.n	800f726 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	4a36      	ldr	r2, [pc, #216]	; (800f6b0 <tcp_receive+0xb0c>)
 800f5d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	891b      	ldrh	r3, [r3, #8]
 800f5dc:	461c      	mov	r4, r3
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fa febe 	bl	800a368 <lwip_htons>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	f003 0303 	and.w	r3, r3, #3
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <tcp_receive+0xa58>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e000      	b.n	800f5fe <tcp_receive+0xa5a>
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	191a      	adds	r2, r3, r4
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	441a      	add	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f60e:	461c      	mov	r4, r3
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	891b      	ldrh	r3, [r3, #8]
 800f614:	461d      	mov	r5, r3
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	899b      	ldrh	r3, [r3, #12]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fa fea2 	bl	800a368 <lwip_htons>
 800f624:	4603      	mov	r3, r0
 800f626:	b2db      	uxtb	r3, r3
 800f628:	f003 0303 	and.w	r3, r3, #3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <tcp_receive+0xa90>
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <tcp_receive+0xa92>
 800f634:	2300      	movs	r3, #0
 800f636:	442b      	add	r3, r5
 800f638:	429c      	cmp	r4, r3
 800f63a:	d206      	bcs.n	800f64a <tcp_receive+0xaa6>
 800f63c:	4b1e      	ldr	r3, [pc, #120]	; (800f6b8 <tcp_receive+0xb14>)
 800f63e:	f240 622b 	movw	r2, #1579	; 0x62b
 800f642:	4923      	ldr	r1, [pc, #140]	; (800f6d0 <tcp_receive+0xb2c>)
 800f644:	481e      	ldr	r0, [pc, #120]	; (800f6c0 <tcp_receive+0xb1c>)
 800f646:	f004 fc8f 	bl	8013f68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	891b      	ldrh	r3, [r3, #8]
 800f64e:	461c      	mov	r4, r3
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fa fe85 	bl	800a368 <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	b2db      	uxtb	r3, r3
 800f662:	f003 0303 	and.w	r3, r3, #3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <tcp_receive+0xaca>
 800f66a:	2301      	movs	r3, #1
 800f66c:	e000      	b.n	800f670 <tcp_receive+0xacc>
 800f66e:	2300      	movs	r3, #0
 800f670:	1919      	adds	r1, r3, r4
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f676:	b28b      	uxth	r3, r1
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7fc ff43 	bl	800c50c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	891b      	ldrh	r3, [r3, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d028      	beq.n	800f6e2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f690:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <tcp_receive+0xb24>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d01d      	beq.n	800f6d4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f698:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <tcp_receive+0xb24>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	f7fc fa60 	bl	800bb68 <pbuf_cat>
 800f6a8:	e018      	b.n	800f6dc <tcp_receive+0xb38>
 800f6aa:	bf00      	nop
 800f6ac:	20008cbe 	.word	0x20008cbe
 800f6b0:	20008cb4 	.word	0x20008cb4
 800f6b4:	20008c94 	.word	0x20008c94
 800f6b8:	08016340 	.word	0x08016340
 800f6bc:	08016720 	.word	0x08016720
 800f6c0:	0801638c 	.word	0x0801638c
 800f6c4:	0801675c 	.word	0x0801675c
 800f6c8:	20008cc4 	.word	0x20008cc4
 800f6cc:	20008cc1 	.word	0x20008cc1
 800f6d0:	0801677c 	.word	0x0801677c
            } else {
              recv_data = cseg->p;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	4a70      	ldr	r2, [pc, #448]	; (800f89c <tcp_receive+0xcf8>)
 800f6da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	899b      	ldrh	r3, [r3, #12]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fa fe3c 	bl	800a368 <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00d      	beq.n	800f718 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f6fc:	4b68      	ldr	r3, [pc, #416]	; (800f8a0 <tcp_receive+0xcfc>)
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	f043 0320 	orr.w	r3, r3, #32
 800f704:	b2da      	uxtb	r2, r3
 800f706:	4b66      	ldr	r3, [pc, #408]	; (800f8a0 <tcp_receive+0xcfc>)
 800f708:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7d1b      	ldrb	r3, [r3, #20]
 800f70e:	2b04      	cmp	r3, #4
 800f710:	d102      	bne.n	800f718 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2207      	movs	r2, #7
 800f716:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f720:	68b8      	ldr	r0, [r7, #8]
 800f722:	f7fd fbd2 	bl	800ceca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d008      	beq.n	800f740 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f73a:	429a      	cmp	r2, r3
 800f73c:	f43f af43 	beq.w	800f5c6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	8b5b      	ldrh	r3, [r3, #26]
 800f744:	f003 0301 	and.w	r3, r3, #1
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00e      	beq.n	800f76a <tcp_receive+0xbc6>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8b5b      	ldrh	r3, [r3, #26]
 800f750:	f023 0301 	bic.w	r3, r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	835a      	strh	r2, [r3, #26]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	8b5b      	ldrh	r3, [r3, #26]
 800f75e:	f043 0302 	orr.w	r3, r3, #2
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f768:	e188      	b.n	800fa7c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8b5b      	ldrh	r3, [r3, #26]
 800f76e:	f043 0301 	orr.w	r3, r3, #1
 800f772:	b29a      	uxth	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f778:	e180      	b.n	800fa7c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f782:	4848      	ldr	r0, [pc, #288]	; (800f8a4 <tcp_receive+0xd00>)
 800f784:	f7fd fbba 	bl	800cefc <tcp_seg_copy>
 800f788:	4602      	mov	r2, r0
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	675a      	str	r2, [r3, #116]	; 0x74
 800f78e:	e16d      	b.n	800fa6c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f790:	2300      	movs	r3, #0
 800f792:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f798:	63bb      	str	r3, [r7, #56]	; 0x38
 800f79a:	e157      	b.n	800fa4c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	4b41      	ldr	r3, [pc, #260]	; (800f8a8 <tcp_receive+0xd04>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d11d      	bne.n	800f7e6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f7aa:	4b3e      	ldr	r3, [pc, #248]	; (800f8a4 <tcp_receive+0xd00>)
 800f7ac:	891a      	ldrh	r2, [r3, #8]
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	f240 814f 	bls.w	800fa56 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7b8:	483a      	ldr	r0, [pc, #232]	; (800f8a4 <tcp_receive+0xd00>)
 800f7ba:	f7fd fb9f 	bl	800cefc <tcp_seg_copy>
 800f7be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 8149 	beq.w	800fa5a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d003      	beq.n	800f7d6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800f7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	e002      	b.n	800f7dc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f7dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7de:	6978      	ldr	r0, [r7, #20]
 800f7e0:	f7ff f8dc 	bl	800e99c <tcp_oos_insert_segment>
                }
                break;
 800f7e4:	e139      	b.n	800fa5a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d117      	bne.n	800f81c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f7ec:	4b2e      	ldr	r3, [pc, #184]	; (800f8a8 <tcp_receive+0xd04>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	da57      	bge.n	800f8ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7fc:	4829      	ldr	r0, [pc, #164]	; (800f8a4 <tcp_receive+0xd00>)
 800f7fe:	f7fd fb7d 	bl	800cefc <tcp_seg_copy>
 800f802:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f000 8129 	beq.w	800fa5e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	69ba      	ldr	r2, [r7, #24]
 800f810:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f814:	69b8      	ldr	r0, [r7, #24]
 800f816:	f7ff f8c1 	bl	800e99c <tcp_oos_insert_segment>
                  }
                  break;
 800f81a:	e120      	b.n	800fa5e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f81c:	4b22      	ldr	r3, [pc, #136]	; (800f8a8 <tcp_receive+0xd04>)
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	3b01      	subs	r3, #1
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	db3e      	blt.n	800f8ac <tcp_receive+0xd08>
 800f82e:	4b1e      	ldr	r3, [pc, #120]	; (800f8a8 <tcp_receive+0xd04>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	3301      	adds	r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	dc35      	bgt.n	800f8ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f840:	4818      	ldr	r0, [pc, #96]	; (800f8a4 <tcp_receive+0xd00>)
 800f842:	f7fd fb5b 	bl	800cefc <tcp_seg_copy>
 800f846:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 8109 	beq.w	800fa62 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f858:	8912      	ldrh	r2, [r2, #8]
 800f85a:	441a      	add	r2, r3
 800f85c:	4b12      	ldr	r3, [pc, #72]	; (800f8a8 <tcp_receive+0xd04>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	1ad3      	subs	r3, r2, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	dd12      	ble.n	800f88c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f866:	4b10      	ldr	r3, [pc, #64]	; (800f8a8 <tcp_receive+0xd04>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	b29b      	uxth	r3, r3
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	b29a      	uxth	r2, r3
 800f878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f882:	891b      	ldrh	r3, [r3, #8]
 800f884:	4619      	mov	r1, r3
 800f886:	4610      	mov	r0, r2
 800f888:	f7fb ff26 	bl	800b6d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88e:	69fa      	ldr	r2, [r7, #28]
 800f890:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f894:	69f8      	ldr	r0, [r7, #28]
 800f896:	f7ff f881 	bl	800e99c <tcp_oos_insert_segment>
                  }
                  break;
 800f89a:	e0e2      	b.n	800fa62 <tcp_receive+0xebe>
 800f89c:	20008cc4 	.word	0x20008cc4
 800f8a0:	20008cc1 	.word	0x20008cc1
 800f8a4:	20008c94 	.word	0x20008c94
 800f8a8:	20008cb4 	.word	0x20008cb4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f040 80c6 	bne.w	800fa46 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f8ba:	4b80      	ldr	r3, [pc, #512]	; (800fabc <tcp_receive+0xf18>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f340 80bd 	ble.w	800fa46 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	899b      	ldrh	r3, [r3, #12]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fa fd47 	bl	800a368 <lwip_htons>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f040 80bf 	bne.w	800fa66 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f8e8:	4875      	ldr	r0, [pc, #468]	; (800fac0 <tcp_receive+0xf1c>)
 800f8ea:	f7fd fb07 	bl	800cefc <tcp_seg_copy>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80b6 	beq.w	800fa6a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f906:	8912      	ldrh	r2, [r2, #8]
 800f908:	441a      	add	r2, r3
 800f90a:	4b6c      	ldr	r3, [pc, #432]	; (800fabc <tcp_receive+0xf18>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	dd12      	ble.n	800f93a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f914:	4b69      	ldr	r3, [pc, #420]	; (800fabc <tcp_receive+0xf18>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	b29a      	uxth	r2, r3
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	b29b      	uxth	r3, r3
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	b29a      	uxth	r2, r3
 800f926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f928:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f930:	891b      	ldrh	r3, [r3, #8]
 800f932:	4619      	mov	r1, r3
 800f934:	4610      	mov	r0, r2
 800f936:	f7fb fecf 	bl	800b6d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f93a:	4b62      	ldr	r3, [pc, #392]	; (800fac4 <tcp_receive+0xf20>)
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	4b5e      	ldr	r3, [pc, #376]	; (800fabc <tcp_receive+0xf18>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	441a      	add	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f94e:	440b      	add	r3, r1
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	2b00      	cmp	r3, #0
 800f954:	f340 8089 	ble.w	800fa6a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	899b      	ldrh	r3, [r3, #12]
 800f960:	b29b      	uxth	r3, r3
 800f962:	4618      	mov	r0, r3
 800f964:	f7fa fd00 	bl	800a368 <lwip_htons>
 800f968:	4603      	mov	r3, r0
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	d022      	beq.n	800f9ba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	899b      	ldrh	r3, [r3, #12]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	b21b      	sxth	r3, r3
 800f980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f984:	b21c      	sxth	r4, r3
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4618      	mov	r0, r3
 800f992:	f7fa fce9 	bl	800a368 <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fa fce0 	bl	800a368 <lwip_htons>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	4323      	orrs	r3, r4
 800f9ae:	b21a      	sxth	r2, r3
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	b292      	uxth	r2, r2
 800f9b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9c4:	4413      	add	r3, r2
 800f9c6:	b299      	uxth	r1, r3
 800f9c8:	4b3c      	ldr	r3, [pc, #240]	; (800fabc <tcp_receive+0xf18>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	b29a      	uxth	r2, r3
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	1a8a      	subs	r2, r1, r2
 800f9d4:	b292      	uxth	r2, r2
 800f9d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	685a      	ldr	r2, [r3, #4]
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	891b      	ldrh	r3, [r3, #8]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	4610      	mov	r0, r2
 800f9e8:	f7fb fe76 	bl	800b6d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	891c      	ldrh	r4, [r3, #8]
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	899b      	ldrh	r3, [r3, #12]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fa fcb3 	bl	800a368 <lwip_htons>
 800fa02:	4603      	mov	r3, r0
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	f003 0303 	and.w	r3, r3, #3
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <tcp_receive+0xe6e>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e000      	b.n	800fa14 <tcp_receive+0xe70>
 800fa12:	2300      	movs	r3, #0
 800fa14:	4423      	add	r3, r4
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	4b2a      	ldr	r3, [pc, #168]	; (800fac4 <tcp_receive+0xf20>)
 800fa1a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa1c:	4b29      	ldr	r3, [pc, #164]	; (800fac4 <tcp_receive+0xf20>)
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	461a      	mov	r2, r3
 800fa22:	4b26      	ldr	r3, [pc, #152]	; (800fabc <tcp_receive+0xf18>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	441a      	add	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2c:	6879      	ldr	r1, [r7, #4]
 800fa2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa30:	440b      	add	r3, r1
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d019      	beq.n	800fa6a <tcp_receive+0xec6>
 800fa36:	4b24      	ldr	r3, [pc, #144]	; (800fac8 <tcp_receive+0xf24>)
 800fa38:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fa3c:	4923      	ldr	r1, [pc, #140]	; (800facc <tcp_receive+0xf28>)
 800fa3e:	4824      	ldr	r0, [pc, #144]	; (800fad0 <tcp_receive+0xf2c>)
 800fa40:	f004 fa92 	bl	8013f68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fa44:	e011      	b.n	800fa6a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f47f aea4 	bne.w	800f79c <tcp_receive+0xbf8>
 800fa54:	e00a      	b.n	800fa6c <tcp_receive+0xec8>
                break;
 800fa56:	bf00      	nop
 800fa58:	e008      	b.n	800fa6c <tcp_receive+0xec8>
                break;
 800fa5a:	bf00      	nop
 800fa5c:	e006      	b.n	800fa6c <tcp_receive+0xec8>
                  break;
 800fa5e:	bf00      	nop
 800fa60:	e004      	b.n	800fa6c <tcp_receive+0xec8>
                  break;
 800fa62:	bf00      	nop
 800fa64:	e002      	b.n	800fa6c <tcp_receive+0xec8>
                  break;
 800fa66:	bf00      	nop
 800fa68:	e000      	b.n	800fa6c <tcp_receive+0xec8>
                break;
 800fa6a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f001 fa33 	bl	8010ed8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fa72:	e003      	b.n	800fa7c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f001 fa2f 	bl	8010ed8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa7a:	e01a      	b.n	800fab2 <tcp_receive+0xf0e>
 800fa7c:	e019      	b.n	800fab2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <tcp_receive+0xf18>)
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	db0a      	blt.n	800faa2 <tcp_receive+0xefe>
 800fa8c:	4b0b      	ldr	r3, [pc, #44]	; (800fabc <tcp_receive+0xf18>)
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa98:	440b      	add	r3, r1
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	dd07      	ble.n	800fab2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	8b5b      	ldrh	r3, [r3, #26]
 800faa6:	f043 0302 	orr.w	r3, r3, #2
 800faaa:	b29a      	uxth	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fab0:	e7ff      	b.n	800fab2 <tcp_receive+0xf0e>
 800fab2:	bf00      	nop
 800fab4:	3750      	adds	r7, #80	; 0x50
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bdb0      	pop	{r4, r5, r7, pc}
 800faba:	bf00      	nop
 800fabc:	20008cb4 	.word	0x20008cb4
 800fac0:	20008c94 	.word	0x20008c94
 800fac4:	20008cbe 	.word	0x20008cbe
 800fac8:	08016340 	.word	0x08016340
 800facc:	080166e8 	.word	0x080166e8
 800fad0:	0801638c 	.word	0x0801638c

0800fad4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fada:	4b15      	ldr	r3, [pc, #84]	; (800fb30 <tcp_get_next_optbyte+0x5c>)
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	b291      	uxth	r1, r2
 800fae2:	4a13      	ldr	r2, [pc, #76]	; (800fb30 <tcp_get_next_optbyte+0x5c>)
 800fae4:	8011      	strh	r1, [r2, #0]
 800fae6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fae8:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <tcp_get_next_optbyte+0x60>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d004      	beq.n	800fafa <tcp_get_next_optbyte+0x26>
 800faf0:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <tcp_get_next_optbyte+0x64>)
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	88fa      	ldrh	r2, [r7, #6]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d208      	bcs.n	800fb0c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fafa:	4b10      	ldr	r3, [pc, #64]	; (800fb3c <tcp_get_next_optbyte+0x68>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3314      	adds	r3, #20
 800fb00:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb02:	88fb      	ldrh	r3, [r7, #6]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	4413      	add	r3, r2
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	e00b      	b.n	800fb24 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb0c:	88fb      	ldrh	r3, [r7, #6]
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <tcp_get_next_optbyte+0x64>)
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	1ad3      	subs	r3, r2, r3
 800fb18:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb1a:	4b06      	ldr	r3, [pc, #24]	; (800fb34 <tcp_get_next_optbyte+0x60>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	797b      	ldrb	r3, [r7, #5]
 800fb20:	4413      	add	r3, r2
 800fb22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	20008cb0 	.word	0x20008cb0
 800fb34:	20008cac 	.word	0x20008cac
 800fb38:	20008caa 	.word	0x20008caa
 800fb3c:	20008ca4 	.word	0x20008ca4

0800fb40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <tcp_parseopt+0x1c>
 800fb4e:	4b32      	ldr	r3, [pc, #200]	; (800fc18 <tcp_parseopt+0xd8>)
 800fb50:	f240 727d 	movw	r2, #1917	; 0x77d
 800fb54:	4931      	ldr	r1, [pc, #196]	; (800fc1c <tcp_parseopt+0xdc>)
 800fb56:	4832      	ldr	r0, [pc, #200]	; (800fc20 <tcp_parseopt+0xe0>)
 800fb58:	f004 fa06 	bl	8013f68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fb5c:	4b31      	ldr	r3, [pc, #196]	; (800fc24 <tcp_parseopt+0xe4>)
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d055      	beq.n	800fc10 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fb64:	4b30      	ldr	r3, [pc, #192]	; (800fc28 <tcp_parseopt+0xe8>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	801a      	strh	r2, [r3, #0]
 800fb6a:	e045      	b.n	800fbf8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fb6c:	f7ff ffb2 	bl	800fad4 <tcp_get_next_optbyte>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d006      	beq.n	800fb88 <tcp_parseopt+0x48>
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	dc2b      	bgt.n	800fbd6 <tcp_parseopt+0x96>
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d041      	beq.n	800fc06 <tcp_parseopt+0xc6>
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d127      	bne.n	800fbd6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fb86:	e037      	b.n	800fbf8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fb88:	f7ff ffa4 	bl	800fad4 <tcp_get_next_optbyte>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d13b      	bne.n	800fc0a <tcp_parseopt+0xca>
 800fb92:	4b25      	ldr	r3, [pc, #148]	; (800fc28 <tcp_parseopt+0xe8>)
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	3301      	adds	r3, #1
 800fb98:	4a22      	ldr	r2, [pc, #136]	; (800fc24 <tcp_parseopt+0xe4>)
 800fb9a:	8812      	ldrh	r2, [r2, #0]
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	da34      	bge.n	800fc0a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fba0:	f7ff ff98 	bl	800fad4 <tcp_get_next_optbyte>
 800fba4:	4603      	mov	r3, r0
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	021b      	lsls	r3, r3, #8
 800fbaa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fbac:	f7ff ff92 	bl	800fad4 <tcp_get_next_optbyte>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	89bb      	ldrh	r3, [r7, #12]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fbba:	89bb      	ldrh	r3, [r7, #12]
 800fbbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fbc0:	d804      	bhi.n	800fbcc <tcp_parseopt+0x8c>
 800fbc2:	89bb      	ldrh	r3, [r7, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d001      	beq.n	800fbcc <tcp_parseopt+0x8c>
 800fbc8:	89ba      	ldrh	r2, [r7, #12]
 800fbca:	e001      	b.n	800fbd0 <tcp_parseopt+0x90>
 800fbcc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fbd4:	e010      	b.n	800fbf8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fbd6:	f7ff ff7d 	bl	800fad4 <tcp_get_next_optbyte>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fbde:	7afb      	ldrb	r3, [r7, #11]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d914      	bls.n	800fc0e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fbe4:	7afb      	ldrb	r3, [r7, #11]
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <tcp_parseopt+0xe8>)
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	4413      	add	r3, r2
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	3b02      	subs	r3, #2
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	4b0c      	ldr	r3, [pc, #48]	; (800fc28 <tcp_parseopt+0xe8>)
 800fbf6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fbf8:	4b0b      	ldr	r3, [pc, #44]	; (800fc28 <tcp_parseopt+0xe8>)
 800fbfa:	881a      	ldrh	r2, [r3, #0]
 800fbfc:	4b09      	ldr	r3, [pc, #36]	; (800fc24 <tcp_parseopt+0xe4>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d3b3      	bcc.n	800fb6c <tcp_parseopt+0x2c>
 800fc04:	e004      	b.n	800fc10 <tcp_parseopt+0xd0>
          return;
 800fc06:	bf00      	nop
 800fc08:	e002      	b.n	800fc10 <tcp_parseopt+0xd0>
            return;
 800fc0a:	bf00      	nop
 800fc0c:	e000      	b.n	800fc10 <tcp_parseopt+0xd0>
            return;
 800fc0e:	bf00      	nop
      }
    }
  }
}
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	08016340 	.word	0x08016340
 800fc1c:	080167a4 	.word	0x080167a4
 800fc20:	0801638c 	.word	0x0801638c
 800fc24:	20008ca8 	.word	0x20008ca8
 800fc28:	20008cb0 	.word	0x20008cb0

0800fc2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc30:	4b05      	ldr	r3, [pc, #20]	; (800fc48 <tcp_trigger_input_pcb_close+0x1c>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f043 0310 	orr.w	r3, r3, #16
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	4b03      	ldr	r3, [pc, #12]	; (800fc48 <tcp_trigger_input_pcb_close+0x1c>)
 800fc3c:	701a      	strb	r2, [r3, #0]
}
 800fc3e:	bf00      	nop
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	20008cc1 	.word	0x20008cc1

0800fc4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00a      	beq.n	800fc74 <tcp_route+0x28>
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	7a1b      	ldrb	r3, [r3, #8]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d006      	beq.n	800fc74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	7a1b      	ldrb	r3, [r3, #8]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fb fb7a 	bl	800b364 <netif_get_by_index>
 800fc70:	4603      	mov	r3, r0
 800fc72:	e003      	b.n	800fc7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f002 fe3b 	bl	80128f0 <ip4_route>
 800fc7a:	4603      	mov	r3, r0
  }
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fc84:	b590      	push	{r4, r7, lr}
 800fc86:	b087      	sub	sp, #28
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	603b      	str	r3, [r7, #0]
 800fc90:	4613      	mov	r3, r2
 800fc92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d105      	bne.n	800fca6 <tcp_create_segment+0x22>
 800fc9a:	4b44      	ldr	r3, [pc, #272]	; (800fdac <tcp_create_segment+0x128>)
 800fc9c:	22a3      	movs	r2, #163	; 0xa3
 800fc9e:	4944      	ldr	r1, [pc, #272]	; (800fdb0 <tcp_create_segment+0x12c>)
 800fca0:	4844      	ldr	r0, [pc, #272]	; (800fdb4 <tcp_create_segment+0x130>)
 800fca2:	f004 f961 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d105      	bne.n	800fcb8 <tcp_create_segment+0x34>
 800fcac:	4b3f      	ldr	r3, [pc, #252]	; (800fdac <tcp_create_segment+0x128>)
 800fcae:	22a4      	movs	r2, #164	; 0xa4
 800fcb0:	4941      	ldr	r1, [pc, #260]	; (800fdb8 <tcp_create_segment+0x134>)
 800fcb2:	4840      	ldr	r0, [pc, #256]	; (800fdb4 <tcp_create_segment+0x130>)
 800fcb4:	f004 f958 	bl	8013f68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	f003 0304 	and.w	r3, r3, #4
 800fcc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fcc6:	2003      	movs	r0, #3
 800fcc8:	f7fa ffc6 	bl	800ac58 <memp_malloc>
 800fccc:	6138      	str	r0, [r7, #16]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d104      	bne.n	800fcde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	f7fb fe85 	bl	800b9e4 <pbuf_free>
    return NULL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e061      	b.n	800fda2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fce4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	891a      	ldrh	r2, [r3, #8]
 800fcf6:	7dfb      	ldrb	r3, [r7, #23]
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d205      	bcs.n	800fd0a <tcp_create_segment+0x86>
 800fcfe:	4b2b      	ldr	r3, [pc, #172]	; (800fdac <tcp_create_segment+0x128>)
 800fd00:	22b0      	movs	r2, #176	; 0xb0
 800fd02:	492e      	ldr	r1, [pc, #184]	; (800fdbc <tcp_create_segment+0x138>)
 800fd04:	482b      	ldr	r0, [pc, #172]	; (800fdb4 <tcp_create_segment+0x130>)
 800fd06:	f004 f92f 	bl	8013f68 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	891a      	ldrh	r2, [r3, #8]
 800fd0e:	7dfb      	ldrb	r3, [r7, #23]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd1a:	2114      	movs	r1, #20
 800fd1c:	68b8      	ldr	r0, [r7, #8]
 800fd1e:	f7fb fdcb 	bl	800b8b8 <pbuf_add_header>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d004      	beq.n	800fd32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd28:	6938      	ldr	r0, [r7, #16]
 800fd2a:	f7fd f8ce 	bl	800ceca <tcp_seg_free>
    return NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e037      	b.n	800fda2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	8ada      	ldrh	r2, [r3, #22]
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	68dc      	ldr	r4, [r3, #12]
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7fa fb0f 	bl	800a368 <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	8b1a      	ldrh	r2, [r3, #24]
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	68dc      	ldr	r4, [r3, #12]
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fa fb06 	bl	800a368 <lwip_htons>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	68dc      	ldr	r4, [r3, #12]
 800fd64:	6838      	ldr	r0, [r7, #0]
 800fd66:	f7fa fb14 	bl	800a392 <lwip_htonl>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	089b      	lsrs	r3, r3, #2
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	3305      	adds	r3, #5
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	031b      	lsls	r3, r3, #12
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	4313      	orrs	r3, r2
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	68dc      	ldr	r4, [r3, #12]
 800fd8a:	4610      	mov	r0, r2
 800fd8c:	f7fa faec 	bl	800a368 <lwip_htons>
 800fd90:	4603      	mov	r3, r0
 800fd92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	749a      	strb	r2, [r3, #18]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	74da      	strb	r2, [r3, #19]
  return seg;
 800fda0:	693b      	ldr	r3, [r7, #16]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	371c      	adds	r7, #28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd90      	pop	{r4, r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	080167c0 	.word	0x080167c0
 800fdb0:	080167f4 	.word	0x080167f4
 800fdb4:	08016814 	.word	0x08016814
 800fdb8:	0801683c 	.word	0x0801683c
 800fdbc:	08016860 	.word	0x08016860

0800fdc0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fdc0:	b590      	push	{r4, r7, lr}
 800fdc2:	b08b      	sub	sp, #44	; 0x2c
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61fb      	str	r3, [r7, #28]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <tcp_split_unsent_seg+0x2c>
 800fdde:	4b95      	ldr	r3, [pc, #596]	; (8010034 <tcp_split_unsent_seg+0x274>)
 800fde0:	f240 324b 	movw	r2, #843	; 0x34b
 800fde4:	4994      	ldr	r1, [pc, #592]	; (8010038 <tcp_split_unsent_seg+0x278>)
 800fde6:	4895      	ldr	r0, [pc, #596]	; (801003c <tcp_split_unsent_seg+0x27c>)
 800fde8:	f004 f8be 	bl	8013f68 <iprintf>

  useg = pcb->unsent;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdf0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdfc:	e116      	b.n	801002c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fdfe:	887b      	ldrh	r3, [r7, #2]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d109      	bne.n	800fe18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe04:	4b8b      	ldr	r3, [pc, #556]	; (8010034 <tcp_split_unsent_seg+0x274>)
 800fe06:	f240 3253 	movw	r2, #851	; 0x353
 800fe0a:	498d      	ldr	r1, [pc, #564]	; (8010040 <tcp_split_unsent_seg+0x280>)
 800fe0c:	488b      	ldr	r0, [pc, #556]	; (801003c <tcp_split_unsent_seg+0x27c>)
 800fe0e:	f004 f8ab 	bl	8013f68 <iprintf>
    return ERR_VAL;
 800fe12:	f06f 0305 	mvn.w	r3, #5
 800fe16:	e109      	b.n	801002c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	891b      	ldrh	r3, [r3, #8]
 800fe1c:	887a      	ldrh	r2, [r7, #2]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d301      	bcc.n	800fe26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe22:	2300      	movs	r3, #0
 800fe24:	e102      	b.n	801002c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe2a:	887a      	ldrh	r2, [r7, #2]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d906      	bls.n	800fe3e <tcp_split_unsent_seg+0x7e>
 800fe30:	4b80      	ldr	r3, [pc, #512]	; (8010034 <tcp_split_unsent_seg+0x274>)
 800fe32:	f240 325b 	movw	r2, #859	; 0x35b
 800fe36:	4983      	ldr	r1, [pc, #524]	; (8010044 <tcp_split_unsent_seg+0x284>)
 800fe38:	4880      	ldr	r0, [pc, #512]	; (801003c <tcp_split_unsent_seg+0x27c>)
 800fe3a:	f004 f895 	bl	8013f68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	891b      	ldrh	r3, [r3, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <tcp_split_unsent_seg+0x94>
 800fe46:	4b7b      	ldr	r3, [pc, #492]	; (8010034 <tcp_split_unsent_seg+0x274>)
 800fe48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fe4c:	497e      	ldr	r1, [pc, #504]	; (8010048 <tcp_split_unsent_seg+0x288>)
 800fe4e:	487b      	ldr	r0, [pc, #492]	; (801003c <tcp_split_unsent_seg+0x27c>)
 800fe50:	f004 f88a 	bl	8013f68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	7a9b      	ldrb	r3, [r3, #10]
 800fe58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	f003 0304 	and.w	r3, r3, #4
 800fe64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	891a      	ldrh	r2, [r3, #8]
 800fe6a:	887b      	ldrh	r3, [r7, #2]
 800fe6c:	1ad3      	subs	r3, r2, r3
 800fe6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fe70:	7bbb      	ldrb	r3, [r7, #14]
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	89bb      	ldrh	r3, [r7, #12]
 800fe76:	4413      	add	r3, r2
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe7e:	4619      	mov	r1, r3
 800fe80:	2036      	movs	r0, #54	; 0x36
 800fe82:	f7fb facb 	bl	800b41c <pbuf_alloc>
 800fe86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f000 80b7 	beq.w	800fffe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	891a      	ldrh	r2, [r3, #8]
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	891b      	ldrh	r3, [r3, #8]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	887b      	ldrh	r3, [r7, #2]
 800fea0:	4413      	add	r3, r2
 800fea2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	6858      	ldr	r0, [r3, #4]
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	18d1      	adds	r1, r2, r3
 800feb0:	897b      	ldrh	r3, [r7, #10]
 800feb2:	89ba      	ldrh	r2, [r7, #12]
 800feb4:	f7fb ff80 	bl	800bdb8 <pbuf_copy_partial>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
 800febc:	89bb      	ldrh	r3, [r7, #12]
 800febe:	4293      	cmp	r3, r2
 800fec0:	f040 809f 	bne.w	8010002 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	899b      	ldrh	r3, [r3, #12]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fa fa4b 	bl	800a368 <lwip_htons>
 800fed2:	4603      	mov	r3, r0
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800feda:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fedc:	2300      	movs	r3, #0
 800fede:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fee0:	7efb      	ldrb	r3, [r7, #27]
 800fee2:	f003 0308 	and.w	r3, r3, #8
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d007      	beq.n	800fefa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800feea:	7efb      	ldrb	r3, [r7, #27]
 800feec:	f023 0308 	bic.w	r3, r3, #8
 800fef0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fef2:	7ebb      	ldrb	r3, [r7, #26]
 800fef4:	f043 0308 	orr.w	r3, r3, #8
 800fef8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fefa:	7efb      	ldrb	r3, [r7, #27]
 800fefc:	f003 0301 	and.w	r3, r3, #1
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d007      	beq.n	800ff14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff04:	7efb      	ldrb	r3, [r7, #27]
 800ff06:	f023 0301 	bic.w	r3, r3, #1
 800ff0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff0c:	7ebb      	ldrb	r3, [r7, #26]
 800ff0e:	f043 0301 	orr.w	r3, r3, #1
 800ff12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	68db      	ldr	r3, [r3, #12]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fa fa39 	bl	800a392 <lwip_htonl>
 800ff20:	4602      	mov	r2, r0
 800ff22:	887b      	ldrh	r3, [r7, #2]
 800ff24:	18d1      	adds	r1, r2, r3
 800ff26:	7eba      	ldrb	r2, [r7, #26]
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	9300      	str	r3, [sp, #0]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	6939      	ldr	r1, [r7, #16]
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff fea7 	bl	800fc84 <tcp_create_segment>
 800ff36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d063      	beq.n	8010006 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb fdd6 	bl	800baf4 <pbuf_clen>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	6858      	ldr	r0, [r3, #4]
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	891a      	ldrh	r2, [r3, #8]
 800ff66:	89bb      	ldrh	r3, [r7, #12]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	f7fb fbb3 	bl	800b6d8 <pbuf_realloc>
  useg->len -= remainder;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	891a      	ldrh	r2, [r3, #8]
 800ff76:	89bb      	ldrh	r3, [r7, #12]
 800ff78:	1ad3      	subs	r3, r2, r3
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	899b      	ldrh	r3, [r3, #12]
 800ff86:	b29c      	uxth	r4, r3
 800ff88:	7efb      	ldrb	r3, [r7, #27]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fa f9eb 	bl	800a368 <lwip_htons>
 800ff92:	4603      	mov	r3, r0
 800ff94:	461a      	mov	r2, r3
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	4322      	orrs	r2, r4
 800ff9c:	b292      	uxth	r2, r2
 800ff9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fb fda5 	bl	800baf4 <pbuf_clen>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	461a      	mov	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffb4:	4413      	add	r3, r2
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fb fd96 	bl	800baf4 <pbuf_clen>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffd2:	4413      	add	r3, r2
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	69fa      	ldr	r2, [r7, #28]
 800ffe8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d103      	bne.n	800fffa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	e016      	b.n	801002c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fffe:	bf00      	nop
 8010000:	e002      	b.n	8010008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010002:	bf00      	nop
 8010004:	e000      	b.n	8010008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010006:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d006      	beq.n	801001c <tcp_split_unsent_seg+0x25c>
 801000e:	4b09      	ldr	r3, [pc, #36]	; (8010034 <tcp_split_unsent_seg+0x274>)
 8010010:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010014:	490d      	ldr	r1, [pc, #52]	; (801004c <tcp_split_unsent_seg+0x28c>)
 8010016:	4809      	ldr	r0, [pc, #36]	; (801003c <tcp_split_unsent_seg+0x27c>)
 8010018:	f003 ffa6 	bl	8013f68 <iprintf>
  if (p != NULL) {
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010022:	6938      	ldr	r0, [r7, #16]
 8010024:	f7fb fcde 	bl	800b9e4 <pbuf_free>
  }

  return ERR_MEM;
 8010028:	f04f 33ff 	mov.w	r3, #4294967295
}
 801002c:	4618      	mov	r0, r3
 801002e:	3724      	adds	r7, #36	; 0x24
 8010030:	46bd      	mov	sp, r7
 8010032:	bd90      	pop	{r4, r7, pc}
 8010034:	080167c0 	.word	0x080167c0
 8010038:	08016b54 	.word	0x08016b54
 801003c:	08016814 	.word	0x08016814
 8010040:	08016b78 	.word	0x08016b78
 8010044:	08016b9c 	.word	0x08016b9c
 8010048:	08016bac 	.word	0x08016bac
 801004c:	08016bbc 	.word	0x08016bbc

08010050 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010050:	b590      	push	{r4, r7, lr}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <tcp_send_fin+0x1c>
 801005e:	4b21      	ldr	r3, [pc, #132]	; (80100e4 <tcp_send_fin+0x94>)
 8010060:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010064:	4920      	ldr	r1, [pc, #128]	; (80100e8 <tcp_send_fin+0x98>)
 8010066:	4821      	ldr	r0, [pc, #132]	; (80100ec <tcp_send_fin+0x9c>)
 8010068:	f003 ff7e 	bl	8013f68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010070:	2b00      	cmp	r3, #0
 8010072:	d02e      	beq.n	80100d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	e002      	b.n	8010082 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1f8      	bne.n	801007c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	899b      	ldrh	r3, [r3, #12]
 8010090:	b29b      	uxth	r3, r3
 8010092:	4618      	mov	r0, r3
 8010094:	f7fa f968 	bl	800a368 <lwip_htons>
 8010098:	4603      	mov	r3, r0
 801009a:	b2db      	uxtb	r3, r3
 801009c:	f003 0307 	and.w	r3, r3, #7
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d116      	bne.n	80100d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	899b      	ldrh	r3, [r3, #12]
 80100aa:	b29c      	uxth	r4, r3
 80100ac:	2001      	movs	r0, #1
 80100ae:	f7fa f95b 	bl	800a368 <lwip_htons>
 80100b2:	4603      	mov	r3, r0
 80100b4:	461a      	mov	r2, r3
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	4322      	orrs	r2, r4
 80100bc:	b292      	uxth	r2, r2
 80100be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	8b5b      	ldrh	r3, [r3, #26]
 80100c4:	f043 0320 	orr.w	r3, r3, #32
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e004      	b.n	80100dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80100d2:	2101      	movs	r1, #1
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f80b 	bl	80100f0 <tcp_enqueue_flags>
 80100da:	4603      	mov	r3, r0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3714      	adds	r7, #20
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd90      	pop	{r4, r7, pc}
 80100e4:	080167c0 	.word	0x080167c0
 80100e8:	08016bc8 	.word	0x08016bc8
 80100ec:	08016814 	.word	0x08016814

080100f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08a      	sub	sp, #40	; 0x28
 80100f4:	af02      	add	r7, sp, #8
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	f003 0303 	and.w	r3, r3, #3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d106      	bne.n	801011c <tcp_enqueue_flags+0x2c>
 801010e:	4b67      	ldr	r3, [pc, #412]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 8010110:	f240 4211 	movw	r2, #1041	; 0x411
 8010114:	4966      	ldr	r1, [pc, #408]	; (80102b0 <tcp_enqueue_flags+0x1c0>)
 8010116:	4867      	ldr	r0, [pc, #412]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 8010118:	f003 ff26 	bl	8013f68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <tcp_enqueue_flags+0x40>
 8010122:	4b62      	ldr	r3, [pc, #392]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 8010124:	f240 4213 	movw	r2, #1043	; 0x413
 8010128:	4963      	ldr	r1, [pc, #396]	; (80102b8 <tcp_enqueue_flags+0x1c8>)
 801012a:	4862      	ldr	r0, [pc, #392]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 801012c:	f003 ff1c 	bl	8013f68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	f003 0302 	and.w	r3, r3, #2
 8010136:	2b00      	cmp	r3, #0
 8010138:	d001      	beq.n	801013e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801013a:	2301      	movs	r3, #1
 801013c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801013e:	7ffb      	ldrb	r3, [r7, #31]
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 0304 	and.w	r3, r3, #4
 8010148:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801014a:	7dfb      	ldrb	r3, [r7, #23]
 801014c:	b29b      	uxth	r3, r3
 801014e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010152:	4619      	mov	r1, r3
 8010154:	2036      	movs	r0, #54	; 0x36
 8010156:	f7fb f961 	bl	800b41c <pbuf_alloc>
 801015a:	6138      	str	r0, [r7, #16]
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8b5b      	ldrh	r3, [r3, #26]
 8010166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010170:	f04f 33ff 	mov.w	r3, #4294967295
 8010174:	e095      	b.n	80102a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	895a      	ldrh	r2, [r3, #10]
 801017a:	7dfb      	ldrb	r3, [r7, #23]
 801017c:	b29b      	uxth	r3, r3
 801017e:	429a      	cmp	r2, r3
 8010180:	d206      	bcs.n	8010190 <tcp_enqueue_flags+0xa0>
 8010182:	4b4a      	ldr	r3, [pc, #296]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 8010184:	f240 4239 	movw	r2, #1081	; 0x439
 8010188:	494c      	ldr	r1, [pc, #304]	; (80102bc <tcp_enqueue_flags+0x1cc>)
 801018a:	484a      	ldr	r0, [pc, #296]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 801018c:	f003 feec 	bl	8013f68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010194:	78fa      	ldrb	r2, [r7, #3]
 8010196:	7ffb      	ldrb	r3, [r7, #31]
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	460b      	mov	r3, r1
 801019c:	6939      	ldr	r1, [r7, #16]
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7ff fd70 	bl	800fc84 <tcp_create_segment>
 80101a4:	60f8      	str	r0, [r7, #12]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d109      	bne.n	80101c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8b5b      	ldrh	r3, [r3, #26]
 80101b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101b4:	b29a      	uxth	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101ba:	f04f 33ff 	mov.w	r3, #4294967295
 80101be:	e070      	b.n	80102a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	f003 0303 	and.w	r3, r3, #3
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d006      	beq.n	80101da <tcp_enqueue_flags+0xea>
 80101cc:	4b37      	ldr	r3, [pc, #220]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 80101ce:	f240 4242 	movw	r2, #1090	; 0x442
 80101d2:	493b      	ldr	r1, [pc, #236]	; (80102c0 <tcp_enqueue_flags+0x1d0>)
 80101d4:	4837      	ldr	r0, [pc, #220]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 80101d6:	f003 fec7 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	891b      	ldrh	r3, [r3, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d006      	beq.n	80101f0 <tcp_enqueue_flags+0x100>
 80101e2:	4b32      	ldr	r3, [pc, #200]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 80101e4:	f240 4243 	movw	r2, #1091	; 0x443
 80101e8:	4936      	ldr	r1, [pc, #216]	; (80102c4 <tcp_enqueue_flags+0x1d4>)
 80101ea:	4832      	ldr	r0, [pc, #200]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 80101ec:	f003 febc 	bl	8013f68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d103      	bne.n	8010200 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80101fe:	e00d      	b.n	801021c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010204:	61bb      	str	r3, [r7, #24]
 8010206:	e002      	b.n	801020e <tcp_enqueue_flags+0x11e>
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	61bb      	str	r3, [r7, #24]
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1f8      	bne.n	8010208 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010224:	78fb      	ldrb	r3, [r7, #3]
 8010226:	f003 0302 	and.w	r3, r3, #2
 801022a:	2b00      	cmp	r3, #0
 801022c:	d104      	bne.n	8010238 <tcp_enqueue_flags+0x148>
 801022e:	78fb      	ldrb	r3, [r7, #3]
 8010230:	f003 0301 	and.w	r3, r3, #1
 8010234:	2b00      	cmp	r3, #0
 8010236:	d004      	beq.n	8010242 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801023c:	1c5a      	adds	r2, r3, #1
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010242:	78fb      	ldrb	r3, [r7, #3]
 8010244:	f003 0301 	and.w	r3, r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	d006      	beq.n	801025a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	8b5b      	ldrh	r3, [r3, #26]
 8010250:	f043 0320 	orr.w	r3, r3, #32
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	f7fb fc48 	bl	800baf4 <pbuf_clen>
 8010264:	4603      	mov	r3, r0
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801026e:	4413      	add	r3, r2
 8010270:	b29a      	uxth	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00e      	beq.n	80102a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10a      	bne.n	80102a0 <tcp_enqueue_flags+0x1b0>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d106      	bne.n	80102a0 <tcp_enqueue_flags+0x1b0>
 8010292:	4b06      	ldr	r3, [pc, #24]	; (80102ac <tcp_enqueue_flags+0x1bc>)
 8010294:	f240 4265 	movw	r2, #1125	; 0x465
 8010298:	490b      	ldr	r1, [pc, #44]	; (80102c8 <tcp_enqueue_flags+0x1d8>)
 801029a:	4806      	ldr	r0, [pc, #24]	; (80102b4 <tcp_enqueue_flags+0x1c4>)
 801029c:	f003 fe64 	bl	8013f68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80102a0:	2300      	movs	r3, #0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3720      	adds	r7, #32
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	080167c0 	.word	0x080167c0
 80102b0:	08016be4 	.word	0x08016be4
 80102b4:	08016814 	.word	0x08016814
 80102b8:	08016c3c 	.word	0x08016c3c
 80102bc:	08016c5c 	.word	0x08016c5c
 80102c0:	08016c98 	.word	0x08016c98
 80102c4:	08016cb0 	.word	0x08016cb0
 80102c8:	08016cdc 	.word	0x08016cdc

080102cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80102cc:	b5b0      	push	{r4, r5, r7, lr}
 80102ce:	b08a      	sub	sp, #40	; 0x28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <tcp_output+0x1c>
 80102da:	4b8a      	ldr	r3, [pc, #552]	; (8010504 <tcp_output+0x238>)
 80102dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80102e0:	4989      	ldr	r1, [pc, #548]	; (8010508 <tcp_output+0x23c>)
 80102e2:	488a      	ldr	r0, [pc, #552]	; (801050c <tcp_output+0x240>)
 80102e4:	f003 fe40 	bl	8013f68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	7d1b      	ldrb	r3, [r3, #20]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d106      	bne.n	80102fe <tcp_output+0x32>
 80102f0:	4b84      	ldr	r3, [pc, #528]	; (8010504 <tcp_output+0x238>)
 80102f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80102f6:	4986      	ldr	r1, [pc, #536]	; (8010510 <tcp_output+0x244>)
 80102f8:	4884      	ldr	r0, [pc, #528]	; (801050c <tcp_output+0x240>)
 80102fa:	f003 fe35 	bl	8013f68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80102fe:	4b85      	ldr	r3, [pc, #532]	; (8010514 <tcp_output+0x248>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	429a      	cmp	r2, r3
 8010306:	d101      	bne.n	801030c <tcp_output+0x40>
    return ERR_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	e1ce      	b.n	80106aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010318:	4293      	cmp	r3, r2
 801031a:	bf28      	it	cs
 801031c:	4613      	movcs	r3, r2
 801031e:	b29b      	uxth	r3, r3
 8010320:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010326:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	2b00      	cmp	r3, #0
 801032c:	d10b      	bne.n	8010346 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	8b5b      	ldrh	r3, [r3, #26]
 8010332:	f003 0302 	and.w	r3, r3, #2
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 81aa 	beq.w	8010690 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 fdcb 	bl	8010ed8 <tcp_send_empty_ack>
 8010342:	4603      	mov	r3, r0
 8010344:	e1b1      	b.n	80106aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	3304      	adds	r3, #4
 801034c:	461a      	mov	r2, r3
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7ff fc7c 	bl	800fc4c <tcp_route>
 8010354:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d102      	bne.n	8010362 <tcp_output+0x96>
    return ERR_RTE;
 801035c:	f06f 0303 	mvn.w	r3, #3
 8010360:	e1a3      	b.n	80106aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d003      	beq.n	8010370 <tcp_output+0xa4>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d111      	bne.n	8010394 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <tcp_output+0xb0>
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	3304      	adds	r3, #4
 801037a:	e000      	b.n	801037e <tcp_output+0xb2>
 801037c:	2300      	movs	r3, #0
 801037e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d102      	bne.n	801038c <tcp_output+0xc0>
      return ERR_RTE;
 8010386:	f06f 0303 	mvn.w	r3, #3
 801038a:	e18e      	b.n	80106aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	4618      	mov	r0, r3
 801039c:	f7f9 fff9 	bl	800a392 <lwip_htonl>
 80103a0:	4602      	mov	r2, r0
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103aa:	8912      	ldrh	r2, [r2, #8]
 80103ac:	4413      	add	r3, r2
 80103ae:	69ba      	ldr	r2, [r7, #24]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d227      	bcs.n	8010404 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103ba:	461a      	mov	r2, r3
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	4293      	cmp	r3, r2
 80103c0:	d114      	bne.n	80103ec <tcp_output+0x120>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d110      	bne.n	80103ec <tcp_output+0x120>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d10b      	bne.n	80103ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	8b5b      	ldrh	r3, [r3, #26]
 80103f0:	f003 0302 	and.w	r3, r3, #2
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 814d 	beq.w	8010694 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 fd6c 	bl	8010ed8 <tcp_send_empty_ack>
 8010400:	4603      	mov	r3, r0
 8010402:	e152      	b.n	80106aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010410:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010412:	6a3b      	ldr	r3, [r7, #32]
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 811c 	beq.w	8010652 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801041a:	e002      	b.n	8010422 <tcp_output+0x156>
 801041c:	6a3b      	ldr	r3, [r7, #32]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	623b      	str	r3, [r7, #32]
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1f8      	bne.n	801041c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801042a:	e112      	b.n	8010652 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	899b      	ldrh	r3, [r3, #12]
 8010432:	b29b      	uxth	r3, r3
 8010434:	4618      	mov	r0, r3
 8010436:	f7f9 ff97 	bl	800a368 <lwip_htons>
 801043a:	4603      	mov	r3, r0
 801043c:	b2db      	uxtb	r3, r3
 801043e:	f003 0304 	and.w	r3, r3, #4
 8010442:	2b00      	cmp	r3, #0
 8010444:	d006      	beq.n	8010454 <tcp_output+0x188>
 8010446:	4b2f      	ldr	r3, [pc, #188]	; (8010504 <tcp_output+0x238>)
 8010448:	f240 5236 	movw	r2, #1334	; 0x536
 801044c:	4932      	ldr	r1, [pc, #200]	; (8010518 <tcp_output+0x24c>)
 801044e:	482f      	ldr	r0, [pc, #188]	; (801050c <tcp_output+0x240>)
 8010450:	f003 fd8a 	bl	8013f68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010458:	2b00      	cmp	r3, #0
 801045a:	d01f      	beq.n	801049c <tcp_output+0x1d0>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	8b5b      	ldrh	r3, [r3, #26]
 8010460:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010464:	2b00      	cmp	r3, #0
 8010466:	d119      	bne.n	801049c <tcp_output+0x1d0>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00b      	beq.n	8010488 <tcp_output+0x1bc>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d110      	bne.n	801049c <tcp_output+0x1d0>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801047e:	891a      	ldrh	r2, [r3, #8]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010484:	429a      	cmp	r2, r3
 8010486:	d209      	bcs.n	801049c <tcp_output+0x1d0>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801048e:	2b00      	cmp	r3, #0
 8010490:	d004      	beq.n	801049c <tcp_output+0x1d0>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010498:	2b08      	cmp	r3, #8
 801049a:	d901      	bls.n	80104a0 <tcp_output+0x1d4>
 801049c:	2301      	movs	r3, #1
 801049e:	e000      	b.n	80104a2 <tcp_output+0x1d6>
 80104a0:	2300      	movs	r3, #0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 80e4 	beq.w	801067c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	7d1b      	ldrb	r3, [r3, #20]
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d00d      	beq.n	80104d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	899b      	ldrh	r3, [r3, #12]
 80104c2:	b29c      	uxth	r4, r3
 80104c4:	2010      	movs	r0, #16
 80104c6:	f7f9 ff4f 	bl	800a368 <lwip_htons>
 80104ca:	4603      	mov	r3, r0
 80104cc:	461a      	mov	r2, r3
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	4322      	orrs	r2, r4
 80104d4:	b292      	uxth	r2, r2
 80104d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80104d8:	697a      	ldr	r2, [r7, #20]
 80104da:	6879      	ldr	r1, [r7, #4]
 80104dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104de:	f000 f909 	bl	80106f4 <tcp_output_segment>
 80104e2:	4603      	mov	r3, r0
 80104e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80104e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d016      	beq.n	801051c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	8b5b      	ldrh	r3, [r3, #26]
 80104f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	835a      	strh	r2, [r3, #26]
      return err;
 80104fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010500:	e0d3      	b.n	80106aa <tcp_output+0x3de>
 8010502:	bf00      	nop
 8010504:	080167c0 	.word	0x080167c0
 8010508:	08016d04 	.word	0x08016d04
 801050c:	08016814 	.word	0x08016814
 8010510:	08016d1c 	.word	0x08016d1c
 8010514:	20008cc8 	.word	0x20008cc8
 8010518:	08016d44 	.word	0x08016d44
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7d1b      	ldrb	r3, [r3, #20]
 8010528:	2b02      	cmp	r3, #2
 801052a:	d006      	beq.n	801053a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8b5b      	ldrh	r3, [r3, #26]
 8010530:	f023 0303 	bic.w	r3, r3, #3
 8010534:	b29a      	uxth	r2, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	4618      	mov	r0, r3
 8010542:	f7f9 ff26 	bl	800a392 <lwip_htonl>
 8010546:	4604      	mov	r4, r0
 8010548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054a:	891b      	ldrh	r3, [r3, #8]
 801054c:	461d      	mov	r5, r3
 801054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	899b      	ldrh	r3, [r3, #12]
 8010554:	b29b      	uxth	r3, r3
 8010556:	4618      	mov	r0, r3
 8010558:	f7f9 ff06 	bl	800a368 <lwip_htons>
 801055c:	4603      	mov	r3, r0
 801055e:	b2db      	uxtb	r3, r3
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <tcp_output+0x2a0>
 8010568:	2301      	movs	r3, #1
 801056a:	e000      	b.n	801056e <tcp_output+0x2a2>
 801056c:	2300      	movs	r3, #0
 801056e:	442b      	add	r3, r5
 8010570:	4423      	add	r3, r4
 8010572:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	da02      	bge.n	8010586 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010588:	891b      	ldrh	r3, [r3, #8]
 801058a:	461c      	mov	r4, r3
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	b29b      	uxth	r3, r3
 8010594:	4618      	mov	r0, r3
 8010596:	f7f9 fee7 	bl	800a368 <lwip_htons>
 801059a:	4603      	mov	r3, r0
 801059c:	b2db      	uxtb	r3, r3
 801059e:	f003 0303 	and.w	r3, r3, #3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <tcp_output+0x2de>
 80105a6:	2301      	movs	r3, #1
 80105a8:	e000      	b.n	80105ac <tcp_output+0x2e0>
 80105aa:	2300      	movs	r3, #0
 80105ac:	4423      	add	r3, r4
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d049      	beq.n	8010646 <tcp_output+0x37a>
      seg->next = NULL;
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d105      	bne.n	80105cc <tcp_output+0x300>
        pcb->unacked = seg;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80105c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c8:	623b      	str	r3, [r7, #32]
 80105ca:	e03f      	b.n	801064c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f9 fedd 	bl	800a392 <lwip_htonl>
 80105d8:	4604      	mov	r4, r0
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f9 fed6 	bl	800a392 <lwip_htonl>
 80105e6:	4603      	mov	r3, r0
 80105e8:	1ae3      	subs	r3, r4, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	da24      	bge.n	8010638 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	3370      	adds	r3, #112	; 0x70
 80105f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80105f4:	e002      	b.n	80105fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d011      	beq.n	8010628 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	68db      	ldr	r3, [r3, #12]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	f7f9 fec0 	bl	800a392 <lwip_htonl>
 8010612:	4604      	mov	r4, r0
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	4618      	mov	r0, r3
 801061c:	f7f9 feb9 	bl	800a392 <lwip_htonl>
 8010620:	4603      	mov	r3, r0
 8010622:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010624:	2b00      	cmp	r3, #0
 8010626:	dbe6      	blt.n	80105f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	e009      	b.n	801064c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801063c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	623b      	str	r3, [r7, #32]
 8010644:	e002      	b.n	801064c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010648:	f7fc fc3f 	bl	800ceca <tcp_seg_free>
    }
    seg = pcb->unsent;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	2b00      	cmp	r3, #0
 8010656:	d012      	beq.n	801067e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	4618      	mov	r0, r3
 8010660:	f7f9 fe97 	bl	800a392 <lwip_htonl>
 8010664:	4602      	mov	r2, r0
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066e:	8912      	ldrh	r2, [r2, #8]
 8010670:	4413      	add	r3, r2
  while (seg != NULL &&
 8010672:	69ba      	ldr	r2, [r7, #24]
 8010674:	429a      	cmp	r2, r3
 8010676:	f4bf aed9 	bcs.w	801042c <tcp_output+0x160>
 801067a:	e000      	b.n	801067e <tcp_output+0x3b2>
      break;
 801067c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010682:	2b00      	cmp	r3, #0
 8010684:	d108      	bne.n	8010698 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801068e:	e004      	b.n	801069a <tcp_output+0x3ce>
    goto output_done;
 8010690:	bf00      	nop
 8010692:	e002      	b.n	801069a <tcp_output+0x3ce>
    goto output_done;
 8010694:	bf00      	nop
 8010696:	e000      	b.n	801069a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010698:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	8b5b      	ldrh	r3, [r3, #26]
 801069e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3728      	adds	r7, #40	; 0x28
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bdb0      	pop	{r4, r5, r7, pc}
 80106b2:	bf00      	nop

080106b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d106      	bne.n	80106d0 <tcp_output_segment_busy+0x1c>
 80106c2:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <tcp_output_segment_busy+0x34>)
 80106c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80106c8:	4908      	ldr	r1, [pc, #32]	; (80106ec <tcp_output_segment_busy+0x38>)
 80106ca:	4809      	ldr	r0, [pc, #36]	; (80106f0 <tcp_output_segment_busy+0x3c>)
 80106cc:	f003 fc4c 	bl	8013f68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	7b9b      	ldrb	r3, [r3, #14]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d001      	beq.n	80106de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80106da:	2301      	movs	r3, #1
 80106dc:	e000      	b.n	80106e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	080167c0 	.word	0x080167c0
 80106ec:	08016d5c 	.word	0x08016d5c
 80106f0:	08016814 	.word	0x08016814

080106f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80106f4:	b5b0      	push	{r4, r5, r7, lr}
 80106f6:	b08c      	sub	sp, #48	; 0x30
 80106f8:	af04      	add	r7, sp, #16
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <tcp_output_segment+0x20>
 8010706:	4b63      	ldr	r3, [pc, #396]	; (8010894 <tcp_output_segment+0x1a0>)
 8010708:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801070c:	4962      	ldr	r1, [pc, #392]	; (8010898 <tcp_output_segment+0x1a4>)
 801070e:	4863      	ldr	r0, [pc, #396]	; (801089c <tcp_output_segment+0x1a8>)
 8010710:	f003 fc2a 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d106      	bne.n	8010728 <tcp_output_segment+0x34>
 801071a:	4b5e      	ldr	r3, [pc, #376]	; (8010894 <tcp_output_segment+0x1a0>)
 801071c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010720:	495f      	ldr	r1, [pc, #380]	; (80108a0 <tcp_output_segment+0x1ac>)
 8010722:	485e      	ldr	r0, [pc, #376]	; (801089c <tcp_output_segment+0x1a8>)
 8010724:	f003 fc20 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d106      	bne.n	801073c <tcp_output_segment+0x48>
 801072e:	4b59      	ldr	r3, [pc, #356]	; (8010894 <tcp_output_segment+0x1a0>)
 8010730:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010734:	495b      	ldr	r1, [pc, #364]	; (80108a4 <tcp_output_segment+0x1b0>)
 8010736:	4859      	ldr	r0, [pc, #356]	; (801089c <tcp_output_segment+0x1a8>)
 8010738:	f003 fc16 	bl	8013f68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f7ff ffb9 	bl	80106b4 <tcp_output_segment_busy>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	e09f      	b.n	801088c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	68dc      	ldr	r4, [r3, #12]
 8010754:	4610      	mov	r0, r2
 8010756:	f7f9 fe1c 	bl	800a392 <lwip_htonl>
 801075a:	4603      	mov	r3, r0
 801075c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	68dc      	ldr	r4, [r3, #12]
 8010766:	4610      	mov	r0, r2
 8010768:	f7f9 fdfe 	bl	800a368 <lwip_htons>
 801076c:	4603      	mov	r3, r0
 801076e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010778:	441a      	add	r2, r3
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	68db      	ldr	r3, [r3, #12]
 8010782:	3314      	adds	r3, #20
 8010784:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	7a9b      	ldrb	r3, [r3, #10]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d015      	beq.n	80107be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	3304      	adds	r3, #4
 8010796:	461a      	mov	r2, r3
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801079e:	f7fc fe8b 	bl	800d4b8 <tcp_eff_send_mss_netif>
 80107a2:	4603      	mov	r3, r0
 80107a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80107a6:	8b7b      	ldrh	r3, [r7, #26]
 80107a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7f9 fdf0 	bl	800a392 <lwip_htonl>
 80107b2:	4602      	mov	r2, r0
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	3304      	adds	r3, #4
 80107bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	da02      	bge.n	80107ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	2200      	movs	r2, #0
 80107cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10c      	bne.n	80107f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80107d6:	4b34      	ldr	r3, [pc, #208]	; (80108a8 <tcp_output_segment+0x1b4>)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7f9 fdd4 	bl	800a392 <lwip_htonl>
 80107ea:	4602      	mov	r2, r0
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	8959      	ldrh	r1, [r3, #10]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	8b3a      	ldrh	r2, [r7, #24]
 801080a:	1a8a      	subs	r2, r1, r2
 801080c:	b292      	uxth	r2, r2
 801080e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	8919      	ldrh	r1, [r3, #8]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	8b3a      	ldrh	r2, [r7, #24]
 801081c:	1a8a      	subs	r2, r1, r2
 801081e:	b292      	uxth	r2, r2
 8010820:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	68d2      	ldr	r2, [r2, #12]
 801082a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2200      	movs	r2, #0
 8010832:	741a      	strb	r2, [r3, #16]
 8010834:	2200      	movs	r2, #0
 8010836:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	f103 0214 	add.w	r2, r3, #20
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	7a9b      	ldrb	r3, [r3, #10]
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	4413      	add	r3, r2
 801084c:	69fa      	ldr	r2, [r7, #28]
 801084e:	429a      	cmp	r2, r3
 8010850:	d006      	beq.n	8010860 <tcp_output_segment+0x16c>
 8010852:	4b10      	ldr	r3, [pc, #64]	; (8010894 <tcp_output_segment+0x1a0>)
 8010854:	f240 621c 	movw	r2, #1564	; 0x61c
 8010858:	4914      	ldr	r1, [pc, #80]	; (80108ac <tcp_output_segment+0x1b8>)
 801085a:	4810      	ldr	r0, [pc, #64]	; (801089c <tcp_output_segment+0x1a8>)
 801085c:	f003 fb84 	bl	8013f68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6858      	ldr	r0, [r3, #4]
 8010864:	68b9      	ldr	r1, [r7, #8]
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	1d1c      	adds	r4, r3, #4
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	7add      	ldrb	r5, [r3, #11]
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	7a9b      	ldrb	r3, [r3, #10]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	9202      	str	r2, [sp, #8]
 8010876:	2206      	movs	r2, #6
 8010878:	9201      	str	r2, [sp, #4]
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	462b      	mov	r3, r5
 801087e:	4622      	mov	r2, r4
 8010880:	f002 f9f4 	bl	8012c6c <ip4_output_if>
 8010884:	4603      	mov	r3, r0
 8010886:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3720      	adds	r7, #32
 8010890:	46bd      	mov	sp, r7
 8010892:	bdb0      	pop	{r4, r5, r7, pc}
 8010894:	080167c0 	.word	0x080167c0
 8010898:	08016d84 	.word	0x08016d84
 801089c:	08016814 	.word	0x08016814
 80108a0:	08016da4 	.word	0x08016da4
 80108a4:	08016dc4 	.word	0x08016dc4
 80108a8:	20008c7c 	.word	0x20008c7c
 80108ac:	08016de8 	.word	0x08016de8

080108b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80108b0:	b5b0      	push	{r4, r5, r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d106      	bne.n	80108cc <tcp_rexmit_rto_prepare+0x1c>
 80108be:	4b31      	ldr	r3, [pc, #196]	; (8010984 <tcp_rexmit_rto_prepare+0xd4>)
 80108c0:	f240 6263 	movw	r2, #1635	; 0x663
 80108c4:	4930      	ldr	r1, [pc, #192]	; (8010988 <tcp_rexmit_rto_prepare+0xd8>)
 80108c6:	4831      	ldr	r0, [pc, #196]	; (801098c <tcp_rexmit_rto_prepare+0xdc>)
 80108c8:	f003 fb4e 	bl	8013f68 <iprintf>

  if (pcb->unacked == NULL) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d102      	bne.n	80108da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80108d4:	f06f 0305 	mvn.w	r3, #5
 80108d8:	e050      	b.n	801097c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108de:	60fb      	str	r3, [r7, #12]
 80108e0:	e00b      	b.n	80108fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80108e2:	68f8      	ldr	r0, [r7, #12]
 80108e4:	f7ff fee6 	bl	80106b4 <tcp_output_segment_busy>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d002      	beq.n	80108f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80108ee:	f06f 0305 	mvn.w	r3, #5
 80108f2:	e043      	b.n	801097c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	60fb      	str	r3, [r7, #12]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1ef      	bne.n	80108e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f7ff fed6 	bl	80106b4 <tcp_output_segment_busy>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801090e:	f06f 0305 	mvn.w	r3, #5
 8010912:	e033      	b.n	801097c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	8b5b      	ldrh	r3, [r3, #26]
 801092e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010932:	b29a      	uxth	r2, r3
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	4618      	mov	r0, r3
 8010940:	f7f9 fd27 	bl	800a392 <lwip_htonl>
 8010944:	4604      	mov	r4, r0
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	891b      	ldrh	r3, [r3, #8]
 801094a:	461d      	mov	r5, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	899b      	ldrh	r3, [r3, #12]
 8010952:	b29b      	uxth	r3, r3
 8010954:	4618      	mov	r0, r3
 8010956:	f7f9 fd07 	bl	800a368 <lwip_htons>
 801095a:	4603      	mov	r3, r0
 801095c:	b2db      	uxtb	r3, r3
 801095e:	f003 0303 	and.w	r3, r3, #3
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <tcp_rexmit_rto_prepare+0xba>
 8010966:	2301      	movs	r3, #1
 8010968:	e000      	b.n	801096c <tcp_rexmit_rto_prepare+0xbc>
 801096a:	2300      	movs	r3, #0
 801096c:	442b      	add	r3, r5
 801096e:	18e2      	adds	r2, r4, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801097a:	2300      	movs	r3, #0
}
 801097c:	4618      	mov	r0, r3
 801097e:	3710      	adds	r7, #16
 8010980:	46bd      	mov	sp, r7
 8010982:	bdb0      	pop	{r4, r5, r7, pc}
 8010984:	080167c0 	.word	0x080167c0
 8010988:	08016dfc 	.word	0x08016dfc
 801098c:	08016814 	.word	0x08016814

08010990 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d106      	bne.n	80109ac <tcp_rexmit_rto_commit+0x1c>
 801099e:	4b0d      	ldr	r3, [pc, #52]	; (80109d4 <tcp_rexmit_rto_commit+0x44>)
 80109a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80109a4:	490c      	ldr	r1, [pc, #48]	; (80109d8 <tcp_rexmit_rto_commit+0x48>)
 80109a6:	480d      	ldr	r0, [pc, #52]	; (80109dc <tcp_rexmit_rto_commit+0x4c>)
 80109a8:	f003 fade 	bl	8013f68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109b2:	2bff      	cmp	r3, #255	; 0xff
 80109b4:	d007      	beq.n	80109c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109bc:	3301      	adds	r3, #1
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff fc80 	bl	80102cc <tcp_output>
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	080167c0 	.word	0x080167c0
 80109d8:	08016e20 	.word	0x08016e20
 80109dc:	08016814 	.word	0x08016814

080109e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d106      	bne.n	80109fc <tcp_rexmit_rto+0x1c>
 80109ee:	4b0a      	ldr	r3, [pc, #40]	; (8010a18 <tcp_rexmit_rto+0x38>)
 80109f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80109f4:	4909      	ldr	r1, [pc, #36]	; (8010a1c <tcp_rexmit_rto+0x3c>)
 80109f6:	480a      	ldr	r0, [pc, #40]	; (8010a20 <tcp_rexmit_rto+0x40>)
 80109f8:	f003 fab6 	bl	8013f68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7ff ff57 	bl	80108b0 <tcp_rexmit_rto_prepare>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ffc1 	bl	8010990 <tcp_rexmit_rto_commit>
  }
}
 8010a0e:	bf00      	nop
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	080167c0 	.word	0x080167c0
 8010a1c:	08016e44 	.word	0x08016e44
 8010a20:	08016814 	.word	0x08016814

08010a24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a24:	b590      	push	{r4, r7, lr}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d106      	bne.n	8010a40 <tcp_rexmit+0x1c>
 8010a32:	4b2f      	ldr	r3, [pc, #188]	; (8010af0 <tcp_rexmit+0xcc>)
 8010a34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010a38:	492e      	ldr	r1, [pc, #184]	; (8010af4 <tcp_rexmit+0xd0>)
 8010a3a:	482f      	ldr	r0, [pc, #188]	; (8010af8 <tcp_rexmit+0xd4>)
 8010a3c:	f003 fa94 	bl	8013f68 <iprintf>

  if (pcb->unacked == NULL) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d102      	bne.n	8010a4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010a48:	f06f 0305 	mvn.w	r3, #5
 8010a4c:	e04c      	b.n	8010ae8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010a54:	68b8      	ldr	r0, [r7, #8]
 8010a56:	f7ff fe2d 	bl	80106b4 <tcp_output_segment_busy>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010a60:	f06f 0305 	mvn.w	r3, #5
 8010a64:	e040      	b.n	8010ae8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	336c      	adds	r3, #108	; 0x6c
 8010a72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a74:	e002      	b.n	8010a7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d011      	beq.n	8010aa8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7f9 fc80 	bl	800a392 <lwip_htonl>
 8010a92:	4604      	mov	r4, r0
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f9 fc79 	bl	800a392 <lwip_htonl>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	dbe6      	blt.n	8010a76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d103      	bne.n	8010ac6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010acc:	2bff      	cmp	r3, #255	; 0xff
 8010ace:	d007      	beq.n	8010ae0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd90      	pop	{r4, r7, pc}
 8010af0:	080167c0 	.word	0x080167c0
 8010af4:	08016e60 	.word	0x08016e60
 8010af8:	08016814 	.word	0x08016814

08010afc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d106      	bne.n	8010b18 <tcp_rexmit_fast+0x1c>
 8010b0a:	4b2a      	ldr	r3, [pc, #168]	; (8010bb4 <tcp_rexmit_fast+0xb8>)
 8010b0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b10:	4929      	ldr	r1, [pc, #164]	; (8010bb8 <tcp_rexmit_fast+0xbc>)
 8010b12:	482a      	ldr	r0, [pc, #168]	; (8010bbc <tcp_rexmit_fast+0xc0>)
 8010b14:	f003 fa28 	bl	8013f68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d045      	beq.n	8010bac <tcp_rexmit_fast+0xb0>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	8b5b      	ldrh	r3, [r3, #26]
 8010b24:	f003 0304 	and.w	r3, r3, #4
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d13f      	bne.n	8010bac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff ff79 	bl	8010a24 <tcp_rexmit>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d139      	bne.n	8010bac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b44:	4293      	cmp	r3, r2
 8010b46:	bf28      	it	cs
 8010b48:	4613      	movcs	r3, r2
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	da00      	bge.n	8010b52 <tcp_rexmit_fast+0x56>
 8010b50:	3301      	adds	r3, #1
 8010b52:	105b      	asrs	r3, r3, #1
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b62:	461a      	mov	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b68:	005b      	lsls	r3, r3, #1
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d206      	bcs.n	8010b7c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b86:	4619      	mov	r1, r3
 8010b88:	0049      	lsls	r1, r1, #1
 8010b8a:	440b      	add	r3, r1
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	4413      	add	r3, r2
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	8b5b      	ldrh	r3, [r3, #26]
 8010b9c:	f043 0304 	orr.w	r3, r3, #4
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010bac:	bf00      	nop
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	080167c0 	.word	0x080167c0
 8010bb8:	08016e78 	.word	0x08016e78
 8010bbc:	08016814 	.word	0x08016814

08010bc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	607b      	str	r3, [r7, #4]
 8010bca:	460b      	mov	r3, r1
 8010bcc:	817b      	strh	r3, [r7, #10]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010bd2:	897a      	ldrh	r2, [r7, #10]
 8010bd4:	893b      	ldrh	r3, [r7, #8]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	3314      	adds	r3, #20
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010be2:	4619      	mov	r1, r3
 8010be4:	2022      	movs	r0, #34	; 0x22
 8010be6:	f7fa fc19 	bl	800b41c <pbuf_alloc>
 8010bea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d04d      	beq.n	8010c8e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010bf2:	897b      	ldrh	r3, [r7, #10]
 8010bf4:	3313      	adds	r3, #19
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	8952      	ldrh	r2, [r2, #10]
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	db06      	blt.n	8010c0c <tcp_output_alloc_header_common+0x4c>
 8010bfe:	4b26      	ldr	r3, [pc, #152]	; (8010c98 <tcp_output_alloc_header_common+0xd8>)
 8010c00:	f240 7223 	movw	r2, #1827	; 0x723
 8010c04:	4925      	ldr	r1, [pc, #148]	; (8010c9c <tcp_output_alloc_header_common+0xdc>)
 8010c06:	4826      	ldr	r0, [pc, #152]	; (8010ca0 <tcp_output_alloc_header_common+0xe0>)
 8010c08:	f003 f9ae 	bl	8013f68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c12:	8c3b      	ldrh	r3, [r7, #32]
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f9 fba7 	bl	800a368 <lwip_htons>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7f9 fb9f 	bl	800a368 <lwip_htons>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	f7f9 fbaa 	bl	800a392 <lwip_htonl>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010c44:	897b      	ldrh	r3, [r7, #10]
 8010c46:	089b      	lsrs	r3, r3, #2
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	3305      	adds	r3, #5
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	031b      	lsls	r3, r3, #12
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7f9 fb83 	bl	800a368 <lwip_htons>
 8010c62:	4603      	mov	r3, r0
 8010c64:	461a      	mov	r2, r3
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010c6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f9 fb7b 	bl	800a368 <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	461a      	mov	r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	741a      	strb	r2, [r3, #16]
 8010c80:	2200      	movs	r2, #0
 8010c82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	2200      	movs	r2, #0
 8010c88:	749a      	strb	r2, [r3, #18]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010c8e:	697b      	ldr	r3, [r7, #20]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3718      	adds	r7, #24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	080167c0 	.word	0x080167c0
 8010c9c:	08016e98 	.word	0x08016e98
 8010ca0:	08016814 	.word	0x08016814

08010ca4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010ca4:	b5b0      	push	{r4, r5, r7, lr}
 8010ca6:	b08a      	sub	sp, #40	; 0x28
 8010ca8:	af04      	add	r7, sp, #16
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	607b      	str	r3, [r7, #4]
 8010cae:	460b      	mov	r3, r1
 8010cb0:	817b      	strh	r3, [r7, #10]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <tcp_output_alloc_header+0x26>
 8010cbc:	4b15      	ldr	r3, [pc, #84]	; (8010d14 <tcp_output_alloc_header+0x70>)
 8010cbe:	f240 7242 	movw	r2, #1858	; 0x742
 8010cc2:	4915      	ldr	r1, [pc, #84]	; (8010d18 <tcp_output_alloc_header+0x74>)
 8010cc4:	4815      	ldr	r0, [pc, #84]	; (8010d1c <tcp_output_alloc_header+0x78>)
 8010cc6:	f003 f94f 	bl	8013f68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	8adb      	ldrh	r3, [r3, #22]
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	8b12      	ldrh	r2, [r2, #24]
 8010cd6:	68f9      	ldr	r1, [r7, #12]
 8010cd8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010cda:	893d      	ldrh	r5, [r7, #8]
 8010cdc:	897c      	ldrh	r4, [r7, #10]
 8010cde:	9103      	str	r1, [sp, #12]
 8010ce0:	2110      	movs	r1, #16
 8010ce2:	9102      	str	r1, [sp, #8]
 8010ce4:	9201      	str	r2, [sp, #4]
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	462a      	mov	r2, r5
 8010cec:	4621      	mov	r1, r4
 8010cee:	f7ff ff67 	bl	8010bc0 <tcp_output_alloc_header_common>
 8010cf2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d006      	beq.n	8010d08 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010d02:	441a      	add	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010d08:	697b      	ldr	r3, [r7, #20]
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3718      	adds	r7, #24
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bdb0      	pop	{r4, r5, r7, pc}
 8010d12:	bf00      	nop
 8010d14:	080167c0 	.word	0x080167c0
 8010d18:	08016ec8 	.word	0x08016ec8
 8010d1c:	08016814 	.word	0x08016814

08010d20 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b088      	sub	sp, #32
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	4611      	mov	r1, r2
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	460b      	mov	r3, r1
 8010d30:	71fb      	strb	r3, [r7, #7]
 8010d32:	4613      	mov	r3, r2
 8010d34:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d36:	2300      	movs	r3, #0
 8010d38:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d106      	bne.n	8010d4e <tcp_output_fill_options+0x2e>
 8010d40:	4b13      	ldr	r3, [pc, #76]	; (8010d90 <tcp_output_fill_options+0x70>)
 8010d42:	f240 7256 	movw	r2, #1878	; 0x756
 8010d46:	4913      	ldr	r1, [pc, #76]	; (8010d94 <tcp_output_fill_options+0x74>)
 8010d48:	4813      	ldr	r0, [pc, #76]	; (8010d98 <tcp_output_fill_options+0x78>)
 8010d4a:	f003 f90d 	bl	8013f68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	3314      	adds	r3, #20
 8010d58:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	f103 0214 	add.w	r2, r3, #20
 8010d60:	8bfb      	ldrh	r3, [r7, #30]
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	4619      	mov	r1, r3
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	f003 0304 	and.w	r3, r3, #4
 8010d6e:	440b      	add	r3, r1
 8010d70:	4413      	add	r3, r2
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d006      	beq.n	8010d86 <tcp_output_fill_options+0x66>
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <tcp_output_fill_options+0x70>)
 8010d7a:	f240 7275 	movw	r2, #1909	; 0x775
 8010d7e:	4907      	ldr	r1, [pc, #28]	; (8010d9c <tcp_output_fill_options+0x7c>)
 8010d80:	4805      	ldr	r0, [pc, #20]	; (8010d98 <tcp_output_fill_options+0x78>)
 8010d82:	f003 f8f1 	bl	8013f68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010d86:	bf00      	nop
 8010d88:	3720      	adds	r7, #32
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	080167c0 	.word	0x080167c0
 8010d94:	08016ef0 	.word	0x08016ef0
 8010d98:	08016814 	.word	0x08016814
 8010d9c:	08016de8 	.word	0x08016de8

08010da0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08a      	sub	sp, #40	; 0x28
 8010da4:	af04      	add	r7, sp, #16
 8010da6:	60f8      	str	r0, [r7, #12]
 8010da8:	60b9      	str	r1, [r7, #8]
 8010daa:	607a      	str	r2, [r7, #4]
 8010dac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d106      	bne.n	8010dc2 <tcp_output_control_segment+0x22>
 8010db4:	4b1c      	ldr	r3, [pc, #112]	; (8010e28 <tcp_output_control_segment+0x88>)
 8010db6:	f240 7287 	movw	r2, #1927	; 0x787
 8010dba:	491c      	ldr	r1, [pc, #112]	; (8010e2c <tcp_output_control_segment+0x8c>)
 8010dbc:	481c      	ldr	r0, [pc, #112]	; (8010e30 <tcp_output_control_segment+0x90>)
 8010dbe:	f003 f8d3 	bl	8013f68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010dc2:	683a      	ldr	r2, [r7, #0]
 8010dc4:	6879      	ldr	r1, [r7, #4]
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f7fe ff40 	bl	800fc4c <tcp_route>
 8010dcc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010dd4:	23fc      	movs	r3, #252	; 0xfc
 8010dd6:	75fb      	strb	r3, [r7, #23]
 8010dd8:	e01c      	b.n	8010e14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d006      	beq.n	8010dee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	7adb      	ldrb	r3, [r3, #11]
 8010de4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	7a9b      	ldrb	r3, [r3, #10]
 8010dea:	757b      	strb	r3, [r7, #21]
 8010dec:	e003      	b.n	8010df6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010dee:	23ff      	movs	r3, #255	; 0xff
 8010df0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010df6:	7dba      	ldrb	r2, [r7, #22]
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	9302      	str	r3, [sp, #8]
 8010dfc:	2306      	movs	r3, #6
 8010dfe:	9301      	str	r3, [sp, #4]
 8010e00:	7d7b      	ldrb	r3, [r7, #21]
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	4613      	mov	r3, r2
 8010e06:	683a      	ldr	r2, [r7, #0]
 8010e08:	6879      	ldr	r1, [r7, #4]
 8010e0a:	68b8      	ldr	r0, [r7, #8]
 8010e0c:	f001 ff2e 	bl	8012c6c <ip4_output_if>
 8010e10:	4603      	mov	r3, r0
 8010e12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e14:	68b8      	ldr	r0, [r7, #8]
 8010e16:	f7fa fde5 	bl	800b9e4 <pbuf_free>
  return err;
 8010e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3718      	adds	r7, #24
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	080167c0 	.word	0x080167c0
 8010e2c:	08016f18 	.word	0x08016f18
 8010e30:	08016814 	.word	0x08016814

08010e34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e34:	b590      	push	{r4, r7, lr}
 8010e36:	b08b      	sub	sp, #44	; 0x2c
 8010e38:	af04      	add	r7, sp, #16
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	607a      	str	r2, [r7, #4]
 8010e40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d106      	bne.n	8010e56 <tcp_rst+0x22>
 8010e48:	4b1f      	ldr	r3, [pc, #124]	; (8010ec8 <tcp_rst+0x94>)
 8010e4a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010e4e:	491f      	ldr	r1, [pc, #124]	; (8010ecc <tcp_rst+0x98>)
 8010e50:	481f      	ldr	r0, [pc, #124]	; (8010ed0 <tcp_rst+0x9c>)
 8010e52:	f003 f889 	bl	8013f68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d106      	bne.n	8010e6a <tcp_rst+0x36>
 8010e5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ec8 <tcp_rst+0x94>)
 8010e5e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010e62:	491c      	ldr	r1, [pc, #112]	; (8010ed4 <tcp_rst+0xa0>)
 8010e64:	481a      	ldr	r0, [pc, #104]	; (8010ed0 <tcp_rst+0x9c>)
 8010e66:	f003 f87f 	bl	8013f68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010e6e:	f246 0308 	movw	r3, #24584	; 0x6008
 8010e72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010e74:	7dfb      	ldrb	r3, [r7, #23]
 8010e76:	b29c      	uxth	r4, r3
 8010e78:	68b8      	ldr	r0, [r7, #8]
 8010e7a:	f7f9 fa8a 	bl	800a392 <lwip_htonl>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	8abb      	ldrh	r3, [r7, #20]
 8010e82:	9303      	str	r3, [sp, #12]
 8010e84:	2314      	movs	r3, #20
 8010e86:	9302      	str	r3, [sp, #8]
 8010e88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010e8a:	9301      	str	r3, [sp, #4]
 8010e8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e8e:	9300      	str	r3, [sp, #0]
 8010e90:	4613      	mov	r3, r2
 8010e92:	2200      	movs	r2, #0
 8010e94:	4621      	mov	r1, r4
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7ff fe92 	bl	8010bc0 <tcp_output_alloc_header_common>
 8010e9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00c      	beq.n	8010ebe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	6939      	ldr	r1, [r7, #16]
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f7ff ff38 	bl	8010d20 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	6939      	ldr	r1, [r7, #16]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f7ff ff72 	bl	8010da0 <tcp_output_control_segment>
 8010ebc:	e000      	b.n	8010ec0 <tcp_rst+0x8c>
    return;
 8010ebe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010ec0:	371c      	adds	r7, #28
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd90      	pop	{r4, r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	080167c0 	.word	0x080167c0
 8010ecc:	08016f44 	.word	0x08016f44
 8010ed0:	08016814 	.word	0x08016814
 8010ed4:	08016f60 	.word	0x08016f60

08010ed8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010ed8:	b590      	push	{r4, r7, lr}
 8010eda:	b087      	sub	sp, #28
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <tcp_send_empty_ack+0x24>
 8010eee:	4b28      	ldr	r3, [pc, #160]	; (8010f90 <tcp_send_empty_ack+0xb8>)
 8010ef0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010ef4:	4927      	ldr	r1, [pc, #156]	; (8010f94 <tcp_send_empty_ack+0xbc>)
 8010ef6:	4828      	ldr	r0, [pc, #160]	; (8010f98 <tcp_send_empty_ack+0xc0>)
 8010ef8:	f003 f836 	bl	8013f68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	f003 0304 	and.w	r3, r3, #4
 8010f06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f08:	7d7b      	ldrb	r3, [r7, #21]
 8010f0a:	b29c      	uxth	r4, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7f9 fa3e 	bl	800a392 <lwip_htonl>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2200      	movs	r2, #0
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ff fec1 	bl	8010ca4 <tcp_output_alloc_header>
 8010f22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d109      	bne.n	8010f3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	8b5b      	ldrh	r3, [r3, #26]
 8010f2e:	f043 0303 	orr.w	r3, r3, #3
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f38:	f06f 0301 	mvn.w	r3, #1
 8010f3c:	e023      	b.n	8010f86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f3e:	7dbb      	ldrb	r3, [r7, #22]
 8010f40:	7dfa      	ldrb	r2, [r7, #23]
 8010f42:	6939      	ldr	r1, [r7, #16]
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7ff feeb 	bl	8010d20 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	3304      	adds	r3, #4
 8010f50:	6939      	ldr	r1, [r7, #16]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7ff ff24 	bl	8010da0 <tcp_output_control_segment>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d007      	beq.n	8010f74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8b5b      	ldrh	r3, [r3, #26]
 8010f68:	f043 0303 	orr.w	r3, r3, #3
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	835a      	strh	r2, [r3, #26]
 8010f72:	e006      	b.n	8010f82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	8b5b      	ldrh	r3, [r3, #26]
 8010f78:	f023 0303 	bic.w	r3, r3, #3
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	371c      	adds	r7, #28
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd90      	pop	{r4, r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	080167c0 	.word	0x080167c0
 8010f94:	08016f7c 	.word	0x08016f7c
 8010f98:	08016814 	.word	0x08016814

08010f9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010f9c:	b590      	push	{r4, r7, lr}
 8010f9e:	b087      	sub	sp, #28
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d106      	bne.n	8010fbc <tcp_keepalive+0x20>
 8010fae:	4b18      	ldr	r3, [pc, #96]	; (8011010 <tcp_keepalive+0x74>)
 8010fb0:	f640 0224 	movw	r2, #2084	; 0x824
 8010fb4:	4917      	ldr	r1, [pc, #92]	; (8011014 <tcp_keepalive+0x78>)
 8010fb6:	4818      	ldr	r0, [pc, #96]	; (8011018 <tcp_keepalive+0x7c>)
 8010fb8:	f002 ffd6 	bl	8013f68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010fbc:	7dfb      	ldrb	r3, [r7, #23]
 8010fbe:	b29c      	uxth	r4, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7f9 f9e3 	bl	800a392 <lwip_htonl>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2200      	movs	r2, #0
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff fe66 	bl	8010ca4 <tcp_output_alloc_header>
 8010fd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d102      	bne.n	8010fe6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe4:	e010      	b.n	8011008 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010fe6:	7dfb      	ldrb	r3, [r7, #23]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	6939      	ldr	r1, [r7, #16]
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff fe97 	bl	8010d20 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	6939      	ldr	r1, [r7, #16]
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7ff fed0 	bl	8010da0 <tcp_output_control_segment>
 8011000:	4603      	mov	r3, r0
 8011002:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011008:	4618      	mov	r0, r3
 801100a:	371c      	adds	r7, #28
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	080167c0 	.word	0x080167c0
 8011014:	08016f9c 	.word	0x08016f9c
 8011018:	08016814 	.word	0x08016814

0801101c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801101c:	b590      	push	{r4, r7, lr}
 801101e:	b08b      	sub	sp, #44	; 0x2c
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011024:	2300      	movs	r3, #0
 8011026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d106      	bne.n	801103e <tcp_zero_window_probe+0x22>
 8011030:	4b4c      	ldr	r3, [pc, #304]	; (8011164 <tcp_zero_window_probe+0x148>)
 8011032:	f640 024f 	movw	r2, #2127	; 0x84f
 8011036:	494c      	ldr	r1, [pc, #304]	; (8011168 <tcp_zero_window_probe+0x14c>)
 8011038:	484c      	ldr	r0, [pc, #304]	; (801116c <tcp_zero_window_probe+0x150>)
 801103a:	f002 ff95 	bl	8013f68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011042:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d101      	bne.n	801104e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	e086      	b.n	801115c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011054:	2bff      	cmp	r3, #255	; 0xff
 8011056:	d007      	beq.n	8011068 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801105e:	3301      	adds	r3, #1
 8011060:	b2da      	uxtb	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	899b      	ldrh	r3, [r3, #12]
 801106e:	b29b      	uxth	r3, r3
 8011070:	4618      	mov	r0, r3
 8011072:	f7f9 f979 	bl	800a368 <lwip_htons>
 8011076:	4603      	mov	r3, r0
 8011078:	b2db      	uxtb	r3, r3
 801107a:	f003 0301 	and.w	r3, r3, #1
 801107e:	2b00      	cmp	r3, #0
 8011080:	d005      	beq.n	801108e <tcp_zero_window_probe+0x72>
 8011082:	6a3b      	ldr	r3, [r7, #32]
 8011084:	891b      	ldrh	r3, [r3, #8]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d101      	bne.n	801108e <tcp_zero_window_probe+0x72>
 801108a:	2301      	movs	r3, #1
 801108c:	e000      	b.n	8011090 <tcp_zero_window_probe+0x74>
 801108e:	2300      	movs	r3, #0
 8011090:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011092:	7ffb      	ldrb	r3, [r7, #31]
 8011094:	2b00      	cmp	r3, #0
 8011096:	bf0c      	ite	eq
 8011098:	2301      	moveq	r3, #1
 801109a:	2300      	movne	r3, #0
 801109c:	b2db      	uxtb	r3, r3
 801109e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80110a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110a4:	b299      	uxth	r1, r3
 80110a6:	6a3b      	ldr	r3, [r7, #32]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	8bba      	ldrh	r2, [r7, #28]
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7ff fdf8 	bl	8010ca4 <tcp_output_alloc_header>
 80110b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80110bc:	f04f 33ff 	mov.w	r3, #4294967295
 80110c0:	e04c      	b.n	801115c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80110c8:	7ffb      	ldrb	r3, [r7, #31]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d011      	beq.n	80110f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	b21b      	sxth	r3, r3
 80110d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110da:	b21c      	sxth	r4, r3
 80110dc:	2011      	movs	r0, #17
 80110de:	f7f9 f943 	bl	800a368 <lwip_htons>
 80110e2:	4603      	mov	r3, r0
 80110e4:	b21b      	sxth	r3, r3
 80110e6:	4323      	orrs	r3, r4
 80110e8:	b21b      	sxth	r3, r3
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	819a      	strh	r2, [r3, #12]
 80110f0:	e010      	b.n	8011114 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	3314      	adds	r3, #20
 80110f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80110fa:	6a3b      	ldr	r3, [r7, #32]
 80110fc:	6858      	ldr	r0, [r3, #4]
 80110fe:	6a3b      	ldr	r3, [r7, #32]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	891a      	ldrh	r2, [r3, #8]
 8011104:	6a3b      	ldr	r3, [r7, #32]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	b29b      	uxth	r3, r3
 801110c:	2201      	movs	r2, #1
 801110e:	6939      	ldr	r1, [r7, #16]
 8011110:	f7fa fe52 	bl	800bdb8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	4618      	mov	r0, r3
 801111c:	f7f9 f939 	bl	800a392 <lwip_htonl>
 8011120:	4603      	mov	r3, r0
 8011122:	3301      	adds	r3, #1
 8011124:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	2b00      	cmp	r3, #0
 8011130:	da02      	bge.n	8011138 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801113c:	2200      	movs	r2, #0
 801113e:	69b9      	ldr	r1, [r7, #24]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff fded 	bl	8010d20 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3304      	adds	r3, #4
 801114c:	69b9      	ldr	r1, [r7, #24]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff fe26 	bl	8010da0 <tcp_output_control_segment>
 8011154:	4603      	mov	r3, r0
 8011156:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011158:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801115c:	4618      	mov	r0, r3
 801115e:	372c      	adds	r7, #44	; 0x2c
 8011160:	46bd      	mov	sp, r7
 8011162:	bd90      	pop	{r4, r7, pc}
 8011164:	080167c0 	.word	0x080167c0
 8011168:	08016fb8 	.word	0x08016fb8
 801116c:	08016814 	.word	0x08016814

08011170 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011178:	f7fa ff0c 	bl	800bf94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801117c:	4b0a      	ldr	r3, [pc, #40]	; (80111a8 <tcpip_tcp_timer+0x38>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d103      	bne.n	801118c <tcpip_tcp_timer+0x1c>
 8011184:	4b09      	ldr	r3, [pc, #36]	; (80111ac <tcpip_tcp_timer+0x3c>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d005      	beq.n	8011198 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801118c:	2200      	movs	r2, #0
 801118e:	4908      	ldr	r1, [pc, #32]	; (80111b0 <tcpip_tcp_timer+0x40>)
 8011190:	20fa      	movs	r0, #250	; 0xfa
 8011192:	f000 f8f3 	bl	801137c <sys_timeout>
 8011196:	e003      	b.n	80111a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011198:	4b06      	ldr	r3, [pc, #24]	; (80111b4 <tcpip_tcp_timer+0x44>)
 801119a:	2200      	movs	r2, #0
 801119c:	601a      	str	r2, [r3, #0]
  }
}
 801119e:	bf00      	nop
 80111a0:	bf00      	nop
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	20008c88 	.word	0x20008c88
 80111ac:	20008c8c 	.word	0x20008c8c
 80111b0:	08011171 	.word	0x08011171
 80111b4:	20008cd4 	.word	0x20008cd4

080111b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80111bc:	4b0a      	ldr	r3, [pc, #40]	; (80111e8 <tcp_timer_needed+0x30>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10f      	bne.n	80111e4 <tcp_timer_needed+0x2c>
 80111c4:	4b09      	ldr	r3, [pc, #36]	; (80111ec <tcp_timer_needed+0x34>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d103      	bne.n	80111d4 <tcp_timer_needed+0x1c>
 80111cc:	4b08      	ldr	r3, [pc, #32]	; (80111f0 <tcp_timer_needed+0x38>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d007      	beq.n	80111e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80111d4:	4b04      	ldr	r3, [pc, #16]	; (80111e8 <tcp_timer_needed+0x30>)
 80111d6:	2201      	movs	r2, #1
 80111d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111da:	2200      	movs	r2, #0
 80111dc:	4905      	ldr	r1, [pc, #20]	; (80111f4 <tcp_timer_needed+0x3c>)
 80111de:	20fa      	movs	r0, #250	; 0xfa
 80111e0:	f000 f8cc 	bl	801137c <sys_timeout>
  }
}
 80111e4:	bf00      	nop
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20008cd4 	.word	0x20008cd4
 80111ec:	20008c88 	.word	0x20008c88
 80111f0:	20008c8c 	.word	0x20008c8c
 80111f4:	08011171 	.word	0x08011171

080111f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011204:	2006      	movs	r0, #6
 8011206:	f7f9 fd27 	bl	800ac58 <memp_malloc>
 801120a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d109      	bne.n	8011226 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d151      	bne.n	80112bc <sys_timeout_abs+0xc4>
 8011218:	4b2a      	ldr	r3, [pc, #168]	; (80112c4 <sys_timeout_abs+0xcc>)
 801121a:	22be      	movs	r2, #190	; 0xbe
 801121c:	492a      	ldr	r1, [pc, #168]	; (80112c8 <sys_timeout_abs+0xd0>)
 801121e:	482b      	ldr	r0, [pc, #172]	; (80112cc <sys_timeout_abs+0xd4>)
 8011220:	f002 fea2 	bl	8013f68 <iprintf>
    return;
 8011224:	e04a      	b.n	80112bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	2200      	movs	r2, #0
 801122a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	68ba      	ldr	r2, [r7, #8]
 8011230:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	68fa      	ldr	r2, [r7, #12]
 801123c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801123e:	4b24      	ldr	r3, [pc, #144]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d103      	bne.n	801124e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011246:	4a22      	ldr	r2, [pc, #136]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	6013      	str	r3, [r2, #0]
    return;
 801124c:	e037      	b.n	80112be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	685a      	ldr	r2, [r3, #4]
 8011252:	4b1f      	ldr	r3, [pc, #124]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	0fdb      	lsrs	r3, r3, #31
 801125c:	f003 0301 	and.w	r3, r3, #1
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d007      	beq.n	8011276 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011266:	4b1a      	ldr	r3, [pc, #104]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801126e:	4a18      	ldr	r2, [pc, #96]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	6013      	str	r3, [r2, #0]
 8011274:	e023      	b.n	80112be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011276:	4b16      	ldr	r3, [pc, #88]	; (80112d0 <sys_timeout_abs+0xd8>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	617b      	str	r3, [r7, #20]
 801127c:	e01a      	b.n	80112b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00b      	beq.n	801129e <sys_timeout_abs+0xa6>
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	685a      	ldr	r2, [r3, #4]
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	0fdb      	lsrs	r3, r3, #31
 8011294:	f003 0301 	and.w	r3, r3, #1
 8011298:	b2db      	uxtb	r3, r3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d007      	beq.n	80112ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	601a      	str	r2, [r3, #0]
        break;
 80112ac:	e007      	b.n	80112be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	617b      	str	r3, [r7, #20]
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1e1      	bne.n	801127e <sys_timeout_abs+0x86>
 80112ba:	e000      	b.n	80112be <sys_timeout_abs+0xc6>
    return;
 80112bc:	bf00      	nop
      }
    }
  }
}
 80112be:	3718      	adds	r7, #24
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	08016fdc 	.word	0x08016fdc
 80112c8:	08017010 	.word	0x08017010
 80112cc:	08017050 	.word	0x08017050
 80112d0:	20008ccc 	.word	0x20008ccc

080112d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	4798      	blx	r3

  now = sys_now();
 80112e6:	f7f8 fe65 	bl	8009fb4 <sys_now>
 80112ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	4b0f      	ldr	r3, [pc, #60]	; (8011330 <lwip_cyclic_timer+0x5c>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4413      	add	r3, r2
 80112f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80112f8:	68fa      	ldr	r2, [r7, #12]
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	0fdb      	lsrs	r3, r3, #31
 8011300:	f003 0301 	and.w	r3, r3, #1
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d009      	beq.n	801131e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	4413      	add	r3, r2
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	4907      	ldr	r1, [pc, #28]	; (8011334 <lwip_cyclic_timer+0x60>)
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff ff6e 	bl	80111f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801131c:	e004      	b.n	8011328 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	4904      	ldr	r1, [pc, #16]	; (8011334 <lwip_cyclic_timer+0x60>)
 8011322:	68f8      	ldr	r0, [r7, #12]
 8011324:	f7ff ff68 	bl	80111f8 <sys_timeout_abs>
}
 8011328:	bf00      	nop
 801132a:	3718      	adds	r7, #24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	20008cd0 	.word	0x20008cd0
 8011334:	080112d5 	.word	0x080112d5

08011338 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801133e:	2301      	movs	r3, #1
 8011340:	607b      	str	r3, [r7, #4]
 8011342:	e00e      	b.n	8011362 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011344:	4a0b      	ldr	r2, [pc, #44]	; (8011374 <sys_timeouts_init+0x3c>)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	00db      	lsls	r3, r3, #3
 8011350:	4a08      	ldr	r2, [pc, #32]	; (8011374 <sys_timeouts_init+0x3c>)
 8011352:	4413      	add	r3, r2
 8011354:	461a      	mov	r2, r3
 8011356:	4908      	ldr	r1, [pc, #32]	; (8011378 <sys_timeouts_init+0x40>)
 8011358:	f000 f810 	bl	801137c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3301      	adds	r3, #1
 8011360:	607b      	str	r3, [r7, #4]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2b02      	cmp	r3, #2
 8011366:	d9ed      	bls.n	8011344 <sys_timeouts_init+0xc>
  }
}
 8011368:	bf00      	nop
 801136a:	bf00      	nop
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	08017bf0 	.word	0x08017bf0
 8011378:	080112d5 	.word	0x080112d5

0801137c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801138e:	d306      	bcc.n	801139e <sys_timeout+0x22>
 8011390:	4b0a      	ldr	r3, [pc, #40]	; (80113bc <sys_timeout+0x40>)
 8011392:	f240 1229 	movw	r2, #297	; 0x129
 8011396:	490a      	ldr	r1, [pc, #40]	; (80113c0 <sys_timeout+0x44>)
 8011398:	480a      	ldr	r0, [pc, #40]	; (80113c4 <sys_timeout+0x48>)
 801139a:	f002 fde5 	bl	8013f68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801139e:	f7f8 fe09 	bl	8009fb4 <sys_now>
 80113a2:	4602      	mov	r2, r0
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	4413      	add	r3, r2
 80113a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	68b9      	ldr	r1, [r7, #8]
 80113ae:	6978      	ldr	r0, [r7, #20]
 80113b0:	f7ff ff22 	bl	80111f8 <sys_timeout_abs>
#endif
}
 80113b4:	bf00      	nop
 80113b6:	3718      	adds	r7, #24
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	08016fdc 	.word	0x08016fdc
 80113c0:	08017078 	.word	0x08017078
 80113c4:	08017050 	.word	0x08017050

080113c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80113cc:	f002 fe5a 	bl	8014084 <rand>
 80113d0:	4603      	mov	r3, r0
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80113d8:	b29b      	uxth	r3, r3
 80113da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80113de:	b29a      	uxth	r2, r3
 80113e0:	4b01      	ldr	r3, [pc, #4]	; (80113e8 <udp_init+0x20>)
 80113e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80113e4:	bf00      	nop
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	20000028 	.word	0x20000028

080113ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	4613      	mov	r3, r2
 80113f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d105      	bne.n	801140c <udp_input_local_match+0x20>
 8011400:	4b27      	ldr	r3, [pc, #156]	; (80114a0 <udp_input_local_match+0xb4>)
 8011402:	2287      	movs	r2, #135	; 0x87
 8011404:	4927      	ldr	r1, [pc, #156]	; (80114a4 <udp_input_local_match+0xb8>)
 8011406:	4828      	ldr	r0, [pc, #160]	; (80114a8 <udp_input_local_match+0xbc>)
 8011408:	f002 fdae 	bl	8013f68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d105      	bne.n	801141e <udp_input_local_match+0x32>
 8011412:	4b23      	ldr	r3, [pc, #140]	; (80114a0 <udp_input_local_match+0xb4>)
 8011414:	2288      	movs	r2, #136	; 0x88
 8011416:	4925      	ldr	r1, [pc, #148]	; (80114ac <udp_input_local_match+0xc0>)
 8011418:	4823      	ldr	r0, [pc, #140]	; (80114a8 <udp_input_local_match+0xbc>)
 801141a:	f002 fda5 	bl	8013f68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	7a1b      	ldrb	r3, [r3, #8]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00b      	beq.n	801143e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	7a1a      	ldrb	r2, [r3, #8]
 801142a:	4b21      	ldr	r3, [pc, #132]	; (80114b0 <udp_input_local_match+0xc4>)
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011432:	3301      	adds	r3, #1
 8011434:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011436:	429a      	cmp	r2, r3
 8011438:	d001      	beq.n	801143e <udp_input_local_match+0x52>
    return 0;
 801143a:	2300      	movs	r3, #0
 801143c:	e02b      	b.n	8011496 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d018      	beq.n	8011476 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d013      	beq.n	8011472 <udp_input_local_match+0x86>
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00f      	beq.n	8011472 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011452:	4b17      	ldr	r3, [pc, #92]	; (80114b0 <udp_input_local_match+0xc4>)
 8011454:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145a:	d00a      	beq.n	8011472 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	4b13      	ldr	r3, [pc, #76]	; (80114b0 <udp_input_local_match+0xc4>)
 8011462:	695b      	ldr	r3, [r3, #20]
 8011464:	405a      	eors	r2, r3
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	3308      	adds	r3, #8
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801146e:	2b00      	cmp	r3, #0
 8011470:	d110      	bne.n	8011494 <udp_input_local_match+0xa8>
          return 1;
 8011472:	2301      	movs	r3, #1
 8011474:	e00f      	b.n	8011496 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d009      	beq.n	8011490 <udp_input_local_match+0xa4>
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d005      	beq.n	8011490 <udp_input_local_match+0xa4>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	4b09      	ldr	r3, [pc, #36]	; (80114b0 <udp_input_local_match+0xc4>)
 801148a:	695b      	ldr	r3, [r3, #20]
 801148c:	429a      	cmp	r2, r3
 801148e:	d101      	bne.n	8011494 <udp_input_local_match+0xa8>
        return 1;
 8011490:	2301      	movs	r3, #1
 8011492:	e000      	b.n	8011496 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	080170c4 	.word	0x080170c4
 80114a4:	080170f4 	.word	0x080170f4
 80114a8:	08017118 	.word	0x08017118
 80114ac:	08017140 	.word	0x08017140
 80114b0:	2000570c 	.word	0x2000570c

080114b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b08d      	sub	sp, #52	; 0x34
 80114b8:	af02      	add	r7, sp, #8
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80114be:	2300      	movs	r3, #0
 80114c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d105      	bne.n	80114d4 <udp_input+0x20>
 80114c8:	4b7c      	ldr	r3, [pc, #496]	; (80116bc <udp_input+0x208>)
 80114ca:	22cf      	movs	r2, #207	; 0xcf
 80114cc:	497c      	ldr	r1, [pc, #496]	; (80116c0 <udp_input+0x20c>)
 80114ce:	487d      	ldr	r0, [pc, #500]	; (80116c4 <udp_input+0x210>)
 80114d0:	f002 fd4a 	bl	8013f68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d105      	bne.n	80114e6 <udp_input+0x32>
 80114da:	4b78      	ldr	r3, [pc, #480]	; (80116bc <udp_input+0x208>)
 80114dc:	22d0      	movs	r2, #208	; 0xd0
 80114de:	497a      	ldr	r1, [pc, #488]	; (80116c8 <udp_input+0x214>)
 80114e0:	4878      	ldr	r0, [pc, #480]	; (80116c4 <udp_input+0x210>)
 80114e2:	f002 fd41 	bl	8013f68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	895b      	ldrh	r3, [r3, #10]
 80114ea:	2b07      	cmp	r3, #7
 80114ec:	d803      	bhi.n	80114f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7fa fa78 	bl	800b9e4 <pbuf_free>
    goto end;
 80114f4:	e0de      	b.n	80116b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80114fc:	4b73      	ldr	r3, [pc, #460]	; (80116cc <udp_input+0x218>)
 80114fe:	695b      	ldr	r3, [r3, #20]
 8011500:	4a72      	ldr	r2, [pc, #456]	; (80116cc <udp_input+0x218>)
 8011502:	6812      	ldr	r2, [r2, #0]
 8011504:	4611      	mov	r1, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f001 fc88 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 801150c:	4603      	mov	r3, r0
 801150e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	b29b      	uxth	r3, r3
 8011516:	4618      	mov	r0, r3
 8011518:	f7f8 ff26 	bl	800a368 <lwip_htons>
 801151c:	4603      	mov	r3, r0
 801151e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	885b      	ldrh	r3, [r3, #2]
 8011524:	b29b      	uxth	r3, r3
 8011526:	4618      	mov	r0, r3
 8011528:	f7f8 ff1e 	bl	800a368 <lwip_htons>
 801152c:	4603      	mov	r3, r0
 801152e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011534:	2300      	movs	r3, #0
 8011536:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011538:	2300      	movs	r3, #0
 801153a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801153c:	4b64      	ldr	r3, [pc, #400]	; (80116d0 <udp_input+0x21c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
 8011542:	e054      	b.n	80115ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	8a5b      	ldrh	r3, [r3, #18]
 8011548:	89fa      	ldrh	r2, [r7, #14]
 801154a:	429a      	cmp	r2, r3
 801154c:	d14a      	bne.n	80115e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801154e:	7cfb      	ldrb	r3, [r7, #19]
 8011550:	461a      	mov	r2, r3
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011556:	f7ff ff49 	bl	80113ec <udp_input_local_match>
 801155a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801155c:	2b00      	cmp	r3, #0
 801155e:	d041      	beq.n	80115e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	7c1b      	ldrb	r3, [r3, #16]
 8011564:	f003 0304 	and.w	r3, r3, #4
 8011568:	2b00      	cmp	r3, #0
 801156a:	d11d      	bne.n	80115a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011574:	61fb      	str	r3, [r7, #28]
 8011576:	e017      	b.n	80115a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011578:	7cfb      	ldrb	r3, [r7, #19]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d014      	beq.n	80115a8 <udp_input+0xf4>
 801157e:	4b53      	ldr	r3, [pc, #332]	; (80116cc <udp_input+0x218>)
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011586:	d10f      	bne.n	80115a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	681a      	ldr	r2, [r3, #0]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	3304      	adds	r3, #4
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d008      	beq.n	80115a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	3304      	adds	r3, #4
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d101      	bne.n	80115a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	8a9b      	ldrh	r3, [r3, #20]
 80115ac:	8a3a      	ldrh	r2, [r7, #16]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d118      	bne.n	80115e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80115b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d005      	beq.n	80115c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80115ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115bc:	685a      	ldr	r2, [r3, #4]
 80115be:	4b43      	ldr	r3, [pc, #268]	; (80116cc <udp_input+0x218>)
 80115c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d10e      	bne.n	80115e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d014      	beq.n	80115f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80115cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ce:	68da      	ldr	r2, [r3, #12]
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80115d4:	4b3e      	ldr	r3, [pc, #248]	; (80116d0 <udp_input+0x21c>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80115dc:	4a3c      	ldr	r2, [pc, #240]	; (80116d0 <udp_input+0x21c>)
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80115e2:	e008      	b.n	80115f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	627b      	str	r3, [r7, #36]	; 0x24
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1a7      	bne.n	8011544 <udp_input+0x90>
 80115f4:	e000      	b.n	80115f8 <udp_input+0x144>
        break;
 80115f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80115f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d101      	bne.n	8011602 <udp_input+0x14e>
    pcb = uncon_pcb;
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	2b00      	cmp	r3, #0
 8011606:	d002      	beq.n	801160e <udp_input+0x15a>
    for_us = 1;
 8011608:	2301      	movs	r3, #1
 801160a:	76fb      	strb	r3, [r7, #27]
 801160c:	e00a      	b.n	8011624 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	3304      	adds	r3, #4
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	4b2d      	ldr	r3, [pc, #180]	; (80116cc <udp_input+0x218>)
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	429a      	cmp	r2, r3
 801161a:	bf0c      	ite	eq
 801161c:	2301      	moveq	r3, #1
 801161e:	2300      	movne	r3, #0
 8011620:	b2db      	uxtb	r3, r3
 8011622:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011624:	7efb      	ldrb	r3, [r7, #27]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d041      	beq.n	80116ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801162a:	2108      	movs	r1, #8
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f7fa f953 	bl	800b8d8 <pbuf_remove_header>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00a      	beq.n	801164e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011638:	4b20      	ldr	r3, [pc, #128]	; (80116bc <udp_input+0x208>)
 801163a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801163e:	4925      	ldr	r1, [pc, #148]	; (80116d4 <udp_input+0x220>)
 8011640:	4820      	ldr	r0, [pc, #128]	; (80116c4 <udp_input+0x210>)
 8011642:	f002 fc91 	bl	8013f68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7fa f9cc 	bl	800b9e4 <pbuf_free>
      goto end;
 801164c:	e032      	b.n	80116b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011650:	2b00      	cmp	r3, #0
 8011652:	d012      	beq.n	801167a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	699b      	ldr	r3, [r3, #24]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00a      	beq.n	8011672 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165e:	699c      	ldr	r4, [r3, #24]
 8011660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011662:	69d8      	ldr	r0, [r3, #28]
 8011664:	8a3b      	ldrh	r3, [r7, #16]
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	4b1b      	ldr	r3, [pc, #108]	; (80116d8 <udp_input+0x224>)
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801166e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011670:	e021      	b.n	80116b6 <udp_input+0x202>
        pbuf_free(p);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7fa f9b6 	bl	800b9e4 <pbuf_free>
        goto end;
 8011678:	e01c      	b.n	80116b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801167a:	7cfb      	ldrb	r3, [r7, #19]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d112      	bne.n	80116a6 <udp_input+0x1f2>
 8011680:	4b12      	ldr	r3, [pc, #72]	; (80116cc <udp_input+0x218>)
 8011682:	695b      	ldr	r3, [r3, #20]
 8011684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011688:	2be0      	cmp	r3, #224	; 0xe0
 801168a:	d00c      	beq.n	80116a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801168c:	4b0f      	ldr	r3, [pc, #60]	; (80116cc <udp_input+0x218>)
 801168e:	899b      	ldrh	r3, [r3, #12]
 8011690:	3308      	adds	r3, #8
 8011692:	b29b      	uxth	r3, r3
 8011694:	b21b      	sxth	r3, r3
 8011696:	4619      	mov	r1, r3
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7fa f990 	bl	800b9be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801169e:	2103      	movs	r1, #3
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f001 f89b 	bl	80127dc <icmp_dest_unreach>
      pbuf_free(p);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7fa f99c 	bl	800b9e4 <pbuf_free>
  return;
 80116ac:	e003      	b.n	80116b6 <udp_input+0x202>
    pbuf_free(p);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7fa f998 	bl	800b9e4 <pbuf_free>
  return;
 80116b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80116b6:	372c      	adds	r7, #44	; 0x2c
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd90      	pop	{r4, r7, pc}
 80116bc:	080170c4 	.word	0x080170c4
 80116c0:	08017168 	.word	0x08017168
 80116c4:	08017118 	.word	0x08017118
 80116c8:	08017180 	.word	0x08017180
 80116cc:	2000570c 	.word	0x2000570c
 80116d0:	20008cd8 	.word	0x20008cd8
 80116d4:	0801719c 	.word	0x0801719c
 80116d8:	2000571c 	.word	0x2000571c

080116dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d01e      	beq.n	801172a <udp_netif_ip_addr_changed+0x4e>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d01a      	beq.n	801172a <udp_netif_ip_addr_changed+0x4e>
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d017      	beq.n	801172a <udp_netif_ip_addr_changed+0x4e>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d013      	beq.n	801172a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011702:	4b0d      	ldr	r3, [pc, #52]	; (8011738 <udp_netif_ip_addr_changed+0x5c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	60fb      	str	r3, [r7, #12]
 8011708:	e00c      	b.n	8011724 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	429a      	cmp	r2, r3
 8011714:	d103      	bne.n	801171e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	60fb      	str	r3, [r7, #12]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d1ef      	bne.n	801170a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801172a:	bf00      	nop
 801172c:	3714      	adds	r7, #20
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	20008cd8 	.word	0x20008cd8

0801173c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011744:	4915      	ldr	r1, [pc, #84]	; (801179c <etharp_free_entry+0x60>)
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	4613      	mov	r3, r2
 801174a:	005b      	lsls	r3, r3, #1
 801174c:	4413      	add	r3, r2
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	440b      	add	r3, r1
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d013      	beq.n	8011780 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011758:	4910      	ldr	r1, [pc, #64]	; (801179c <etharp_free_entry+0x60>)
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	00db      	lsls	r3, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4618      	mov	r0, r3
 801176a:	f7fa f93b 	bl	800b9e4 <pbuf_free>
    arp_table[i].q = NULL;
 801176e:	490b      	ldr	r1, [pc, #44]	; (801179c <etharp_free_entry+0x60>)
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	4613      	mov	r3, r2
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	4413      	add	r3, r2
 8011778:	00db      	lsls	r3, r3, #3
 801177a:	440b      	add	r3, r1
 801177c:	2200      	movs	r2, #0
 801177e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011780:	4906      	ldr	r1, [pc, #24]	; (801179c <etharp_free_entry+0x60>)
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	4613      	mov	r3, r2
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	4413      	add	r3, r2
 801178a:	00db      	lsls	r3, r3, #3
 801178c:	440b      	add	r3, r1
 801178e:	3314      	adds	r3, #20
 8011790:	2200      	movs	r2, #0
 8011792:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011794:	bf00      	nop
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	20008cdc 	.word	0x20008cdc

080117a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117a6:	2300      	movs	r3, #0
 80117a8:	607b      	str	r3, [r7, #4]
 80117aa:	e096      	b.n	80118da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80117ac:	494f      	ldr	r1, [pc, #316]	; (80118ec <etharp_tmr+0x14c>)
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	4613      	mov	r3, r2
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	4413      	add	r3, r2
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	440b      	add	r3, r1
 80117ba:	3314      	adds	r3, #20
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80117c0:	78fb      	ldrb	r3, [r7, #3]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 8086 	beq.w	80118d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80117c8:	4948      	ldr	r1, [pc, #288]	; (80118ec <etharp_tmr+0x14c>)
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	4613      	mov	r3, r2
 80117ce:	005b      	lsls	r3, r3, #1
 80117d0:	4413      	add	r3, r2
 80117d2:	00db      	lsls	r3, r3, #3
 80117d4:	440b      	add	r3, r1
 80117d6:	3312      	adds	r3, #18
 80117d8:	881b      	ldrh	r3, [r3, #0]
 80117da:	3301      	adds	r3, #1
 80117dc:	b298      	uxth	r0, r3
 80117de:	4943      	ldr	r1, [pc, #268]	; (80118ec <etharp_tmr+0x14c>)
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	4613      	mov	r3, r2
 80117e4:	005b      	lsls	r3, r3, #1
 80117e6:	4413      	add	r3, r2
 80117e8:	00db      	lsls	r3, r3, #3
 80117ea:	440b      	add	r3, r1
 80117ec:	3312      	adds	r3, #18
 80117ee:	4602      	mov	r2, r0
 80117f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80117f2:	493e      	ldr	r1, [pc, #248]	; (80118ec <etharp_tmr+0x14c>)
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	3312      	adds	r3, #18
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011808:	d215      	bcs.n	8011836 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801180a:	4938      	ldr	r1, [pc, #224]	; (80118ec <etharp_tmr+0x14c>)
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	4613      	mov	r3, r2
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	00db      	lsls	r3, r3, #3
 8011816:	440b      	add	r3, r1
 8011818:	3314      	adds	r3, #20
 801181a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801181c:	2b01      	cmp	r3, #1
 801181e:	d10e      	bne.n	801183e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011820:	4932      	ldr	r1, [pc, #200]	; (80118ec <etharp_tmr+0x14c>)
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	4613      	mov	r3, r2
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	4413      	add	r3, r2
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	440b      	add	r3, r1
 801182e:	3312      	adds	r3, #18
 8011830:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011832:	2b04      	cmp	r3, #4
 8011834:	d903      	bls.n	801183e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7ff ff80 	bl	801173c <etharp_free_entry>
 801183c:	e04a      	b.n	80118d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801183e:	492b      	ldr	r1, [pc, #172]	; (80118ec <etharp_tmr+0x14c>)
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	4613      	mov	r3, r2
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3314      	adds	r3, #20
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	2b03      	cmp	r3, #3
 8011852:	d10a      	bne.n	801186a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011854:	4925      	ldr	r1, [pc, #148]	; (80118ec <etharp_tmr+0x14c>)
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	4613      	mov	r3, r2
 801185a:	005b      	lsls	r3, r3, #1
 801185c:	4413      	add	r3, r2
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	440b      	add	r3, r1
 8011862:	3314      	adds	r3, #20
 8011864:	2204      	movs	r2, #4
 8011866:	701a      	strb	r2, [r3, #0]
 8011868:	e034      	b.n	80118d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801186a:	4920      	ldr	r1, [pc, #128]	; (80118ec <etharp_tmr+0x14c>)
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	4613      	mov	r3, r2
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	4413      	add	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	440b      	add	r3, r1
 8011878:	3314      	adds	r3, #20
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b04      	cmp	r3, #4
 801187e:	d10a      	bne.n	8011896 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011880:	491a      	ldr	r1, [pc, #104]	; (80118ec <etharp_tmr+0x14c>)
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	4613      	mov	r3, r2
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	4413      	add	r3, r2
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	440b      	add	r3, r1
 801188e:	3314      	adds	r3, #20
 8011890:	2202      	movs	r2, #2
 8011892:	701a      	strb	r2, [r3, #0]
 8011894:	e01e      	b.n	80118d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011896:	4915      	ldr	r1, [pc, #84]	; (80118ec <etharp_tmr+0x14c>)
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	440b      	add	r3, r1
 80118a4:	3314      	adds	r3, #20
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d113      	bne.n	80118d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80118ac:	490f      	ldr	r1, [pc, #60]	; (80118ec <etharp_tmr+0x14c>)
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	4613      	mov	r3, r2
 80118b2:	005b      	lsls	r3, r3, #1
 80118b4:	4413      	add	r3, r2
 80118b6:	00db      	lsls	r3, r3, #3
 80118b8:	440b      	add	r3, r1
 80118ba:	3308      	adds	r3, #8
 80118bc:	6818      	ldr	r0, [r3, #0]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	4613      	mov	r3, r2
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	4413      	add	r3, r2
 80118c6:	00db      	lsls	r3, r3, #3
 80118c8:	4a08      	ldr	r2, [pc, #32]	; (80118ec <etharp_tmr+0x14c>)
 80118ca:	4413      	add	r3, r2
 80118cc:	3304      	adds	r3, #4
 80118ce:	4619      	mov	r1, r3
 80118d0:	f000 fe6e 	bl	80125b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3301      	adds	r3, #1
 80118d8:	607b      	str	r3, [r7, #4]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b09      	cmp	r3, #9
 80118de:	f77f af65 	ble.w	80117ac <etharp_tmr+0xc>
      }
    }
  }
}
 80118e2:	bf00      	nop
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	20008cdc 	.word	0x20008cdc

080118f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b08a      	sub	sp, #40	; 0x28
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	460b      	mov	r3, r1
 80118fa:	607a      	str	r2, [r7, #4]
 80118fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80118fe:	230a      	movs	r3, #10
 8011900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011902:	230a      	movs	r3, #10
 8011904:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011906:	230a      	movs	r3, #10
 8011908:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801190e:	230a      	movs	r3, #10
 8011910:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	83bb      	strh	r3, [r7, #28]
 8011916:	2300      	movs	r3, #0
 8011918:	837b      	strh	r3, [r7, #26]
 801191a:	2300      	movs	r3, #0
 801191c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801191e:	2300      	movs	r3, #0
 8011920:	843b      	strh	r3, [r7, #32]
 8011922:	e0ae      	b.n	8011a82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011928:	49a6      	ldr	r1, [pc, #664]	; (8011bc4 <etharp_find_entry+0x2d4>)
 801192a:	4613      	mov	r3, r2
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	4413      	add	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	440b      	add	r3, r1
 8011934:	3314      	adds	r3, #20
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801193a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801193e:	2b0a      	cmp	r3, #10
 8011940:	d105      	bne.n	801194e <etharp_find_entry+0x5e>
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d102      	bne.n	801194e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011948:	8c3b      	ldrh	r3, [r7, #32]
 801194a:	847b      	strh	r3, [r7, #34]	; 0x22
 801194c:	e095      	b.n	8011a7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801194e:	7dfb      	ldrb	r3, [r7, #23]
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 8092 	beq.w	8011a7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	2b01      	cmp	r3, #1
 801195a:	d009      	beq.n	8011970 <etharp_find_entry+0x80>
 801195c:	7dfb      	ldrb	r3, [r7, #23]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d806      	bhi.n	8011970 <etharp_find_entry+0x80>
 8011962:	4b99      	ldr	r3, [pc, #612]	; (8011bc8 <etharp_find_entry+0x2d8>)
 8011964:	f240 1223 	movw	r2, #291	; 0x123
 8011968:	4998      	ldr	r1, [pc, #608]	; (8011bcc <etharp_find_entry+0x2dc>)
 801196a:	4899      	ldr	r0, [pc, #612]	; (8011bd0 <etharp_find_entry+0x2e0>)
 801196c:	f002 fafc 	bl	8013f68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d020      	beq.n	80119b8 <etharp_find_entry+0xc8>
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	6819      	ldr	r1, [r3, #0]
 801197a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801197e:	4891      	ldr	r0, [pc, #580]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011980:	4613      	mov	r3, r2
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	4413      	add	r3, r2
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	4403      	add	r3, r0
 801198a:	3304      	adds	r3, #4
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4299      	cmp	r1, r3
 8011990:	d112      	bne.n	80119b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00c      	beq.n	80119b2 <etharp_find_entry+0xc2>
 8011998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801199c:	4989      	ldr	r1, [pc, #548]	; (8011bc4 <etharp_find_entry+0x2d4>)
 801199e:	4613      	mov	r3, r2
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	4413      	add	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	440b      	add	r3, r1
 80119a8:	3308      	adds	r3, #8
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d102      	bne.n	80119b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80119b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119b6:	e100      	b.n	8011bba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80119b8:	7dfb      	ldrb	r3, [r7, #23]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d140      	bne.n	8011a40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80119be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119c2:	4980      	ldr	r1, [pc, #512]	; (8011bc4 <etharp_find_entry+0x2d4>)
 80119c4:	4613      	mov	r3, r2
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	4413      	add	r3, r2
 80119ca:	00db      	lsls	r3, r3, #3
 80119cc:	440b      	add	r3, r1
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d01a      	beq.n	8011a0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80119d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d8:	497a      	ldr	r1, [pc, #488]	; (8011bc4 <etharp_find_entry+0x2d4>)
 80119da:	4613      	mov	r3, r2
 80119dc:	005b      	lsls	r3, r3, #1
 80119de:	4413      	add	r3, r2
 80119e0:	00db      	lsls	r3, r3, #3
 80119e2:	440b      	add	r3, r1
 80119e4:	3312      	adds	r3, #18
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	8bba      	ldrh	r2, [r7, #28]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d845      	bhi.n	8011a7a <etharp_find_entry+0x18a>
            old_queue = i;
 80119ee:	8c3b      	ldrh	r3, [r7, #32]
 80119f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80119f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f6:	4973      	ldr	r1, [pc, #460]	; (8011bc4 <etharp_find_entry+0x2d4>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	440b      	add	r3, r1
 8011a02:	3312      	adds	r3, #18
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	83bb      	strh	r3, [r7, #28]
 8011a08:	e037      	b.n	8011a7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a0e:	496d      	ldr	r1, [pc, #436]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011a10:	4613      	mov	r3, r2
 8011a12:	005b      	lsls	r3, r3, #1
 8011a14:	4413      	add	r3, r2
 8011a16:	00db      	lsls	r3, r3, #3
 8011a18:	440b      	add	r3, r1
 8011a1a:	3312      	adds	r3, #18
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	8b7a      	ldrh	r2, [r7, #26]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d82a      	bhi.n	8011a7a <etharp_find_entry+0x18a>
            old_pending = i;
 8011a24:	8c3b      	ldrh	r3, [r7, #32]
 8011a26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a2c:	4965      	ldr	r1, [pc, #404]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011a2e:	4613      	mov	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	00db      	lsls	r3, r3, #3
 8011a36:	440b      	add	r3, r1
 8011a38:	3312      	adds	r3, #18
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	837b      	strh	r3, [r7, #26]
 8011a3e:	e01c      	b.n	8011a7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011a40:	7dfb      	ldrb	r3, [r7, #23]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d919      	bls.n	8011a7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a4a:	495e      	ldr	r1, [pc, #376]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	4413      	add	r3, r2
 8011a52:	00db      	lsls	r3, r3, #3
 8011a54:	440b      	add	r3, r1
 8011a56:	3312      	adds	r3, #18
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	8b3a      	ldrh	r2, [r7, #24]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d80c      	bhi.n	8011a7a <etharp_find_entry+0x18a>
            old_stable = i;
 8011a60:	8c3b      	ldrh	r3, [r7, #32]
 8011a62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a68:	4956      	ldr	r1, [pc, #344]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	4413      	add	r3, r2
 8011a70:	00db      	lsls	r3, r3, #3
 8011a72:	440b      	add	r3, r1
 8011a74:	3312      	adds	r3, #18
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a7a:	8c3b      	ldrh	r3, [r7, #32]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	843b      	strh	r3, [r7, #32]
 8011a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a86:	2b09      	cmp	r3, #9
 8011a88:	f77f af4c 	ble.w	8011924 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011a8c:	7afb      	ldrb	r3, [r7, #11]
 8011a8e:	f003 0302 	and.w	r3, r3, #2
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d108      	bne.n	8011aa8 <etharp_find_entry+0x1b8>
 8011a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a9a:	2b0a      	cmp	r3, #10
 8011a9c:	d107      	bne.n	8011aae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011a9e:	7afb      	ldrb	r3, [r7, #11]
 8011aa0:	f003 0301 	and.w	r3, r3, #1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d102      	bne.n	8011aae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aac:	e085      	b.n	8011bba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011ab2:	2b09      	cmp	r3, #9
 8011ab4:	dc02      	bgt.n	8011abc <etharp_find_entry+0x1cc>
    i = empty;
 8011ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ab8:	843b      	strh	r3, [r7, #32]
 8011aba:	e039      	b.n	8011b30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	dc14      	bgt.n	8011aee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ac6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011acc:	493d      	ldr	r1, [pc, #244]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011ace:	4613      	mov	r3, r2
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	4413      	add	r3, r2
 8011ad4:	00db      	lsls	r3, r3, #3
 8011ad6:	440b      	add	r3, r1
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d018      	beq.n	8011b10 <etharp_find_entry+0x220>
 8011ade:	4b3a      	ldr	r3, [pc, #232]	; (8011bc8 <etharp_find_entry+0x2d8>)
 8011ae0:	f240 126d 	movw	r2, #365	; 0x16d
 8011ae4:	493b      	ldr	r1, [pc, #236]	; (8011bd4 <etharp_find_entry+0x2e4>)
 8011ae6:	483a      	ldr	r0, [pc, #232]	; (8011bd0 <etharp_find_entry+0x2e0>)
 8011ae8:	f002 fa3e 	bl	8013f68 <iprintf>
 8011aec:	e010      	b.n	8011b10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011af2:	2b09      	cmp	r3, #9
 8011af4:	dc02      	bgt.n	8011afc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011af8:	843b      	strh	r3, [r7, #32]
 8011afa:	e009      	b.n	8011b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b00:	2b09      	cmp	r3, #9
 8011b02:	dc02      	bgt.n	8011b0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011b04:	8bfb      	ldrh	r3, [r7, #30]
 8011b06:	843b      	strh	r3, [r7, #32]
 8011b08:	e002      	b.n	8011b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0e:	e054      	b.n	8011bba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b14:	2b09      	cmp	r3, #9
 8011b16:	dd06      	ble.n	8011b26 <etharp_find_entry+0x236>
 8011b18:	4b2b      	ldr	r3, [pc, #172]	; (8011bc8 <etharp_find_entry+0x2d8>)
 8011b1a:	f240 127f 	movw	r2, #383	; 0x17f
 8011b1e:	492e      	ldr	r1, [pc, #184]	; (8011bd8 <etharp_find_entry+0x2e8>)
 8011b20:	482b      	ldr	r0, [pc, #172]	; (8011bd0 <etharp_find_entry+0x2e0>)
 8011b22:	f002 fa21 	bl	8013f68 <iprintf>
    etharp_free_entry(i);
 8011b26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7ff fe06 	bl	801173c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b34:	2b09      	cmp	r3, #9
 8011b36:	dd06      	ble.n	8011b46 <etharp_find_entry+0x256>
 8011b38:	4b23      	ldr	r3, [pc, #140]	; (8011bc8 <etharp_find_entry+0x2d8>)
 8011b3a:	f240 1283 	movw	r2, #387	; 0x183
 8011b3e:	4926      	ldr	r1, [pc, #152]	; (8011bd8 <etharp_find_entry+0x2e8>)
 8011b40:	4823      	ldr	r0, [pc, #140]	; (8011bd0 <etharp_find_entry+0x2e0>)
 8011b42:	f002 fa11 	bl	8013f68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b4a:	491e      	ldr	r1, [pc, #120]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	4413      	add	r3, r2
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	440b      	add	r3, r1
 8011b56:	3314      	adds	r3, #20
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d006      	beq.n	8011b6c <etharp_find_entry+0x27c>
 8011b5e:	4b1a      	ldr	r3, [pc, #104]	; (8011bc8 <etharp_find_entry+0x2d8>)
 8011b60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011b64:	491d      	ldr	r1, [pc, #116]	; (8011bdc <etharp_find_entry+0x2ec>)
 8011b66:	481a      	ldr	r0, [pc, #104]	; (8011bd0 <etharp_find_entry+0x2e0>)
 8011b68:	f002 f9fe 	bl	8013f68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00b      	beq.n	8011b8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6819      	ldr	r1, [r3, #0]
 8011b7a:	4812      	ldr	r0, [pc, #72]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	4413      	add	r3, r2
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	4403      	add	r3, r0
 8011b86:	3304      	adds	r3, #4
 8011b88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b8e:	490d      	ldr	r1, [pc, #52]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011b90:	4613      	mov	r3, r2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	440b      	add	r3, r1
 8011b9a:	3312      	adds	r3, #18
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ba4:	4907      	ldr	r1, [pc, #28]	; (8011bc4 <etharp_find_entry+0x2d4>)
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	4413      	add	r3, r2
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	440b      	add	r3, r1
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3728      	adds	r7, #40	; 0x28
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20008cdc 	.word	0x20008cdc
 8011bc8:	08017428 	.word	0x08017428
 8011bcc:	08017460 	.word	0x08017460
 8011bd0:	080174a0 	.word	0x080174a0
 8011bd4:	080174c8 	.word	0x080174c8
 8011bd8:	080174e0 	.word	0x080174e0
 8011bdc:	080174f4 	.word	0x080174f4

08011be0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b088      	sub	sp, #32
 8011be4:	af02      	add	r7, sp, #8
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011bf4:	2b06      	cmp	r3, #6
 8011bf6:	d006      	beq.n	8011c06 <etharp_update_arp_entry+0x26>
 8011bf8:	4b48      	ldr	r3, [pc, #288]	; (8011d1c <etharp_update_arp_entry+0x13c>)
 8011bfa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011bfe:	4948      	ldr	r1, [pc, #288]	; (8011d20 <etharp_update_arp_entry+0x140>)
 8011c00:	4848      	ldr	r0, [pc, #288]	; (8011d24 <etharp_update_arp_entry+0x144>)
 8011c02:	f002 f9b1 	bl	8013f68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d012      	beq.n	8011c32 <etharp_update_arp_entry+0x52>
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00e      	beq.n	8011c32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	68f9      	ldr	r1, [r7, #12]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f001 f8fe 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8011c20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d105      	bne.n	8011c32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c2e:	2be0      	cmp	r3, #224	; 0xe0
 8011c30:	d102      	bne.n	8011c38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011c32:	f06f 030f 	mvn.w	r3, #15
 8011c36:	e06c      	b.n	8011d12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011c38:	78fb      	ldrb	r3, [r7, #3]
 8011c3a:	68fa      	ldr	r2, [r7, #12]
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	68b8      	ldr	r0, [r7, #8]
 8011c40:	f7ff fe56 	bl	80118f0 <etharp_find_entry>
 8011c44:	4603      	mov	r3, r0
 8011c46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	da02      	bge.n	8011c56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011c50:	8afb      	ldrh	r3, [r7, #22]
 8011c52:	b25b      	sxtb	r3, r3
 8011c54:	e05d      	b.n	8011d12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c5a:	4933      	ldr	r1, [pc, #204]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	005b      	lsls	r3, r3, #1
 8011c60:	4413      	add	r3, r2
 8011c62:	00db      	lsls	r3, r3, #3
 8011c64:	440b      	add	r3, r1
 8011c66:	3314      	adds	r3, #20
 8011c68:	2202      	movs	r2, #2
 8011c6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c70:	492d      	ldr	r1, [pc, #180]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011c72:	4613      	mov	r3, r2
 8011c74:	005b      	lsls	r3, r3, #1
 8011c76:	4413      	add	r3, r2
 8011c78:	00db      	lsls	r3, r3, #3
 8011c7a:	440b      	add	r3, r1
 8011c7c:	3308      	adds	r3, #8
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c86:	4613      	mov	r3, r2
 8011c88:	005b      	lsls	r3, r3, #1
 8011c8a:	4413      	add	r3, r2
 8011c8c:	00db      	lsls	r3, r3, #3
 8011c8e:	3308      	adds	r3, #8
 8011c90:	4a25      	ldr	r2, [pc, #148]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011c92:	4413      	add	r3, r2
 8011c94:	3304      	adds	r3, #4
 8011c96:	2206      	movs	r2, #6
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f002 f94e 	bl	8013f3c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ca4:	4920      	ldr	r1, [pc, #128]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	4413      	add	r3, r2
 8011cac:	00db      	lsls	r3, r3, #3
 8011cae:	440b      	add	r3, r1
 8011cb0:	3312      	adds	r3, #18
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cba:	491b      	ldr	r1, [pc, #108]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	005b      	lsls	r3, r3, #1
 8011cc0:	4413      	add	r3, r2
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	440b      	add	r3, r1
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d021      	beq.n	8011d10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cd0:	4915      	ldr	r1, [pc, #84]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	005b      	lsls	r3, r3, #1
 8011cd6:	4413      	add	r3, r2
 8011cd8:	00db      	lsls	r3, r3, #3
 8011cda:	440b      	add	r3, r1
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ce4:	4910      	ldr	r1, [pc, #64]	; (8011d28 <etharp_update_arp_entry+0x148>)
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	4413      	add	r3, r2
 8011cec:	00db      	lsls	r3, r3, #3
 8011cee:	440b      	add	r3, r1
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6939      	ldr	r1, [r7, #16]
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f001 ff97 	bl	8013c38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d0a:	6938      	ldr	r0, [r7, #16]
 8011d0c:	f7f9 fe6a 	bl	800b9e4 <pbuf_free>
  }
  return ERR_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3718      	adds	r7, #24
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	08017428 	.word	0x08017428
 8011d20:	08017520 	.word	0x08017520
 8011d24:	080174a0 	.word	0x080174a0
 8011d28:	20008cdc 	.word	0x20008cdc

08011d2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d34:	2300      	movs	r3, #0
 8011d36:	60fb      	str	r3, [r7, #12]
 8011d38:	e01e      	b.n	8011d78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011d3a:	4913      	ldr	r1, [pc, #76]	; (8011d88 <etharp_cleanup_netif+0x5c>)
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	440b      	add	r3, r1
 8011d48:	3314      	adds	r3, #20
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011d4e:	7afb      	ldrb	r3, [r7, #11]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00e      	beq.n	8011d72 <etharp_cleanup_netif+0x46>
 8011d54:	490c      	ldr	r1, [pc, #48]	; (8011d88 <etharp_cleanup_netif+0x5c>)
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	4613      	mov	r3, r2
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	4413      	add	r3, r2
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	440b      	add	r3, r1
 8011d62:	3308      	adds	r3, #8
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d102      	bne.n	8011d72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f7ff fce5 	bl	801173c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	3301      	adds	r3, #1
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b09      	cmp	r3, #9
 8011d7c:	dddd      	ble.n	8011d3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8011d7e:	bf00      	nop
 8011d80:	bf00      	nop
 8011d82:	3710      	adds	r7, #16
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20008cdc 	.word	0x20008cdc

08011d8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011d8c:	b5b0      	push	{r4, r5, r7, lr}
 8011d8e:	b08a      	sub	sp, #40	; 0x28
 8011d90:	af04      	add	r7, sp, #16
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d107      	bne.n	8011dac <etharp_input+0x20>
 8011d9c:	4b3d      	ldr	r3, [pc, #244]	; (8011e94 <etharp_input+0x108>)
 8011d9e:	f240 228a 	movw	r2, #650	; 0x28a
 8011da2:	493d      	ldr	r1, [pc, #244]	; (8011e98 <etharp_input+0x10c>)
 8011da4:	483d      	ldr	r0, [pc, #244]	; (8011e9c <etharp_input+0x110>)
 8011da6:	f002 f8df 	bl	8013f68 <iprintf>
 8011daa:	e06f      	b.n	8011e8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dbc:	d10c      	bne.n	8011dd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011dc2:	2b06      	cmp	r3, #6
 8011dc4:	d108      	bne.n	8011dd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011dca:	2b04      	cmp	r3, #4
 8011dcc:	d104      	bne.n	8011dd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	885b      	ldrh	r3, [r3, #2]
 8011dd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011dd4:	2b08      	cmp	r3, #8
 8011dd6:	d003      	beq.n	8011de0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7f9 fe03 	bl	800b9e4 <pbuf_free>
    return;
 8011dde:	e055      	b.n	8011e8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	330e      	adds	r3, #14
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	3318      	adds	r3, #24
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	3304      	adds	r3, #4
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d102      	bne.n	8011e00 <etharp_input+0x74>
    for_us = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	75fb      	strb	r3, [r7, #23]
 8011dfe:	e009      	b.n	8011e14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	3304      	adds	r3, #4
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	bf0c      	ite	eq
 8011e0c:	2301      	moveq	r3, #1
 8011e0e:	2300      	movne	r3, #0
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	f103 0208 	add.w	r2, r3, #8
 8011e1a:	7dfb      	ldrb	r3, [r7, #23]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <etharp_input+0x98>
 8011e20:	2301      	movs	r3, #1
 8011e22:	e000      	b.n	8011e26 <etharp_input+0x9a>
 8011e24:	2302      	movs	r3, #2
 8011e26:	f107 010c 	add.w	r1, r7, #12
 8011e2a:	6838      	ldr	r0, [r7, #0]
 8011e2c:	f7ff fed8 	bl	8011be0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	88db      	ldrh	r3, [r3, #6]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e3a:	d003      	beq.n	8011e44 <etharp_input+0xb8>
 8011e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e40:	d01e      	beq.n	8011e80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011e42:	e020      	b.n	8011e86 <etharp_input+0xfa>
      if (for_us) {
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d01c      	beq.n	8011e84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011e60:	693a      	ldr	r2, [r7, #16]
 8011e62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011e64:	2102      	movs	r1, #2
 8011e66:	9103      	str	r1, [sp, #12]
 8011e68:	f107 010c 	add.w	r1, r7, #12
 8011e6c:	9102      	str	r1, [sp, #8]
 8011e6e:	9201      	str	r2, [sp, #4]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	462b      	mov	r3, r5
 8011e74:	4622      	mov	r2, r4
 8011e76:	4601      	mov	r1, r0
 8011e78:	6838      	ldr	r0, [r7, #0]
 8011e7a:	f000 faeb 	bl	8012454 <etharp_raw>
      break;
 8011e7e:	e001      	b.n	8011e84 <etharp_input+0xf8>
      break;
 8011e80:	bf00      	nop
 8011e82:	e000      	b.n	8011e86 <etharp_input+0xfa>
      break;
 8011e84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7f9 fdac 	bl	800b9e4 <pbuf_free>
}
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bdb0      	pop	{r4, r5, r7, pc}
 8011e92:	bf00      	nop
 8011e94:	08017428 	.word	0x08017428
 8011e98:	08017578 	.word	0x08017578
 8011e9c:	080174a0 	.word	0x080174a0

08011ea0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b086      	sub	sp, #24
 8011ea4:	af02      	add	r7, sp, #8
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011eae:	79fa      	ldrb	r2, [r7, #7]
 8011eb0:	4944      	ldr	r1, [pc, #272]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	005b      	lsls	r3, r3, #1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	00db      	lsls	r3, r3, #3
 8011eba:	440b      	add	r3, r1
 8011ebc:	3314      	adds	r3, #20
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d806      	bhi.n	8011ed2 <etharp_output_to_arp_index+0x32>
 8011ec4:	4b40      	ldr	r3, [pc, #256]	; (8011fc8 <etharp_output_to_arp_index+0x128>)
 8011ec6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011eca:	4940      	ldr	r1, [pc, #256]	; (8011fcc <etharp_output_to_arp_index+0x12c>)
 8011ecc:	4840      	ldr	r0, [pc, #256]	; (8011fd0 <etharp_output_to_arp_index+0x130>)
 8011ece:	f002 f84b 	bl	8013f68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011ed2:	79fa      	ldrb	r2, [r7, #7]
 8011ed4:	493b      	ldr	r1, [pc, #236]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	440b      	add	r3, r1
 8011ee0:	3314      	adds	r3, #20
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d153      	bne.n	8011f90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011ee8:	79fa      	ldrb	r2, [r7, #7]
 8011eea:	4936      	ldr	r1, [pc, #216]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011eec:	4613      	mov	r3, r2
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	4413      	add	r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	440b      	add	r3, r1
 8011ef6:	3312      	adds	r3, #18
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011efe:	d919      	bls.n	8011f34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f00:	79fa      	ldrb	r2, [r7, #7]
 8011f02:	4613      	mov	r3, r2
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	4413      	add	r3, r2
 8011f08:	00db      	lsls	r3, r3, #3
 8011f0a:	4a2e      	ldr	r2, [pc, #184]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f0c:	4413      	add	r3, r2
 8011f0e:	3304      	adds	r3, #4
 8011f10:	4619      	mov	r1, r3
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 fb4c 	bl	80125b0 <etharp_request>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d138      	bne.n	8011f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f1e:	79fa      	ldrb	r2, [r7, #7]
 8011f20:	4928      	ldr	r1, [pc, #160]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f22:	4613      	mov	r3, r2
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	4413      	add	r3, r2
 8011f28:	00db      	lsls	r3, r3, #3
 8011f2a:	440b      	add	r3, r1
 8011f2c:	3314      	adds	r3, #20
 8011f2e:	2203      	movs	r2, #3
 8011f30:	701a      	strb	r2, [r3, #0]
 8011f32:	e02d      	b.n	8011f90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011f34:	79fa      	ldrb	r2, [r7, #7]
 8011f36:	4923      	ldr	r1, [pc, #140]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f38:	4613      	mov	r3, r2
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	4413      	add	r3, r2
 8011f3e:	00db      	lsls	r3, r3, #3
 8011f40:	440b      	add	r3, r1
 8011f42:	3312      	adds	r3, #18
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011f4a:	d321      	bcc.n	8011f90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011f4c:	79fa      	ldrb	r2, [r7, #7]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	4413      	add	r3, r2
 8011f54:	00db      	lsls	r3, r3, #3
 8011f56:	4a1b      	ldr	r2, [pc, #108]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f58:	4413      	add	r3, r2
 8011f5a:	1d19      	adds	r1, r3, #4
 8011f5c:	79fa      	ldrb	r2, [r7, #7]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	005b      	lsls	r3, r3, #1
 8011f62:	4413      	add	r3, r2
 8011f64:	00db      	lsls	r3, r3, #3
 8011f66:	3308      	adds	r3, #8
 8011f68:	4a16      	ldr	r2, [pc, #88]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f6a:	4413      	add	r3, r2
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	461a      	mov	r2, r3
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f000 fafb 	bl	801256c <etharp_request_dst>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d109      	bne.n	8011f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f7c:	79fa      	ldrb	r2, [r7, #7]
 8011f7e:	4911      	ldr	r1, [pc, #68]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011f80:	4613      	mov	r3, r2
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	4413      	add	r3, r2
 8011f86:	00db      	lsls	r3, r3, #3
 8011f88:	440b      	add	r3, r1
 8011f8a:	3314      	adds	r3, #20
 8011f8c:	2203      	movs	r2, #3
 8011f8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011f96:	79fa      	ldrb	r2, [r7, #7]
 8011f98:	4613      	mov	r3, r2
 8011f9a:	005b      	lsls	r3, r3, #1
 8011f9c:	4413      	add	r3, r2
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	3308      	adds	r3, #8
 8011fa2:	4a08      	ldr	r2, [pc, #32]	; (8011fc4 <etharp_output_to_arp_index+0x124>)
 8011fa4:	4413      	add	r3, r2
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011fac:	9200      	str	r2, [sp, #0]
 8011fae:	460a      	mov	r2, r1
 8011fb0:	68b9      	ldr	r1, [r7, #8]
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f001 fe40 	bl	8013c38 <ethernet_output>
 8011fb8:	4603      	mov	r3, r0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20008cdc 	.word	0x20008cdc
 8011fc8:	08017428 	.word	0x08017428
 8011fcc:	08017598 	.word	0x08017598
 8011fd0:	080174a0 	.word	0x080174a0

08011fd4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b08a      	sub	sp, #40	; 0x28
 8011fd8:	af02      	add	r7, sp, #8
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d106      	bne.n	8011ff8 <etharp_output+0x24>
 8011fea:	4b73      	ldr	r3, [pc, #460]	; (80121b8 <etharp_output+0x1e4>)
 8011fec:	f240 321e 	movw	r2, #798	; 0x31e
 8011ff0:	4972      	ldr	r1, [pc, #456]	; (80121bc <etharp_output+0x1e8>)
 8011ff2:	4873      	ldr	r0, [pc, #460]	; (80121c0 <etharp_output+0x1ec>)
 8011ff4:	f001 ffb8 	bl	8013f68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d106      	bne.n	801200c <etharp_output+0x38>
 8011ffe:	4b6e      	ldr	r3, [pc, #440]	; (80121b8 <etharp_output+0x1e4>)
 8012000:	f240 321f 	movw	r2, #799	; 0x31f
 8012004:	496f      	ldr	r1, [pc, #444]	; (80121c4 <etharp_output+0x1f0>)
 8012006:	486e      	ldr	r0, [pc, #440]	; (80121c0 <etharp_output+0x1ec>)
 8012008:	f001 ffae 	bl	8013f68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d106      	bne.n	8012020 <etharp_output+0x4c>
 8012012:	4b69      	ldr	r3, [pc, #420]	; (80121b8 <etharp_output+0x1e4>)
 8012014:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012018:	496b      	ldr	r1, [pc, #428]	; (80121c8 <etharp_output+0x1f4>)
 801201a:	4869      	ldr	r0, [pc, #420]	; (80121c0 <etharp_output+0x1ec>)
 801201c:	f001 ffa4 	bl	8013f68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68f9      	ldr	r1, [r7, #12]
 8012026:	4618      	mov	r0, r3
 8012028:	f000 fef8 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d002      	beq.n	8012038 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012032:	4b66      	ldr	r3, [pc, #408]	; (80121cc <etharp_output+0x1f8>)
 8012034:	61fb      	str	r3, [r7, #28]
 8012036:	e0af      	b.n	8012198 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012040:	2be0      	cmp	r3, #224	; 0xe0
 8012042:	d118      	bne.n	8012076 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012044:	2301      	movs	r3, #1
 8012046:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012048:	2300      	movs	r3, #0
 801204a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801204c:	235e      	movs	r3, #94	; 0x5e
 801204e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	3301      	adds	r3, #1
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801205a:	b2db      	uxtb	r3, r3
 801205c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	3302      	adds	r3, #2
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	3303      	adds	r3, #3
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801206e:	f107 0310 	add.w	r3, r7, #16
 8012072:	61fb      	str	r3, [r7, #28]
 8012074:	e090      	b.n	8012198 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	3304      	adds	r3, #4
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	405a      	eors	r2, r3
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	3308      	adds	r3, #8
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4013      	ands	r3, r2
 801208a:	2b00      	cmp	r3, #0
 801208c:	d012      	beq.n	80120b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012094:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012098:	4293      	cmp	r3, r2
 801209a:	d00b      	beq.n	80120b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	330c      	adds	r3, #12
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d003      	beq.n	80120ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	330c      	adds	r3, #12
 80120aa:	61bb      	str	r3, [r7, #24]
 80120ac:	e002      	b.n	80120b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80120ae:	f06f 0303 	mvn.w	r3, #3
 80120b2:	e07d      	b.n	80121b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80120b4:	4b46      	ldr	r3, [pc, #280]	; (80121d0 <etharp_output+0x1fc>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	4619      	mov	r1, r3
 80120ba:	4a46      	ldr	r2, [pc, #280]	; (80121d4 <etharp_output+0x200>)
 80120bc:	460b      	mov	r3, r1
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	440b      	add	r3, r1
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	4413      	add	r3, r2
 80120c6:	3314      	adds	r3, #20
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d925      	bls.n	801211a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80120ce:	4b40      	ldr	r3, [pc, #256]	; (80121d0 <etharp_output+0x1fc>)
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	4619      	mov	r1, r3
 80120d4:	4a3f      	ldr	r2, [pc, #252]	; (80121d4 <etharp_output+0x200>)
 80120d6:	460b      	mov	r3, r1
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	440b      	add	r3, r1
 80120dc:	00db      	lsls	r3, r3, #3
 80120de:	4413      	add	r3, r2
 80120e0:	3308      	adds	r3, #8
 80120e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d117      	bne.n	801211a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b38      	ldr	r3, [pc, #224]	; (80121d0 <etharp_output+0x1fc>)
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	4937      	ldr	r1, [pc, #220]	; (80121d4 <etharp_output+0x200>)
 80120f6:	4603      	mov	r3, r0
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	4403      	add	r3, r0
 80120fc:	00db      	lsls	r3, r3, #3
 80120fe:	440b      	add	r3, r1
 8012100:	3304      	adds	r3, #4
 8012102:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012104:	429a      	cmp	r2, r3
 8012106:	d108      	bne.n	801211a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012108:	4b31      	ldr	r3, [pc, #196]	; (80121d0 <etharp_output+0x1fc>)
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	461a      	mov	r2, r3
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff fec5 	bl	8011ea0 <etharp_output_to_arp_index>
 8012116:	4603      	mov	r3, r0
 8012118:	e04a      	b.n	80121b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801211a:	2300      	movs	r3, #0
 801211c:	75fb      	strb	r3, [r7, #23]
 801211e:	e031      	b.n	8012184 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012120:	7dfa      	ldrb	r2, [r7, #23]
 8012122:	492c      	ldr	r1, [pc, #176]	; (80121d4 <etharp_output+0x200>)
 8012124:	4613      	mov	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	4413      	add	r3, r2
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	440b      	add	r3, r1
 801212e:	3314      	adds	r3, #20
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d923      	bls.n	801217e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012136:	7dfa      	ldrb	r2, [r7, #23]
 8012138:	4926      	ldr	r1, [pc, #152]	; (80121d4 <etharp_output+0x200>)
 801213a:	4613      	mov	r3, r2
 801213c:	005b      	lsls	r3, r3, #1
 801213e:	4413      	add	r3, r2
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	440b      	add	r3, r1
 8012144:	3308      	adds	r3, #8
 8012146:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	429a      	cmp	r2, r3
 801214c:	d117      	bne.n	801217e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	6819      	ldr	r1, [r3, #0]
 8012152:	7dfa      	ldrb	r2, [r7, #23]
 8012154:	481f      	ldr	r0, [pc, #124]	; (80121d4 <etharp_output+0x200>)
 8012156:	4613      	mov	r3, r2
 8012158:	005b      	lsls	r3, r3, #1
 801215a:	4413      	add	r3, r2
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	4403      	add	r3, r0
 8012160:	3304      	adds	r3, #4
 8012162:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012164:	4299      	cmp	r1, r3
 8012166:	d10a      	bne.n	801217e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012168:	4a19      	ldr	r2, [pc, #100]	; (80121d0 <etharp_output+0x1fc>)
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801216e:	7dfb      	ldrb	r3, [r7, #23]
 8012170:	461a      	mov	r2, r3
 8012172:	68b9      	ldr	r1, [r7, #8]
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f7ff fe93 	bl	8011ea0 <etharp_output_to_arp_index>
 801217a:	4603      	mov	r3, r0
 801217c:	e018      	b.n	80121b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801217e:	7dfb      	ldrb	r3, [r7, #23]
 8012180:	3301      	adds	r3, #1
 8012182:	75fb      	strb	r3, [r7, #23]
 8012184:	7dfb      	ldrb	r3, [r7, #23]
 8012186:	2b09      	cmp	r3, #9
 8012188:	d9ca      	bls.n	8012120 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801218a:	68ba      	ldr	r2, [r7, #8]
 801218c:	69b9      	ldr	r1, [r7, #24]
 801218e:	68f8      	ldr	r0, [r7, #12]
 8012190:	f000 f822 	bl	80121d8 <etharp_query>
 8012194:	4603      	mov	r3, r0
 8012196:	e00b      	b.n	80121b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801219e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	68b9      	ldr	r1, [r7, #8]
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f001 fd45 	bl	8013c38 <ethernet_output>
 80121ae:	4603      	mov	r3, r0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3720      	adds	r7, #32
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	08017428 	.word	0x08017428
 80121bc:	08017578 	.word	0x08017578
 80121c0:	080174a0 	.word	0x080174a0
 80121c4:	080175c8 	.word	0x080175c8
 80121c8:	08017568 	.word	0x08017568
 80121cc:	08017c0c 	.word	0x08017c0c
 80121d0:	20008dcc 	.word	0x20008dcc
 80121d4:	20008cdc 	.word	0x20008cdc

080121d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08c      	sub	sp, #48	; 0x30
 80121dc:	af02      	add	r7, sp, #8
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	3326      	adds	r3, #38	; 0x26
 80121e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80121ea:	23ff      	movs	r3, #255	; 0xff
 80121ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68f9      	ldr	r1, [r7, #12]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f000 fe0e 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d10c      	bne.n	8012220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801220e:	2be0      	cmp	r3, #224	; 0xe0
 8012210:	d006      	beq.n	8012220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d003      	beq.n	8012220 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012220:	f06f 030f 	mvn.w	r3, #15
 8012224:	e101      	b.n	801242a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	2101      	movs	r1, #1
 801222a:	68b8      	ldr	r0, [r7, #8]
 801222c:	f7ff fb60 	bl	80118f0 <etharp_find_entry>
 8012230:	4603      	mov	r3, r0
 8012232:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012238:	2b00      	cmp	r3, #0
 801223a:	da02      	bge.n	8012242 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801223c:	8a7b      	ldrh	r3, [r7, #18]
 801223e:	b25b      	sxtb	r3, r3
 8012240:	e0f3      	b.n	801242a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012242:	8a7b      	ldrh	r3, [r7, #18]
 8012244:	2b7e      	cmp	r3, #126	; 0x7e
 8012246:	d906      	bls.n	8012256 <etharp_query+0x7e>
 8012248:	4b7a      	ldr	r3, [pc, #488]	; (8012434 <etharp_query+0x25c>)
 801224a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801224e:	497a      	ldr	r1, [pc, #488]	; (8012438 <etharp_query+0x260>)
 8012250:	487a      	ldr	r0, [pc, #488]	; (801243c <etharp_query+0x264>)
 8012252:	f001 fe89 	bl	8013f68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012256:	8a7b      	ldrh	r3, [r7, #18]
 8012258:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801225a:	7c7a      	ldrb	r2, [r7, #17]
 801225c:	4978      	ldr	r1, [pc, #480]	; (8012440 <etharp_query+0x268>)
 801225e:	4613      	mov	r3, r2
 8012260:	005b      	lsls	r3, r3, #1
 8012262:	4413      	add	r3, r2
 8012264:	00db      	lsls	r3, r3, #3
 8012266:	440b      	add	r3, r1
 8012268:	3314      	adds	r3, #20
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d115      	bne.n	801229c <etharp_query+0xc4>
    is_new_entry = 1;
 8012270:	2301      	movs	r3, #1
 8012272:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012274:	7c7a      	ldrb	r2, [r7, #17]
 8012276:	4972      	ldr	r1, [pc, #456]	; (8012440 <etharp_query+0x268>)
 8012278:	4613      	mov	r3, r2
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	4413      	add	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	440b      	add	r3, r1
 8012282:	3314      	adds	r3, #20
 8012284:	2201      	movs	r2, #1
 8012286:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012288:	7c7a      	ldrb	r2, [r7, #17]
 801228a:	496d      	ldr	r1, [pc, #436]	; (8012440 <etharp_query+0x268>)
 801228c:	4613      	mov	r3, r2
 801228e:	005b      	lsls	r3, r3, #1
 8012290:	4413      	add	r3, r2
 8012292:	00db      	lsls	r3, r3, #3
 8012294:	440b      	add	r3, r1
 8012296:	3308      	adds	r3, #8
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801229c:	7c7a      	ldrb	r2, [r7, #17]
 801229e:	4968      	ldr	r1, [pc, #416]	; (8012440 <etharp_query+0x268>)
 80122a0:	4613      	mov	r3, r2
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	4413      	add	r3, r2
 80122a6:	00db      	lsls	r3, r3, #3
 80122a8:	440b      	add	r3, r1
 80122aa:	3314      	adds	r3, #20
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d011      	beq.n	80122d6 <etharp_query+0xfe>
 80122b2:	7c7a      	ldrb	r2, [r7, #17]
 80122b4:	4962      	ldr	r1, [pc, #392]	; (8012440 <etharp_query+0x268>)
 80122b6:	4613      	mov	r3, r2
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4413      	add	r3, r2
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	440b      	add	r3, r1
 80122c0:	3314      	adds	r3, #20
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d806      	bhi.n	80122d6 <etharp_query+0xfe>
 80122c8:	4b5a      	ldr	r3, [pc, #360]	; (8012434 <etharp_query+0x25c>)
 80122ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80122ce:	495d      	ldr	r1, [pc, #372]	; (8012444 <etharp_query+0x26c>)
 80122d0:	485a      	ldr	r0, [pc, #360]	; (801243c <etharp_query+0x264>)
 80122d2:	f001 fe49 	bl	8013f68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80122d6:	6a3b      	ldr	r3, [r7, #32]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d102      	bne.n	80122e2 <etharp_query+0x10a>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d10c      	bne.n	80122fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80122e2:	68b9      	ldr	r1, [r7, #8]
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f000 f963 	bl	80125b0 <etharp_request>
 80122ea:	4603      	mov	r3, r0
 80122ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d102      	bne.n	80122fc <etharp_query+0x124>
      return result;
 80122f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80122fa:	e096      	b.n	801242a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <etharp_query+0x138>
 8012302:	4b4c      	ldr	r3, [pc, #304]	; (8012434 <etharp_query+0x25c>)
 8012304:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012308:	494f      	ldr	r1, [pc, #316]	; (8012448 <etharp_query+0x270>)
 801230a:	484c      	ldr	r0, [pc, #304]	; (801243c <etharp_query+0x264>)
 801230c:	f001 fe2c 	bl	8013f68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012310:	7c7a      	ldrb	r2, [r7, #17]
 8012312:	494b      	ldr	r1, [pc, #300]	; (8012440 <etharp_query+0x268>)
 8012314:	4613      	mov	r3, r2
 8012316:	005b      	lsls	r3, r3, #1
 8012318:	4413      	add	r3, r2
 801231a:	00db      	lsls	r3, r3, #3
 801231c:	440b      	add	r3, r1
 801231e:	3314      	adds	r3, #20
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b01      	cmp	r3, #1
 8012324:	d917      	bls.n	8012356 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012326:	4a49      	ldr	r2, [pc, #292]	; (801244c <etharp_query+0x274>)
 8012328:	7c7b      	ldrb	r3, [r7, #17]
 801232a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801232c:	7c7a      	ldrb	r2, [r7, #17]
 801232e:	4613      	mov	r3, r2
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	4413      	add	r3, r2
 8012334:	00db      	lsls	r3, r3, #3
 8012336:	3308      	adds	r3, #8
 8012338:	4a41      	ldr	r2, [pc, #260]	; (8012440 <etharp_query+0x268>)
 801233a:	4413      	add	r3, r2
 801233c:	3304      	adds	r3, #4
 801233e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012342:	9200      	str	r2, [sp, #0]
 8012344:	697a      	ldr	r2, [r7, #20]
 8012346:	6879      	ldr	r1, [r7, #4]
 8012348:	68f8      	ldr	r0, [r7, #12]
 801234a:	f001 fc75 	bl	8013c38 <ethernet_output>
 801234e:	4603      	mov	r3, r0
 8012350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012354:	e067      	b.n	8012426 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012356:	7c7a      	ldrb	r2, [r7, #17]
 8012358:	4939      	ldr	r1, [pc, #228]	; (8012440 <etharp_query+0x268>)
 801235a:	4613      	mov	r3, r2
 801235c:	005b      	lsls	r3, r3, #1
 801235e:	4413      	add	r3, r2
 8012360:	00db      	lsls	r3, r3, #3
 8012362:	440b      	add	r3, r1
 8012364:	3314      	adds	r3, #20
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	2b01      	cmp	r3, #1
 801236a:	d15c      	bne.n	8012426 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801236c:	2300      	movs	r3, #0
 801236e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012374:	e01c      	b.n	80123b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	895a      	ldrh	r2, [r3, #10]
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	891b      	ldrh	r3, [r3, #8]
 801237e:	429a      	cmp	r2, r3
 8012380:	d10a      	bne.n	8012398 <etharp_query+0x1c0>
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d006      	beq.n	8012398 <etharp_query+0x1c0>
 801238a:	4b2a      	ldr	r3, [pc, #168]	; (8012434 <etharp_query+0x25c>)
 801238c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012390:	492f      	ldr	r1, [pc, #188]	; (8012450 <etharp_query+0x278>)
 8012392:	482a      	ldr	r0, [pc, #168]	; (801243c <etharp_query+0x264>)
 8012394:	f001 fde8 	bl	8013f68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	7b1b      	ldrb	r3, [r3, #12]
 801239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d002      	beq.n	80123aa <etharp_query+0x1d2>
        copy_needed = 1;
 80123a4:	2301      	movs	r3, #1
 80123a6:	61bb      	str	r3, [r7, #24]
        break;
 80123a8:	e005      	b.n	80123b6 <etharp_query+0x1de>
      }
      p = p->next;
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d1df      	bne.n	8012376 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80123c2:	200e      	movs	r0, #14
 80123c4:	f7f9 fd6a 	bl	800be9c <pbuf_clone>
 80123c8:	61f8      	str	r0, [r7, #28]
 80123ca:	e004      	b.n	80123d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80123d0:	69f8      	ldr	r0, [r7, #28]
 80123d2:	f7f9 fba7 	bl	800bb24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d021      	beq.n	8012420 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80123dc:	7c7a      	ldrb	r2, [r7, #17]
 80123de:	4918      	ldr	r1, [pc, #96]	; (8012440 <etharp_query+0x268>)
 80123e0:	4613      	mov	r3, r2
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	4413      	add	r3, r2
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	440b      	add	r3, r1
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00a      	beq.n	8012406 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80123f0:	7c7a      	ldrb	r2, [r7, #17]
 80123f2:	4913      	ldr	r1, [pc, #76]	; (8012440 <etharp_query+0x268>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4618      	mov	r0, r3
 8012402:	f7f9 faef 	bl	800b9e4 <pbuf_free>
      }
      arp_table[i].q = p;
 8012406:	7c7a      	ldrb	r2, [r7, #17]
 8012408:	490d      	ldr	r1, [pc, #52]	; (8012440 <etharp_query+0x268>)
 801240a:	4613      	mov	r3, r2
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	4413      	add	r3, r2
 8012410:	00db      	lsls	r3, r3, #3
 8012412:	440b      	add	r3, r1
 8012414:	69fa      	ldr	r2, [r7, #28]
 8012416:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801241e:	e002      	b.n	8012426 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012420:	23ff      	movs	r3, #255	; 0xff
 8012422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801242a:	4618      	mov	r0, r3
 801242c:	3728      	adds	r7, #40	; 0x28
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	08017428 	.word	0x08017428
 8012438:	080175d4 	.word	0x080175d4
 801243c:	080174a0 	.word	0x080174a0
 8012440:	20008cdc 	.word	0x20008cdc
 8012444:	080175e4 	.word	0x080175e4
 8012448:	080175c8 	.word	0x080175c8
 801244c:	20008dcc 	.word	0x20008dcc
 8012450:	0801760c 	.word	0x0801760c

08012454 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b08a      	sub	sp, #40	; 0x28
 8012458:	af02      	add	r7, sp, #8
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d106      	bne.n	801247a <etharp_raw+0x26>
 801246c:	4b3a      	ldr	r3, [pc, #232]	; (8012558 <etharp_raw+0x104>)
 801246e:	f240 4257 	movw	r2, #1111	; 0x457
 8012472:	493a      	ldr	r1, [pc, #232]	; (801255c <etharp_raw+0x108>)
 8012474:	483a      	ldr	r0, [pc, #232]	; (8012560 <etharp_raw+0x10c>)
 8012476:	f001 fd77 	bl	8013f68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801247a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801247e:	211c      	movs	r1, #28
 8012480:	200e      	movs	r0, #14
 8012482:	f7f8 ffcb 	bl	800b41c <pbuf_alloc>
 8012486:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d102      	bne.n	8012494 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801248e:	f04f 33ff 	mov.w	r3, #4294967295
 8012492:	e05d      	b.n	8012550 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	895b      	ldrh	r3, [r3, #10]
 8012498:	2b1b      	cmp	r3, #27
 801249a:	d806      	bhi.n	80124aa <etharp_raw+0x56>
 801249c:	4b2e      	ldr	r3, [pc, #184]	; (8012558 <etharp_raw+0x104>)
 801249e:	f240 4262 	movw	r2, #1122	; 0x462
 80124a2:	4930      	ldr	r1, [pc, #192]	; (8012564 <etharp_raw+0x110>)
 80124a4:	482e      	ldr	r0, [pc, #184]	; (8012560 <etharp_raw+0x10c>)
 80124a6:	f001 fd5f 	bl	8013f68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80124aa:	69bb      	ldr	r3, [r7, #24]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80124b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7f7 ff58 	bl	800a368 <lwip_htons>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80124c6:	2b06      	cmp	r3, #6
 80124c8:	d006      	beq.n	80124d8 <etharp_raw+0x84>
 80124ca:	4b23      	ldr	r3, [pc, #140]	; (8012558 <etharp_raw+0x104>)
 80124cc:	f240 4269 	movw	r2, #1129	; 0x469
 80124d0:	4925      	ldr	r1, [pc, #148]	; (8012568 <etharp_raw+0x114>)
 80124d2:	4823      	ldr	r0, [pc, #140]	; (8012560 <etharp_raw+0x10c>)
 80124d4:	f001 fd48 	bl	8013f68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	3308      	adds	r3, #8
 80124dc:	2206      	movs	r2, #6
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f001 fd2b 	bl	8013f3c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	3312      	adds	r3, #18
 80124ea:	2206      	movs	r2, #6
 80124ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124ee:	4618      	mov	r0, r3
 80124f0:	f001 fd24 	bl	8013f3c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	330e      	adds	r3, #14
 80124f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124fa:	6812      	ldr	r2, [r2, #0]
 80124fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	3318      	adds	r3, #24
 8012502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012504:	6812      	ldr	r2, [r2, #0]
 8012506:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	2200      	movs	r2, #0
 801250c:	701a      	strb	r2, [r3, #0]
 801250e:	2200      	movs	r2, #0
 8012510:	f042 0201 	orr.w	r2, r2, #1
 8012514:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	2200      	movs	r2, #0
 801251a:	f042 0208 	orr.w	r2, r2, #8
 801251e:	709a      	strb	r2, [r3, #2]
 8012520:	2200      	movs	r2, #0
 8012522:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	2206      	movs	r2, #6
 8012528:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	2204      	movs	r2, #4
 801252e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012530:	f640 0306 	movw	r3, #2054	; 0x806
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	69b9      	ldr	r1, [r7, #24]
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f001 fb7b 	bl	8013c38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012542:	69b8      	ldr	r0, [r7, #24]
 8012544:	f7f9 fa4e 	bl	800b9e4 <pbuf_free>
  p = NULL;
 8012548:	2300      	movs	r3, #0
 801254a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801254c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012550:	4618      	mov	r0, r3
 8012552:	3720      	adds	r7, #32
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	08017428 	.word	0x08017428
 801255c:	08017578 	.word	0x08017578
 8012560:	080174a0 	.word	0x080174a0
 8012564:	08017628 	.word	0x08017628
 8012568:	0801765c 	.word	0x0801765c

0801256c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af04      	add	r7, sp, #16
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012588:	2201      	movs	r2, #1
 801258a:	9203      	str	r2, [sp, #12]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	9202      	str	r2, [sp, #8]
 8012590:	4a06      	ldr	r2, [pc, #24]	; (80125ac <etharp_request_dst+0x40>)
 8012592:	9201      	str	r2, [sp, #4]
 8012594:	9300      	str	r3, [sp, #0]
 8012596:	4603      	mov	r3, r0
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7ff ff5a 	bl	8012454 <etharp_raw>
 80125a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	08017c14 	.word	0x08017c14

080125b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80125ba:	4a05      	ldr	r2, [pc, #20]	; (80125d0 <etharp_request+0x20>)
 80125bc:	6839      	ldr	r1, [r7, #0]
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7ff ffd4 	bl	801256c <etharp_request_dst>
 80125c4:	4603      	mov	r3, r0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	08017c0c 	.word	0x08017c0c

080125d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b08e      	sub	sp, #56	; 0x38
 80125d8:	af04      	add	r7, sp, #16
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80125de:	4b79      	ldr	r3, [pc, #484]	; (80127c4 <icmp_input+0x1f0>)
 80125e0:	689b      	ldr	r3, [r3, #8]
 80125e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	f003 030f 	and.w	r3, r3, #15
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80125f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125f6:	2b13      	cmp	r3, #19
 80125f8:	f240 80cd 	bls.w	8012796 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	895b      	ldrh	r3, [r3, #10]
 8012600:	2b03      	cmp	r3, #3
 8012602:	f240 80ca 	bls.w	801279a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012610:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 80b7 	beq.w	8012788 <icmp_input+0x1b4>
 801261a:	2b08      	cmp	r3, #8
 801261c:	f040 80b7 	bne.w	801278e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012620:	4b69      	ldr	r3, [pc, #420]	; (80127c8 <icmp_input+0x1f4>)
 8012622:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012624:	4b67      	ldr	r3, [pc, #412]	; (80127c4 <icmp_input+0x1f0>)
 8012626:	695b      	ldr	r3, [r3, #20]
 8012628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801262c:	2be0      	cmp	r3, #224	; 0xe0
 801262e:	f000 80bb 	beq.w	80127a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012632:	4b64      	ldr	r3, [pc, #400]	; (80127c4 <icmp_input+0x1f0>)
 8012634:	695b      	ldr	r3, [r3, #20]
 8012636:	4a63      	ldr	r2, [pc, #396]	; (80127c4 <icmp_input+0x1f0>)
 8012638:	6812      	ldr	r2, [r2, #0]
 801263a:	4611      	mov	r1, r2
 801263c:	4618      	mov	r0, r3
 801263e:	f000 fbed 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	f040 80b1 	bne.w	80127ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	891b      	ldrh	r3, [r3, #8]
 801264e:	2b07      	cmp	r3, #7
 8012650:	f240 80a5 	bls.w	801279e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012656:	330e      	adds	r3, #14
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7f9 f92c 	bl	800b8b8 <pbuf_add_header>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d04b      	beq.n	80126fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	891a      	ldrh	r2, [r3, #8]
 801266a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801266c:	4413      	add	r3, r2
 801266e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	891b      	ldrh	r3, [r3, #8]
 8012674:	8b7a      	ldrh	r2, [r7, #26]
 8012676:	429a      	cmp	r2, r3
 8012678:	f0c0 809a 	bcc.w	80127b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801267c:	8b7b      	ldrh	r3, [r7, #26]
 801267e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012682:	4619      	mov	r1, r3
 8012684:	200e      	movs	r0, #14
 8012686:	f7f8 fec9 	bl	800b41c <pbuf_alloc>
 801268a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	2b00      	cmp	r3, #0
 8012690:	f000 8090 	beq.w	80127b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	895b      	ldrh	r3, [r3, #10]
 8012698:	461a      	mov	r2, r3
 801269a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801269c:	3308      	adds	r3, #8
 801269e:	429a      	cmp	r2, r3
 80126a0:	d203      	bcs.n	80126aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80126a2:	6978      	ldr	r0, [r7, #20]
 80126a4:	f7f9 f99e 	bl	800b9e4 <pbuf_free>
          goto icmperr;
 80126a8:	e085      	b.n	80127b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126b2:	4618      	mov	r0, r3
 80126b4:	f001 fc42 	bl	8013f3c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80126b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126ba:	4619      	mov	r1, r3
 80126bc:	6978      	ldr	r0, [r7, #20]
 80126be:	f7f9 f90b 	bl	800b8d8 <pbuf_remove_header>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d009      	beq.n	80126dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80126c8:	4b40      	ldr	r3, [pc, #256]	; (80127cc <icmp_input+0x1f8>)
 80126ca:	22b6      	movs	r2, #182	; 0xb6
 80126cc:	4940      	ldr	r1, [pc, #256]	; (80127d0 <icmp_input+0x1fc>)
 80126ce:	4841      	ldr	r0, [pc, #260]	; (80127d4 <icmp_input+0x200>)
 80126d0:	f001 fc4a 	bl	8013f68 <iprintf>
          pbuf_free(r);
 80126d4:	6978      	ldr	r0, [r7, #20]
 80126d6:	f7f9 f985 	bl	800b9e4 <pbuf_free>
          goto icmperr;
 80126da:	e06c      	b.n	80127b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80126dc:	6879      	ldr	r1, [r7, #4]
 80126de:	6978      	ldr	r0, [r7, #20]
 80126e0:	f7f9 fa98 	bl	800bc14 <pbuf_copy>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d003      	beq.n	80126f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80126ea:	6978      	ldr	r0, [r7, #20]
 80126ec:	f7f9 f97a 	bl	800b9e4 <pbuf_free>
          goto icmperr;
 80126f0:	e061      	b.n	80127b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7f9 f976 	bl	800b9e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	607b      	str	r3, [r7, #4]
 80126fc:	e00f      	b.n	801271e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80126fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012700:	330e      	adds	r3, #14
 8012702:	4619      	mov	r1, r3
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7f9 f8e7 	bl	800b8d8 <pbuf_remove_header>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d006      	beq.n	801271e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012710:	4b2e      	ldr	r3, [pc, #184]	; (80127cc <icmp_input+0x1f8>)
 8012712:	22c7      	movs	r2, #199	; 0xc7
 8012714:	4930      	ldr	r1, [pc, #192]	; (80127d8 <icmp_input+0x204>)
 8012716:	482f      	ldr	r0, [pc, #188]	; (80127d4 <icmp_input+0x200>)
 8012718:	f001 fc26 	bl	8013f68 <iprintf>
          goto icmperr;
 801271c:	e04b      	b.n	80127b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012726:	4619      	mov	r1, r3
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7f9 f8c5 	bl	800b8b8 <pbuf_add_header>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d12b      	bne.n	801278c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012742:	4b20      	ldr	r3, [pc, #128]	; (80127c4 <icmp_input+0x1f0>)
 8012744:	691a      	ldr	r2, [r3, #16]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	2200      	movs	r2, #0
 8012754:	709a      	strb	r2, [r3, #2]
 8012756:	2200      	movs	r2, #0
 8012758:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	22ff      	movs	r2, #255	; 0xff
 801275e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2200      	movs	r2, #0
 8012764:	729a      	strb	r2, [r3, #10]
 8012766:	2200      	movs	r2, #0
 8012768:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	9302      	str	r3, [sp, #8]
 801276e:	2301      	movs	r3, #1
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	2300      	movs	r3, #0
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	23ff      	movs	r3, #255	; 0xff
 8012778:	2200      	movs	r2, #0
 801277a:	69f9      	ldr	r1, [r7, #28]
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 fa75 	bl	8012c6c <ip4_output_if>
 8012782:	4603      	mov	r3, r0
 8012784:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012786:	e001      	b.n	801278c <icmp_input+0x1b8>
      break;
 8012788:	bf00      	nop
 801278a:	e000      	b.n	801278e <icmp_input+0x1ba>
      break;
 801278c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7f9 f928 	bl	800b9e4 <pbuf_free>
  return;
 8012794:	e013      	b.n	80127be <icmp_input+0x1ea>
    goto lenerr;
 8012796:	bf00      	nop
 8012798:	e002      	b.n	80127a0 <icmp_input+0x1cc>
    goto lenerr;
 801279a:	bf00      	nop
 801279c:	e000      	b.n	80127a0 <icmp_input+0x1cc>
        goto lenerr;
 801279e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7f9 f91f 	bl	800b9e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127a6:	e00a      	b.n	80127be <icmp_input+0x1ea>
        goto icmperr;
 80127a8:	bf00      	nop
 80127aa:	e004      	b.n	80127b6 <icmp_input+0x1e2>
        goto icmperr;
 80127ac:	bf00      	nop
 80127ae:	e002      	b.n	80127b6 <icmp_input+0x1e2>
          goto icmperr;
 80127b0:	bf00      	nop
 80127b2:	e000      	b.n	80127b6 <icmp_input+0x1e2>
          goto icmperr;
 80127b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7f9 f914 	bl	800b9e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80127be:	3728      	adds	r7, #40	; 0x28
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	2000570c 	.word	0x2000570c
 80127c8:	20005720 	.word	0x20005720
 80127cc:	080176a0 	.word	0x080176a0
 80127d0:	080176d8 	.word	0x080176d8
 80127d4:	08017710 	.word	0x08017710
 80127d8:	08017738 	.word	0x08017738

080127dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	460b      	mov	r3, r1
 80127e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80127e8:	78fb      	ldrb	r3, [r7, #3]
 80127ea:	461a      	mov	r2, r3
 80127ec:	2103      	movs	r1, #3
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 f814 	bl	801281c <icmp_send_response>
}
 80127f4:	bf00      	nop
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	460b      	mov	r3, r1
 8012806:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	461a      	mov	r2, r3
 801280c:	210b      	movs	r1, #11
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f804 	bl	801281c <icmp_send_response>
}
 8012814:	bf00      	nop
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b08c      	sub	sp, #48	; 0x30
 8012820:	af04      	add	r7, sp, #16
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	460b      	mov	r3, r1
 8012826:	70fb      	strb	r3, [r7, #3]
 8012828:	4613      	mov	r3, r2
 801282a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801282c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012830:	2124      	movs	r1, #36	; 0x24
 8012832:	2022      	movs	r0, #34	; 0x22
 8012834:	f7f8 fdf2 	bl	800b41c <pbuf_alloc>
 8012838:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d04c      	beq.n	80128da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	895b      	ldrh	r3, [r3, #10]
 8012844:	2b23      	cmp	r3, #35	; 0x23
 8012846:	d806      	bhi.n	8012856 <icmp_send_response+0x3a>
 8012848:	4b26      	ldr	r3, [pc, #152]	; (80128e4 <icmp_send_response+0xc8>)
 801284a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801284e:	4926      	ldr	r1, [pc, #152]	; (80128e8 <icmp_send_response+0xcc>)
 8012850:	4826      	ldr	r0, [pc, #152]	; (80128ec <icmp_send_response+0xd0>)
 8012852:	f001 fb89 	bl	8013f68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	78fa      	ldrb	r2, [r7, #3]
 8012866:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	78ba      	ldrb	r2, [r7, #2]
 801286c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	2200      	movs	r2, #0
 8012872:	711a      	strb	r2, [r3, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	2200      	movs	r2, #0
 801287c:	719a      	strb	r2, [r3, #6]
 801287e:	2200      	movs	r2, #0
 8012880:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	f103 0008 	add.w	r0, r3, #8
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	221c      	movs	r2, #28
 8012890:	4619      	mov	r1, r3
 8012892:	f001 fb53 	bl	8013f3c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801289c:	f107 030c 	add.w	r3, r7, #12
 80128a0:	4618      	mov	r0, r3
 80128a2:	f000 f825 	bl	80128f0 <ip4_route>
 80128a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d011      	beq.n	80128d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2200      	movs	r2, #0
 80128b2:	709a      	strb	r2, [r3, #2]
 80128b4:	2200      	movs	r2, #0
 80128b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80128b8:	f107 020c 	add.w	r2, r7, #12
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	9302      	str	r3, [sp, #8]
 80128c0:	2301      	movs	r3, #1
 80128c2:	9301      	str	r3, [sp, #4]
 80128c4:	2300      	movs	r3, #0
 80128c6:	9300      	str	r3, [sp, #0]
 80128c8:	23ff      	movs	r3, #255	; 0xff
 80128ca:	2100      	movs	r1, #0
 80128cc:	69f8      	ldr	r0, [r7, #28]
 80128ce:	f000 f9cd 	bl	8012c6c <ip4_output_if>
  }
  pbuf_free(q);
 80128d2:	69f8      	ldr	r0, [r7, #28]
 80128d4:	f7f9 f886 	bl	800b9e4 <pbuf_free>
 80128d8:	e000      	b.n	80128dc <icmp_send_response+0xc0>
    return;
 80128da:	bf00      	nop
}
 80128dc:	3720      	adds	r7, #32
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	080176a0 	.word	0x080176a0
 80128e8:	0801776c 	.word	0x0801776c
 80128ec:	08017710 	.word	0x08017710

080128f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b085      	sub	sp, #20
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80128f8:	4b33      	ldr	r3, [pc, #204]	; (80129c8 <ip4_route+0xd8>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	60fb      	str	r3, [r7, #12]
 80128fe:	e036      	b.n	801296e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012906:	f003 0301 	and.w	r3, r3, #1
 801290a:	b2db      	uxtb	r3, r3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d02b      	beq.n	8012968 <ip4_route+0x78>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012916:	089b      	lsrs	r3, r3, #2
 8012918:	f003 0301 	and.w	r3, r3, #1
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d022      	beq.n	8012968 <ip4_route+0x78>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	3304      	adds	r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d01d      	beq.n	8012968 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681a      	ldr	r2, [r3, #0]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	3304      	adds	r3, #4
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	405a      	eors	r2, r3
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	3308      	adds	r3, #8
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4013      	ands	r3, r2
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	e038      	b.n	80129ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801294e:	f003 0302 	and.w	r3, r3, #2
 8012952:	2b00      	cmp	r3, #0
 8012954:	d108      	bne.n	8012968 <ip4_route+0x78>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	330c      	adds	r3, #12
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	429a      	cmp	r2, r3
 8012962:	d101      	bne.n	8012968 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	e028      	b.n	80129ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	60fb      	str	r3, [r7, #12]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1c5      	bne.n	8012900 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012974:	4b15      	ldr	r3, [pc, #84]	; (80129cc <ip4_route+0xdc>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d01a      	beq.n	80129b2 <ip4_route+0xc2>
 801297c:	4b13      	ldr	r3, [pc, #76]	; (80129cc <ip4_route+0xdc>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d012      	beq.n	80129b2 <ip4_route+0xc2>
 801298c:	4b0f      	ldr	r3, [pc, #60]	; (80129cc <ip4_route+0xdc>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012994:	f003 0304 	and.w	r3, r3, #4
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00a      	beq.n	80129b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801299c:	4b0b      	ldr	r3, [pc, #44]	; (80129cc <ip4_route+0xdc>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	3304      	adds	r3, #4
 80129a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d004      	beq.n	80129b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b7f      	cmp	r3, #127	; 0x7f
 80129b0:	d101      	bne.n	80129b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80129b2:	2300      	movs	r3, #0
 80129b4:	e001      	b.n	80129ba <ip4_route+0xca>
  }

  return netif_default;
 80129b6:	4b05      	ldr	r3, [pc, #20]	; (80129cc <ip4_route+0xdc>)
 80129b8:	681b      	ldr	r3, [r3, #0]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3714      	adds	r7, #20
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	20008c70 	.word	0x20008c70
 80129cc:	20008c74 	.word	0x20008c74

080129d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129de:	f003 0301 	and.w	r3, r3, #1
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d016      	beq.n	8012a16 <ip4_input_accept+0x46>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	3304      	adds	r3, #4
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d011      	beq.n	8012a16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80129f2:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <ip4_input_accept+0x50>)
 80129f4:	695a      	ldr	r2, [r3, #20]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	3304      	adds	r3, #4
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d008      	beq.n	8012a12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012a00:	4b07      	ldr	r3, [pc, #28]	; (8012a20 <ip4_input_accept+0x50>)
 8012a02:	695b      	ldr	r3, [r3, #20]
 8012a04:	6879      	ldr	r1, [r7, #4]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 fa08 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8012a0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012a12:	2301      	movs	r3, #1
 8012a14:	e000      	b.n	8012a18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012a16:	2300      	movs	r3, #0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	2000570c 	.word	0x2000570c

08012a24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b086      	sub	sp, #24
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	091b      	lsrs	r3, r3, #4
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	2b04      	cmp	r3, #4
 8012a3e:	d004      	beq.n	8012a4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7f8 ffcf 	bl	800b9e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e107      	b.n	8012c5a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	f003 030f 	and.w	r3, r3, #15
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	885b      	ldrh	r3, [r3, #2]
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7f7 fc81 	bl	800a368 <lwip_htons>
 8012a66:	4603      	mov	r3, r0
 8012a68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	891b      	ldrh	r3, [r3, #8]
 8012a6e:	89ba      	ldrh	r2, [r7, #12]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d204      	bcs.n	8012a7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012a74:	89bb      	ldrh	r3, [r7, #12]
 8012a76:	4619      	mov	r1, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7f8 fe2d 	bl	800b6d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	895b      	ldrh	r3, [r3, #10]
 8012a82:	89fa      	ldrh	r2, [r7, #14]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d807      	bhi.n	8012a98 <ip4_input+0x74>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	891b      	ldrh	r3, [r3, #8]
 8012a8c:	89ba      	ldrh	r2, [r7, #12]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d802      	bhi.n	8012a98 <ip4_input+0x74>
 8012a92:	89fb      	ldrh	r3, [r7, #14]
 8012a94:	2b13      	cmp	r3, #19
 8012a96:	d804      	bhi.n	8012aa2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7f8 ffa3 	bl	800b9e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	e0db      	b.n	8012c5a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	4a6f      	ldr	r2, [pc, #444]	; (8012c64 <ip4_input+0x240>)
 8012aa8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	4a6d      	ldr	r2, [pc, #436]	; (8012c64 <ip4_input+0x240>)
 8012ab0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ab2:	4b6c      	ldr	r3, [pc, #432]	; (8012c64 <ip4_input+0x240>)
 8012ab4:	695b      	ldr	r3, [r3, #20]
 8012ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012aba:	2be0      	cmp	r3, #224	; 0xe0
 8012abc:	d112      	bne.n	8012ae4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ac4:	f003 0301 	and.w	r3, r3, #1
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d007      	beq.n	8012ade <ip4_input+0xba>
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	3304      	adds	r3, #4
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <ip4_input+0xba>
      netif = inp;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	613b      	str	r3, [r7, #16]
 8012adc:	e02a      	b.n	8012b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	613b      	str	r3, [r7, #16]
 8012ae2:	e027      	b.n	8012b34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012ae4:	6838      	ldr	r0, [r7, #0]
 8012ae6:	f7ff ff73 	bl	80129d0 <ip4_input_accept>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <ip4_input+0xd2>
      netif = inp;
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	613b      	str	r3, [r7, #16]
 8012af4:	e01e      	b.n	8012b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012af6:	2300      	movs	r3, #0
 8012af8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012afa:	4b5a      	ldr	r3, [pc, #360]	; (8012c64 <ip4_input+0x240>)
 8012afc:	695b      	ldr	r3, [r3, #20]
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	2b7f      	cmp	r3, #127	; 0x7f
 8012b02:	d017      	beq.n	8012b34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012b04:	4b58      	ldr	r3, [pc, #352]	; (8012c68 <ip4_input+0x244>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	613b      	str	r3, [r7, #16]
 8012b0a:	e00e      	b.n	8012b2a <ip4_input+0x106>
          if (netif == inp) {
 8012b0c:	693a      	ldr	r2, [r7, #16]
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d006      	beq.n	8012b22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012b14:	6938      	ldr	r0, [r7, #16]
 8012b16:	f7ff ff5b 	bl	80129d0 <ip4_input_accept>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d108      	bne.n	8012b32 <ip4_input+0x10e>
 8012b20:	e000      	b.n	8012b24 <ip4_input+0x100>
            continue;
 8012b22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	613b      	str	r3, [r7, #16]
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d1ed      	bne.n	8012b0c <ip4_input+0xe8>
 8012b30:	e000      	b.n	8012b34 <ip4_input+0x110>
            break;
 8012b32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b34:	4b4b      	ldr	r3, [pc, #300]	; (8012c64 <ip4_input+0x240>)
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f000 f96e 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d105      	bne.n	8012b52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012b46:	4b47      	ldr	r3, [pc, #284]	; (8012c64 <ip4_input+0x240>)
 8012b48:	691b      	ldr	r3, [r3, #16]
 8012b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b4e:	2be0      	cmp	r3, #224	; 0xe0
 8012b50:	d104      	bne.n	8012b5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7f8 ff46 	bl	800b9e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	e07e      	b.n	8012c5a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d104      	bne.n	8012b6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7f8 ff3e 	bl	800b9e4 <pbuf_free>
    return ERR_OK;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e076      	b.n	8012c5a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	88db      	ldrh	r3, [r3, #6]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	461a      	mov	r2, r3
 8012b74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012b78:	4013      	ands	r3, r2
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00b      	beq.n	8012b96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f000 fc92 	bl	80134a8 <ip4_reass>
 8012b84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d101      	bne.n	8012b90 <ip4_input+0x16c>
      return ERR_OK;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	e064      	b.n	8012c5a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012b96:	4a33      	ldr	r2, [pc, #204]	; (8012c64 <ip4_input+0x240>)
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012b9c:	4a31      	ldr	r2, [pc, #196]	; (8012c64 <ip4_input+0x240>)
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012ba2:	4a30      	ldr	r2, [pc, #192]	; (8012c64 <ip4_input+0x240>)
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	f003 030f 	and.w	r3, r3, #15
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	4b2a      	ldr	r3, [pc, #168]	; (8012c64 <ip4_input+0x240>)
 8012bba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012bbc:	89fb      	ldrh	r3, [r7, #14]
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7f8 fe89 	bl	800b8d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	7a5b      	ldrb	r3, [r3, #9]
 8012bca:	2b11      	cmp	r3, #17
 8012bcc:	d006      	beq.n	8012bdc <ip4_input+0x1b8>
 8012bce:	2b11      	cmp	r3, #17
 8012bd0:	dc13      	bgt.n	8012bfa <ip4_input+0x1d6>
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d00c      	beq.n	8012bf0 <ip4_input+0x1cc>
 8012bd6:	2b06      	cmp	r3, #6
 8012bd8:	d005      	beq.n	8012be6 <ip4_input+0x1c2>
 8012bda:	e00e      	b.n	8012bfa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012bdc:	6839      	ldr	r1, [r7, #0]
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7fe fc68 	bl	80114b4 <udp_input>
        break;
 8012be4:	e026      	b.n	8012c34 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012be6:	6839      	ldr	r1, [r7, #0]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7fa fd23 	bl	800d634 <tcp_input>
        break;
 8012bee:	e021      	b.n	8012c34 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7ff fcee 	bl	80125d4 <icmp_input>
        break;
 8012bf8:	e01c      	b.n	8012c34 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012bfa:	4b1a      	ldr	r3, [pc, #104]	; (8012c64 <ip4_input+0x240>)
 8012bfc:	695b      	ldr	r3, [r3, #20]
 8012bfe:	6939      	ldr	r1, [r7, #16]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f000 f90b 	bl	8012e1c <ip4_addr_isbroadcast_u32>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d10f      	bne.n	8012c2c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c0c:	4b15      	ldr	r3, [pc, #84]	; (8012c64 <ip4_input+0x240>)
 8012c0e:	695b      	ldr	r3, [r3, #20]
 8012c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c14:	2be0      	cmp	r3, #224	; 0xe0
 8012c16:	d009      	beq.n	8012c2c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7f8 fecd 	bl	800b9be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012c24:	2102      	movs	r1, #2
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7ff fdd8 	bl	80127dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f7f8 fed9 	bl	800b9e4 <pbuf_free>
        break;
 8012c32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012c34:	4b0b      	ldr	r3, [pc, #44]	; (8012c64 <ip4_input+0x240>)
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012c3a:	4b0a      	ldr	r3, [pc, #40]	; (8012c64 <ip4_input+0x240>)
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012c40:	4b08      	ldr	r3, [pc, #32]	; (8012c64 <ip4_input+0x240>)
 8012c42:	2200      	movs	r2, #0
 8012c44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012c46:	4b07      	ldr	r3, [pc, #28]	; (8012c64 <ip4_input+0x240>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012c4c:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <ip4_input+0x240>)
 8012c4e:	2200      	movs	r2, #0
 8012c50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012c52:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <ip4_input+0x240>)
 8012c54:	2200      	movs	r2, #0
 8012c56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3718      	adds	r7, #24
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	2000570c 	.word	0x2000570c
 8012c68:	20008c70 	.word	0x20008c70

08012c6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b08a      	sub	sp, #40	; 0x28
 8012c70:	af04      	add	r7, sp, #16
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
 8012c78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d009      	beq.n	8012c98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d003      	beq.n	8012c92 <ip4_output_if+0x26>
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c94:	3304      	adds	r3, #4
 8012c96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012c98:	78fa      	ldrb	r2, [r7, #3]
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	9302      	str	r3, [sp, #8]
 8012c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	4613      	mov	r3, r2
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	6979      	ldr	r1, [r7, #20]
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f000 f805 	bl	8012cc0 <ip4_output_if_src>
 8012cb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3718      	adds	r7, #24
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b088      	sub	sp, #32
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	607a      	str	r2, [r7, #4]
 8012ccc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	7b9b      	ldrb	r3, [r3, #14]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d006      	beq.n	8012ce4 <ip4_output_if_src+0x24>
 8012cd6:	4b4b      	ldr	r3, [pc, #300]	; (8012e04 <ip4_output_if_src+0x144>)
 8012cd8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012cdc:	494a      	ldr	r1, [pc, #296]	; (8012e08 <ip4_output_if_src+0x148>)
 8012cde:	484b      	ldr	r0, [pc, #300]	; (8012e0c <ip4_output_if_src+0x14c>)
 8012ce0:	f001 f942 	bl	8013f68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d060      	beq.n	8012dac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012cea:	2314      	movs	r3, #20
 8012cec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012cee:	2114      	movs	r1, #20
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f7f8 fde1 	bl	800b8b8 <pbuf_add_header>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012cfc:	f06f 0301 	mvn.w	r3, #1
 8012d00:	e07c      	b.n	8012dfc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	895b      	ldrh	r3, [r3, #10]
 8012d0c:	2b13      	cmp	r3, #19
 8012d0e:	d806      	bhi.n	8012d1e <ip4_output_if_src+0x5e>
 8012d10:	4b3c      	ldr	r3, [pc, #240]	; (8012e04 <ip4_output_if_src+0x144>)
 8012d12:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012d16:	493e      	ldr	r1, [pc, #248]	; (8012e10 <ip4_output_if_src+0x150>)
 8012d18:	483c      	ldr	r0, [pc, #240]	; (8012e0c <ip4_output_if_src+0x14c>)
 8012d1a:	f001 f925 	bl	8013f68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	78fa      	ldrb	r2, [r7, #3]
 8012d22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012d2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012d34:	8b7b      	ldrh	r3, [r7, #26]
 8012d36:	089b      	lsrs	r3, r3, #2
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d40:	b2da      	uxtb	r2, r3
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012d4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	891b      	ldrh	r3, [r3, #8]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f7 fb08 	bl	800a368 <lwip_htons>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	2200      	movs	r2, #0
 8012d64:	719a      	strb	r2, [r3, #6]
 8012d66:	2200      	movs	r2, #0
 8012d68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012d6a:	4b2a      	ldr	r3, [pc, #168]	; (8012e14 <ip4_output_if_src+0x154>)
 8012d6c:	881b      	ldrh	r3, [r3, #0]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7f7 fafa 	bl	800a368 <lwip_htons>
 8012d74:	4603      	mov	r3, r0
 8012d76:	461a      	mov	r2, r3
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012d7c:	4b25      	ldr	r3, [pc, #148]	; (8012e14 <ip4_output_if_src+0x154>)
 8012d7e:	881b      	ldrh	r3, [r3, #0]
 8012d80:	3301      	adds	r3, #1
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b23      	ldr	r3, [pc, #140]	; (8012e14 <ip4_output_if_src+0x154>)
 8012d86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d104      	bne.n	8012d98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012d8e:	4b22      	ldr	r3, [pc, #136]	; (8012e18 <ip4_output_if_src+0x158>)
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	60da      	str	r2, [r3, #12]
 8012d96:	e003      	b.n	8012da0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	2200      	movs	r2, #0
 8012da4:	729a      	strb	r2, [r3, #10]
 8012da6:	2200      	movs	r2, #0
 8012da8:	72da      	strb	r2, [r3, #11]
 8012daa:	e00f      	b.n	8012dcc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	895b      	ldrh	r3, [r3, #10]
 8012db0:	2b13      	cmp	r3, #19
 8012db2:	d802      	bhi.n	8012dba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012db4:	f06f 0301 	mvn.w	r3, #1
 8012db8:	e020      	b.n	8012dfc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	691b      	ldr	r3, [r3, #16]
 8012dc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012dc6:	f107 0314 	add.w	r3, r7, #20
 8012dca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d00c      	beq.n	8012dee <ip4_output_if_src+0x12e>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	891a      	ldrh	r2, [r3, #8]
 8012dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d906      	bls.n	8012dee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f000 fd53 	bl	8013890 <ip4_frag>
 8012dea:	4603      	mov	r3, r0
 8012dec:	e006      	b.n	8012dfc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	695b      	ldr	r3, [r3, #20]
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	68f9      	ldr	r1, [r7, #12]
 8012df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012df8:	4798      	blx	r3
 8012dfa:	4603      	mov	r3, r0
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	3720      	adds	r7, #32
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	08017798 	.word	0x08017798
 8012e08:	080177cc 	.word	0x080177cc
 8012e0c:	080177d8 	.word	0x080177d8
 8012e10:	08017800 	.word	0x08017800
 8012e14:	20008dce 	.word	0x20008dce
 8012e18:	08017c08 	.word	0x08017c08

08012e1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b085      	sub	sp, #20
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e30:	d002      	beq.n	8012e38 <ip4_addr_isbroadcast_u32+0x1c>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d101      	bne.n	8012e3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e02a      	b.n	8012e92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e42:	f003 0302 	and.w	r3, r3, #2
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d101      	bne.n	8012e4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e021      	b.n	8012e92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	3304      	adds	r3, #4
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d101      	bne.n	8012e5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	e019      	b.n	8012e92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	3304      	adds	r3, #4
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	405a      	eors	r2, r3
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4013      	ands	r3, r2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d10d      	bne.n	8012e90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	3308      	adds	r3, #8
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	43da      	mvns	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	3308      	adds	r3, #8
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d101      	bne.n	8012e90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	e000      	b.n	8012e92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012e90:	2300      	movs	r3, #0
  }
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3714      	adds	r7, #20
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
	...

08012ea0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012eaa:	4b12      	ldr	r3, [pc, #72]	; (8012ef4 <ip_reass_tmr+0x54>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012eb0:	e018      	b.n	8012ee4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	7fdb      	ldrb	r3, [r3, #31]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d00b      	beq.n	8012ed2 <ip_reass_tmr+0x32>
      r->timer--;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	7fdb      	ldrb	r3, [r3, #31]
 8012ebe:	3b01      	subs	r3, #1
 8012ec0:	b2da      	uxtb	r2, r3
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	60fb      	str	r3, [r7, #12]
 8012ed0:	e008      	b.n	8012ee4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012edc:	68b9      	ldr	r1, [r7, #8]
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 f80a 	bl	8012ef8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d1e3      	bne.n	8012eb2 <ip_reass_tmr+0x12>
    }
  }
}
 8012eea:	bf00      	nop
 8012eec:	bf00      	nop
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	20008dd0 	.word	0x20008dd0

08012ef8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b088      	sub	sp, #32
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012f02:	2300      	movs	r3, #0
 8012f04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d105      	bne.n	8012f1a <ip_reass_free_complete_datagram+0x22>
 8012f0e:	4b45      	ldr	r3, [pc, #276]	; (8013024 <ip_reass_free_complete_datagram+0x12c>)
 8012f10:	22ab      	movs	r2, #171	; 0xab
 8012f12:	4945      	ldr	r1, [pc, #276]	; (8013028 <ip_reass_free_complete_datagram+0x130>)
 8012f14:	4845      	ldr	r0, [pc, #276]	; (801302c <ip_reass_free_complete_datagram+0x134>)
 8012f16:	f001 f827 	bl	8013f68 <iprintf>
  if (prev != NULL) {
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d00a      	beq.n	8012f36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d005      	beq.n	8012f36 <ip_reass_free_complete_datagram+0x3e>
 8012f2a:	4b3e      	ldr	r3, [pc, #248]	; (8013024 <ip_reass_free_complete_datagram+0x12c>)
 8012f2c:	22ad      	movs	r2, #173	; 0xad
 8012f2e:	4940      	ldr	r1, [pc, #256]	; (8013030 <ip_reass_free_complete_datagram+0x138>)
 8012f30:	483e      	ldr	r0, [pc, #248]	; (801302c <ip_reass_free_complete_datagram+0x134>)
 8012f32:	f001 f819 	bl	8013f68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	889b      	ldrh	r3, [r3, #4]
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d12a      	bne.n	8012f9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	6858      	ldr	r0, [r3, #4]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	2214      	movs	r2, #20
 8012f60:	4619      	mov	r1, r3
 8012f62:	f000 ffeb 	bl	8013f3c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012f66:	2101      	movs	r1, #1
 8012f68:	69b8      	ldr	r0, [r7, #24]
 8012f6a:	f7ff fc47 	bl	80127fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012f6e:	69b8      	ldr	r0, [r7, #24]
 8012f70:	f7f8 fdc0 	bl	800baf4 <pbuf_clen>
 8012f74:	4603      	mov	r3, r0
 8012f76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f78:	8bfa      	ldrh	r2, [r7, #30]
 8012f7a:	8a7b      	ldrh	r3, [r7, #18]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f82:	db05      	blt.n	8012f90 <ip_reass_free_complete_datagram+0x98>
 8012f84:	4b27      	ldr	r3, [pc, #156]	; (8013024 <ip_reass_free_complete_datagram+0x12c>)
 8012f86:	22bc      	movs	r2, #188	; 0xbc
 8012f88:	492a      	ldr	r1, [pc, #168]	; (8013034 <ip_reass_free_complete_datagram+0x13c>)
 8012f8a:	4828      	ldr	r0, [pc, #160]	; (801302c <ip_reass_free_complete_datagram+0x134>)
 8012f8c:	f000 ffec 	bl	8013f68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f90:	8bfa      	ldrh	r2, [r7, #30]
 8012f92:	8a7b      	ldrh	r3, [r7, #18]
 8012f94:	4413      	add	r3, r2
 8012f96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012f98:	69b8      	ldr	r0, [r7, #24]
 8012f9a:	f7f8 fd23 	bl	800b9e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012fa4:	e01f      	b.n	8012fe6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012fac:	69bb      	ldr	r3, [r7, #24]
 8012fae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	f7f8 fd9c 	bl	800baf4 <pbuf_clen>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012fc0:	8bfa      	ldrh	r2, [r7, #30]
 8012fc2:	8a7b      	ldrh	r3, [r7, #18]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fca:	db05      	blt.n	8012fd8 <ip_reass_free_complete_datagram+0xe0>
 8012fcc:	4b15      	ldr	r3, [pc, #84]	; (8013024 <ip_reass_free_complete_datagram+0x12c>)
 8012fce:	22cc      	movs	r2, #204	; 0xcc
 8012fd0:	4918      	ldr	r1, [pc, #96]	; (8013034 <ip_reass_free_complete_datagram+0x13c>)
 8012fd2:	4816      	ldr	r0, [pc, #88]	; (801302c <ip_reass_free_complete_datagram+0x134>)
 8012fd4:	f000 ffc8 	bl	8013f68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012fd8:	8bfa      	ldrh	r2, [r7, #30]
 8012fda:	8a7b      	ldrh	r3, [r7, #18]
 8012fdc:	4413      	add	r3, r2
 8012fde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012fe0:	68f8      	ldr	r0, [r7, #12]
 8012fe2:	f7f8 fcff 	bl	800b9e4 <pbuf_free>
  while (p != NULL) {
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1dc      	bne.n	8012fa6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012fec:	6839      	ldr	r1, [r7, #0]
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 f8c2 	bl	8013178 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012ff4:	4b10      	ldr	r3, [pc, #64]	; (8013038 <ip_reass_free_complete_datagram+0x140>)
 8012ff6:	881b      	ldrh	r3, [r3, #0]
 8012ff8:	8bfa      	ldrh	r2, [r7, #30]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d905      	bls.n	801300a <ip_reass_free_complete_datagram+0x112>
 8012ffe:	4b09      	ldr	r3, [pc, #36]	; (8013024 <ip_reass_free_complete_datagram+0x12c>)
 8013000:	22d2      	movs	r2, #210	; 0xd2
 8013002:	490e      	ldr	r1, [pc, #56]	; (801303c <ip_reass_free_complete_datagram+0x144>)
 8013004:	4809      	ldr	r0, [pc, #36]	; (801302c <ip_reass_free_complete_datagram+0x134>)
 8013006:	f000 ffaf 	bl	8013f68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801300a:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <ip_reass_free_complete_datagram+0x140>)
 801300c:	881a      	ldrh	r2, [r3, #0]
 801300e:	8bfb      	ldrh	r3, [r7, #30]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	b29a      	uxth	r2, r3
 8013014:	4b08      	ldr	r3, [pc, #32]	; (8013038 <ip_reass_free_complete_datagram+0x140>)
 8013016:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013018:	8bfb      	ldrh	r3, [r7, #30]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3720      	adds	r7, #32
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	08017830 	.word	0x08017830
 8013028:	0801786c 	.word	0x0801786c
 801302c:	08017878 	.word	0x08017878
 8013030:	080178a0 	.word	0x080178a0
 8013034:	080178b4 	.word	0x080178b4
 8013038:	20008dd4 	.word	0x20008dd4
 801303c:	080178d4 	.word	0x080178d4

08013040 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b08a      	sub	sp, #40	; 0x28
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801304a:	2300      	movs	r3, #0
 801304c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801304e:	2300      	movs	r3, #0
 8013050:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013052:	2300      	movs	r3, #0
 8013054:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013056:	2300      	movs	r3, #0
 8013058:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801305a:	2300      	movs	r3, #0
 801305c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801305e:	4b28      	ldr	r3, [pc, #160]	; (8013100 <ip_reass_remove_oldest_datagram+0xc0>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013064:	e030      	b.n	80130c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013068:	695a      	ldr	r2, [r3, #20]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	429a      	cmp	r2, r3
 8013070:	d10c      	bne.n	801308c <ip_reass_remove_oldest_datagram+0x4c>
 8013072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013074:	699a      	ldr	r2, [r3, #24]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	429a      	cmp	r2, r3
 801307c:	d106      	bne.n	801308c <ip_reass_remove_oldest_datagram+0x4c>
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013080:	899a      	ldrh	r2, [r3, #12]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	889b      	ldrh	r3, [r3, #4]
 8013086:	b29b      	uxth	r3, r3
 8013088:	429a      	cmp	r2, r3
 801308a:	d014      	beq.n	80130b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	3301      	adds	r3, #1
 8013090:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013092:	6a3b      	ldr	r3, [r7, #32]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d104      	bne.n	80130a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	61bb      	str	r3, [r7, #24]
 80130a0:	e009      	b.n	80130b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	7fda      	ldrb	r2, [r3, #31]
 80130a6:	6a3b      	ldr	r3, [r7, #32]
 80130a8:	7fdb      	ldrb	r3, [r3, #31]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d803      	bhi.n	80130b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130b2:	69fb      	ldr	r3, [r7, #28]
 80130b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80130b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d001      	beq.n	80130c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80130c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1cb      	bne.n	8013066 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80130ce:	6a3b      	ldr	r3, [r7, #32]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d008      	beq.n	80130e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80130d4:	69b9      	ldr	r1, [r7, #24]
 80130d6:	6a38      	ldr	r0, [r7, #32]
 80130d8:	f7ff ff0e 	bl	8012ef8 <ip_reass_free_complete_datagram>
 80130dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	4413      	add	r3, r2
 80130e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80130e6:	697a      	ldr	r2, [r7, #20]
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	da02      	bge.n	80130f4 <ip_reass_remove_oldest_datagram+0xb4>
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	dcac      	bgt.n	801304e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80130f4:	697b      	ldr	r3, [r7, #20]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3728      	adds	r7, #40	; 0x28
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20008dd0 	.word	0x20008dd0

08013104 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801310e:	2004      	movs	r0, #4
 8013110:	f7f7 fda2 	bl	800ac58 <memp_malloc>
 8013114:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d110      	bne.n	801313e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801311c:	6839      	ldr	r1, [r7, #0]
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f7ff ff8e 	bl	8013040 <ip_reass_remove_oldest_datagram>
 8013124:	4602      	mov	r2, r0
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	4293      	cmp	r3, r2
 801312a:	dc03      	bgt.n	8013134 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801312c:	2004      	movs	r0, #4
 801312e:	f7f7 fd93 	bl	800ac58 <memp_malloc>
 8013132:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d101      	bne.n	801313e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801313a:	2300      	movs	r3, #0
 801313c:	e016      	b.n	801316c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801313e:	2220      	movs	r2, #32
 8013140:	2100      	movs	r1, #0
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f000 ff08 	bl	8013f58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	220f      	movs	r2, #15
 801314c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801314e:	4b09      	ldr	r3, [pc, #36]	; (8013174 <ip_reass_enqueue_new_datagram+0x70>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013156:	4a07      	ldr	r2, [pc, #28]	; (8013174 <ip_reass_enqueue_new_datagram+0x70>)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	3308      	adds	r3, #8
 8013160:	2214      	movs	r2, #20
 8013162:	6879      	ldr	r1, [r7, #4]
 8013164:	4618      	mov	r0, r3
 8013166:	f000 fee9 	bl	8013f3c <memcpy>
  return ipr;
 801316a:	68fb      	ldr	r3, [r7, #12]
}
 801316c:	4618      	mov	r0, r3
 801316e:	3710      	adds	r7, #16
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	20008dd0 	.word	0x20008dd0

08013178 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013182:	4b10      	ldr	r3, [pc, #64]	; (80131c4 <ip_reass_dequeue_datagram+0x4c>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	429a      	cmp	r2, r3
 801318a:	d104      	bne.n	8013196 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a0c      	ldr	r2, [pc, #48]	; (80131c4 <ip_reass_dequeue_datagram+0x4c>)
 8013192:	6013      	str	r3, [r2, #0]
 8013194:	e00d      	b.n	80131b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d106      	bne.n	80131aa <ip_reass_dequeue_datagram+0x32>
 801319c:	4b0a      	ldr	r3, [pc, #40]	; (80131c8 <ip_reass_dequeue_datagram+0x50>)
 801319e:	f240 1245 	movw	r2, #325	; 0x145
 80131a2:	490a      	ldr	r1, [pc, #40]	; (80131cc <ip_reass_dequeue_datagram+0x54>)
 80131a4:	480a      	ldr	r0, [pc, #40]	; (80131d0 <ip_reass_dequeue_datagram+0x58>)
 80131a6:	f000 fedf 	bl	8013f68 <iprintf>
    prev->next = ipr->next;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	2004      	movs	r0, #4
 80131b6:	f7f7 fdbf 	bl	800ad38 <memp_free>
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20008dd0 	.word	0x20008dd0
 80131c8:	08017830 	.word	0x08017830
 80131cc:	080178f8 	.word	0x080178f8
 80131d0:	08017878 	.word	0x08017878

080131d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b08c      	sub	sp, #48	; 0x30
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80131e0:	2300      	movs	r3, #0
 80131e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80131e4:	2301      	movs	r3, #1
 80131e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	885b      	ldrh	r3, [r3, #2]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7f7 f8b7 	bl	800a368 <lwip_htons>
 80131fa:	4603      	mov	r3, r0
 80131fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	f003 030f 	and.w	r3, r3, #15
 8013206:	b2db      	uxtb	r3, r3
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801320c:	7e7b      	ldrb	r3, [r7, #25]
 801320e:	b29b      	uxth	r3, r3
 8013210:	8b7a      	ldrh	r2, [r7, #26]
 8013212:	429a      	cmp	r2, r3
 8013214:	d202      	bcs.n	801321c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013216:	f04f 33ff 	mov.w	r3, #4294967295
 801321a:	e135      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801321c:	7e7b      	ldrb	r3, [r7, #25]
 801321e:	b29b      	uxth	r3, r3
 8013220:	8b7a      	ldrh	r2, [r7, #26]
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	88db      	ldrh	r3, [r3, #6]
 801322a:	b29b      	uxth	r3, r3
 801322c:	4618      	mov	r0, r3
 801322e:	f7f7 f89b 	bl	800a368 <lwip_htons>
 8013232:	4603      	mov	r3, r0
 8013234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013238:	b29b      	uxth	r3, r3
 801323a:	00db      	lsls	r3, r3, #3
 801323c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013246:	2200      	movs	r2, #0
 8013248:	701a      	strb	r2, [r3, #0]
 801324a:	2200      	movs	r2, #0
 801324c:	705a      	strb	r2, [r3, #1]
 801324e:	2200      	movs	r2, #0
 8013250:	709a      	strb	r2, [r3, #2]
 8013252:	2200      	movs	r2, #0
 8013254:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	8afa      	ldrh	r2, [r7, #22]
 801325a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801325c:	8afa      	ldrh	r2, [r7, #22]
 801325e:	8b7b      	ldrh	r3, [r7, #26]
 8013260:	4413      	add	r3, r2
 8013262:	b29a      	uxth	r2, r3
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326a:	88db      	ldrh	r3, [r3, #6]
 801326c:	b29b      	uxth	r3, r3
 801326e:	8afa      	ldrh	r2, [r7, #22]
 8013270:	429a      	cmp	r2, r3
 8013272:	d902      	bls.n	801327a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013274:	f04f 33ff 	mov.w	r3, #4294967295
 8013278:	e106      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	627b      	str	r3, [r7, #36]	; 0x24
 8013280:	e068      	b.n	8013354 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328a:	889b      	ldrh	r3, [r3, #4]
 801328c:	b29a      	uxth	r2, r3
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	889b      	ldrh	r3, [r3, #4]
 8013292:	b29b      	uxth	r3, r3
 8013294:	429a      	cmp	r2, r3
 8013296:	d235      	bcs.n	8013304 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801329c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d020      	beq.n	80132e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	889b      	ldrh	r3, [r3, #4]
 80132a8:	b29a      	uxth	r2, r3
 80132aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ac:	88db      	ldrh	r3, [r3, #6]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d307      	bcc.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	88db      	ldrh	r3, [r3, #6]
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	889b      	ldrh	r3, [r3, #4]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d902      	bls.n	80132ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132c4:	f04f 33ff 	mov.w	r3, #4294967295
 80132c8:	e0de      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80132ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132cc:	68ba      	ldr	r2, [r7, #8]
 80132ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80132d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d2:	88db      	ldrh	r3, [r3, #6]
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	889b      	ldrh	r3, [r3, #4]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	429a      	cmp	r2, r3
 80132de:	d03d      	beq.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80132e0:	2300      	movs	r3, #0
 80132e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80132e4:	e03a      	b.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80132e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e8:	88db      	ldrh	r3, [r3, #6]
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	889b      	ldrh	r3, [r3, #4]
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d902      	bls.n	80132fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132f6:	f04f 33ff 	mov.w	r3, #4294967295
 80132fa:	e0c5      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	68ba      	ldr	r2, [r7, #8]
 8013300:	605a      	str	r2, [r3, #4]
      break;
 8013302:	e02b      	b.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	889b      	ldrh	r3, [r3, #4]
 8013308:	b29a      	uxth	r2, r3
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	889b      	ldrh	r3, [r3, #4]
 801330e:	b29b      	uxth	r3, r3
 8013310:	429a      	cmp	r2, r3
 8013312:	d102      	bne.n	801331a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013314:	f04f 33ff 	mov.w	r3, #4294967295
 8013318:	e0b6      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	889b      	ldrh	r3, [r3, #4]
 801331e:	b29a      	uxth	r2, r3
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	88db      	ldrh	r3, [r3, #6]
 8013324:	b29b      	uxth	r3, r3
 8013326:	429a      	cmp	r2, r3
 8013328:	d202      	bcs.n	8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801332a:	f04f 33ff 	mov.w	r3, #4294967295
 801332e:	e0ab      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013332:	2b00      	cmp	r3, #0
 8013334:	d009      	beq.n	801334a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013338:	88db      	ldrh	r3, [r3, #6]
 801333a:	b29a      	uxth	r2, r3
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	889b      	ldrh	r3, [r3, #4]
 8013340:	b29b      	uxth	r3, r3
 8013342:	429a      	cmp	r2, r3
 8013344:	d001      	beq.n	801334a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	2b00      	cmp	r3, #0
 8013358:	d193      	bne.n	8013282 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801335a:	e000      	b.n	801335e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801335c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013360:	2b00      	cmp	r3, #0
 8013362:	d12d      	bne.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01c      	beq.n	80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	88db      	ldrh	r3, [r3, #6]
 801336e:	b29a      	uxth	r2, r3
 8013370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013372:	889b      	ldrh	r3, [r3, #4]
 8013374:	b29b      	uxth	r3, r3
 8013376:	429a      	cmp	r2, r3
 8013378:	d906      	bls.n	8013388 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801337a:	4b45      	ldr	r3, [pc, #276]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801337c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013380:	4944      	ldr	r1, [pc, #272]	; (8013494 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013382:	4845      	ldr	r0, [pc, #276]	; (8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013384:	f000 fdf0 	bl	8013f68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	68ba      	ldr	r2, [r7, #8]
 801338c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013390:	88db      	ldrh	r3, [r3, #6]
 8013392:	b29a      	uxth	r2, r3
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	889b      	ldrh	r3, [r3, #4]
 8013398:	b29b      	uxth	r3, r3
 801339a:	429a      	cmp	r2, r3
 801339c:	d010      	beq.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801339e:	2300      	movs	r3, #0
 80133a0:	623b      	str	r3, [r7, #32]
 80133a2:	e00d      	b.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d006      	beq.n	80133ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80133ac:	4b38      	ldr	r3, [pc, #224]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80133b2:	493a      	ldr	r1, [pc, #232]	; (801349c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80133b4:	4838      	ldr	r0, [pc, #224]	; (8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133b6:	f000 fdd7 	bl	8013f68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d105      	bne.n	80133d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	7f9b      	ldrb	r3, [r3, #30]
 80133ca:	f003 0301 	and.w	r3, r3, #1
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d059      	beq.n	8013486 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80133d2:	6a3b      	ldr	r3, [r7, #32]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d04f      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d006      	beq.n	80133ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	889b      	ldrh	r3, [r3, #4]
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d002      	beq.n	80133f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	623b      	str	r3, [r7, #32]
 80133f2:	e041      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80133fe:	e012      	b.n	8013426 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	88db      	ldrh	r3, [r3, #6]
 801340a:	b29a      	uxth	r2, r3
 801340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340e:	889b      	ldrh	r3, [r3, #4]
 8013410:	b29b      	uxth	r3, r3
 8013412:	429a      	cmp	r2, r3
 8013414:	d002      	beq.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	623b      	str	r3, [r7, #32]
            break;
 801341a:	e007      	b.n	801342c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013428:	2b00      	cmp	r3, #0
 801342a:	d1e9      	bne.n	8013400 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d022      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d106      	bne.n	8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801343a:	4b15      	ldr	r3, [pc, #84]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801343c:	f240 12df 	movw	r2, #479	; 0x1df
 8013440:	4917      	ldr	r1, [pc, #92]	; (80134a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013442:	4815      	ldr	r0, [pc, #84]	; (8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013444:	f000 fd90 	bl	8013f68 <iprintf>
          LWIP_ASSERT("sanity check",
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013450:	429a      	cmp	r2, r3
 8013452:	d106      	bne.n	8013462 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013454:	4b0e      	ldr	r3, [pc, #56]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801345a:	4911      	ldr	r1, [pc, #68]	; (80134a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801345c:	480e      	ldr	r0, [pc, #56]	; (8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801345e:	f000 fd83 	bl	8013f68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801346a:	4b09      	ldr	r3, [pc, #36]	; (8013490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801346c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013470:	490c      	ldr	r1, [pc, #48]	; (80134a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013472:	4809      	ldr	r0, [pc, #36]	; (8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013474:	f000 fd78 	bl	8013f68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013478:	6a3b      	ldr	r3, [r7, #32]
 801347a:	2b00      	cmp	r3, #0
 801347c:	bf14      	ite	ne
 801347e:	2301      	movne	r3, #1
 8013480:	2300      	moveq	r3, #0
 8013482:	b2db      	uxtb	r3, r3
 8013484:	e000      	b.n	8013488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013486:	2300      	movs	r3, #0
}
 8013488:	4618      	mov	r0, r3
 801348a:	3730      	adds	r7, #48	; 0x30
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	08017830 	.word	0x08017830
 8013494:	08017914 	.word	0x08017914
 8013498:	08017878 	.word	0x08017878
 801349c:	08017934 	.word	0x08017934
 80134a0:	0801796c 	.word	0x0801796c
 80134a4:	0801797c 	.word	0x0801797c

080134a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b08e      	sub	sp, #56	; 0x38
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80134b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	f003 030f 	and.w	r3, r3, #15
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	2b14      	cmp	r3, #20
 80134c6:	f040 8171 	bne.w	80137ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80134ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134cc:	88db      	ldrh	r3, [r3, #6]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f6 ff49 	bl	800a368 <lwip_htons>
 80134d6:	4603      	mov	r3, r0
 80134d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134dc:	b29b      	uxth	r3, r3
 80134de:	00db      	lsls	r3, r3, #3
 80134e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	885b      	ldrh	r3, [r3, #2]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7f6 ff3d 	bl	800a368 <lwip_htons>
 80134ee:	4603      	mov	r3, r0
 80134f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	f003 030f 	and.w	r3, r3, #15
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013506:	b29b      	uxth	r3, r3
 8013508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801350a:	429a      	cmp	r2, r3
 801350c:	f0c0 8150 	bcc.w	80137b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013514:	b29b      	uxth	r3, r3
 8013516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7f8 fae9 	bl	800baf4 <pbuf_clen>
 8013522:	4603      	mov	r3, r0
 8013524:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013526:	4b8c      	ldr	r3, [pc, #560]	; (8013758 <ip4_reass+0x2b0>)
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	461a      	mov	r2, r3
 801352c:	8c3b      	ldrh	r3, [r7, #32]
 801352e:	4413      	add	r3, r2
 8013530:	2b0a      	cmp	r3, #10
 8013532:	dd10      	ble.n	8013556 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013534:	8c3b      	ldrh	r3, [r7, #32]
 8013536:	4619      	mov	r1, r3
 8013538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801353a:	f7ff fd81 	bl	8013040 <ip_reass_remove_oldest_datagram>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	f000 8137 	beq.w	80137b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013546:	4b84      	ldr	r3, [pc, #528]	; (8013758 <ip4_reass+0x2b0>)
 8013548:	881b      	ldrh	r3, [r3, #0]
 801354a:	461a      	mov	r2, r3
 801354c:	8c3b      	ldrh	r3, [r7, #32]
 801354e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013550:	2b0a      	cmp	r3, #10
 8013552:	f300 812f 	bgt.w	80137b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013556:	4b81      	ldr	r3, [pc, #516]	; (801375c <ip4_reass+0x2b4>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	633b      	str	r3, [r7, #48]	; 0x30
 801355c:	e015      	b.n	801358a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013560:	695a      	ldr	r2, [r3, #20]
 8013562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	429a      	cmp	r2, r3
 8013568:	d10c      	bne.n	8013584 <ip4_reass+0xdc>
 801356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356c:	699a      	ldr	r2, [r3, #24]
 801356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	429a      	cmp	r2, r3
 8013574:	d106      	bne.n	8013584 <ip4_reass+0xdc>
 8013576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013578:	899a      	ldrh	r2, [r3, #12]
 801357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357c:	889b      	ldrh	r3, [r3, #4]
 801357e:	b29b      	uxth	r3, r3
 8013580:	429a      	cmp	r2, r3
 8013582:	d006      	beq.n	8013592 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	633b      	str	r3, [r7, #48]	; 0x30
 801358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801358c:	2b00      	cmp	r3, #0
 801358e:	d1e6      	bne.n	801355e <ip4_reass+0xb6>
 8013590:	e000      	b.n	8013594 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013592:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013596:	2b00      	cmp	r3, #0
 8013598:	d109      	bne.n	80135ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801359a:	8c3b      	ldrh	r3, [r7, #32]
 801359c:	4619      	mov	r1, r3
 801359e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135a0:	f7ff fdb0 	bl	8013104 <ip_reass_enqueue_new_datagram>
 80135a4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d11c      	bne.n	80135e6 <ip4_reass+0x13e>
      goto nullreturn;
 80135ac:	e105      	b.n	80137ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b0:	88db      	ldrh	r3, [r3, #6]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7f6 fed7 	bl	800a368 <lwip_htons>
 80135ba:	4603      	mov	r3, r0
 80135bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d110      	bne.n	80135e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80135c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c6:	89db      	ldrh	r3, [r3, #14]
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7f6 fecd 	bl	800a368 <lwip_htons>
 80135ce:	4603      	mov	r3, r0
 80135d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d006      	beq.n	80135e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	3308      	adds	r3, #8
 80135dc:	2214      	movs	r2, #20
 80135de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80135e0:	4618      	mov	r0, r3
 80135e2:	f000 fcab 	bl	8013f3c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80135e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e8:	88db      	ldrh	r3, [r3, #6]
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	f003 0320 	and.w	r3, r3, #32
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	bf0c      	ite	eq
 80135f4:	2301      	moveq	r3, #1
 80135f6:	2300      	movne	r3, #0
 80135f8:	b2db      	uxtb	r3, r3
 80135fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00e      	beq.n	8013620 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013606:	4413      	add	r3, r2
 8013608:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801360a:	8b7a      	ldrh	r2, [r7, #26]
 801360c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801360e:	429a      	cmp	r2, r3
 8013610:	f0c0 80a0 	bcc.w	8013754 <ip4_reass+0x2ac>
 8013614:	8b7b      	ldrh	r3, [r7, #26]
 8013616:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801361a:	4293      	cmp	r3, r2
 801361c:	f200 809a 	bhi.w	8013754 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013620:	69fa      	ldr	r2, [r7, #28]
 8013622:	6879      	ldr	r1, [r7, #4]
 8013624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013626:	f7ff fdd5 	bl	80131d4 <ip_reass_chain_frag_into_datagram_and_validate>
 801362a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013632:	f000 809b 	beq.w	801376c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013636:	4b48      	ldr	r3, [pc, #288]	; (8013758 <ip4_reass+0x2b0>)
 8013638:	881a      	ldrh	r2, [r3, #0]
 801363a:	8c3b      	ldrh	r3, [r7, #32]
 801363c:	4413      	add	r3, r2
 801363e:	b29a      	uxth	r2, r3
 8013640:	4b45      	ldr	r3, [pc, #276]	; (8013758 <ip4_reass+0x2b0>)
 8013642:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d00d      	beq.n	8013666 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801364a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801364c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801364e:	4413      	add	r3, r2
 8013650:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	8a7a      	ldrh	r2, [r7, #18]
 8013656:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365a:	7f9b      	ldrb	r3, [r3, #30]
 801365c:	f043 0301 	orr.w	r3, r3, #1
 8013660:	b2da      	uxtb	r2, r3
 8013662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013664:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d171      	bne.n	8013750 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366e:	8b9b      	ldrh	r3, [r3, #28]
 8013670:	3314      	adds	r3, #20
 8013672:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013688:	3308      	adds	r3, #8
 801368a:	2214      	movs	r2, #20
 801368c:	4619      	mov	r1, r3
 801368e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013690:	f000 fc54 	bl	8013f3c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013694:	8a3b      	ldrh	r3, [r7, #16]
 8013696:	4618      	mov	r0, r3
 8013698:	f7f6 fe66 	bl	800a368 <lwip_htons>
 801369c:	4603      	mov	r3, r0
 801369e:	461a      	mov	r2, r3
 80136a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	2200      	movs	r2, #0
 80136a8:	719a      	strb	r2, [r3, #6]
 80136aa:	2200      	movs	r2, #0
 80136ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80136ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b0:	2200      	movs	r2, #0
 80136b2:	729a      	strb	r2, [r3, #10]
 80136b4:	2200      	movs	r2, #0
 80136b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80136b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80136be:	e00d      	b.n	80136dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80136c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80136c6:	2114      	movs	r1, #20
 80136c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80136ca:	f7f8 f905 	bl	800b8d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80136ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7f8 fa49 	bl	800bb68 <pbuf_cat>
      r = iprh->next_pbuf;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80136dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d1ee      	bne.n	80136c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80136e2:	4b1e      	ldr	r3, [pc, #120]	; (801375c <ip4_reass+0x2b4>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d102      	bne.n	80136f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80136ec:	2300      	movs	r3, #0
 80136ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136f0:	e010      	b.n	8013714 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80136f2:	4b1a      	ldr	r3, [pc, #104]	; (801375c <ip4_reass+0x2b4>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136f8:	e007      	b.n	801370a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80136fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013700:	429a      	cmp	r2, r3
 8013702:	d006      	beq.n	8013712 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370c:	2b00      	cmp	r3, #0
 801370e:	d1f4      	bne.n	80136fa <ip4_reass+0x252>
 8013710:	e000      	b.n	8013714 <ip4_reass+0x26c>
          break;
 8013712:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013718:	f7ff fd2e 	bl	8013178 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7f8 f9e9 	bl	800baf4 <pbuf_clen>
 8013722:	4603      	mov	r3, r0
 8013724:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013726:	4b0c      	ldr	r3, [pc, #48]	; (8013758 <ip4_reass+0x2b0>)
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	8c3a      	ldrh	r2, [r7, #32]
 801372c:	429a      	cmp	r2, r3
 801372e:	d906      	bls.n	801373e <ip4_reass+0x296>
 8013730:	4b0b      	ldr	r3, [pc, #44]	; (8013760 <ip4_reass+0x2b8>)
 8013732:	f240 229b 	movw	r2, #667	; 0x29b
 8013736:	490b      	ldr	r1, [pc, #44]	; (8013764 <ip4_reass+0x2bc>)
 8013738:	480b      	ldr	r0, [pc, #44]	; (8013768 <ip4_reass+0x2c0>)
 801373a:	f000 fc15 	bl	8013f68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801373e:	4b06      	ldr	r3, [pc, #24]	; (8013758 <ip4_reass+0x2b0>)
 8013740:	881a      	ldrh	r2, [r3, #0]
 8013742:	8c3b      	ldrh	r3, [r7, #32]
 8013744:	1ad3      	subs	r3, r2, r3
 8013746:	b29a      	uxth	r2, r3
 8013748:	4b03      	ldr	r3, [pc, #12]	; (8013758 <ip4_reass+0x2b0>)
 801374a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	e038      	b.n	80137c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013750:	2300      	movs	r3, #0
 8013752:	e036      	b.n	80137c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013754:	bf00      	nop
 8013756:	e00a      	b.n	801376e <ip4_reass+0x2c6>
 8013758:	20008dd4 	.word	0x20008dd4
 801375c:	20008dd0 	.word	0x20008dd0
 8013760:	08017830 	.word	0x08017830
 8013764:	080179a0 	.word	0x080179a0
 8013768:	08017878 	.word	0x08017878
    goto nullreturn_ipr;
 801376c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013770:	2b00      	cmp	r3, #0
 8013772:	d106      	bne.n	8013782 <ip4_reass+0x2da>
 8013774:	4b15      	ldr	r3, [pc, #84]	; (80137cc <ip4_reass+0x324>)
 8013776:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801377a:	4915      	ldr	r1, [pc, #84]	; (80137d0 <ip4_reass+0x328>)
 801377c:	4815      	ldr	r0, [pc, #84]	; (80137d4 <ip4_reass+0x32c>)
 801377e:	f000 fbf3 	bl	8013f68 <iprintf>
  if (ipr->p == NULL) {
 8013782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d116      	bne.n	80137b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801378a:	4b13      	ldr	r3, [pc, #76]	; (80137d8 <ip4_reass+0x330>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013790:	429a      	cmp	r2, r3
 8013792:	d006      	beq.n	80137a2 <ip4_reass+0x2fa>
 8013794:	4b0d      	ldr	r3, [pc, #52]	; (80137cc <ip4_reass+0x324>)
 8013796:	f240 22ab 	movw	r2, #683	; 0x2ab
 801379a:	4910      	ldr	r1, [pc, #64]	; (80137dc <ip4_reass+0x334>)
 801379c:	480d      	ldr	r0, [pc, #52]	; (80137d4 <ip4_reass+0x32c>)
 801379e:	f000 fbe3 	bl	8013f68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80137a2:	2100      	movs	r1, #0
 80137a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137a6:	f7ff fce7 	bl	8013178 <ip_reass_dequeue_datagram>
 80137aa:	e006      	b.n	80137ba <ip4_reass+0x312>
    goto nullreturn;
 80137ac:	bf00      	nop
 80137ae:	e004      	b.n	80137ba <ip4_reass+0x312>
    goto nullreturn;
 80137b0:	bf00      	nop
 80137b2:	e002      	b.n	80137ba <ip4_reass+0x312>
      goto nullreturn;
 80137b4:	bf00      	nop
 80137b6:	e000      	b.n	80137ba <ip4_reass+0x312>
  }

nullreturn:
 80137b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7f8 f912 	bl	800b9e4 <pbuf_free>
  return NULL;
 80137c0:	2300      	movs	r3, #0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3738      	adds	r7, #56	; 0x38
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	08017830 	.word	0x08017830
 80137d0:	080179bc 	.word	0x080179bc
 80137d4:	08017878 	.word	0x08017878
 80137d8:	20008dd0 	.word	0x20008dd0
 80137dc:	080179c8 	.word	0x080179c8

080137e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80137e4:	2005      	movs	r0, #5
 80137e6:	f7f7 fa37 	bl	800ac58 <memp_malloc>
 80137ea:	4603      	mov	r3, r0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d106      	bne.n	801380c <ip_frag_free_pbuf_custom_ref+0x1c>
 80137fe:	4b07      	ldr	r3, [pc, #28]	; (801381c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013800:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013804:	4906      	ldr	r1, [pc, #24]	; (8013820 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013806:	4807      	ldr	r0, [pc, #28]	; (8013824 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013808:	f000 fbae 	bl	8013f68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801380c:	6879      	ldr	r1, [r7, #4]
 801380e:	2005      	movs	r0, #5
 8013810:	f7f7 fa92 	bl	800ad38 <memp_free>
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	08017830 	.word	0x08017830
 8013820:	080179e8 	.word	0x080179e8
 8013824:	08017878 	.word	0x08017878

08013828 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d106      	bne.n	8013848 <ipfrag_free_pbuf_custom+0x20>
 801383a:	4b11      	ldr	r3, [pc, #68]	; (8013880 <ipfrag_free_pbuf_custom+0x58>)
 801383c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013840:	4910      	ldr	r1, [pc, #64]	; (8013884 <ipfrag_free_pbuf_custom+0x5c>)
 8013842:	4811      	ldr	r0, [pc, #68]	; (8013888 <ipfrag_free_pbuf_custom+0x60>)
 8013844:	f000 fb90 	bl	8013f68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013848:	68fa      	ldr	r2, [r7, #12]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	429a      	cmp	r2, r3
 801384e:	d006      	beq.n	801385e <ipfrag_free_pbuf_custom+0x36>
 8013850:	4b0b      	ldr	r3, [pc, #44]	; (8013880 <ipfrag_free_pbuf_custom+0x58>)
 8013852:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013856:	490d      	ldr	r1, [pc, #52]	; (801388c <ipfrag_free_pbuf_custom+0x64>)
 8013858:	480b      	ldr	r0, [pc, #44]	; (8013888 <ipfrag_free_pbuf_custom+0x60>)
 801385a:	f000 fb85 	bl	8013f68 <iprintf>
  if (pcr->original != NULL) {
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	695b      	ldr	r3, [r3, #20]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d004      	beq.n	8013870 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	695b      	ldr	r3, [r3, #20]
 801386a:	4618      	mov	r0, r3
 801386c:	f7f8 f8ba 	bl	800b9e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013870:	68f8      	ldr	r0, [r7, #12]
 8013872:	f7ff ffbd 	bl	80137f0 <ip_frag_free_pbuf_custom_ref>
}
 8013876:	bf00      	nop
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	08017830 	.word	0x08017830
 8013884:	080179f4 	.word	0x080179f4
 8013888:	08017878 	.word	0x08017878
 801388c:	08017a00 	.word	0x08017a00

08013890 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b094      	sub	sp, #80	; 0x50
 8013894:	af02      	add	r7, sp, #8
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80138a6:	3b14      	subs	r3, #20
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	da00      	bge.n	80138ae <ip4_frag+0x1e>
 80138ac:	3307      	adds	r3, #7
 80138ae:	10db      	asrs	r3, r3, #3
 80138b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80138b2:	2314      	movs	r3, #20
 80138b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80138bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80138c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	f003 030f 	and.w	r3, r3, #15
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b14      	cmp	r3, #20
 80138d0:	d002      	beq.n	80138d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80138d2:	f06f 0305 	mvn.w	r3, #5
 80138d6:	e110      	b.n	8013afa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	895b      	ldrh	r3, [r3, #10]
 80138dc:	2b13      	cmp	r3, #19
 80138de:	d809      	bhi.n	80138f4 <ip4_frag+0x64>
 80138e0:	4b88      	ldr	r3, [pc, #544]	; (8013b04 <ip4_frag+0x274>)
 80138e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80138e6:	4988      	ldr	r1, [pc, #544]	; (8013b08 <ip4_frag+0x278>)
 80138e8:	4888      	ldr	r0, [pc, #544]	; (8013b0c <ip4_frag+0x27c>)
 80138ea:	f000 fb3d 	bl	8013f68 <iprintf>
 80138ee:	f06f 0305 	mvn.w	r3, #5
 80138f2:	e102      	b.n	8013afa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	88db      	ldrh	r3, [r3, #6]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7f6 fd34 	bl	800a368 <lwip_htons>
 8013900:	4603      	mov	r3, r0
 8013902:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801390a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801390e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013914:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	891b      	ldrh	r3, [r3, #8]
 801391a:	3b14      	subs	r3, #20
 801391c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013920:	e0e1      	b.n	8013ae6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013922:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013924:	00db      	lsls	r3, r3, #3
 8013926:	b29b      	uxth	r3, r3
 8013928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801392c:	4293      	cmp	r3, r2
 801392e:	bf28      	it	cs
 8013930:	4613      	movcs	r3, r2
 8013932:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013938:	2114      	movs	r1, #20
 801393a:	200e      	movs	r0, #14
 801393c:	f7f7 fd6e 	bl	800b41c <pbuf_alloc>
 8013940:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013944:	2b00      	cmp	r3, #0
 8013946:	f000 80d5 	beq.w	8013af4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394c:	895b      	ldrh	r3, [r3, #10]
 801394e:	2b13      	cmp	r3, #19
 8013950:	d806      	bhi.n	8013960 <ip4_frag+0xd0>
 8013952:	4b6c      	ldr	r3, [pc, #432]	; (8013b04 <ip4_frag+0x274>)
 8013954:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013958:	496d      	ldr	r1, [pc, #436]	; (8013b10 <ip4_frag+0x280>)
 801395a:	486c      	ldr	r0, [pc, #432]	; (8013b0c <ip4_frag+0x27c>)
 801395c:	f000 fb04 	bl	8013f68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	2214      	movs	r2, #20
 8013966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013968:	4618      	mov	r0, r3
 801396a:	f000 fae7 	bl	8013f3c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801397a:	e064      	b.n	8013a46 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	895a      	ldrh	r2, [r3, #10]
 8013980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013982:	1ad3      	subs	r3, r2, r3
 8013984:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	895b      	ldrh	r3, [r3, #10]
 801398a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801398c:	429a      	cmp	r2, r3
 801398e:	d906      	bls.n	801399e <ip4_frag+0x10e>
 8013990:	4b5c      	ldr	r3, [pc, #368]	; (8013b04 <ip4_frag+0x274>)
 8013992:	f240 322d 	movw	r2, #813	; 0x32d
 8013996:	495f      	ldr	r1, [pc, #380]	; (8013b14 <ip4_frag+0x284>)
 8013998:	485c      	ldr	r0, [pc, #368]	; (8013b0c <ip4_frag+0x27c>)
 801399a:	f000 fae5 	bl	8013f68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801399e:	8bfa      	ldrh	r2, [r7, #30]
 80139a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80139a4:	4293      	cmp	r3, r2
 80139a6:	bf28      	it	cs
 80139a8:	4613      	movcs	r3, r2
 80139aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80139ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d105      	bne.n	80139c2 <ip4_frag+0x132>
        poff = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	60fb      	str	r3, [r7, #12]
        continue;
 80139c0:	e041      	b.n	8013a46 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80139c2:	f7ff ff0d 	bl	80137e0 <ip_frag_alloc_pbuf_custom_ref>
 80139c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d103      	bne.n	80139d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80139ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139d0:	f7f8 f808 	bl	800b9e4 <pbuf_free>
        goto memerr;
 80139d4:	e08f      	b.n	8013af6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80139d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80139dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139de:	4413      	add	r3, r2
 80139e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80139e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80139e8:	9201      	str	r2, [sp, #4]
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	4603      	mov	r3, r0
 80139ee:	2241      	movs	r2, #65	; 0x41
 80139f0:	2000      	movs	r0, #0
 80139f2:	f7f7 fe3d 	bl	800b670 <pbuf_alloced_custom>
 80139f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80139fe:	69b8      	ldr	r0, [r7, #24]
 8013a00:	f7ff fef6 	bl	80137f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a06:	f7f7 ffed 	bl	800b9e4 <pbuf_free>
        goto memerr;
 8013a0a:	e074      	b.n	8013af6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7f8 f889 	bl	800bb24 <pbuf_ref>
      pcr->original = p;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	4a3f      	ldr	r2, [pc, #252]	; (8013b18 <ip4_frag+0x288>)
 8013a1c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013a1e:	6979      	ldr	r1, [r7, #20]
 8013a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a22:	f7f8 f8a1 	bl	800bb68 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013a26:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013a34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d004      	beq.n	8013a46 <ip4_frag+0x1b6>
        poff = 0;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d196      	bne.n	801397c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013a4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a54:	4413      	add	r3, r2
 8013a56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a5c:	f1a3 0213 	sub.w	r2, r3, #19
 8013a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a64:	429a      	cmp	r2, r3
 8013a66:	bfcc      	ite	gt
 8013a68:	2301      	movgt	r3, #1
 8013a6a:	2300      	movle	r3, #0
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013a7a:	6a3b      	ldr	r3, [r7, #32]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <ip4_frag+0x1f6>
 8013a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d003      	beq.n	8013a8e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013a8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013a8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7f6 fc69 	bl	800a368 <lwip_htons>
 8013a96:	4603      	mov	r3, r0
 8013a98:	461a      	mov	r2, r3
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013aa0:	3314      	adds	r3, #20
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f6 fc5f 	bl	800a368 <lwip_htons>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	461a      	mov	r2, r3
 8013aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	729a      	strb	r2, [r3, #10]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	695b      	ldr	r3, [r3, #20]
 8013ac0:	687a      	ldr	r2, [r7, #4]
 8013ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ac4:	68b8      	ldr	r0, [r7, #8]
 8013ac6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aca:	f7f7 ff8b 	bl	800b9e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013ace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013ada:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013ade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ae0:	4413      	add	r3, r2
 8013ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013ae6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	f47f af19 	bne.w	8013922 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013af0:	2300      	movs	r3, #0
 8013af2:	e002      	b.n	8013afa <ip4_frag+0x26a>
      goto memerr;
 8013af4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3748      	adds	r7, #72	; 0x48
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	08017830 	.word	0x08017830
 8013b08:	08017a0c 	.word	0x08017a0c
 8013b0c:	08017878 	.word	0x08017878
 8013b10:	08017a28 	.word	0x08017a28
 8013b14:	08017a48 	.word	0x08017a48
 8013b18:	08013829 	.word	0x08013829

08013b1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013b26:	230e      	movs	r3, #14
 8013b28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	895b      	ldrh	r3, [r3, #10]
 8013b2e:	2b0e      	cmp	r3, #14
 8013b30:	d96e      	bls.n	8013c10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	7bdb      	ldrb	r3, [r3, #15]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b40:	3301      	adds	r3, #1
 8013b42:	b2da      	uxtb	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	7b1a      	ldrb	r2, [r3, #12]
 8013b52:	7b5b      	ldrb	r3, [r3, #13]
 8013b54:	021b      	lsls	r3, r3, #8
 8013b56:	4313      	orrs	r3, r2
 8013b58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	f003 0301 	and.w	r3, r3, #1
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d023      	beq.n	8013bae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d10f      	bne.n	8013b8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	785b      	ldrb	r3, [r3, #1]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d11b      	bne.n	8013bae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b7a:	2b5e      	cmp	r3, #94	; 0x5e
 8013b7c:	d117      	bne.n	8013bae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	7b5b      	ldrb	r3, [r3, #13]
 8013b82:	f043 0310 	orr.w	r3, r3, #16
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	735a      	strb	r2, [r3, #13]
 8013b8c:	e00f      	b.n	8013bae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	2206      	movs	r2, #6
 8013b92:	4928      	ldr	r1, [pc, #160]	; (8013c34 <ethernet_input+0x118>)
 8013b94:	4618      	mov	r0, r3
 8013b96:	f000 f9c1 	bl	8013f1c <memcmp>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d106      	bne.n	8013bae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	7b5b      	ldrb	r3, [r3, #13]
 8013ba4:	f043 0308 	orr.w	r3, r3, #8
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013bae:	89fb      	ldrh	r3, [r7, #14]
 8013bb0:	2b08      	cmp	r3, #8
 8013bb2:	d003      	beq.n	8013bbc <ethernet_input+0xa0>
 8013bb4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013bb8:	d014      	beq.n	8013be4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013bba:	e032      	b.n	8013c22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bc2:	f003 0308 	and.w	r3, r3, #8
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d024      	beq.n	8013c14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013bca:	8afb      	ldrh	r3, [r7, #22]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7f7 fe82 	bl	800b8d8 <pbuf_remove_header>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d11e      	bne.n	8013c18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013bda:	6839      	ldr	r1, [r7, #0]
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7fe ff21 	bl	8012a24 <ip4_input>
      break;
 8013be2:	e013      	b.n	8013c0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bea:	f003 0308 	and.w	r3, r3, #8
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d014      	beq.n	8013c1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013bf2:	8afb      	ldrh	r3, [r7, #22]
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7f7 fe6e 	bl	800b8d8 <pbuf_remove_header>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d10e      	bne.n	8013c20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013c02:	6839      	ldr	r1, [r7, #0]
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7fe f8c1 	bl	8011d8c <etharp_input>
      break;
 8013c0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	e00c      	b.n	8013c2a <ethernet_input+0x10e>
    goto free_and_return;
 8013c10:	bf00      	nop
 8013c12:	e006      	b.n	8013c22 <ethernet_input+0x106>
        goto free_and_return;
 8013c14:	bf00      	nop
 8013c16:	e004      	b.n	8013c22 <ethernet_input+0x106>
        goto free_and_return;
 8013c18:	bf00      	nop
 8013c1a:	e002      	b.n	8013c22 <ethernet_input+0x106>
        goto free_and_return;
 8013c1c:	bf00      	nop
 8013c1e:	e000      	b.n	8013c22 <ethernet_input+0x106>
        goto free_and_return;
 8013c20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7f7 fede 	bl	800b9e4 <pbuf_free>
  return ERR_OK;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3718      	adds	r7, #24
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	08017c0c 	.word	0x08017c0c

08013c38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b086      	sub	sp, #24
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
 8013c44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013c46:	8c3b      	ldrh	r3, [r7, #32]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7f6 fb8d 	bl	800a368 <lwip_htons>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013c52:	210e      	movs	r1, #14
 8013c54:	68b8      	ldr	r0, [r7, #8]
 8013c56:	f7f7 fe2f 	bl	800b8b8 <pbuf_add_header>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d125      	bne.n	8013cac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	8afa      	ldrh	r2, [r7, #22]
 8013c6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	2206      	movs	r2, #6
 8013c70:	6839      	ldr	r1, [r7, #0]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f000 f962 	bl	8013f3c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	3306      	adds	r3, #6
 8013c7c:	2206      	movs	r2, #6
 8013c7e:	6879      	ldr	r1, [r7, #4]
 8013c80:	4618      	mov	r0, r3
 8013c82:	f000 f95b 	bl	8013f3c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c8c:	2b06      	cmp	r3, #6
 8013c8e:	d006      	beq.n	8013c9e <ethernet_output+0x66>
 8013c90:	4b0a      	ldr	r3, [pc, #40]	; (8013cbc <ethernet_output+0x84>)
 8013c92:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013c96:	490a      	ldr	r1, [pc, #40]	; (8013cc0 <ethernet_output+0x88>)
 8013c98:	480a      	ldr	r0, [pc, #40]	; (8013cc4 <ethernet_output+0x8c>)
 8013c9a:	f000 f965 	bl	8013f68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	699b      	ldr	r3, [r3, #24]
 8013ca2:	68b9      	ldr	r1, [r7, #8]
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	4798      	blx	r3
 8013ca8:	4603      	mov	r3, r0
 8013caa:	e002      	b.n	8013cb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013cac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013cae:	f06f 0301 	mvn.w	r3, #1
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3718      	adds	r7, #24
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	08017a58 	.word	0x08017a58
 8013cc0:	08017a90 	.word	0x08017a90
 8013cc4:	08017ac4 	.word	0x08017ac4

08013cc8 <HAL_I2C_SlaveRxCpltCallback>:
	if(huart==UART_4)
		receivere_UART4_flag_RxCpltCallback = TRUE;
}


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
	flag_R_slave=TRUE;
 8013cd0:	4b04      	ldr	r3, [pc, #16]	; (8013ce4 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	701a      	strb	r2, [r3, #0]
}
 8013cd6:	bf00      	nop
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	20008dd6 	.word	0x20008dd6

08013ce8 <HAL_ADC_ConvCpltCallback>:
	flag_R_Master=TRUE;

 }

// ADC interrupt Callback (convert data finish)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
	flag_ADC_ConvCpltCallback = TRUE;
 8013cf0:	4b04      	ldr	r3, [pc, #16]	; (8013d04 <HAL_ADC_ConvCpltCallback+0x1c>)
 8013cf2:	2201      	movs	r2, #1
 8013cf4:	701a      	strb	r2, [r3, #0]
}
 8013cf6:	bf00      	nop
 8013cf8:	370c      	adds	r7, #12
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	20008dd7 	.word	0x20008dd7

08013d08 <HAL_TIM_PeriodElapsedCallback>:


// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
	time_flag_PeriodElapsedCallback=TRUE;
 8013d10:	4b04      	ldr	r3, [pc, #16]	; (8013d24 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8013d12:	2201      	movs	r2, #1
 8013d14:	701a      	strb	r2, [r3, #0]

}
 8013d16:	bf00      	nop
 8013d18:	370c      	adds	r7, #12
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	20008dd8 	.word	0x20008dd8

08013d28 <rtg_main>:
 **********************************************/

uint8_t data_from_spi1=0;
uint8_t data_to_spi2=0;

void rtg_main() {
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	af00      	add	r7, sp, #0
	HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, 1);
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	4927      	ldr	r1, [pc, #156]	; (8013dcc <rtg_main+0xa4>)
 8013d30:	4827      	ldr	r0, [pc, #156]	; (8013dd0 <rtg_main+0xa8>)
 8013d32:	f7f2 ffd7 	bl	8006ce4 <HAL_SPI_Receive_IT>
	while (1) {
		data_to_spi2++;
 8013d36:	4b27      	ldr	r3, [pc, #156]	; (8013dd4 <rtg_main+0xac>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	b2da      	uxtb	r2, r3
 8013d3e:	4b25      	ldr	r3, [pc, #148]	; (8013dd4 <rtg_main+0xac>)
 8013d40:	701a      	strb	r2, [r3, #0]
		data_to_spi2 %= 255;
 8013d42:	4b24      	ldr	r3, [pc, #144]	; (8013dd4 <rtg_main+0xac>)
 8013d44:	781a      	ldrb	r2, [r3, #0]
 8013d46:	4b24      	ldr	r3, [pc, #144]	; (8013dd8 <rtg_main+0xb0>)
 8013d48:	fba3 1302 	umull	r1, r3, r3, r2
 8013d4c:	09d9      	lsrs	r1, r3, #7
 8013d4e:	460b      	mov	r3, r1
 8013d50:	021b      	lsls	r3, r3, #8
 8013d52:	1a5b      	subs	r3, r3, r1
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	4b1e      	ldr	r3, [pc, #120]	; (8013dd4 <rtg_main+0xac>)
 8013d5a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(SPI_1, &data_to_spi2, 1, 100); //master initiates a byte of data to slave with address 44
 8013d5c:	2364      	movs	r3, #100	; 0x64
 8013d5e:	2201      	movs	r2, #1
 8013d60:	491c      	ldr	r1, [pc, #112]	; (8013dd4 <rtg_main+0xac>)
 8013d62:	481e      	ldr	r0, [pc, #120]	; (8013ddc <rtg_main+0xb4>)
 8013d64:	f7f2 fe4f 	bl	8006a06 <HAL_SPI_Transmit>

		switch (data_from_spi1 % 3) {
 8013d68:	4b18      	ldr	r3, [pc, #96]	; (8013dcc <rtg_main+0xa4>)
 8013d6a:	781a      	ldrb	r2, [r3, #0]
 8013d6c:	4b1c      	ldr	r3, [pc, #112]	; (8013de0 <rtg_main+0xb8>)
 8013d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8013d72:	0859      	lsrs	r1, r3, #1
 8013d74:	460b      	mov	r3, r1
 8013d76:	005b      	lsls	r3, r3, #1
 8013d78:	440b      	add	r3, r1
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	2b02      	cmp	r3, #2
 8013d80:	d010      	beq.n	8013da4 <rtg_main+0x7c>
 8013d82:	2b02      	cmp	r3, #2
 8013d84:	dc14      	bgt.n	8013db0 <rtg_main+0x88>
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <rtg_main+0x68>
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d005      	beq.n	8013d9a <rtg_main+0x72>
 8013d8e:	e00f      	b.n	8013db0 <rtg_main+0x88>
		case 0:
			// Toggle led 1
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_1);
 8013d90:	2101      	movs	r1, #1
 8013d92:	4814      	ldr	r0, [pc, #80]	; (8013de4 <rtg_main+0xbc>)
 8013d94:	f7f0 fc87 	bl	80046a6 <HAL_GPIO_TogglePin>
			break;
 8013d98:	e00d      	b.n	8013db6 <rtg_main+0x8e>

		case 1:
			// Toggle led 2
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_2);
 8013d9a:	2180      	movs	r1, #128	; 0x80
 8013d9c:	4811      	ldr	r0, [pc, #68]	; (8013de4 <rtg_main+0xbc>)
 8013d9e:	f7f0 fc82 	bl	80046a6 <HAL_GPIO_TogglePin>
			break;
 8013da2:	e008      	b.n	8013db6 <rtg_main+0x8e>

		case 2:
			// Toggle led 3
			HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_3);
 8013da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013da8:	480e      	ldr	r0, [pc, #56]	; (8013de4 <rtg_main+0xbc>)
 8013daa:	f7f0 fc7c 	bl	80046a6 <HAL_GPIO_TogglePin>
			break;
 8013dae:	e002      	b.n	8013db6 <rtg_main+0x8e>

		default:
			// Error message
			printf("ERROR\r\n");
 8013db0:	480d      	ldr	r0, [pc, #52]	; (8013de8 <rtg_main+0xc0>)
 8013db2:	f000 f95f 	bl	8014074 <puts>
		}
		printf("We got %d from SPI \n\r", data_from_spi1);
 8013db6:	4b05      	ldr	r3, [pc, #20]	; (8013dcc <rtg_main+0xa4>)
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	4619      	mov	r1, r3
 8013dbc:	480b      	ldr	r0, [pc, #44]	; (8013dec <rtg_main+0xc4>)
 8013dbe:	f000 f8d3 	bl	8013f68 <iprintf>
		HAL_Delay(1000);
 8013dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013dc6:	f7ee f827 	bl	8001e18 <HAL_Delay>
		data_to_spi2++;
 8013dca:	e7b4      	b.n	8013d36 <rtg_main+0xe>
 8013dcc:	20008dd9 	.word	0x20008dd9
 8013dd0:	200004d4 	.word	0x200004d4
 8013dd4:	20008dda 	.word	0x20008dda
 8013dd8:	80808081 	.word	0x80808081
 8013ddc:	20000470 	.word	0x20000470
 8013de0:	aaaaaaab 	.word	0xaaaaaaab
 8013de4:	40020400 	.word	0x40020400
 8013de8:	08017aec 	.word	0x08017aec
 8013dec:	08017af4 	.word	0x08017af4

08013df0 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_2) {
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4a06      	ldr	r2, [pc, #24]	; (8013e14 <HAL_SPI_RxCpltCallback+0x24>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d104      	bne.n	8013e0a <HAL_SPI_RxCpltCallback+0x1a>
		HAL_SPI_Receive_IT(SPI_2, &data_from_spi1, 1);
 8013e00:	2201      	movs	r2, #1
 8013e02:	4905      	ldr	r1, [pc, #20]	; (8013e18 <HAL_SPI_RxCpltCallback+0x28>)
 8013e04:	4803      	ldr	r0, [pc, #12]	; (8013e14 <HAL_SPI_RxCpltCallback+0x24>)
 8013e06:	f7f2 ff6d 	bl	8006ce4 <HAL_SPI_Receive_IT>
	}
}
 8013e0a:	bf00      	nop
 8013e0c:	3708      	adds	r7, #8
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	200004d4 	.word	0x200004d4
 8013e18:	20008dd9 	.word	0x20008dd9

08013e1c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e30:	68b9      	ldr	r1, [r7, #8]
 8013e32:	4804      	ldr	r0, [pc, #16]	; (8013e44 <_write+0x28>)
 8013e34:	f7f4 fa4a 	bl	80082cc <HAL_UART_Transmit>
	return len;
 8013e38:	687b      	ldr	r3, [r7, #4]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	20000694 	.word	0x20000694

08013e48 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8013e52:	1df9      	adds	r1, r7, #7
 8013e54:	f04f 33ff 	mov.w	r3, #4294967295
 8013e58:	2201      	movs	r2, #1
 8013e5a:	4807      	ldr	r0, [pc, #28]	; (8013e78 <__io_getchar+0x30>)
 8013e5c:	f7f4 fab9 	bl	80083d2 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8013e60:	1df9      	adds	r1, r7, #7
 8013e62:	f04f 33ff 	mov.w	r3, #4294967295
 8013e66:	2201      	movs	r2, #1
 8013e68:	4803      	ldr	r0, [pc, #12]	; (8013e78 <__io_getchar+0x30>)
 8013e6a:	f7f4 fa2f 	bl	80082cc <HAL_UART_Transmit>
	return ch;
 8013e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3708      	adds	r7, #8
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	20000694 	.word	0x20000694

08013e7c <_read>:

int _read(int file, char *ptr, int len) {
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b088      	sub	sp, #32
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = 0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 8013e90:	e016      	b.n	8013ec0 <_read+0x44>
		ch = __io_getchar();
 8013e92:	f7ff ffd9 	bl	8013e48 <__io_getchar>
 8013e96:	4603      	mov	r3, r0
 8013e98:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	7dfa      	ldrb	r2, [r7, #23]
 8013e9e:	701a      	strb	r2, [r3, #0]
		ptr++;
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8013ea6:	7dfb      	ldrb	r3, [r7, #23]
 8013ea8:	2b0d      	cmp	r3, #13
 8013eaa:	d002      	beq.n	8013eb2 <_read+0x36>
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
 8013eae:	2b0a      	cmp	r3, #10
 8013eb0:	d103      	bne.n	8013eba <_read+0x3e>
			*(ptr) = 0;
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	701a      	strb	r2, [r3, #0]
			break;
 8013eb8:	e006      	b.n	8013ec8 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	61fb      	str	r3, [r7, #28]
 8013ec0:	69fa      	ldr	r2, [r7, #28]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	dbe4      	blt.n	8013e92 <_read+0x16>
		}
	}
	return DataIdx + 1;
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	3301      	adds	r3, #1
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3720      	adds	r7, #32
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <__libc_init_array>:
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	4d0d      	ldr	r5, [pc, #52]	; (8013f0c <__libc_init_array+0x38>)
 8013ed8:	4c0d      	ldr	r4, [pc, #52]	; (8013f10 <__libc_init_array+0x3c>)
 8013eda:	1b64      	subs	r4, r4, r5
 8013edc:	10a4      	asrs	r4, r4, #2
 8013ede:	2600      	movs	r6, #0
 8013ee0:	42a6      	cmp	r6, r4
 8013ee2:	d109      	bne.n	8013ef8 <__libc_init_array+0x24>
 8013ee4:	4d0b      	ldr	r5, [pc, #44]	; (8013f14 <__libc_init_array+0x40>)
 8013ee6:	4c0c      	ldr	r4, [pc, #48]	; (8013f18 <__libc_init_array+0x44>)
 8013ee8:	f001 f904 	bl	80150f4 <_init>
 8013eec:	1b64      	subs	r4, r4, r5
 8013eee:	10a4      	asrs	r4, r4, #2
 8013ef0:	2600      	movs	r6, #0
 8013ef2:	42a6      	cmp	r6, r4
 8013ef4:	d105      	bne.n	8013f02 <__libc_init_array+0x2e>
 8013ef6:	bd70      	pop	{r4, r5, r6, pc}
 8013ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013efc:	4798      	blx	r3
 8013efe:	3601      	adds	r6, #1
 8013f00:	e7ee      	b.n	8013ee0 <__libc_init_array+0xc>
 8013f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f06:	4798      	blx	r3
 8013f08:	3601      	adds	r6, #1
 8013f0a:	e7f2      	b.n	8013ef2 <__libc_init_array+0x1e>
 8013f0c:	08017d6c 	.word	0x08017d6c
 8013f10:	08017d6c 	.word	0x08017d6c
 8013f14:	08017d6c 	.word	0x08017d6c
 8013f18:	08017d70 	.word	0x08017d70

08013f1c <memcmp>:
 8013f1c:	b510      	push	{r4, lr}
 8013f1e:	3901      	subs	r1, #1
 8013f20:	4402      	add	r2, r0
 8013f22:	4290      	cmp	r0, r2
 8013f24:	d101      	bne.n	8013f2a <memcmp+0xe>
 8013f26:	2000      	movs	r0, #0
 8013f28:	e005      	b.n	8013f36 <memcmp+0x1a>
 8013f2a:	7803      	ldrb	r3, [r0, #0]
 8013f2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f30:	42a3      	cmp	r3, r4
 8013f32:	d001      	beq.n	8013f38 <memcmp+0x1c>
 8013f34:	1b18      	subs	r0, r3, r4
 8013f36:	bd10      	pop	{r4, pc}
 8013f38:	3001      	adds	r0, #1
 8013f3a:	e7f2      	b.n	8013f22 <memcmp+0x6>

08013f3c <memcpy>:
 8013f3c:	440a      	add	r2, r1
 8013f3e:	4291      	cmp	r1, r2
 8013f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f44:	d100      	bne.n	8013f48 <memcpy+0xc>
 8013f46:	4770      	bx	lr
 8013f48:	b510      	push	{r4, lr}
 8013f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f52:	4291      	cmp	r1, r2
 8013f54:	d1f9      	bne.n	8013f4a <memcpy+0xe>
 8013f56:	bd10      	pop	{r4, pc}

08013f58 <memset>:
 8013f58:	4402      	add	r2, r0
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d100      	bne.n	8013f62 <memset+0xa>
 8013f60:	4770      	bx	lr
 8013f62:	f803 1b01 	strb.w	r1, [r3], #1
 8013f66:	e7f9      	b.n	8013f5c <memset+0x4>

08013f68 <iprintf>:
 8013f68:	b40f      	push	{r0, r1, r2, r3}
 8013f6a:	4b0a      	ldr	r3, [pc, #40]	; (8013f94 <iprintf+0x2c>)
 8013f6c:	b513      	push	{r0, r1, r4, lr}
 8013f6e:	681c      	ldr	r4, [r3, #0]
 8013f70:	b124      	cbz	r4, 8013f7c <iprintf+0x14>
 8013f72:	69a3      	ldr	r3, [r4, #24]
 8013f74:	b913      	cbnz	r3, 8013f7c <iprintf+0x14>
 8013f76:	4620      	mov	r0, r4
 8013f78:	f000 faba 	bl	80144f0 <__sinit>
 8013f7c:	ab05      	add	r3, sp, #20
 8013f7e:	9a04      	ldr	r2, [sp, #16]
 8013f80:	68a1      	ldr	r1, [r4, #8]
 8013f82:	9301      	str	r3, [sp, #4]
 8013f84:	4620      	mov	r0, r4
 8013f86:	f000 fcdd 	bl	8014944 <_vfiprintf_r>
 8013f8a:	b002      	add	sp, #8
 8013f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f90:	b004      	add	sp, #16
 8013f92:	4770      	bx	lr
 8013f94:	2000002c 	.word	0x2000002c

08013f98 <_puts_r>:
 8013f98:	b570      	push	{r4, r5, r6, lr}
 8013f9a:	460e      	mov	r6, r1
 8013f9c:	4605      	mov	r5, r0
 8013f9e:	b118      	cbz	r0, 8013fa8 <_puts_r+0x10>
 8013fa0:	6983      	ldr	r3, [r0, #24]
 8013fa2:	b90b      	cbnz	r3, 8013fa8 <_puts_r+0x10>
 8013fa4:	f000 faa4 	bl	80144f0 <__sinit>
 8013fa8:	69ab      	ldr	r3, [r5, #24]
 8013faa:	68ac      	ldr	r4, [r5, #8]
 8013fac:	b913      	cbnz	r3, 8013fb4 <_puts_r+0x1c>
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f000 fa9e 	bl	80144f0 <__sinit>
 8013fb4:	4b2c      	ldr	r3, [pc, #176]	; (8014068 <_puts_r+0xd0>)
 8013fb6:	429c      	cmp	r4, r3
 8013fb8:	d120      	bne.n	8013ffc <_puts_r+0x64>
 8013fba:	686c      	ldr	r4, [r5, #4]
 8013fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013fbe:	07db      	lsls	r3, r3, #31
 8013fc0:	d405      	bmi.n	8013fce <_puts_r+0x36>
 8013fc2:	89a3      	ldrh	r3, [r4, #12]
 8013fc4:	0598      	lsls	r0, r3, #22
 8013fc6:	d402      	bmi.n	8013fce <_puts_r+0x36>
 8013fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fca:	f000 fb41 	bl	8014650 <__retarget_lock_acquire_recursive>
 8013fce:	89a3      	ldrh	r3, [r4, #12]
 8013fd0:	0719      	lsls	r1, r3, #28
 8013fd2:	d51d      	bpl.n	8014010 <_puts_r+0x78>
 8013fd4:	6923      	ldr	r3, [r4, #16]
 8013fd6:	b1db      	cbz	r3, 8014010 <_puts_r+0x78>
 8013fd8:	3e01      	subs	r6, #1
 8013fda:	68a3      	ldr	r3, [r4, #8]
 8013fdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013fe0:	3b01      	subs	r3, #1
 8013fe2:	60a3      	str	r3, [r4, #8]
 8013fe4:	bb39      	cbnz	r1, 8014036 <_puts_r+0x9e>
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	da38      	bge.n	801405c <_puts_r+0xc4>
 8013fea:	4622      	mov	r2, r4
 8013fec:	210a      	movs	r1, #10
 8013fee:	4628      	mov	r0, r5
 8013ff0:	f000 f886 	bl	8014100 <__swbuf_r>
 8013ff4:	3001      	adds	r0, #1
 8013ff6:	d011      	beq.n	801401c <_puts_r+0x84>
 8013ff8:	250a      	movs	r5, #10
 8013ffa:	e011      	b.n	8014020 <_puts_r+0x88>
 8013ffc:	4b1b      	ldr	r3, [pc, #108]	; (801406c <_puts_r+0xd4>)
 8013ffe:	429c      	cmp	r4, r3
 8014000:	d101      	bne.n	8014006 <_puts_r+0x6e>
 8014002:	68ac      	ldr	r4, [r5, #8]
 8014004:	e7da      	b.n	8013fbc <_puts_r+0x24>
 8014006:	4b1a      	ldr	r3, [pc, #104]	; (8014070 <_puts_r+0xd8>)
 8014008:	429c      	cmp	r4, r3
 801400a:	bf08      	it	eq
 801400c:	68ec      	ldreq	r4, [r5, #12]
 801400e:	e7d5      	b.n	8013fbc <_puts_r+0x24>
 8014010:	4621      	mov	r1, r4
 8014012:	4628      	mov	r0, r5
 8014014:	f000 f8c6 	bl	80141a4 <__swsetup_r>
 8014018:	2800      	cmp	r0, #0
 801401a:	d0dd      	beq.n	8013fd8 <_puts_r+0x40>
 801401c:	f04f 35ff 	mov.w	r5, #4294967295
 8014020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014022:	07da      	lsls	r2, r3, #31
 8014024:	d405      	bmi.n	8014032 <_puts_r+0x9a>
 8014026:	89a3      	ldrh	r3, [r4, #12]
 8014028:	059b      	lsls	r3, r3, #22
 801402a:	d402      	bmi.n	8014032 <_puts_r+0x9a>
 801402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801402e:	f000 fb10 	bl	8014652 <__retarget_lock_release_recursive>
 8014032:	4628      	mov	r0, r5
 8014034:	bd70      	pop	{r4, r5, r6, pc}
 8014036:	2b00      	cmp	r3, #0
 8014038:	da04      	bge.n	8014044 <_puts_r+0xac>
 801403a:	69a2      	ldr	r2, [r4, #24]
 801403c:	429a      	cmp	r2, r3
 801403e:	dc06      	bgt.n	801404e <_puts_r+0xb6>
 8014040:	290a      	cmp	r1, #10
 8014042:	d004      	beq.n	801404e <_puts_r+0xb6>
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	1c5a      	adds	r2, r3, #1
 8014048:	6022      	str	r2, [r4, #0]
 801404a:	7019      	strb	r1, [r3, #0]
 801404c:	e7c5      	b.n	8013fda <_puts_r+0x42>
 801404e:	4622      	mov	r2, r4
 8014050:	4628      	mov	r0, r5
 8014052:	f000 f855 	bl	8014100 <__swbuf_r>
 8014056:	3001      	adds	r0, #1
 8014058:	d1bf      	bne.n	8013fda <_puts_r+0x42>
 801405a:	e7df      	b.n	801401c <_puts_r+0x84>
 801405c:	6823      	ldr	r3, [r4, #0]
 801405e:	250a      	movs	r5, #10
 8014060:	1c5a      	adds	r2, r3, #1
 8014062:	6022      	str	r2, [r4, #0]
 8014064:	701d      	strb	r5, [r3, #0]
 8014066:	e7db      	b.n	8014020 <_puts_r+0x88>
 8014068:	08017cf0 	.word	0x08017cf0
 801406c:	08017d10 	.word	0x08017d10
 8014070:	08017cd0 	.word	0x08017cd0

08014074 <puts>:
 8014074:	4b02      	ldr	r3, [pc, #8]	; (8014080 <puts+0xc>)
 8014076:	4601      	mov	r1, r0
 8014078:	6818      	ldr	r0, [r3, #0]
 801407a:	f7ff bf8d 	b.w	8013f98 <_puts_r>
 801407e:	bf00      	nop
 8014080:	2000002c 	.word	0x2000002c

08014084 <rand>:
 8014084:	4b16      	ldr	r3, [pc, #88]	; (80140e0 <rand+0x5c>)
 8014086:	b510      	push	{r4, lr}
 8014088:	681c      	ldr	r4, [r3, #0]
 801408a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801408c:	b9b3      	cbnz	r3, 80140bc <rand+0x38>
 801408e:	2018      	movs	r0, #24
 8014090:	f000 fb46 	bl	8014720 <malloc>
 8014094:	63a0      	str	r0, [r4, #56]	; 0x38
 8014096:	b928      	cbnz	r0, 80140a4 <rand+0x20>
 8014098:	4602      	mov	r2, r0
 801409a:	4b12      	ldr	r3, [pc, #72]	; (80140e4 <rand+0x60>)
 801409c:	4812      	ldr	r0, [pc, #72]	; (80140e8 <rand+0x64>)
 801409e:	214e      	movs	r1, #78	; 0x4e
 80140a0:	f000 f8ee 	bl	8014280 <__assert_func>
 80140a4:	4a11      	ldr	r2, [pc, #68]	; (80140ec <rand+0x68>)
 80140a6:	4b12      	ldr	r3, [pc, #72]	; (80140f0 <rand+0x6c>)
 80140a8:	e9c0 2300 	strd	r2, r3, [r0]
 80140ac:	4b11      	ldr	r3, [pc, #68]	; (80140f4 <rand+0x70>)
 80140ae:	6083      	str	r3, [r0, #8]
 80140b0:	230b      	movs	r3, #11
 80140b2:	8183      	strh	r3, [r0, #12]
 80140b4:	2201      	movs	r2, #1
 80140b6:	2300      	movs	r3, #0
 80140b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80140bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80140be:	4a0e      	ldr	r2, [pc, #56]	; (80140f8 <rand+0x74>)
 80140c0:	6920      	ldr	r0, [r4, #16]
 80140c2:	6963      	ldr	r3, [r4, #20]
 80140c4:	490d      	ldr	r1, [pc, #52]	; (80140fc <rand+0x78>)
 80140c6:	4342      	muls	r2, r0
 80140c8:	fb01 2203 	mla	r2, r1, r3, r2
 80140cc:	fba0 0101 	umull	r0, r1, r0, r1
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	eb42 0001 	adc.w	r0, r2, r1
 80140d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80140da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80140de:	bd10      	pop	{r4, pc}
 80140e0:	2000002c 	.word	0x2000002c
 80140e4:	08017c20 	.word	0x08017c20
 80140e8:	08017c37 	.word	0x08017c37
 80140ec:	abcd330e 	.word	0xabcd330e
 80140f0:	e66d1234 	.word	0xe66d1234
 80140f4:	0005deec 	.word	0x0005deec
 80140f8:	5851f42d 	.word	0x5851f42d
 80140fc:	4c957f2d 	.word	0x4c957f2d

08014100 <__swbuf_r>:
 8014100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014102:	460e      	mov	r6, r1
 8014104:	4614      	mov	r4, r2
 8014106:	4605      	mov	r5, r0
 8014108:	b118      	cbz	r0, 8014112 <__swbuf_r+0x12>
 801410a:	6983      	ldr	r3, [r0, #24]
 801410c:	b90b      	cbnz	r3, 8014112 <__swbuf_r+0x12>
 801410e:	f000 f9ef 	bl	80144f0 <__sinit>
 8014112:	4b21      	ldr	r3, [pc, #132]	; (8014198 <__swbuf_r+0x98>)
 8014114:	429c      	cmp	r4, r3
 8014116:	d12b      	bne.n	8014170 <__swbuf_r+0x70>
 8014118:	686c      	ldr	r4, [r5, #4]
 801411a:	69a3      	ldr	r3, [r4, #24]
 801411c:	60a3      	str	r3, [r4, #8]
 801411e:	89a3      	ldrh	r3, [r4, #12]
 8014120:	071a      	lsls	r2, r3, #28
 8014122:	d52f      	bpl.n	8014184 <__swbuf_r+0x84>
 8014124:	6923      	ldr	r3, [r4, #16]
 8014126:	b36b      	cbz	r3, 8014184 <__swbuf_r+0x84>
 8014128:	6923      	ldr	r3, [r4, #16]
 801412a:	6820      	ldr	r0, [r4, #0]
 801412c:	1ac0      	subs	r0, r0, r3
 801412e:	6963      	ldr	r3, [r4, #20]
 8014130:	b2f6      	uxtb	r6, r6
 8014132:	4283      	cmp	r3, r0
 8014134:	4637      	mov	r7, r6
 8014136:	dc04      	bgt.n	8014142 <__swbuf_r+0x42>
 8014138:	4621      	mov	r1, r4
 801413a:	4628      	mov	r0, r5
 801413c:	f000 f944 	bl	80143c8 <_fflush_r>
 8014140:	bb30      	cbnz	r0, 8014190 <__swbuf_r+0x90>
 8014142:	68a3      	ldr	r3, [r4, #8]
 8014144:	3b01      	subs	r3, #1
 8014146:	60a3      	str	r3, [r4, #8]
 8014148:	6823      	ldr	r3, [r4, #0]
 801414a:	1c5a      	adds	r2, r3, #1
 801414c:	6022      	str	r2, [r4, #0]
 801414e:	701e      	strb	r6, [r3, #0]
 8014150:	6963      	ldr	r3, [r4, #20]
 8014152:	3001      	adds	r0, #1
 8014154:	4283      	cmp	r3, r0
 8014156:	d004      	beq.n	8014162 <__swbuf_r+0x62>
 8014158:	89a3      	ldrh	r3, [r4, #12]
 801415a:	07db      	lsls	r3, r3, #31
 801415c:	d506      	bpl.n	801416c <__swbuf_r+0x6c>
 801415e:	2e0a      	cmp	r6, #10
 8014160:	d104      	bne.n	801416c <__swbuf_r+0x6c>
 8014162:	4621      	mov	r1, r4
 8014164:	4628      	mov	r0, r5
 8014166:	f000 f92f 	bl	80143c8 <_fflush_r>
 801416a:	b988      	cbnz	r0, 8014190 <__swbuf_r+0x90>
 801416c:	4638      	mov	r0, r7
 801416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014170:	4b0a      	ldr	r3, [pc, #40]	; (801419c <__swbuf_r+0x9c>)
 8014172:	429c      	cmp	r4, r3
 8014174:	d101      	bne.n	801417a <__swbuf_r+0x7a>
 8014176:	68ac      	ldr	r4, [r5, #8]
 8014178:	e7cf      	b.n	801411a <__swbuf_r+0x1a>
 801417a:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <__swbuf_r+0xa0>)
 801417c:	429c      	cmp	r4, r3
 801417e:	bf08      	it	eq
 8014180:	68ec      	ldreq	r4, [r5, #12]
 8014182:	e7ca      	b.n	801411a <__swbuf_r+0x1a>
 8014184:	4621      	mov	r1, r4
 8014186:	4628      	mov	r0, r5
 8014188:	f000 f80c 	bl	80141a4 <__swsetup_r>
 801418c:	2800      	cmp	r0, #0
 801418e:	d0cb      	beq.n	8014128 <__swbuf_r+0x28>
 8014190:	f04f 37ff 	mov.w	r7, #4294967295
 8014194:	e7ea      	b.n	801416c <__swbuf_r+0x6c>
 8014196:	bf00      	nop
 8014198:	08017cf0 	.word	0x08017cf0
 801419c:	08017d10 	.word	0x08017d10
 80141a0:	08017cd0 	.word	0x08017cd0

080141a4 <__swsetup_r>:
 80141a4:	4b32      	ldr	r3, [pc, #200]	; (8014270 <__swsetup_r+0xcc>)
 80141a6:	b570      	push	{r4, r5, r6, lr}
 80141a8:	681d      	ldr	r5, [r3, #0]
 80141aa:	4606      	mov	r6, r0
 80141ac:	460c      	mov	r4, r1
 80141ae:	b125      	cbz	r5, 80141ba <__swsetup_r+0x16>
 80141b0:	69ab      	ldr	r3, [r5, #24]
 80141b2:	b913      	cbnz	r3, 80141ba <__swsetup_r+0x16>
 80141b4:	4628      	mov	r0, r5
 80141b6:	f000 f99b 	bl	80144f0 <__sinit>
 80141ba:	4b2e      	ldr	r3, [pc, #184]	; (8014274 <__swsetup_r+0xd0>)
 80141bc:	429c      	cmp	r4, r3
 80141be:	d10f      	bne.n	80141e0 <__swsetup_r+0x3c>
 80141c0:	686c      	ldr	r4, [r5, #4]
 80141c2:	89a3      	ldrh	r3, [r4, #12]
 80141c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141c8:	0719      	lsls	r1, r3, #28
 80141ca:	d42c      	bmi.n	8014226 <__swsetup_r+0x82>
 80141cc:	06dd      	lsls	r5, r3, #27
 80141ce:	d411      	bmi.n	80141f4 <__swsetup_r+0x50>
 80141d0:	2309      	movs	r3, #9
 80141d2:	6033      	str	r3, [r6, #0]
 80141d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80141d8:	81a3      	strh	r3, [r4, #12]
 80141da:	f04f 30ff 	mov.w	r0, #4294967295
 80141de:	e03e      	b.n	801425e <__swsetup_r+0xba>
 80141e0:	4b25      	ldr	r3, [pc, #148]	; (8014278 <__swsetup_r+0xd4>)
 80141e2:	429c      	cmp	r4, r3
 80141e4:	d101      	bne.n	80141ea <__swsetup_r+0x46>
 80141e6:	68ac      	ldr	r4, [r5, #8]
 80141e8:	e7eb      	b.n	80141c2 <__swsetup_r+0x1e>
 80141ea:	4b24      	ldr	r3, [pc, #144]	; (801427c <__swsetup_r+0xd8>)
 80141ec:	429c      	cmp	r4, r3
 80141ee:	bf08      	it	eq
 80141f0:	68ec      	ldreq	r4, [r5, #12]
 80141f2:	e7e6      	b.n	80141c2 <__swsetup_r+0x1e>
 80141f4:	0758      	lsls	r0, r3, #29
 80141f6:	d512      	bpl.n	801421e <__swsetup_r+0x7a>
 80141f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141fa:	b141      	cbz	r1, 801420e <__swsetup_r+0x6a>
 80141fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014200:	4299      	cmp	r1, r3
 8014202:	d002      	beq.n	801420a <__swsetup_r+0x66>
 8014204:	4630      	mov	r0, r6
 8014206:	f000 fa93 	bl	8014730 <_free_r>
 801420a:	2300      	movs	r3, #0
 801420c:	6363      	str	r3, [r4, #52]	; 0x34
 801420e:	89a3      	ldrh	r3, [r4, #12]
 8014210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014214:	81a3      	strh	r3, [r4, #12]
 8014216:	2300      	movs	r3, #0
 8014218:	6063      	str	r3, [r4, #4]
 801421a:	6923      	ldr	r3, [r4, #16]
 801421c:	6023      	str	r3, [r4, #0]
 801421e:	89a3      	ldrh	r3, [r4, #12]
 8014220:	f043 0308 	orr.w	r3, r3, #8
 8014224:	81a3      	strh	r3, [r4, #12]
 8014226:	6923      	ldr	r3, [r4, #16]
 8014228:	b94b      	cbnz	r3, 801423e <__swsetup_r+0x9a>
 801422a:	89a3      	ldrh	r3, [r4, #12]
 801422c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014234:	d003      	beq.n	801423e <__swsetup_r+0x9a>
 8014236:	4621      	mov	r1, r4
 8014238:	4630      	mov	r0, r6
 801423a:	f000 fa31 	bl	80146a0 <__smakebuf_r>
 801423e:	89a0      	ldrh	r0, [r4, #12]
 8014240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014244:	f010 0301 	ands.w	r3, r0, #1
 8014248:	d00a      	beq.n	8014260 <__swsetup_r+0xbc>
 801424a:	2300      	movs	r3, #0
 801424c:	60a3      	str	r3, [r4, #8]
 801424e:	6963      	ldr	r3, [r4, #20]
 8014250:	425b      	negs	r3, r3
 8014252:	61a3      	str	r3, [r4, #24]
 8014254:	6923      	ldr	r3, [r4, #16]
 8014256:	b943      	cbnz	r3, 801426a <__swsetup_r+0xc6>
 8014258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801425c:	d1ba      	bne.n	80141d4 <__swsetup_r+0x30>
 801425e:	bd70      	pop	{r4, r5, r6, pc}
 8014260:	0781      	lsls	r1, r0, #30
 8014262:	bf58      	it	pl
 8014264:	6963      	ldrpl	r3, [r4, #20]
 8014266:	60a3      	str	r3, [r4, #8]
 8014268:	e7f4      	b.n	8014254 <__swsetup_r+0xb0>
 801426a:	2000      	movs	r0, #0
 801426c:	e7f7      	b.n	801425e <__swsetup_r+0xba>
 801426e:	bf00      	nop
 8014270:	2000002c 	.word	0x2000002c
 8014274:	08017cf0 	.word	0x08017cf0
 8014278:	08017d10 	.word	0x08017d10
 801427c:	08017cd0 	.word	0x08017cd0

08014280 <__assert_func>:
 8014280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014282:	4614      	mov	r4, r2
 8014284:	461a      	mov	r2, r3
 8014286:	4b09      	ldr	r3, [pc, #36]	; (80142ac <__assert_func+0x2c>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4605      	mov	r5, r0
 801428c:	68d8      	ldr	r0, [r3, #12]
 801428e:	b14c      	cbz	r4, 80142a4 <__assert_func+0x24>
 8014290:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <__assert_func+0x30>)
 8014292:	9100      	str	r1, [sp, #0]
 8014294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014298:	4906      	ldr	r1, [pc, #24]	; (80142b4 <__assert_func+0x34>)
 801429a:	462b      	mov	r3, r5
 801429c:	f000 f9a6 	bl	80145ec <fiprintf>
 80142a0:	f000 fe7a 	bl	8014f98 <abort>
 80142a4:	4b04      	ldr	r3, [pc, #16]	; (80142b8 <__assert_func+0x38>)
 80142a6:	461c      	mov	r4, r3
 80142a8:	e7f3      	b.n	8014292 <__assert_func+0x12>
 80142aa:	bf00      	nop
 80142ac:	2000002c 	.word	0x2000002c
 80142b0:	08017c92 	.word	0x08017c92
 80142b4:	08017c9f 	.word	0x08017c9f
 80142b8:	08017ccd 	.word	0x08017ccd

080142bc <__sflush_r>:
 80142bc:	898a      	ldrh	r2, [r1, #12]
 80142be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142c2:	4605      	mov	r5, r0
 80142c4:	0710      	lsls	r0, r2, #28
 80142c6:	460c      	mov	r4, r1
 80142c8:	d458      	bmi.n	801437c <__sflush_r+0xc0>
 80142ca:	684b      	ldr	r3, [r1, #4]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	dc05      	bgt.n	80142dc <__sflush_r+0x20>
 80142d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	dc02      	bgt.n	80142dc <__sflush_r+0x20>
 80142d6:	2000      	movs	r0, #0
 80142d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142de:	2e00      	cmp	r6, #0
 80142e0:	d0f9      	beq.n	80142d6 <__sflush_r+0x1a>
 80142e2:	2300      	movs	r3, #0
 80142e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142e8:	682f      	ldr	r7, [r5, #0]
 80142ea:	602b      	str	r3, [r5, #0]
 80142ec:	d032      	beq.n	8014354 <__sflush_r+0x98>
 80142ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142f0:	89a3      	ldrh	r3, [r4, #12]
 80142f2:	075a      	lsls	r2, r3, #29
 80142f4:	d505      	bpl.n	8014302 <__sflush_r+0x46>
 80142f6:	6863      	ldr	r3, [r4, #4]
 80142f8:	1ac0      	subs	r0, r0, r3
 80142fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142fc:	b10b      	cbz	r3, 8014302 <__sflush_r+0x46>
 80142fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014300:	1ac0      	subs	r0, r0, r3
 8014302:	2300      	movs	r3, #0
 8014304:	4602      	mov	r2, r0
 8014306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014308:	6a21      	ldr	r1, [r4, #32]
 801430a:	4628      	mov	r0, r5
 801430c:	47b0      	blx	r6
 801430e:	1c43      	adds	r3, r0, #1
 8014310:	89a3      	ldrh	r3, [r4, #12]
 8014312:	d106      	bne.n	8014322 <__sflush_r+0x66>
 8014314:	6829      	ldr	r1, [r5, #0]
 8014316:	291d      	cmp	r1, #29
 8014318:	d82c      	bhi.n	8014374 <__sflush_r+0xb8>
 801431a:	4a2a      	ldr	r2, [pc, #168]	; (80143c4 <__sflush_r+0x108>)
 801431c:	40ca      	lsrs	r2, r1
 801431e:	07d6      	lsls	r6, r2, #31
 8014320:	d528      	bpl.n	8014374 <__sflush_r+0xb8>
 8014322:	2200      	movs	r2, #0
 8014324:	6062      	str	r2, [r4, #4]
 8014326:	04d9      	lsls	r1, r3, #19
 8014328:	6922      	ldr	r2, [r4, #16]
 801432a:	6022      	str	r2, [r4, #0]
 801432c:	d504      	bpl.n	8014338 <__sflush_r+0x7c>
 801432e:	1c42      	adds	r2, r0, #1
 8014330:	d101      	bne.n	8014336 <__sflush_r+0x7a>
 8014332:	682b      	ldr	r3, [r5, #0]
 8014334:	b903      	cbnz	r3, 8014338 <__sflush_r+0x7c>
 8014336:	6560      	str	r0, [r4, #84]	; 0x54
 8014338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801433a:	602f      	str	r7, [r5, #0]
 801433c:	2900      	cmp	r1, #0
 801433e:	d0ca      	beq.n	80142d6 <__sflush_r+0x1a>
 8014340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014344:	4299      	cmp	r1, r3
 8014346:	d002      	beq.n	801434e <__sflush_r+0x92>
 8014348:	4628      	mov	r0, r5
 801434a:	f000 f9f1 	bl	8014730 <_free_r>
 801434e:	2000      	movs	r0, #0
 8014350:	6360      	str	r0, [r4, #52]	; 0x34
 8014352:	e7c1      	b.n	80142d8 <__sflush_r+0x1c>
 8014354:	6a21      	ldr	r1, [r4, #32]
 8014356:	2301      	movs	r3, #1
 8014358:	4628      	mov	r0, r5
 801435a:	47b0      	blx	r6
 801435c:	1c41      	adds	r1, r0, #1
 801435e:	d1c7      	bne.n	80142f0 <__sflush_r+0x34>
 8014360:	682b      	ldr	r3, [r5, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d0c4      	beq.n	80142f0 <__sflush_r+0x34>
 8014366:	2b1d      	cmp	r3, #29
 8014368:	d001      	beq.n	801436e <__sflush_r+0xb2>
 801436a:	2b16      	cmp	r3, #22
 801436c:	d101      	bne.n	8014372 <__sflush_r+0xb6>
 801436e:	602f      	str	r7, [r5, #0]
 8014370:	e7b1      	b.n	80142d6 <__sflush_r+0x1a>
 8014372:	89a3      	ldrh	r3, [r4, #12]
 8014374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014378:	81a3      	strh	r3, [r4, #12]
 801437a:	e7ad      	b.n	80142d8 <__sflush_r+0x1c>
 801437c:	690f      	ldr	r7, [r1, #16]
 801437e:	2f00      	cmp	r7, #0
 8014380:	d0a9      	beq.n	80142d6 <__sflush_r+0x1a>
 8014382:	0793      	lsls	r3, r2, #30
 8014384:	680e      	ldr	r6, [r1, #0]
 8014386:	bf08      	it	eq
 8014388:	694b      	ldreq	r3, [r1, #20]
 801438a:	600f      	str	r7, [r1, #0]
 801438c:	bf18      	it	ne
 801438e:	2300      	movne	r3, #0
 8014390:	eba6 0807 	sub.w	r8, r6, r7
 8014394:	608b      	str	r3, [r1, #8]
 8014396:	f1b8 0f00 	cmp.w	r8, #0
 801439a:	dd9c      	ble.n	80142d6 <__sflush_r+0x1a>
 801439c:	6a21      	ldr	r1, [r4, #32]
 801439e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143a0:	4643      	mov	r3, r8
 80143a2:	463a      	mov	r2, r7
 80143a4:	4628      	mov	r0, r5
 80143a6:	47b0      	blx	r6
 80143a8:	2800      	cmp	r0, #0
 80143aa:	dc06      	bgt.n	80143ba <__sflush_r+0xfe>
 80143ac:	89a3      	ldrh	r3, [r4, #12]
 80143ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143b2:	81a3      	strh	r3, [r4, #12]
 80143b4:	f04f 30ff 	mov.w	r0, #4294967295
 80143b8:	e78e      	b.n	80142d8 <__sflush_r+0x1c>
 80143ba:	4407      	add	r7, r0
 80143bc:	eba8 0800 	sub.w	r8, r8, r0
 80143c0:	e7e9      	b.n	8014396 <__sflush_r+0xda>
 80143c2:	bf00      	nop
 80143c4:	20400001 	.word	0x20400001

080143c8 <_fflush_r>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	690b      	ldr	r3, [r1, #16]
 80143cc:	4605      	mov	r5, r0
 80143ce:	460c      	mov	r4, r1
 80143d0:	b913      	cbnz	r3, 80143d8 <_fflush_r+0x10>
 80143d2:	2500      	movs	r5, #0
 80143d4:	4628      	mov	r0, r5
 80143d6:	bd38      	pop	{r3, r4, r5, pc}
 80143d8:	b118      	cbz	r0, 80143e2 <_fflush_r+0x1a>
 80143da:	6983      	ldr	r3, [r0, #24]
 80143dc:	b90b      	cbnz	r3, 80143e2 <_fflush_r+0x1a>
 80143de:	f000 f887 	bl	80144f0 <__sinit>
 80143e2:	4b14      	ldr	r3, [pc, #80]	; (8014434 <_fflush_r+0x6c>)
 80143e4:	429c      	cmp	r4, r3
 80143e6:	d11b      	bne.n	8014420 <_fflush_r+0x58>
 80143e8:	686c      	ldr	r4, [r5, #4]
 80143ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d0ef      	beq.n	80143d2 <_fflush_r+0xa>
 80143f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80143f4:	07d0      	lsls	r0, r2, #31
 80143f6:	d404      	bmi.n	8014402 <_fflush_r+0x3a>
 80143f8:	0599      	lsls	r1, r3, #22
 80143fa:	d402      	bmi.n	8014402 <_fflush_r+0x3a>
 80143fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143fe:	f000 f927 	bl	8014650 <__retarget_lock_acquire_recursive>
 8014402:	4628      	mov	r0, r5
 8014404:	4621      	mov	r1, r4
 8014406:	f7ff ff59 	bl	80142bc <__sflush_r>
 801440a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801440c:	07da      	lsls	r2, r3, #31
 801440e:	4605      	mov	r5, r0
 8014410:	d4e0      	bmi.n	80143d4 <_fflush_r+0xc>
 8014412:	89a3      	ldrh	r3, [r4, #12]
 8014414:	059b      	lsls	r3, r3, #22
 8014416:	d4dd      	bmi.n	80143d4 <_fflush_r+0xc>
 8014418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801441a:	f000 f91a 	bl	8014652 <__retarget_lock_release_recursive>
 801441e:	e7d9      	b.n	80143d4 <_fflush_r+0xc>
 8014420:	4b05      	ldr	r3, [pc, #20]	; (8014438 <_fflush_r+0x70>)
 8014422:	429c      	cmp	r4, r3
 8014424:	d101      	bne.n	801442a <_fflush_r+0x62>
 8014426:	68ac      	ldr	r4, [r5, #8]
 8014428:	e7df      	b.n	80143ea <_fflush_r+0x22>
 801442a:	4b04      	ldr	r3, [pc, #16]	; (801443c <_fflush_r+0x74>)
 801442c:	429c      	cmp	r4, r3
 801442e:	bf08      	it	eq
 8014430:	68ec      	ldreq	r4, [r5, #12]
 8014432:	e7da      	b.n	80143ea <_fflush_r+0x22>
 8014434:	08017cf0 	.word	0x08017cf0
 8014438:	08017d10 	.word	0x08017d10
 801443c:	08017cd0 	.word	0x08017cd0

08014440 <std>:
 8014440:	2300      	movs	r3, #0
 8014442:	b510      	push	{r4, lr}
 8014444:	4604      	mov	r4, r0
 8014446:	e9c0 3300 	strd	r3, r3, [r0]
 801444a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801444e:	6083      	str	r3, [r0, #8]
 8014450:	8181      	strh	r1, [r0, #12]
 8014452:	6643      	str	r3, [r0, #100]	; 0x64
 8014454:	81c2      	strh	r2, [r0, #14]
 8014456:	6183      	str	r3, [r0, #24]
 8014458:	4619      	mov	r1, r3
 801445a:	2208      	movs	r2, #8
 801445c:	305c      	adds	r0, #92	; 0x5c
 801445e:	f7ff fd7b 	bl	8013f58 <memset>
 8014462:	4b05      	ldr	r3, [pc, #20]	; (8014478 <std+0x38>)
 8014464:	6263      	str	r3, [r4, #36]	; 0x24
 8014466:	4b05      	ldr	r3, [pc, #20]	; (801447c <std+0x3c>)
 8014468:	62a3      	str	r3, [r4, #40]	; 0x28
 801446a:	4b05      	ldr	r3, [pc, #20]	; (8014480 <std+0x40>)
 801446c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801446e:	4b05      	ldr	r3, [pc, #20]	; (8014484 <std+0x44>)
 8014470:	6224      	str	r4, [r4, #32]
 8014472:	6323      	str	r3, [r4, #48]	; 0x30
 8014474:	bd10      	pop	{r4, pc}
 8014476:	bf00      	nop
 8014478:	08014eed 	.word	0x08014eed
 801447c:	08014f0f 	.word	0x08014f0f
 8014480:	08014f47 	.word	0x08014f47
 8014484:	08014f6b 	.word	0x08014f6b

08014488 <_cleanup_r>:
 8014488:	4901      	ldr	r1, [pc, #4]	; (8014490 <_cleanup_r+0x8>)
 801448a:	f000 b8c1 	b.w	8014610 <_fwalk_reent>
 801448e:	bf00      	nop
 8014490:	080143c9 	.word	0x080143c9

08014494 <__sfmoreglue>:
 8014494:	b570      	push	{r4, r5, r6, lr}
 8014496:	2268      	movs	r2, #104	; 0x68
 8014498:	1e4d      	subs	r5, r1, #1
 801449a:	4355      	muls	r5, r2
 801449c:	460e      	mov	r6, r1
 801449e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144a2:	f000 f9b1 	bl	8014808 <_malloc_r>
 80144a6:	4604      	mov	r4, r0
 80144a8:	b140      	cbz	r0, 80144bc <__sfmoreglue+0x28>
 80144aa:	2100      	movs	r1, #0
 80144ac:	e9c0 1600 	strd	r1, r6, [r0]
 80144b0:	300c      	adds	r0, #12
 80144b2:	60a0      	str	r0, [r4, #8]
 80144b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144b8:	f7ff fd4e 	bl	8013f58 <memset>
 80144bc:	4620      	mov	r0, r4
 80144be:	bd70      	pop	{r4, r5, r6, pc}

080144c0 <__sfp_lock_acquire>:
 80144c0:	4801      	ldr	r0, [pc, #4]	; (80144c8 <__sfp_lock_acquire+0x8>)
 80144c2:	f000 b8c5 	b.w	8014650 <__retarget_lock_acquire_recursive>
 80144c6:	bf00      	nop
 80144c8:	20008de1 	.word	0x20008de1

080144cc <__sfp_lock_release>:
 80144cc:	4801      	ldr	r0, [pc, #4]	; (80144d4 <__sfp_lock_release+0x8>)
 80144ce:	f000 b8c0 	b.w	8014652 <__retarget_lock_release_recursive>
 80144d2:	bf00      	nop
 80144d4:	20008de1 	.word	0x20008de1

080144d8 <__sinit_lock_acquire>:
 80144d8:	4801      	ldr	r0, [pc, #4]	; (80144e0 <__sinit_lock_acquire+0x8>)
 80144da:	f000 b8b9 	b.w	8014650 <__retarget_lock_acquire_recursive>
 80144de:	bf00      	nop
 80144e0:	20008de2 	.word	0x20008de2

080144e4 <__sinit_lock_release>:
 80144e4:	4801      	ldr	r0, [pc, #4]	; (80144ec <__sinit_lock_release+0x8>)
 80144e6:	f000 b8b4 	b.w	8014652 <__retarget_lock_release_recursive>
 80144ea:	bf00      	nop
 80144ec:	20008de2 	.word	0x20008de2

080144f0 <__sinit>:
 80144f0:	b510      	push	{r4, lr}
 80144f2:	4604      	mov	r4, r0
 80144f4:	f7ff fff0 	bl	80144d8 <__sinit_lock_acquire>
 80144f8:	69a3      	ldr	r3, [r4, #24]
 80144fa:	b11b      	cbz	r3, 8014504 <__sinit+0x14>
 80144fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014500:	f7ff bff0 	b.w	80144e4 <__sinit_lock_release>
 8014504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014508:	6523      	str	r3, [r4, #80]	; 0x50
 801450a:	4b13      	ldr	r3, [pc, #76]	; (8014558 <__sinit+0x68>)
 801450c:	4a13      	ldr	r2, [pc, #76]	; (801455c <__sinit+0x6c>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	62a2      	str	r2, [r4, #40]	; 0x28
 8014512:	42a3      	cmp	r3, r4
 8014514:	bf04      	itt	eq
 8014516:	2301      	moveq	r3, #1
 8014518:	61a3      	streq	r3, [r4, #24]
 801451a:	4620      	mov	r0, r4
 801451c:	f000 f820 	bl	8014560 <__sfp>
 8014520:	6060      	str	r0, [r4, #4]
 8014522:	4620      	mov	r0, r4
 8014524:	f000 f81c 	bl	8014560 <__sfp>
 8014528:	60a0      	str	r0, [r4, #8]
 801452a:	4620      	mov	r0, r4
 801452c:	f000 f818 	bl	8014560 <__sfp>
 8014530:	2200      	movs	r2, #0
 8014532:	60e0      	str	r0, [r4, #12]
 8014534:	2104      	movs	r1, #4
 8014536:	6860      	ldr	r0, [r4, #4]
 8014538:	f7ff ff82 	bl	8014440 <std>
 801453c:	68a0      	ldr	r0, [r4, #8]
 801453e:	2201      	movs	r2, #1
 8014540:	2109      	movs	r1, #9
 8014542:	f7ff ff7d 	bl	8014440 <std>
 8014546:	68e0      	ldr	r0, [r4, #12]
 8014548:	2202      	movs	r2, #2
 801454a:	2112      	movs	r1, #18
 801454c:	f7ff ff78 	bl	8014440 <std>
 8014550:	2301      	movs	r3, #1
 8014552:	61a3      	str	r3, [r4, #24]
 8014554:	e7d2      	b.n	80144fc <__sinit+0xc>
 8014556:	bf00      	nop
 8014558:	08017c1c 	.word	0x08017c1c
 801455c:	08014489 	.word	0x08014489

08014560 <__sfp>:
 8014560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014562:	4607      	mov	r7, r0
 8014564:	f7ff ffac 	bl	80144c0 <__sfp_lock_acquire>
 8014568:	4b1e      	ldr	r3, [pc, #120]	; (80145e4 <__sfp+0x84>)
 801456a:	681e      	ldr	r6, [r3, #0]
 801456c:	69b3      	ldr	r3, [r6, #24]
 801456e:	b913      	cbnz	r3, 8014576 <__sfp+0x16>
 8014570:	4630      	mov	r0, r6
 8014572:	f7ff ffbd 	bl	80144f0 <__sinit>
 8014576:	3648      	adds	r6, #72	; 0x48
 8014578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801457c:	3b01      	subs	r3, #1
 801457e:	d503      	bpl.n	8014588 <__sfp+0x28>
 8014580:	6833      	ldr	r3, [r6, #0]
 8014582:	b30b      	cbz	r3, 80145c8 <__sfp+0x68>
 8014584:	6836      	ldr	r6, [r6, #0]
 8014586:	e7f7      	b.n	8014578 <__sfp+0x18>
 8014588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801458c:	b9d5      	cbnz	r5, 80145c4 <__sfp+0x64>
 801458e:	4b16      	ldr	r3, [pc, #88]	; (80145e8 <__sfp+0x88>)
 8014590:	60e3      	str	r3, [r4, #12]
 8014592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014596:	6665      	str	r5, [r4, #100]	; 0x64
 8014598:	f000 f859 	bl	801464e <__retarget_lock_init_recursive>
 801459c:	f7ff ff96 	bl	80144cc <__sfp_lock_release>
 80145a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80145a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80145a8:	6025      	str	r5, [r4, #0]
 80145aa:	61a5      	str	r5, [r4, #24]
 80145ac:	2208      	movs	r2, #8
 80145ae:	4629      	mov	r1, r5
 80145b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145b4:	f7ff fcd0 	bl	8013f58 <memset>
 80145b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80145bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80145c0:	4620      	mov	r0, r4
 80145c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c4:	3468      	adds	r4, #104	; 0x68
 80145c6:	e7d9      	b.n	801457c <__sfp+0x1c>
 80145c8:	2104      	movs	r1, #4
 80145ca:	4638      	mov	r0, r7
 80145cc:	f7ff ff62 	bl	8014494 <__sfmoreglue>
 80145d0:	4604      	mov	r4, r0
 80145d2:	6030      	str	r0, [r6, #0]
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d1d5      	bne.n	8014584 <__sfp+0x24>
 80145d8:	f7ff ff78 	bl	80144cc <__sfp_lock_release>
 80145dc:	230c      	movs	r3, #12
 80145de:	603b      	str	r3, [r7, #0]
 80145e0:	e7ee      	b.n	80145c0 <__sfp+0x60>
 80145e2:	bf00      	nop
 80145e4:	08017c1c 	.word	0x08017c1c
 80145e8:	ffff0001 	.word	0xffff0001

080145ec <fiprintf>:
 80145ec:	b40e      	push	{r1, r2, r3}
 80145ee:	b503      	push	{r0, r1, lr}
 80145f0:	4601      	mov	r1, r0
 80145f2:	ab03      	add	r3, sp, #12
 80145f4:	4805      	ldr	r0, [pc, #20]	; (801460c <fiprintf+0x20>)
 80145f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80145fa:	6800      	ldr	r0, [r0, #0]
 80145fc:	9301      	str	r3, [sp, #4]
 80145fe:	f000 f9a1 	bl	8014944 <_vfiprintf_r>
 8014602:	b002      	add	sp, #8
 8014604:	f85d eb04 	ldr.w	lr, [sp], #4
 8014608:	b003      	add	sp, #12
 801460a:	4770      	bx	lr
 801460c:	2000002c 	.word	0x2000002c

08014610 <_fwalk_reent>:
 8014610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014614:	4606      	mov	r6, r0
 8014616:	4688      	mov	r8, r1
 8014618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801461c:	2700      	movs	r7, #0
 801461e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014622:	f1b9 0901 	subs.w	r9, r9, #1
 8014626:	d505      	bpl.n	8014634 <_fwalk_reent+0x24>
 8014628:	6824      	ldr	r4, [r4, #0]
 801462a:	2c00      	cmp	r4, #0
 801462c:	d1f7      	bne.n	801461e <_fwalk_reent+0xe>
 801462e:	4638      	mov	r0, r7
 8014630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014634:	89ab      	ldrh	r3, [r5, #12]
 8014636:	2b01      	cmp	r3, #1
 8014638:	d907      	bls.n	801464a <_fwalk_reent+0x3a>
 801463a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801463e:	3301      	adds	r3, #1
 8014640:	d003      	beq.n	801464a <_fwalk_reent+0x3a>
 8014642:	4629      	mov	r1, r5
 8014644:	4630      	mov	r0, r6
 8014646:	47c0      	blx	r8
 8014648:	4307      	orrs	r7, r0
 801464a:	3568      	adds	r5, #104	; 0x68
 801464c:	e7e9      	b.n	8014622 <_fwalk_reent+0x12>

0801464e <__retarget_lock_init_recursive>:
 801464e:	4770      	bx	lr

08014650 <__retarget_lock_acquire_recursive>:
 8014650:	4770      	bx	lr

08014652 <__retarget_lock_release_recursive>:
 8014652:	4770      	bx	lr

08014654 <__swhatbuf_r>:
 8014654:	b570      	push	{r4, r5, r6, lr}
 8014656:	460e      	mov	r6, r1
 8014658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801465c:	2900      	cmp	r1, #0
 801465e:	b096      	sub	sp, #88	; 0x58
 8014660:	4614      	mov	r4, r2
 8014662:	461d      	mov	r5, r3
 8014664:	da08      	bge.n	8014678 <__swhatbuf_r+0x24>
 8014666:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801466a:	2200      	movs	r2, #0
 801466c:	602a      	str	r2, [r5, #0]
 801466e:	061a      	lsls	r2, r3, #24
 8014670:	d410      	bmi.n	8014694 <__swhatbuf_r+0x40>
 8014672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014676:	e00e      	b.n	8014696 <__swhatbuf_r+0x42>
 8014678:	466a      	mov	r2, sp
 801467a:	f000 fca5 	bl	8014fc8 <_fstat_r>
 801467e:	2800      	cmp	r0, #0
 8014680:	dbf1      	blt.n	8014666 <__swhatbuf_r+0x12>
 8014682:	9a01      	ldr	r2, [sp, #4]
 8014684:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014688:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801468c:	425a      	negs	r2, r3
 801468e:	415a      	adcs	r2, r3
 8014690:	602a      	str	r2, [r5, #0]
 8014692:	e7ee      	b.n	8014672 <__swhatbuf_r+0x1e>
 8014694:	2340      	movs	r3, #64	; 0x40
 8014696:	2000      	movs	r0, #0
 8014698:	6023      	str	r3, [r4, #0]
 801469a:	b016      	add	sp, #88	; 0x58
 801469c:	bd70      	pop	{r4, r5, r6, pc}
	...

080146a0 <__smakebuf_r>:
 80146a0:	898b      	ldrh	r3, [r1, #12]
 80146a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80146a4:	079d      	lsls	r5, r3, #30
 80146a6:	4606      	mov	r6, r0
 80146a8:	460c      	mov	r4, r1
 80146aa:	d507      	bpl.n	80146bc <__smakebuf_r+0x1c>
 80146ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80146b0:	6023      	str	r3, [r4, #0]
 80146b2:	6123      	str	r3, [r4, #16]
 80146b4:	2301      	movs	r3, #1
 80146b6:	6163      	str	r3, [r4, #20]
 80146b8:	b002      	add	sp, #8
 80146ba:	bd70      	pop	{r4, r5, r6, pc}
 80146bc:	ab01      	add	r3, sp, #4
 80146be:	466a      	mov	r2, sp
 80146c0:	f7ff ffc8 	bl	8014654 <__swhatbuf_r>
 80146c4:	9900      	ldr	r1, [sp, #0]
 80146c6:	4605      	mov	r5, r0
 80146c8:	4630      	mov	r0, r6
 80146ca:	f000 f89d 	bl	8014808 <_malloc_r>
 80146ce:	b948      	cbnz	r0, 80146e4 <__smakebuf_r+0x44>
 80146d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146d4:	059a      	lsls	r2, r3, #22
 80146d6:	d4ef      	bmi.n	80146b8 <__smakebuf_r+0x18>
 80146d8:	f023 0303 	bic.w	r3, r3, #3
 80146dc:	f043 0302 	orr.w	r3, r3, #2
 80146e0:	81a3      	strh	r3, [r4, #12]
 80146e2:	e7e3      	b.n	80146ac <__smakebuf_r+0xc>
 80146e4:	4b0d      	ldr	r3, [pc, #52]	; (801471c <__smakebuf_r+0x7c>)
 80146e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80146e8:	89a3      	ldrh	r3, [r4, #12]
 80146ea:	6020      	str	r0, [r4, #0]
 80146ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146f0:	81a3      	strh	r3, [r4, #12]
 80146f2:	9b00      	ldr	r3, [sp, #0]
 80146f4:	6163      	str	r3, [r4, #20]
 80146f6:	9b01      	ldr	r3, [sp, #4]
 80146f8:	6120      	str	r0, [r4, #16]
 80146fa:	b15b      	cbz	r3, 8014714 <__smakebuf_r+0x74>
 80146fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014700:	4630      	mov	r0, r6
 8014702:	f000 fc73 	bl	8014fec <_isatty_r>
 8014706:	b128      	cbz	r0, 8014714 <__smakebuf_r+0x74>
 8014708:	89a3      	ldrh	r3, [r4, #12]
 801470a:	f023 0303 	bic.w	r3, r3, #3
 801470e:	f043 0301 	orr.w	r3, r3, #1
 8014712:	81a3      	strh	r3, [r4, #12]
 8014714:	89a0      	ldrh	r0, [r4, #12]
 8014716:	4305      	orrs	r5, r0
 8014718:	81a5      	strh	r5, [r4, #12]
 801471a:	e7cd      	b.n	80146b8 <__smakebuf_r+0x18>
 801471c:	08014489 	.word	0x08014489

08014720 <malloc>:
 8014720:	4b02      	ldr	r3, [pc, #8]	; (801472c <malloc+0xc>)
 8014722:	4601      	mov	r1, r0
 8014724:	6818      	ldr	r0, [r3, #0]
 8014726:	f000 b86f 	b.w	8014808 <_malloc_r>
 801472a:	bf00      	nop
 801472c:	2000002c 	.word	0x2000002c

08014730 <_free_r>:
 8014730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014732:	2900      	cmp	r1, #0
 8014734:	d044      	beq.n	80147c0 <_free_r+0x90>
 8014736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801473a:	9001      	str	r0, [sp, #4]
 801473c:	2b00      	cmp	r3, #0
 801473e:	f1a1 0404 	sub.w	r4, r1, #4
 8014742:	bfb8      	it	lt
 8014744:	18e4      	addlt	r4, r4, r3
 8014746:	f000 fc73 	bl	8015030 <__malloc_lock>
 801474a:	4a1e      	ldr	r2, [pc, #120]	; (80147c4 <_free_r+0x94>)
 801474c:	9801      	ldr	r0, [sp, #4]
 801474e:	6813      	ldr	r3, [r2, #0]
 8014750:	b933      	cbnz	r3, 8014760 <_free_r+0x30>
 8014752:	6063      	str	r3, [r4, #4]
 8014754:	6014      	str	r4, [r2, #0]
 8014756:	b003      	add	sp, #12
 8014758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801475c:	f000 bc6e 	b.w	801503c <__malloc_unlock>
 8014760:	42a3      	cmp	r3, r4
 8014762:	d908      	bls.n	8014776 <_free_r+0x46>
 8014764:	6825      	ldr	r5, [r4, #0]
 8014766:	1961      	adds	r1, r4, r5
 8014768:	428b      	cmp	r3, r1
 801476a:	bf01      	itttt	eq
 801476c:	6819      	ldreq	r1, [r3, #0]
 801476e:	685b      	ldreq	r3, [r3, #4]
 8014770:	1949      	addeq	r1, r1, r5
 8014772:	6021      	streq	r1, [r4, #0]
 8014774:	e7ed      	b.n	8014752 <_free_r+0x22>
 8014776:	461a      	mov	r2, r3
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	b10b      	cbz	r3, 8014780 <_free_r+0x50>
 801477c:	42a3      	cmp	r3, r4
 801477e:	d9fa      	bls.n	8014776 <_free_r+0x46>
 8014780:	6811      	ldr	r1, [r2, #0]
 8014782:	1855      	adds	r5, r2, r1
 8014784:	42a5      	cmp	r5, r4
 8014786:	d10b      	bne.n	80147a0 <_free_r+0x70>
 8014788:	6824      	ldr	r4, [r4, #0]
 801478a:	4421      	add	r1, r4
 801478c:	1854      	adds	r4, r2, r1
 801478e:	42a3      	cmp	r3, r4
 8014790:	6011      	str	r1, [r2, #0]
 8014792:	d1e0      	bne.n	8014756 <_free_r+0x26>
 8014794:	681c      	ldr	r4, [r3, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	6053      	str	r3, [r2, #4]
 801479a:	4421      	add	r1, r4
 801479c:	6011      	str	r1, [r2, #0]
 801479e:	e7da      	b.n	8014756 <_free_r+0x26>
 80147a0:	d902      	bls.n	80147a8 <_free_r+0x78>
 80147a2:	230c      	movs	r3, #12
 80147a4:	6003      	str	r3, [r0, #0]
 80147a6:	e7d6      	b.n	8014756 <_free_r+0x26>
 80147a8:	6825      	ldr	r5, [r4, #0]
 80147aa:	1961      	adds	r1, r4, r5
 80147ac:	428b      	cmp	r3, r1
 80147ae:	bf04      	itt	eq
 80147b0:	6819      	ldreq	r1, [r3, #0]
 80147b2:	685b      	ldreq	r3, [r3, #4]
 80147b4:	6063      	str	r3, [r4, #4]
 80147b6:	bf04      	itt	eq
 80147b8:	1949      	addeq	r1, r1, r5
 80147ba:	6021      	streq	r1, [r4, #0]
 80147bc:	6054      	str	r4, [r2, #4]
 80147be:	e7ca      	b.n	8014756 <_free_r+0x26>
 80147c0:	b003      	add	sp, #12
 80147c2:	bd30      	pop	{r4, r5, pc}
 80147c4:	20008de4 	.word	0x20008de4

080147c8 <sbrk_aligned>:
 80147c8:	b570      	push	{r4, r5, r6, lr}
 80147ca:	4e0e      	ldr	r6, [pc, #56]	; (8014804 <sbrk_aligned+0x3c>)
 80147cc:	460c      	mov	r4, r1
 80147ce:	6831      	ldr	r1, [r6, #0]
 80147d0:	4605      	mov	r5, r0
 80147d2:	b911      	cbnz	r1, 80147da <sbrk_aligned+0x12>
 80147d4:	f000 fb7a 	bl	8014ecc <_sbrk_r>
 80147d8:	6030      	str	r0, [r6, #0]
 80147da:	4621      	mov	r1, r4
 80147dc:	4628      	mov	r0, r5
 80147de:	f000 fb75 	bl	8014ecc <_sbrk_r>
 80147e2:	1c43      	adds	r3, r0, #1
 80147e4:	d00a      	beq.n	80147fc <sbrk_aligned+0x34>
 80147e6:	1cc4      	adds	r4, r0, #3
 80147e8:	f024 0403 	bic.w	r4, r4, #3
 80147ec:	42a0      	cmp	r0, r4
 80147ee:	d007      	beq.n	8014800 <sbrk_aligned+0x38>
 80147f0:	1a21      	subs	r1, r4, r0
 80147f2:	4628      	mov	r0, r5
 80147f4:	f000 fb6a 	bl	8014ecc <_sbrk_r>
 80147f8:	3001      	adds	r0, #1
 80147fa:	d101      	bne.n	8014800 <sbrk_aligned+0x38>
 80147fc:	f04f 34ff 	mov.w	r4, #4294967295
 8014800:	4620      	mov	r0, r4
 8014802:	bd70      	pop	{r4, r5, r6, pc}
 8014804:	20008de8 	.word	0x20008de8

08014808 <_malloc_r>:
 8014808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801480c:	1ccd      	adds	r5, r1, #3
 801480e:	f025 0503 	bic.w	r5, r5, #3
 8014812:	3508      	adds	r5, #8
 8014814:	2d0c      	cmp	r5, #12
 8014816:	bf38      	it	cc
 8014818:	250c      	movcc	r5, #12
 801481a:	2d00      	cmp	r5, #0
 801481c:	4607      	mov	r7, r0
 801481e:	db01      	blt.n	8014824 <_malloc_r+0x1c>
 8014820:	42a9      	cmp	r1, r5
 8014822:	d905      	bls.n	8014830 <_malloc_r+0x28>
 8014824:	230c      	movs	r3, #12
 8014826:	603b      	str	r3, [r7, #0]
 8014828:	2600      	movs	r6, #0
 801482a:	4630      	mov	r0, r6
 801482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014830:	4e2e      	ldr	r6, [pc, #184]	; (80148ec <_malloc_r+0xe4>)
 8014832:	f000 fbfd 	bl	8015030 <__malloc_lock>
 8014836:	6833      	ldr	r3, [r6, #0]
 8014838:	461c      	mov	r4, r3
 801483a:	bb34      	cbnz	r4, 801488a <_malloc_r+0x82>
 801483c:	4629      	mov	r1, r5
 801483e:	4638      	mov	r0, r7
 8014840:	f7ff ffc2 	bl	80147c8 <sbrk_aligned>
 8014844:	1c43      	adds	r3, r0, #1
 8014846:	4604      	mov	r4, r0
 8014848:	d14d      	bne.n	80148e6 <_malloc_r+0xde>
 801484a:	6834      	ldr	r4, [r6, #0]
 801484c:	4626      	mov	r6, r4
 801484e:	2e00      	cmp	r6, #0
 8014850:	d140      	bne.n	80148d4 <_malloc_r+0xcc>
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	4631      	mov	r1, r6
 8014856:	4638      	mov	r0, r7
 8014858:	eb04 0803 	add.w	r8, r4, r3
 801485c:	f000 fb36 	bl	8014ecc <_sbrk_r>
 8014860:	4580      	cmp	r8, r0
 8014862:	d13a      	bne.n	80148da <_malloc_r+0xd2>
 8014864:	6821      	ldr	r1, [r4, #0]
 8014866:	3503      	adds	r5, #3
 8014868:	1a6d      	subs	r5, r5, r1
 801486a:	f025 0503 	bic.w	r5, r5, #3
 801486e:	3508      	adds	r5, #8
 8014870:	2d0c      	cmp	r5, #12
 8014872:	bf38      	it	cc
 8014874:	250c      	movcc	r5, #12
 8014876:	4629      	mov	r1, r5
 8014878:	4638      	mov	r0, r7
 801487a:	f7ff ffa5 	bl	80147c8 <sbrk_aligned>
 801487e:	3001      	adds	r0, #1
 8014880:	d02b      	beq.n	80148da <_malloc_r+0xd2>
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	442b      	add	r3, r5
 8014886:	6023      	str	r3, [r4, #0]
 8014888:	e00e      	b.n	80148a8 <_malloc_r+0xa0>
 801488a:	6822      	ldr	r2, [r4, #0]
 801488c:	1b52      	subs	r2, r2, r5
 801488e:	d41e      	bmi.n	80148ce <_malloc_r+0xc6>
 8014890:	2a0b      	cmp	r2, #11
 8014892:	d916      	bls.n	80148c2 <_malloc_r+0xba>
 8014894:	1961      	adds	r1, r4, r5
 8014896:	42a3      	cmp	r3, r4
 8014898:	6025      	str	r5, [r4, #0]
 801489a:	bf18      	it	ne
 801489c:	6059      	strne	r1, [r3, #4]
 801489e:	6863      	ldr	r3, [r4, #4]
 80148a0:	bf08      	it	eq
 80148a2:	6031      	streq	r1, [r6, #0]
 80148a4:	5162      	str	r2, [r4, r5]
 80148a6:	604b      	str	r3, [r1, #4]
 80148a8:	4638      	mov	r0, r7
 80148aa:	f104 060b 	add.w	r6, r4, #11
 80148ae:	f000 fbc5 	bl	801503c <__malloc_unlock>
 80148b2:	f026 0607 	bic.w	r6, r6, #7
 80148b6:	1d23      	adds	r3, r4, #4
 80148b8:	1af2      	subs	r2, r6, r3
 80148ba:	d0b6      	beq.n	801482a <_malloc_r+0x22>
 80148bc:	1b9b      	subs	r3, r3, r6
 80148be:	50a3      	str	r3, [r4, r2]
 80148c0:	e7b3      	b.n	801482a <_malloc_r+0x22>
 80148c2:	6862      	ldr	r2, [r4, #4]
 80148c4:	42a3      	cmp	r3, r4
 80148c6:	bf0c      	ite	eq
 80148c8:	6032      	streq	r2, [r6, #0]
 80148ca:	605a      	strne	r2, [r3, #4]
 80148cc:	e7ec      	b.n	80148a8 <_malloc_r+0xa0>
 80148ce:	4623      	mov	r3, r4
 80148d0:	6864      	ldr	r4, [r4, #4]
 80148d2:	e7b2      	b.n	801483a <_malloc_r+0x32>
 80148d4:	4634      	mov	r4, r6
 80148d6:	6876      	ldr	r6, [r6, #4]
 80148d8:	e7b9      	b.n	801484e <_malloc_r+0x46>
 80148da:	230c      	movs	r3, #12
 80148dc:	603b      	str	r3, [r7, #0]
 80148de:	4638      	mov	r0, r7
 80148e0:	f000 fbac 	bl	801503c <__malloc_unlock>
 80148e4:	e7a1      	b.n	801482a <_malloc_r+0x22>
 80148e6:	6025      	str	r5, [r4, #0]
 80148e8:	e7de      	b.n	80148a8 <_malloc_r+0xa0>
 80148ea:	bf00      	nop
 80148ec:	20008de4 	.word	0x20008de4

080148f0 <__sfputc_r>:
 80148f0:	6893      	ldr	r3, [r2, #8]
 80148f2:	3b01      	subs	r3, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	b410      	push	{r4}
 80148f8:	6093      	str	r3, [r2, #8]
 80148fa:	da08      	bge.n	801490e <__sfputc_r+0x1e>
 80148fc:	6994      	ldr	r4, [r2, #24]
 80148fe:	42a3      	cmp	r3, r4
 8014900:	db01      	blt.n	8014906 <__sfputc_r+0x16>
 8014902:	290a      	cmp	r1, #10
 8014904:	d103      	bne.n	801490e <__sfputc_r+0x1e>
 8014906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801490a:	f7ff bbf9 	b.w	8014100 <__swbuf_r>
 801490e:	6813      	ldr	r3, [r2, #0]
 8014910:	1c58      	adds	r0, r3, #1
 8014912:	6010      	str	r0, [r2, #0]
 8014914:	7019      	strb	r1, [r3, #0]
 8014916:	4608      	mov	r0, r1
 8014918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801491c:	4770      	bx	lr

0801491e <__sfputs_r>:
 801491e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014920:	4606      	mov	r6, r0
 8014922:	460f      	mov	r7, r1
 8014924:	4614      	mov	r4, r2
 8014926:	18d5      	adds	r5, r2, r3
 8014928:	42ac      	cmp	r4, r5
 801492a:	d101      	bne.n	8014930 <__sfputs_r+0x12>
 801492c:	2000      	movs	r0, #0
 801492e:	e007      	b.n	8014940 <__sfputs_r+0x22>
 8014930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014934:	463a      	mov	r2, r7
 8014936:	4630      	mov	r0, r6
 8014938:	f7ff ffda 	bl	80148f0 <__sfputc_r>
 801493c:	1c43      	adds	r3, r0, #1
 801493e:	d1f3      	bne.n	8014928 <__sfputs_r+0xa>
 8014940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014944 <_vfiprintf_r>:
 8014944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014948:	460d      	mov	r5, r1
 801494a:	b09d      	sub	sp, #116	; 0x74
 801494c:	4614      	mov	r4, r2
 801494e:	4698      	mov	r8, r3
 8014950:	4606      	mov	r6, r0
 8014952:	b118      	cbz	r0, 801495c <_vfiprintf_r+0x18>
 8014954:	6983      	ldr	r3, [r0, #24]
 8014956:	b90b      	cbnz	r3, 801495c <_vfiprintf_r+0x18>
 8014958:	f7ff fdca 	bl	80144f0 <__sinit>
 801495c:	4b89      	ldr	r3, [pc, #548]	; (8014b84 <_vfiprintf_r+0x240>)
 801495e:	429d      	cmp	r5, r3
 8014960:	d11b      	bne.n	801499a <_vfiprintf_r+0x56>
 8014962:	6875      	ldr	r5, [r6, #4]
 8014964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014966:	07d9      	lsls	r1, r3, #31
 8014968:	d405      	bmi.n	8014976 <_vfiprintf_r+0x32>
 801496a:	89ab      	ldrh	r3, [r5, #12]
 801496c:	059a      	lsls	r2, r3, #22
 801496e:	d402      	bmi.n	8014976 <_vfiprintf_r+0x32>
 8014970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014972:	f7ff fe6d 	bl	8014650 <__retarget_lock_acquire_recursive>
 8014976:	89ab      	ldrh	r3, [r5, #12]
 8014978:	071b      	lsls	r3, r3, #28
 801497a:	d501      	bpl.n	8014980 <_vfiprintf_r+0x3c>
 801497c:	692b      	ldr	r3, [r5, #16]
 801497e:	b9eb      	cbnz	r3, 80149bc <_vfiprintf_r+0x78>
 8014980:	4629      	mov	r1, r5
 8014982:	4630      	mov	r0, r6
 8014984:	f7ff fc0e 	bl	80141a4 <__swsetup_r>
 8014988:	b1c0      	cbz	r0, 80149bc <_vfiprintf_r+0x78>
 801498a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801498c:	07dc      	lsls	r4, r3, #31
 801498e:	d50e      	bpl.n	80149ae <_vfiprintf_r+0x6a>
 8014990:	f04f 30ff 	mov.w	r0, #4294967295
 8014994:	b01d      	add	sp, #116	; 0x74
 8014996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499a:	4b7b      	ldr	r3, [pc, #492]	; (8014b88 <_vfiprintf_r+0x244>)
 801499c:	429d      	cmp	r5, r3
 801499e:	d101      	bne.n	80149a4 <_vfiprintf_r+0x60>
 80149a0:	68b5      	ldr	r5, [r6, #8]
 80149a2:	e7df      	b.n	8014964 <_vfiprintf_r+0x20>
 80149a4:	4b79      	ldr	r3, [pc, #484]	; (8014b8c <_vfiprintf_r+0x248>)
 80149a6:	429d      	cmp	r5, r3
 80149a8:	bf08      	it	eq
 80149aa:	68f5      	ldreq	r5, [r6, #12]
 80149ac:	e7da      	b.n	8014964 <_vfiprintf_r+0x20>
 80149ae:	89ab      	ldrh	r3, [r5, #12]
 80149b0:	0598      	lsls	r0, r3, #22
 80149b2:	d4ed      	bmi.n	8014990 <_vfiprintf_r+0x4c>
 80149b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149b6:	f7ff fe4c 	bl	8014652 <__retarget_lock_release_recursive>
 80149ba:	e7e9      	b.n	8014990 <_vfiprintf_r+0x4c>
 80149bc:	2300      	movs	r3, #0
 80149be:	9309      	str	r3, [sp, #36]	; 0x24
 80149c0:	2320      	movs	r3, #32
 80149c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80149ca:	2330      	movs	r3, #48	; 0x30
 80149cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014b90 <_vfiprintf_r+0x24c>
 80149d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149d4:	f04f 0901 	mov.w	r9, #1
 80149d8:	4623      	mov	r3, r4
 80149da:	469a      	mov	sl, r3
 80149dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149e0:	b10a      	cbz	r2, 80149e6 <_vfiprintf_r+0xa2>
 80149e2:	2a25      	cmp	r2, #37	; 0x25
 80149e4:	d1f9      	bne.n	80149da <_vfiprintf_r+0x96>
 80149e6:	ebba 0b04 	subs.w	fp, sl, r4
 80149ea:	d00b      	beq.n	8014a04 <_vfiprintf_r+0xc0>
 80149ec:	465b      	mov	r3, fp
 80149ee:	4622      	mov	r2, r4
 80149f0:	4629      	mov	r1, r5
 80149f2:	4630      	mov	r0, r6
 80149f4:	f7ff ff93 	bl	801491e <__sfputs_r>
 80149f8:	3001      	adds	r0, #1
 80149fa:	f000 80aa 	beq.w	8014b52 <_vfiprintf_r+0x20e>
 80149fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a00:	445a      	add	r2, fp
 8014a02:	9209      	str	r2, [sp, #36]	; 0x24
 8014a04:	f89a 3000 	ldrb.w	r3, [sl]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 80a2 	beq.w	8014b52 <_vfiprintf_r+0x20e>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	f04f 32ff 	mov.w	r2, #4294967295
 8014a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a18:	f10a 0a01 	add.w	sl, sl, #1
 8014a1c:	9304      	str	r3, [sp, #16]
 8014a1e:	9307      	str	r3, [sp, #28]
 8014a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a24:	931a      	str	r3, [sp, #104]	; 0x68
 8014a26:	4654      	mov	r4, sl
 8014a28:	2205      	movs	r2, #5
 8014a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a2e:	4858      	ldr	r0, [pc, #352]	; (8014b90 <_vfiprintf_r+0x24c>)
 8014a30:	f7eb fbee 	bl	8000210 <memchr>
 8014a34:	9a04      	ldr	r2, [sp, #16]
 8014a36:	b9d8      	cbnz	r0, 8014a70 <_vfiprintf_r+0x12c>
 8014a38:	06d1      	lsls	r1, r2, #27
 8014a3a:	bf44      	itt	mi
 8014a3c:	2320      	movmi	r3, #32
 8014a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a42:	0713      	lsls	r3, r2, #28
 8014a44:	bf44      	itt	mi
 8014a46:	232b      	movmi	r3, #43	; 0x2b
 8014a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a50:	2b2a      	cmp	r3, #42	; 0x2a
 8014a52:	d015      	beq.n	8014a80 <_vfiprintf_r+0x13c>
 8014a54:	9a07      	ldr	r2, [sp, #28]
 8014a56:	4654      	mov	r4, sl
 8014a58:	2000      	movs	r0, #0
 8014a5a:	f04f 0c0a 	mov.w	ip, #10
 8014a5e:	4621      	mov	r1, r4
 8014a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a64:	3b30      	subs	r3, #48	; 0x30
 8014a66:	2b09      	cmp	r3, #9
 8014a68:	d94e      	bls.n	8014b08 <_vfiprintf_r+0x1c4>
 8014a6a:	b1b0      	cbz	r0, 8014a9a <_vfiprintf_r+0x156>
 8014a6c:	9207      	str	r2, [sp, #28]
 8014a6e:	e014      	b.n	8014a9a <_vfiprintf_r+0x156>
 8014a70:	eba0 0308 	sub.w	r3, r0, r8
 8014a74:	fa09 f303 	lsl.w	r3, r9, r3
 8014a78:	4313      	orrs	r3, r2
 8014a7a:	9304      	str	r3, [sp, #16]
 8014a7c:	46a2      	mov	sl, r4
 8014a7e:	e7d2      	b.n	8014a26 <_vfiprintf_r+0xe2>
 8014a80:	9b03      	ldr	r3, [sp, #12]
 8014a82:	1d19      	adds	r1, r3, #4
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	9103      	str	r1, [sp, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	bfbb      	ittet	lt
 8014a8c:	425b      	neglt	r3, r3
 8014a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a92:	9307      	strge	r3, [sp, #28]
 8014a94:	9307      	strlt	r3, [sp, #28]
 8014a96:	bfb8      	it	lt
 8014a98:	9204      	strlt	r2, [sp, #16]
 8014a9a:	7823      	ldrb	r3, [r4, #0]
 8014a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8014a9e:	d10c      	bne.n	8014aba <_vfiprintf_r+0x176>
 8014aa0:	7863      	ldrb	r3, [r4, #1]
 8014aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8014aa4:	d135      	bne.n	8014b12 <_vfiprintf_r+0x1ce>
 8014aa6:	9b03      	ldr	r3, [sp, #12]
 8014aa8:	1d1a      	adds	r2, r3, #4
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	9203      	str	r2, [sp, #12]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	bfb8      	it	lt
 8014ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ab6:	3402      	adds	r4, #2
 8014ab8:	9305      	str	r3, [sp, #20]
 8014aba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ba0 <_vfiprintf_r+0x25c>
 8014abe:	7821      	ldrb	r1, [r4, #0]
 8014ac0:	2203      	movs	r2, #3
 8014ac2:	4650      	mov	r0, sl
 8014ac4:	f7eb fba4 	bl	8000210 <memchr>
 8014ac8:	b140      	cbz	r0, 8014adc <_vfiprintf_r+0x198>
 8014aca:	2340      	movs	r3, #64	; 0x40
 8014acc:	eba0 000a 	sub.w	r0, r0, sl
 8014ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8014ad4:	9b04      	ldr	r3, [sp, #16]
 8014ad6:	4303      	orrs	r3, r0
 8014ad8:	3401      	adds	r4, #1
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ae0:	482c      	ldr	r0, [pc, #176]	; (8014b94 <_vfiprintf_r+0x250>)
 8014ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ae6:	2206      	movs	r2, #6
 8014ae8:	f7eb fb92 	bl	8000210 <memchr>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	d03f      	beq.n	8014b70 <_vfiprintf_r+0x22c>
 8014af0:	4b29      	ldr	r3, [pc, #164]	; (8014b98 <_vfiprintf_r+0x254>)
 8014af2:	bb1b      	cbnz	r3, 8014b3c <_vfiprintf_r+0x1f8>
 8014af4:	9b03      	ldr	r3, [sp, #12]
 8014af6:	3307      	adds	r3, #7
 8014af8:	f023 0307 	bic.w	r3, r3, #7
 8014afc:	3308      	adds	r3, #8
 8014afe:	9303      	str	r3, [sp, #12]
 8014b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b02:	443b      	add	r3, r7
 8014b04:	9309      	str	r3, [sp, #36]	; 0x24
 8014b06:	e767      	b.n	80149d8 <_vfiprintf_r+0x94>
 8014b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b0c:	460c      	mov	r4, r1
 8014b0e:	2001      	movs	r0, #1
 8014b10:	e7a5      	b.n	8014a5e <_vfiprintf_r+0x11a>
 8014b12:	2300      	movs	r3, #0
 8014b14:	3401      	adds	r4, #1
 8014b16:	9305      	str	r3, [sp, #20]
 8014b18:	4619      	mov	r1, r3
 8014b1a:	f04f 0c0a 	mov.w	ip, #10
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b24:	3a30      	subs	r2, #48	; 0x30
 8014b26:	2a09      	cmp	r2, #9
 8014b28:	d903      	bls.n	8014b32 <_vfiprintf_r+0x1ee>
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d0c5      	beq.n	8014aba <_vfiprintf_r+0x176>
 8014b2e:	9105      	str	r1, [sp, #20]
 8014b30:	e7c3      	b.n	8014aba <_vfiprintf_r+0x176>
 8014b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b36:	4604      	mov	r4, r0
 8014b38:	2301      	movs	r3, #1
 8014b3a:	e7f0      	b.n	8014b1e <_vfiprintf_r+0x1da>
 8014b3c:	ab03      	add	r3, sp, #12
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	462a      	mov	r2, r5
 8014b42:	4b16      	ldr	r3, [pc, #88]	; (8014b9c <_vfiprintf_r+0x258>)
 8014b44:	a904      	add	r1, sp, #16
 8014b46:	4630      	mov	r0, r6
 8014b48:	f3af 8000 	nop.w
 8014b4c:	4607      	mov	r7, r0
 8014b4e:	1c78      	adds	r0, r7, #1
 8014b50:	d1d6      	bne.n	8014b00 <_vfiprintf_r+0x1bc>
 8014b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b54:	07d9      	lsls	r1, r3, #31
 8014b56:	d405      	bmi.n	8014b64 <_vfiprintf_r+0x220>
 8014b58:	89ab      	ldrh	r3, [r5, #12]
 8014b5a:	059a      	lsls	r2, r3, #22
 8014b5c:	d402      	bmi.n	8014b64 <_vfiprintf_r+0x220>
 8014b5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b60:	f7ff fd77 	bl	8014652 <__retarget_lock_release_recursive>
 8014b64:	89ab      	ldrh	r3, [r5, #12]
 8014b66:	065b      	lsls	r3, r3, #25
 8014b68:	f53f af12 	bmi.w	8014990 <_vfiprintf_r+0x4c>
 8014b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b6e:	e711      	b.n	8014994 <_vfiprintf_r+0x50>
 8014b70:	ab03      	add	r3, sp, #12
 8014b72:	9300      	str	r3, [sp, #0]
 8014b74:	462a      	mov	r2, r5
 8014b76:	4b09      	ldr	r3, [pc, #36]	; (8014b9c <_vfiprintf_r+0x258>)
 8014b78:	a904      	add	r1, sp, #16
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f000 f880 	bl	8014c80 <_printf_i>
 8014b80:	e7e4      	b.n	8014b4c <_vfiprintf_r+0x208>
 8014b82:	bf00      	nop
 8014b84:	08017cf0 	.word	0x08017cf0
 8014b88:	08017d10 	.word	0x08017d10
 8014b8c:	08017cd0 	.word	0x08017cd0
 8014b90:	08017d30 	.word	0x08017d30
 8014b94:	08017d3a 	.word	0x08017d3a
 8014b98:	00000000 	.word	0x00000000
 8014b9c:	0801491f 	.word	0x0801491f
 8014ba0:	08017d36 	.word	0x08017d36

08014ba4 <_printf_common>:
 8014ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ba8:	4616      	mov	r6, r2
 8014baa:	4699      	mov	r9, r3
 8014bac:	688a      	ldr	r2, [r1, #8]
 8014bae:	690b      	ldr	r3, [r1, #16]
 8014bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	bfb8      	it	lt
 8014bb8:	4613      	movlt	r3, r2
 8014bba:	6033      	str	r3, [r6, #0]
 8014bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bc0:	4607      	mov	r7, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	b10a      	cbz	r2, 8014bca <_printf_common+0x26>
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	6033      	str	r3, [r6, #0]
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	0699      	lsls	r1, r3, #26
 8014bce:	bf42      	ittt	mi
 8014bd0:	6833      	ldrmi	r3, [r6, #0]
 8014bd2:	3302      	addmi	r3, #2
 8014bd4:	6033      	strmi	r3, [r6, #0]
 8014bd6:	6825      	ldr	r5, [r4, #0]
 8014bd8:	f015 0506 	ands.w	r5, r5, #6
 8014bdc:	d106      	bne.n	8014bec <_printf_common+0x48>
 8014bde:	f104 0a19 	add.w	sl, r4, #25
 8014be2:	68e3      	ldr	r3, [r4, #12]
 8014be4:	6832      	ldr	r2, [r6, #0]
 8014be6:	1a9b      	subs	r3, r3, r2
 8014be8:	42ab      	cmp	r3, r5
 8014bea:	dc26      	bgt.n	8014c3a <_printf_common+0x96>
 8014bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014bf0:	1e13      	subs	r3, r2, #0
 8014bf2:	6822      	ldr	r2, [r4, #0]
 8014bf4:	bf18      	it	ne
 8014bf6:	2301      	movne	r3, #1
 8014bf8:	0692      	lsls	r2, r2, #26
 8014bfa:	d42b      	bmi.n	8014c54 <_printf_common+0xb0>
 8014bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c00:	4649      	mov	r1, r9
 8014c02:	4638      	mov	r0, r7
 8014c04:	47c0      	blx	r8
 8014c06:	3001      	adds	r0, #1
 8014c08:	d01e      	beq.n	8014c48 <_printf_common+0xa4>
 8014c0a:	6823      	ldr	r3, [r4, #0]
 8014c0c:	68e5      	ldr	r5, [r4, #12]
 8014c0e:	6832      	ldr	r2, [r6, #0]
 8014c10:	f003 0306 	and.w	r3, r3, #6
 8014c14:	2b04      	cmp	r3, #4
 8014c16:	bf08      	it	eq
 8014c18:	1aad      	subeq	r5, r5, r2
 8014c1a:	68a3      	ldr	r3, [r4, #8]
 8014c1c:	6922      	ldr	r2, [r4, #16]
 8014c1e:	bf0c      	ite	eq
 8014c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c24:	2500      	movne	r5, #0
 8014c26:	4293      	cmp	r3, r2
 8014c28:	bfc4      	itt	gt
 8014c2a:	1a9b      	subgt	r3, r3, r2
 8014c2c:	18ed      	addgt	r5, r5, r3
 8014c2e:	2600      	movs	r6, #0
 8014c30:	341a      	adds	r4, #26
 8014c32:	42b5      	cmp	r5, r6
 8014c34:	d11a      	bne.n	8014c6c <_printf_common+0xc8>
 8014c36:	2000      	movs	r0, #0
 8014c38:	e008      	b.n	8014c4c <_printf_common+0xa8>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	4652      	mov	r2, sl
 8014c3e:	4649      	mov	r1, r9
 8014c40:	4638      	mov	r0, r7
 8014c42:	47c0      	blx	r8
 8014c44:	3001      	adds	r0, #1
 8014c46:	d103      	bne.n	8014c50 <_printf_common+0xac>
 8014c48:	f04f 30ff 	mov.w	r0, #4294967295
 8014c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c50:	3501      	adds	r5, #1
 8014c52:	e7c6      	b.n	8014be2 <_printf_common+0x3e>
 8014c54:	18e1      	adds	r1, r4, r3
 8014c56:	1c5a      	adds	r2, r3, #1
 8014c58:	2030      	movs	r0, #48	; 0x30
 8014c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c5e:	4422      	add	r2, r4
 8014c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c68:	3302      	adds	r3, #2
 8014c6a:	e7c7      	b.n	8014bfc <_printf_common+0x58>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	4622      	mov	r2, r4
 8014c70:	4649      	mov	r1, r9
 8014c72:	4638      	mov	r0, r7
 8014c74:	47c0      	blx	r8
 8014c76:	3001      	adds	r0, #1
 8014c78:	d0e6      	beq.n	8014c48 <_printf_common+0xa4>
 8014c7a:	3601      	adds	r6, #1
 8014c7c:	e7d9      	b.n	8014c32 <_printf_common+0x8e>
	...

08014c80 <_printf_i>:
 8014c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c84:	7e0f      	ldrb	r7, [r1, #24]
 8014c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c88:	2f78      	cmp	r7, #120	; 0x78
 8014c8a:	4691      	mov	r9, r2
 8014c8c:	4680      	mov	r8, r0
 8014c8e:	460c      	mov	r4, r1
 8014c90:	469a      	mov	sl, r3
 8014c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014c96:	d807      	bhi.n	8014ca8 <_printf_i+0x28>
 8014c98:	2f62      	cmp	r7, #98	; 0x62
 8014c9a:	d80a      	bhi.n	8014cb2 <_printf_i+0x32>
 8014c9c:	2f00      	cmp	r7, #0
 8014c9e:	f000 80d8 	beq.w	8014e52 <_printf_i+0x1d2>
 8014ca2:	2f58      	cmp	r7, #88	; 0x58
 8014ca4:	f000 80a3 	beq.w	8014dee <_printf_i+0x16e>
 8014ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014cb0:	e03a      	b.n	8014d28 <_printf_i+0xa8>
 8014cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014cb6:	2b15      	cmp	r3, #21
 8014cb8:	d8f6      	bhi.n	8014ca8 <_printf_i+0x28>
 8014cba:	a101      	add	r1, pc, #4	; (adr r1, 8014cc0 <_printf_i+0x40>)
 8014cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014cc0:	08014d19 	.word	0x08014d19
 8014cc4:	08014d2d 	.word	0x08014d2d
 8014cc8:	08014ca9 	.word	0x08014ca9
 8014ccc:	08014ca9 	.word	0x08014ca9
 8014cd0:	08014ca9 	.word	0x08014ca9
 8014cd4:	08014ca9 	.word	0x08014ca9
 8014cd8:	08014d2d 	.word	0x08014d2d
 8014cdc:	08014ca9 	.word	0x08014ca9
 8014ce0:	08014ca9 	.word	0x08014ca9
 8014ce4:	08014ca9 	.word	0x08014ca9
 8014ce8:	08014ca9 	.word	0x08014ca9
 8014cec:	08014e39 	.word	0x08014e39
 8014cf0:	08014d5d 	.word	0x08014d5d
 8014cf4:	08014e1b 	.word	0x08014e1b
 8014cf8:	08014ca9 	.word	0x08014ca9
 8014cfc:	08014ca9 	.word	0x08014ca9
 8014d00:	08014e5b 	.word	0x08014e5b
 8014d04:	08014ca9 	.word	0x08014ca9
 8014d08:	08014d5d 	.word	0x08014d5d
 8014d0c:	08014ca9 	.word	0x08014ca9
 8014d10:	08014ca9 	.word	0x08014ca9
 8014d14:	08014e23 	.word	0x08014e23
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	1d1a      	adds	r2, r3, #4
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	602a      	str	r2, [r5, #0]
 8014d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d28:	2301      	movs	r3, #1
 8014d2a:	e0a3      	b.n	8014e74 <_printf_i+0x1f4>
 8014d2c:	6820      	ldr	r0, [r4, #0]
 8014d2e:	6829      	ldr	r1, [r5, #0]
 8014d30:	0606      	lsls	r6, r0, #24
 8014d32:	f101 0304 	add.w	r3, r1, #4
 8014d36:	d50a      	bpl.n	8014d4e <_printf_i+0xce>
 8014d38:	680e      	ldr	r6, [r1, #0]
 8014d3a:	602b      	str	r3, [r5, #0]
 8014d3c:	2e00      	cmp	r6, #0
 8014d3e:	da03      	bge.n	8014d48 <_printf_i+0xc8>
 8014d40:	232d      	movs	r3, #45	; 0x2d
 8014d42:	4276      	negs	r6, r6
 8014d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d48:	485e      	ldr	r0, [pc, #376]	; (8014ec4 <_printf_i+0x244>)
 8014d4a:	230a      	movs	r3, #10
 8014d4c:	e019      	b.n	8014d82 <_printf_i+0x102>
 8014d4e:	680e      	ldr	r6, [r1, #0]
 8014d50:	602b      	str	r3, [r5, #0]
 8014d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d56:	bf18      	it	ne
 8014d58:	b236      	sxthne	r6, r6
 8014d5a:	e7ef      	b.n	8014d3c <_printf_i+0xbc>
 8014d5c:	682b      	ldr	r3, [r5, #0]
 8014d5e:	6820      	ldr	r0, [r4, #0]
 8014d60:	1d19      	adds	r1, r3, #4
 8014d62:	6029      	str	r1, [r5, #0]
 8014d64:	0601      	lsls	r1, r0, #24
 8014d66:	d501      	bpl.n	8014d6c <_printf_i+0xec>
 8014d68:	681e      	ldr	r6, [r3, #0]
 8014d6a:	e002      	b.n	8014d72 <_printf_i+0xf2>
 8014d6c:	0646      	lsls	r6, r0, #25
 8014d6e:	d5fb      	bpl.n	8014d68 <_printf_i+0xe8>
 8014d70:	881e      	ldrh	r6, [r3, #0]
 8014d72:	4854      	ldr	r0, [pc, #336]	; (8014ec4 <_printf_i+0x244>)
 8014d74:	2f6f      	cmp	r7, #111	; 0x6f
 8014d76:	bf0c      	ite	eq
 8014d78:	2308      	moveq	r3, #8
 8014d7a:	230a      	movne	r3, #10
 8014d7c:	2100      	movs	r1, #0
 8014d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d82:	6865      	ldr	r5, [r4, #4]
 8014d84:	60a5      	str	r5, [r4, #8]
 8014d86:	2d00      	cmp	r5, #0
 8014d88:	bfa2      	ittt	ge
 8014d8a:	6821      	ldrge	r1, [r4, #0]
 8014d8c:	f021 0104 	bicge.w	r1, r1, #4
 8014d90:	6021      	strge	r1, [r4, #0]
 8014d92:	b90e      	cbnz	r6, 8014d98 <_printf_i+0x118>
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d04d      	beq.n	8014e34 <_printf_i+0x1b4>
 8014d98:	4615      	mov	r5, r2
 8014d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8014da2:	5dc7      	ldrb	r7, [r0, r7]
 8014da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014da8:	4637      	mov	r7, r6
 8014daa:	42bb      	cmp	r3, r7
 8014dac:	460e      	mov	r6, r1
 8014dae:	d9f4      	bls.n	8014d9a <_printf_i+0x11a>
 8014db0:	2b08      	cmp	r3, #8
 8014db2:	d10b      	bne.n	8014dcc <_printf_i+0x14c>
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	07de      	lsls	r6, r3, #31
 8014db8:	d508      	bpl.n	8014dcc <_printf_i+0x14c>
 8014dba:	6923      	ldr	r3, [r4, #16]
 8014dbc:	6861      	ldr	r1, [r4, #4]
 8014dbe:	4299      	cmp	r1, r3
 8014dc0:	bfde      	ittt	le
 8014dc2:	2330      	movle	r3, #48	; 0x30
 8014dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014dcc:	1b52      	subs	r2, r2, r5
 8014dce:	6122      	str	r2, [r4, #16]
 8014dd0:	f8cd a000 	str.w	sl, [sp]
 8014dd4:	464b      	mov	r3, r9
 8014dd6:	aa03      	add	r2, sp, #12
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4640      	mov	r0, r8
 8014ddc:	f7ff fee2 	bl	8014ba4 <_printf_common>
 8014de0:	3001      	adds	r0, #1
 8014de2:	d14c      	bne.n	8014e7e <_printf_i+0x1fe>
 8014de4:	f04f 30ff 	mov.w	r0, #4294967295
 8014de8:	b004      	add	sp, #16
 8014dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dee:	4835      	ldr	r0, [pc, #212]	; (8014ec4 <_printf_i+0x244>)
 8014df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014df4:	6829      	ldr	r1, [r5, #0]
 8014df6:	6823      	ldr	r3, [r4, #0]
 8014df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014dfc:	6029      	str	r1, [r5, #0]
 8014dfe:	061d      	lsls	r5, r3, #24
 8014e00:	d514      	bpl.n	8014e2c <_printf_i+0x1ac>
 8014e02:	07df      	lsls	r7, r3, #31
 8014e04:	bf44      	itt	mi
 8014e06:	f043 0320 	orrmi.w	r3, r3, #32
 8014e0a:	6023      	strmi	r3, [r4, #0]
 8014e0c:	b91e      	cbnz	r6, 8014e16 <_printf_i+0x196>
 8014e0e:	6823      	ldr	r3, [r4, #0]
 8014e10:	f023 0320 	bic.w	r3, r3, #32
 8014e14:	6023      	str	r3, [r4, #0]
 8014e16:	2310      	movs	r3, #16
 8014e18:	e7b0      	b.n	8014d7c <_printf_i+0xfc>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	f043 0320 	orr.w	r3, r3, #32
 8014e20:	6023      	str	r3, [r4, #0]
 8014e22:	2378      	movs	r3, #120	; 0x78
 8014e24:	4828      	ldr	r0, [pc, #160]	; (8014ec8 <_printf_i+0x248>)
 8014e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e2a:	e7e3      	b.n	8014df4 <_printf_i+0x174>
 8014e2c:	0659      	lsls	r1, r3, #25
 8014e2e:	bf48      	it	mi
 8014e30:	b2b6      	uxthmi	r6, r6
 8014e32:	e7e6      	b.n	8014e02 <_printf_i+0x182>
 8014e34:	4615      	mov	r5, r2
 8014e36:	e7bb      	b.n	8014db0 <_printf_i+0x130>
 8014e38:	682b      	ldr	r3, [r5, #0]
 8014e3a:	6826      	ldr	r6, [r4, #0]
 8014e3c:	6961      	ldr	r1, [r4, #20]
 8014e3e:	1d18      	adds	r0, r3, #4
 8014e40:	6028      	str	r0, [r5, #0]
 8014e42:	0635      	lsls	r5, r6, #24
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	d501      	bpl.n	8014e4c <_printf_i+0x1cc>
 8014e48:	6019      	str	r1, [r3, #0]
 8014e4a:	e002      	b.n	8014e52 <_printf_i+0x1d2>
 8014e4c:	0670      	lsls	r0, r6, #25
 8014e4e:	d5fb      	bpl.n	8014e48 <_printf_i+0x1c8>
 8014e50:	8019      	strh	r1, [r3, #0]
 8014e52:	2300      	movs	r3, #0
 8014e54:	6123      	str	r3, [r4, #16]
 8014e56:	4615      	mov	r5, r2
 8014e58:	e7ba      	b.n	8014dd0 <_printf_i+0x150>
 8014e5a:	682b      	ldr	r3, [r5, #0]
 8014e5c:	1d1a      	adds	r2, r3, #4
 8014e5e:	602a      	str	r2, [r5, #0]
 8014e60:	681d      	ldr	r5, [r3, #0]
 8014e62:	6862      	ldr	r2, [r4, #4]
 8014e64:	2100      	movs	r1, #0
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7eb f9d2 	bl	8000210 <memchr>
 8014e6c:	b108      	cbz	r0, 8014e72 <_printf_i+0x1f2>
 8014e6e:	1b40      	subs	r0, r0, r5
 8014e70:	6060      	str	r0, [r4, #4]
 8014e72:	6863      	ldr	r3, [r4, #4]
 8014e74:	6123      	str	r3, [r4, #16]
 8014e76:	2300      	movs	r3, #0
 8014e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e7c:	e7a8      	b.n	8014dd0 <_printf_i+0x150>
 8014e7e:	6923      	ldr	r3, [r4, #16]
 8014e80:	462a      	mov	r2, r5
 8014e82:	4649      	mov	r1, r9
 8014e84:	4640      	mov	r0, r8
 8014e86:	47d0      	blx	sl
 8014e88:	3001      	adds	r0, #1
 8014e8a:	d0ab      	beq.n	8014de4 <_printf_i+0x164>
 8014e8c:	6823      	ldr	r3, [r4, #0]
 8014e8e:	079b      	lsls	r3, r3, #30
 8014e90:	d413      	bmi.n	8014eba <_printf_i+0x23a>
 8014e92:	68e0      	ldr	r0, [r4, #12]
 8014e94:	9b03      	ldr	r3, [sp, #12]
 8014e96:	4298      	cmp	r0, r3
 8014e98:	bfb8      	it	lt
 8014e9a:	4618      	movlt	r0, r3
 8014e9c:	e7a4      	b.n	8014de8 <_printf_i+0x168>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	4632      	mov	r2, r6
 8014ea2:	4649      	mov	r1, r9
 8014ea4:	4640      	mov	r0, r8
 8014ea6:	47d0      	blx	sl
 8014ea8:	3001      	adds	r0, #1
 8014eaa:	d09b      	beq.n	8014de4 <_printf_i+0x164>
 8014eac:	3501      	adds	r5, #1
 8014eae:	68e3      	ldr	r3, [r4, #12]
 8014eb0:	9903      	ldr	r1, [sp, #12]
 8014eb2:	1a5b      	subs	r3, r3, r1
 8014eb4:	42ab      	cmp	r3, r5
 8014eb6:	dcf2      	bgt.n	8014e9e <_printf_i+0x21e>
 8014eb8:	e7eb      	b.n	8014e92 <_printf_i+0x212>
 8014eba:	2500      	movs	r5, #0
 8014ebc:	f104 0619 	add.w	r6, r4, #25
 8014ec0:	e7f5      	b.n	8014eae <_printf_i+0x22e>
 8014ec2:	bf00      	nop
 8014ec4:	08017d41 	.word	0x08017d41
 8014ec8:	08017d52 	.word	0x08017d52

08014ecc <_sbrk_r>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4d06      	ldr	r5, [pc, #24]	; (8014ee8 <_sbrk_r+0x1c>)
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	4608      	mov	r0, r1
 8014ed6:	602b      	str	r3, [r5, #0]
 8014ed8:	f7ec fd6c 	bl	80019b4 <_sbrk>
 8014edc:	1c43      	adds	r3, r0, #1
 8014ede:	d102      	bne.n	8014ee6 <_sbrk_r+0x1a>
 8014ee0:	682b      	ldr	r3, [r5, #0]
 8014ee2:	b103      	cbz	r3, 8014ee6 <_sbrk_r+0x1a>
 8014ee4:	6023      	str	r3, [r4, #0]
 8014ee6:	bd38      	pop	{r3, r4, r5, pc}
 8014ee8:	20008ddc 	.word	0x20008ddc

08014eec <__sread>:
 8014eec:	b510      	push	{r4, lr}
 8014eee:	460c      	mov	r4, r1
 8014ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef4:	f000 f8a8 	bl	8015048 <_read_r>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	bfab      	itete	ge
 8014efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014efe:	89a3      	ldrhlt	r3, [r4, #12]
 8014f00:	181b      	addge	r3, r3, r0
 8014f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f06:	bfac      	ite	ge
 8014f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f0a:	81a3      	strhlt	r3, [r4, #12]
 8014f0c:	bd10      	pop	{r4, pc}

08014f0e <__swrite>:
 8014f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f12:	461f      	mov	r7, r3
 8014f14:	898b      	ldrh	r3, [r1, #12]
 8014f16:	05db      	lsls	r3, r3, #23
 8014f18:	4605      	mov	r5, r0
 8014f1a:	460c      	mov	r4, r1
 8014f1c:	4616      	mov	r6, r2
 8014f1e:	d505      	bpl.n	8014f2c <__swrite+0x1e>
 8014f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f24:	2302      	movs	r3, #2
 8014f26:	2200      	movs	r2, #0
 8014f28:	f000 f870 	bl	801500c <_lseek_r>
 8014f2c:	89a3      	ldrh	r3, [r4, #12]
 8014f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f36:	81a3      	strh	r3, [r4, #12]
 8014f38:	4632      	mov	r2, r6
 8014f3a:	463b      	mov	r3, r7
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f42:	f000 b817 	b.w	8014f74 <_write_r>

08014f46 <__sseek>:
 8014f46:	b510      	push	{r4, lr}
 8014f48:	460c      	mov	r4, r1
 8014f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f4e:	f000 f85d 	bl	801500c <_lseek_r>
 8014f52:	1c43      	adds	r3, r0, #1
 8014f54:	89a3      	ldrh	r3, [r4, #12]
 8014f56:	bf15      	itete	ne
 8014f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f62:	81a3      	strheq	r3, [r4, #12]
 8014f64:	bf18      	it	ne
 8014f66:	81a3      	strhne	r3, [r4, #12]
 8014f68:	bd10      	pop	{r4, pc}

08014f6a <__sclose>:
 8014f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f6e:	f000 b81b 	b.w	8014fa8 <_close_r>
	...

08014f74 <_write_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d07      	ldr	r5, [pc, #28]	; (8014f94 <_write_r+0x20>)
 8014f78:	4604      	mov	r4, r0
 8014f7a:	4608      	mov	r0, r1
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	2200      	movs	r2, #0
 8014f80:	602a      	str	r2, [r5, #0]
 8014f82:	461a      	mov	r2, r3
 8014f84:	f7fe ff4a 	bl	8013e1c <_write>
 8014f88:	1c43      	adds	r3, r0, #1
 8014f8a:	d102      	bne.n	8014f92 <_write_r+0x1e>
 8014f8c:	682b      	ldr	r3, [r5, #0]
 8014f8e:	b103      	cbz	r3, 8014f92 <_write_r+0x1e>
 8014f90:	6023      	str	r3, [r4, #0]
 8014f92:	bd38      	pop	{r3, r4, r5, pc}
 8014f94:	20008ddc 	.word	0x20008ddc

08014f98 <abort>:
 8014f98:	b508      	push	{r3, lr}
 8014f9a:	2006      	movs	r0, #6
 8014f9c:	f000 f88e 	bl	80150bc <raise>
 8014fa0:	2001      	movs	r0, #1
 8014fa2:	f7ec fcc9 	bl	8001938 <_exit>
	...

08014fa8 <_close_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d06      	ldr	r5, [pc, #24]	; (8014fc4 <_close_r+0x1c>)
 8014fac:	2300      	movs	r3, #0
 8014fae:	4604      	mov	r4, r0
 8014fb0:	4608      	mov	r0, r1
 8014fb2:	602b      	str	r3, [r5, #0]
 8014fb4:	f7ec fcca 	bl	800194c <_close>
 8014fb8:	1c43      	adds	r3, r0, #1
 8014fba:	d102      	bne.n	8014fc2 <_close_r+0x1a>
 8014fbc:	682b      	ldr	r3, [r5, #0]
 8014fbe:	b103      	cbz	r3, 8014fc2 <_close_r+0x1a>
 8014fc0:	6023      	str	r3, [r4, #0]
 8014fc2:	bd38      	pop	{r3, r4, r5, pc}
 8014fc4:	20008ddc 	.word	0x20008ddc

08014fc8 <_fstat_r>:
 8014fc8:	b538      	push	{r3, r4, r5, lr}
 8014fca:	4d07      	ldr	r5, [pc, #28]	; (8014fe8 <_fstat_r+0x20>)
 8014fcc:	2300      	movs	r3, #0
 8014fce:	4604      	mov	r4, r0
 8014fd0:	4608      	mov	r0, r1
 8014fd2:	4611      	mov	r1, r2
 8014fd4:	602b      	str	r3, [r5, #0]
 8014fd6:	f7ec fcc5 	bl	8001964 <_fstat>
 8014fda:	1c43      	adds	r3, r0, #1
 8014fdc:	d102      	bne.n	8014fe4 <_fstat_r+0x1c>
 8014fde:	682b      	ldr	r3, [r5, #0]
 8014fe0:	b103      	cbz	r3, 8014fe4 <_fstat_r+0x1c>
 8014fe2:	6023      	str	r3, [r4, #0]
 8014fe4:	bd38      	pop	{r3, r4, r5, pc}
 8014fe6:	bf00      	nop
 8014fe8:	20008ddc 	.word	0x20008ddc

08014fec <_isatty_r>:
 8014fec:	b538      	push	{r3, r4, r5, lr}
 8014fee:	4d06      	ldr	r5, [pc, #24]	; (8015008 <_isatty_r+0x1c>)
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	4608      	mov	r0, r1
 8014ff6:	602b      	str	r3, [r5, #0]
 8014ff8:	f7ec fcc4 	bl	8001984 <_isatty>
 8014ffc:	1c43      	adds	r3, r0, #1
 8014ffe:	d102      	bne.n	8015006 <_isatty_r+0x1a>
 8015000:	682b      	ldr	r3, [r5, #0]
 8015002:	b103      	cbz	r3, 8015006 <_isatty_r+0x1a>
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	bd38      	pop	{r3, r4, r5, pc}
 8015008:	20008ddc 	.word	0x20008ddc

0801500c <_lseek_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	4d07      	ldr	r5, [pc, #28]	; (801502c <_lseek_r+0x20>)
 8015010:	4604      	mov	r4, r0
 8015012:	4608      	mov	r0, r1
 8015014:	4611      	mov	r1, r2
 8015016:	2200      	movs	r2, #0
 8015018:	602a      	str	r2, [r5, #0]
 801501a:	461a      	mov	r2, r3
 801501c:	f7ec fcbd 	bl	800199a <_lseek>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d102      	bne.n	801502a <_lseek_r+0x1e>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	b103      	cbz	r3, 801502a <_lseek_r+0x1e>
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	bd38      	pop	{r3, r4, r5, pc}
 801502c:	20008ddc 	.word	0x20008ddc

08015030 <__malloc_lock>:
 8015030:	4801      	ldr	r0, [pc, #4]	; (8015038 <__malloc_lock+0x8>)
 8015032:	f7ff bb0d 	b.w	8014650 <__retarget_lock_acquire_recursive>
 8015036:	bf00      	nop
 8015038:	20008de0 	.word	0x20008de0

0801503c <__malloc_unlock>:
 801503c:	4801      	ldr	r0, [pc, #4]	; (8015044 <__malloc_unlock+0x8>)
 801503e:	f7ff bb08 	b.w	8014652 <__retarget_lock_release_recursive>
 8015042:	bf00      	nop
 8015044:	20008de0 	.word	0x20008de0

08015048 <_read_r>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	4d07      	ldr	r5, [pc, #28]	; (8015068 <_read_r+0x20>)
 801504c:	4604      	mov	r4, r0
 801504e:	4608      	mov	r0, r1
 8015050:	4611      	mov	r1, r2
 8015052:	2200      	movs	r2, #0
 8015054:	602a      	str	r2, [r5, #0]
 8015056:	461a      	mov	r2, r3
 8015058:	f7fe ff10 	bl	8013e7c <_read>
 801505c:	1c43      	adds	r3, r0, #1
 801505e:	d102      	bne.n	8015066 <_read_r+0x1e>
 8015060:	682b      	ldr	r3, [r5, #0]
 8015062:	b103      	cbz	r3, 8015066 <_read_r+0x1e>
 8015064:	6023      	str	r3, [r4, #0]
 8015066:	bd38      	pop	{r3, r4, r5, pc}
 8015068:	20008ddc 	.word	0x20008ddc

0801506c <_raise_r>:
 801506c:	291f      	cmp	r1, #31
 801506e:	b538      	push	{r3, r4, r5, lr}
 8015070:	4604      	mov	r4, r0
 8015072:	460d      	mov	r5, r1
 8015074:	d904      	bls.n	8015080 <_raise_r+0x14>
 8015076:	2316      	movs	r3, #22
 8015078:	6003      	str	r3, [r0, #0]
 801507a:	f04f 30ff 	mov.w	r0, #4294967295
 801507e:	bd38      	pop	{r3, r4, r5, pc}
 8015080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015082:	b112      	cbz	r2, 801508a <_raise_r+0x1e>
 8015084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015088:	b94b      	cbnz	r3, 801509e <_raise_r+0x32>
 801508a:	4620      	mov	r0, r4
 801508c:	f000 f830 	bl	80150f0 <_getpid_r>
 8015090:	462a      	mov	r2, r5
 8015092:	4601      	mov	r1, r0
 8015094:	4620      	mov	r0, r4
 8015096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801509a:	f000 b817 	b.w	80150cc <_kill_r>
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d00a      	beq.n	80150b8 <_raise_r+0x4c>
 80150a2:	1c59      	adds	r1, r3, #1
 80150a4:	d103      	bne.n	80150ae <_raise_r+0x42>
 80150a6:	2316      	movs	r3, #22
 80150a8:	6003      	str	r3, [r0, #0]
 80150aa:	2001      	movs	r0, #1
 80150ac:	e7e7      	b.n	801507e <_raise_r+0x12>
 80150ae:	2400      	movs	r4, #0
 80150b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150b4:	4628      	mov	r0, r5
 80150b6:	4798      	blx	r3
 80150b8:	2000      	movs	r0, #0
 80150ba:	e7e0      	b.n	801507e <_raise_r+0x12>

080150bc <raise>:
 80150bc:	4b02      	ldr	r3, [pc, #8]	; (80150c8 <raise+0xc>)
 80150be:	4601      	mov	r1, r0
 80150c0:	6818      	ldr	r0, [r3, #0]
 80150c2:	f7ff bfd3 	b.w	801506c <_raise_r>
 80150c6:	bf00      	nop
 80150c8:	2000002c 	.word	0x2000002c

080150cc <_kill_r>:
 80150cc:	b538      	push	{r3, r4, r5, lr}
 80150ce:	4d07      	ldr	r5, [pc, #28]	; (80150ec <_kill_r+0x20>)
 80150d0:	2300      	movs	r3, #0
 80150d2:	4604      	mov	r4, r0
 80150d4:	4608      	mov	r0, r1
 80150d6:	4611      	mov	r1, r2
 80150d8:	602b      	str	r3, [r5, #0]
 80150da:	f7ec fc1b 	bl	8001914 <_kill>
 80150de:	1c43      	adds	r3, r0, #1
 80150e0:	d102      	bne.n	80150e8 <_kill_r+0x1c>
 80150e2:	682b      	ldr	r3, [r5, #0]
 80150e4:	b103      	cbz	r3, 80150e8 <_kill_r+0x1c>
 80150e6:	6023      	str	r3, [r4, #0]
 80150e8:	bd38      	pop	{r3, r4, r5, pc}
 80150ea:	bf00      	nop
 80150ec:	20008ddc 	.word	0x20008ddc

080150f0 <_getpid_r>:
 80150f0:	f7ec bc08 	b.w	8001904 <_getpid>

080150f4 <_init>:
 80150f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150f6:	bf00      	nop
 80150f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150fa:	bc08      	pop	{r3}
 80150fc:	469e      	mov	lr, r3
 80150fe:	4770      	bx	lr

08015100 <_fini>:
 8015100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015102:	bf00      	nop
 8015104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015106:	bc08      	pop	{r3}
 8015108:	469e      	mov	lr, r3
 801510a:	4770      	bx	lr
